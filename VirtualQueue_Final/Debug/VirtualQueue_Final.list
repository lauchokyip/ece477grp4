
VirtualQueue_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  0800c240  0800c240  0001c240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb90  0800cb90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb90  0800cb90  0001cb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb98  0800cb98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb98  0800cb98  0001cb98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb9c  0800cb9c  0001cb9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800cba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c1c  20000074  0800cc14  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c90  0800cc14  00020c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000221b3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ab8  00000000  00000000  00042257  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ab0  00000000  00000000  00045d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018e8  00000000  00000000  000477c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cc0d  00000000  00000000  000490a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000184d4  00000000  00000000  00075cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001137b1  00000000  00000000  0008e189  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a193a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fa4  00000000  00000000  001a19b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c224 	.word	0x0800c224

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800c224 	.word	0x0800c224

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <SPI_write_command>:

/**
 * Select the register to read or write
 *
 */
uint8_t SPI_write_command(SPI_HandleTypeDef* hspi, uint8_t reg_to_sel) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;

	// toggle CS to low
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eaa:	4815      	ldr	r0, [pc, #84]	; (8000f00 <SPI_write_command+0x68>)
 8000eac:	f004 fe02 	bl	8005ab4 <HAL_GPIO_WritePin>

	uint8_t reg = RA8875_CMDWRITE;
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	73bb      	strb	r3, [r7, #14]
	status  = HAL_SPI_Transmit(hspi, &reg, 1, 10);
 8000eb4:	f107 010e 	add.w	r1, r7, #14
 8000eb8:	230a      	movs	r3, #10
 8000eba:	2201      	movs	r2, #1
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f006 fbf9 	bl	80076b4 <HAL_SPI_Transmit>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SPI_write_command+0x38>
		return DISPLAY_ERROR;
 8000ecc:	23ff      	movs	r3, #255	; 0xff
 8000ece:	e013      	b.n	8000ef8 <SPI_write_command+0x60>

	status = HAL_SPI_Transmit(hspi, &reg_to_sel, 1, 10);
 8000ed0:	1cf9      	adds	r1, r7, #3
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f006 fbec 	bl	80076b4 <HAL_SPI_Transmit>
 8000edc:	4603      	mov	r3, r0
 8000ede:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SPI_write_command+0x52>
		return DISPLAY_ERROR;
 8000ee6:	23ff      	movs	r3, #255	; 0xff
 8000ee8:	e006      	b.n	8000ef8 <SPI_write_command+0x60>

	// finish transfer, toggle CS to high
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <SPI_write_command+0x68>)
 8000ef2:	f004 fddf 	bl	8005ab4 <HAL_GPIO_WritePin>

	return DISPLAY_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	48001000 	.word	0x48001000

08000f04 <SPI_read_data>:

/**
 * Read the data from the current register
 *
 */
uint8_t SPI_read_data(SPI_HandleTypeDef* hspi, uint8_t* Rxdata) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint8_t reg = RA8875_DATAREAD;
 8000f0e:	2340      	movs	r3, #64	; 0x40
 8000f10:	73bb      	strb	r3, [r7, #14]

	// toggle CS to low
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f18:	4814      	ldr	r0, [pc, #80]	; (8000f6c <SPI_read_data+0x68>)
 8000f1a:	f004 fdcb 	bl	8005ab4 <HAL_GPIO_WritePin>

	// write READ command to slave and read the data
	status  = HAL_SPI_Transmit(hspi, &reg, 1, 10);
 8000f1e:	f107 010e 	add.w	r1, r7, #14
 8000f22:	230a      	movs	r3, #10
 8000f24:	2201      	movs	r2, #1
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f006 fbc4 	bl	80076b4 <HAL_SPI_Transmit>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SPI_read_data+0x36>
		return DISPLAY_ERROR;
 8000f36:	23ff      	movs	r3, #255	; 0xff
 8000f38:	e013      	b.n	8000f62 <SPI_read_data+0x5e>

	status = HAL_SPI_Receive(hspi, Rxdata, 1, 10);
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	6839      	ldr	r1, [r7, #0]
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f006 fd1d 	bl	8007980 <HAL_SPI_Receive>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SPI_read_data+0x50>
		return DISPLAY_ERROR;
 8000f50:	23ff      	movs	r3, #255	; 0xff
 8000f52:	e006      	b.n	8000f62 <SPI_read_data+0x5e>

	// finish transfer, toggle CS to high
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5a:	4804      	ldr	r0, [pc, #16]	; (8000f6c <SPI_read_data+0x68>)
 8000f5c:	f004 fdaa 	bl	8005ab4 <HAL_GPIO_WritePin>

	return DISPLAY_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	48001000 	.word	0x48001000

08000f70 <SPI_write_data>:

/**
 * Write the data to the current register
 *
 */
uint8_t SPI_write_data(SPI_HandleTypeDef* hspi, uint8_t* TxData) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint8_t reg = RA8875_DATAWRITE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73bb      	strb	r3, [r7, #14]

	// toggle CS to low
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f84:	4814      	ldr	r0, [pc, #80]	; (8000fd8 <SPI_write_data+0x68>)
 8000f86:	f004 fd95 	bl	8005ab4 <HAL_GPIO_WritePin>

	// write WRITE command to slave and write the data
	status  = HAL_SPI_Transmit(hspi, &reg, 1, 10);
 8000f8a:	f107 010e 	add.w	r1, r7, #14
 8000f8e:	230a      	movs	r3, #10
 8000f90:	2201      	movs	r2, #1
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f006 fb8e 	bl	80076b4 <HAL_SPI_Transmit>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SPI_write_data+0x36>
		return DISPLAY_ERROR;
 8000fa2:	23ff      	movs	r3, #255	; 0xff
 8000fa4:	e013      	b.n	8000fce <SPI_write_data+0x5e>

	status = HAL_SPI_Transmit(hspi, TxData, 1, 10);
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f006 fb81 	bl	80076b4 <HAL_SPI_Transmit>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SPI_write_data+0x50>
		return DISPLAY_ERROR;
 8000fbc:	23ff      	movs	r3, #255	; 0xff
 8000fbe:	e006      	b.n	8000fce <SPI_write_data+0x5e>

	// finish transfer, toggle CS to high
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <SPI_write_data+0x68>)
 8000fc8:	f004 fd74 	bl	8005ab4 <HAL_GPIO_WritePin>

	return DISPLAY_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	48001000 	.word	0x48001000

08000fdc <SPI_read_register>:
/**
 *  Select the register to read from and transmit the data using TxData
 *  Rxdata will be the returned data
 *
 */
uint8_t SPI_read_register(SPI_HandleTypeDef* hspi, uint8_t reg_to_sel, uint8_t* Rxdata) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	72fb      	strb	r3, [r7, #11]
	uint8_t ret;
	// issue a read coomand and read data
	ret = SPI_write_command(hspi, reg_to_sel);
 8000fea:	7afb      	ldrb	r3, [r7, #11]
 8000fec:	4619      	mov	r1, r3
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f7ff ff52 	bl	8000e98 <SPI_write_command>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SPI_read_register+0x26>
		return DISPLAY_ERROR;
 8000ffe:	23ff      	movs	r3, #255	; 0xff
 8001000:	e00b      	b.n	800101a <SPI_read_register+0x3e>

	ret = SPI_read_data(hspi, Rxdata);
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f7ff ff7d 	bl	8000f04 <SPI_read_data>
 800100a:	4603      	mov	r3, r0
 800100c:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SPI_read_register+0x3c>
		return DISPLAY_ERROR;
 8001014:	23ff      	movs	r3, #255	; 0xff
 8001016:	e000      	b.n	800101a <SPI_read_register+0x3e>

	return DISPLAY_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <SPI_write_register>:

/**
 *  Select the register to write to and transmit the data using TxData
 *
 */
uint8_t SPI_write_register(SPI_HandleTypeDef* hspi, uint8_t reg_to_sel, uint8_t* TxData) {
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	460b      	mov	r3, r1
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	72fb      	strb	r3, [r7, #11]
	uint8_t ret;
	ret = SPI_write_command(hspi, reg_to_sel);
 8001030:	7afb      	ldrb	r3, [r7, #11]
 8001032:	4619      	mov	r1, r3
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f7ff ff2f 	bl	8000e98 <SPI_write_command>
 800103a:	4603      	mov	r3, r0
 800103c:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SPI_write_register+0x26>
		return DISPLAY_ERROR;
 8001044:	23ff      	movs	r3, #255	; 0xff
 8001046:	e00b      	b.n	8001060 <SPI_write_register+0x3e>

	ret = SPI_write_data(hspi, TxData);
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f7ff ff90 	bl	8000f70 <SPI_write_data>
 8001050:	4603      	mov	r3, r0
 8001052:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SPI_write_register+0x3c>
		return DISPLAY_ERROR;
 800105a:	23ff      	movs	r3, #255	; 0xff
 800105c:	e000      	b.n	8001060 <SPI_write_register+0x3e>

	return DISPLAY_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <wait_poll>:
/**
 *  Select the register to write to and transmit the data using TxData
 *	return true if expected status has been reached
 *  return false if SPI_read has errors
 */
bool wait_poll(SPI_HandleTypeDef* hspi,uint8_t reg_to_sel, uint8_t wait_flag) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
 8001074:	4613      	mov	r3, r2
 8001076:	70bb      	strb	r3, [r7, #2]
	uint8_t RxData;
	uint8_t ret;
	// wait for the command to finish
	while(1) {
		RxData = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	73bb      	strb	r3, [r7, #14]
		ret = SPI_read_register(hspi, reg_to_sel, &RxData);
 800107c:	f107 020e 	add.w	r2, r7, #14
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	4619      	mov	r1, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ffa9 	bl	8000fdc <SPI_read_register>
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]
		if(ret != DISPLAY_OK)
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <wait_poll+0x30>
			return false;
 8001094:	2300      	movs	r3, #0
 8001096:	e006      	b.n	80010a6 <wait_poll+0x3e>
		if(!(RxData & wait_flag))
 8001098:	7bba      	ldrb	r2, [r7, #14]
 800109a:	78bb      	ldrb	r3, [r7, #2]
 800109c:	4013      	ands	r3, r2
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e9      	bne.n	8001078 <wait_poll+0x10>
			return true;
 80010a4:	2301      	movs	r3, #1
	}
	// unreach but return to avoid compiler yelling
	return false;
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <rect_helper>:
 *	|					   |
 *	|					   |
 *	|					   |
 *	Y  X----------------X1 Y
 */
void rect_helper(SPI_HandleTypeDef* hspi, int16_t x, int16_t y, int16_t x1, int16_t y1, uint16_t color, bool filled){
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	4608      	mov	r0, r1
 80010b8:	4611      	mov	r1, r2
 80010ba:	461a      	mov	r2, r3
 80010bc:	4603      	mov	r3, r0
 80010be:	817b      	strh	r3, [r7, #10]
 80010c0:	460b      	mov	r3, r1
 80010c2:	813b      	strh	r3, [r7, #8]
 80010c4:	4613      	mov	r3, r2
 80010c6:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	75fb      	strb	r3, [r7, #23]

	// Set X
	SPI_write_command(hspi, 0x91);
 80010cc:	2191      	movs	r1, #145	; 0x91
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff fee2 	bl	8000e98 <SPI_write_command>
	TxData = x;
 80010d4:	897b      	ldrh	r3, [r7, #10]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 80010da:	f107 0317 	add.w	r3, r7, #23
 80010de:	4619      	mov	r1, r3
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff ff45 	bl	8000f70 <SPI_write_data>
	SPI_write_command(hspi, 0x92);
 80010e6:	2192      	movs	r1, #146	; 0x92
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f7ff fed5 	bl	8000e98 <SPI_write_command>
	TxData = x >> 8;
 80010ee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010f2:	121b      	asrs	r3, r3, #8
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 80010fa:	f107 0317 	add.w	r3, r7, #23
 80010fe:	4619      	mov	r1, r3
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f7ff ff35 	bl	8000f70 <SPI_write_data>

	// Set Y
	SPI_write_command(hspi, 0x93);
 8001106:	2193      	movs	r1, #147	; 0x93
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f7ff fec5 	bl	8000e98 <SPI_write_command>
	TxData = y;
 800110e:	893b      	ldrh	r3, [r7, #8]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8001114:	f107 0317 	add.w	r3, r7, #23
 8001118:	4619      	mov	r1, r3
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f7ff ff28 	bl	8000f70 <SPI_write_data>
	SPI_write_command(hspi, 0x94);
 8001120:	2194      	movs	r1, #148	; 0x94
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f7ff feb8 	bl	8000e98 <SPI_write_command>
	TxData = y >> 8;
 8001128:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800112c:	121b      	asrs	r3, r3, #8
 800112e:	b21b      	sxth	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8001134:	f107 0317 	add.w	r3, r7, #23
 8001138:	4619      	mov	r1, r3
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f7ff ff18 	bl	8000f70 <SPI_write_data>

	// set X1
	SPI_write_command(hspi, 0x95);
 8001140:	2195      	movs	r1, #149	; 0x95
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff fea8 	bl	8000e98 <SPI_write_command>
	TxData = x1;
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 800114e:	f107 0317 	add.w	r3, r7, #23
 8001152:	4619      	mov	r1, r3
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f7ff ff0b 	bl	8000f70 <SPI_write_data>
	SPI_write_command(hspi, 0x96);
 800115a:	2196      	movs	r1, #150	; 0x96
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f7ff fe9b 	bl	8000e98 <SPI_write_command>
	TxData = x1 >> 8;
 8001162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001166:	121b      	asrs	r3, r3, #8
 8001168:	b21b      	sxth	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 800116e:	f107 0317 	add.w	r3, r7, #23
 8001172:	4619      	mov	r1, r3
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f7ff fefb 	bl	8000f70 <SPI_write_data>

	// set Y1
	SPI_write_command(hspi, 0x97);
 800117a:	2197      	movs	r1, #151	; 0x97
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f7ff fe8b 	bl	8000e98 <SPI_write_command>
	TxData = y1;
 8001182:	8c3b      	ldrh	r3, [r7, #32]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8001188:	f107 0317 	add.w	r3, r7, #23
 800118c:	4619      	mov	r1, r3
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f7ff feee 	bl	8000f70 <SPI_write_data>
	SPI_write_command(hspi, 0x98);
 8001194:	2198      	movs	r1, #152	; 0x98
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f7ff fe7e 	bl	8000e98 <SPI_write_command>
	TxData = y1 >> 8;
 800119c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80011a0:	121b      	asrs	r3, r3, #8
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 80011a8:	f107 0317 	add.w	r3, r7, #23
 80011ac:	4619      	mov	r1, r3
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f7ff fede 	bl	8000f70 <SPI_write_data>

	// set Color
	SPI_write_command(hspi, 0x63);
 80011b4:	2163      	movs	r1, #99	; 0x63
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff fe6e 	bl	8000e98 <SPI_write_command>
	TxData = (color & 0xf800) >> 11;
 80011bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011be:	0adb      	lsrs	r3, r3, #11
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 80011c6:	f107 0317 	add.w	r3, r7, #23
 80011ca:	4619      	mov	r1, r3
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff fecf 	bl	8000f70 <SPI_write_data>
	SPI_write_command(hspi, 0x64);
 80011d2:	2164      	movs	r1, #100	; 0x64
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff fe5f 	bl	8000e98 <SPI_write_command>
	TxData = (color & 0x07e0) >> 5;
 80011da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011dc:	115b      	asrs	r3, r3, #5
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 80011e8:	f107 0317 	add.w	r3, r7, #23
 80011ec:	4619      	mov	r1, r3
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f7ff febe 	bl	8000f70 <SPI_write_data>
	SPI_write_command(hspi, 0x65);
 80011f4:	2165      	movs	r1, #101	; 0x65
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff fe4e 	bl	8000e98 <SPI_write_command>
	TxData = color & 0x001f;
 80011fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f003 031f 	and.w	r3, r3, #31
 8001204:	b2db      	uxtb	r3, r3
 8001206:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8001208:	f107 0317 	add.w	r3, r7, #23
 800120c:	4619      	mov	r1, r3
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f7ff feae 	bl	8000f70 <SPI_write_data>

	// Draw
	SPI_write_command(hspi, RA8875_DCR);
 8001214:	2190      	movs	r1, #144	; 0x90
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff fe3e 	bl	8000e98 <SPI_write_command>
	if(filled == true) {
 800121c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001220:	2b01      	cmp	r3, #1
 8001222:	d108      	bne.n	8001236 <rect_helper+0x188>
		TxData = 0xB0;
 8001224:	23b0      	movs	r3, #176	; 0xb0
 8001226:	75fb      	strb	r3, [r7, #23]
		SPI_write_data(hspi, &TxData);
 8001228:	f107 0317 	add.w	r3, r7, #23
 800122c:	4619      	mov	r1, r3
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff fe9e 	bl	8000f70 <SPI_write_data>
 8001234:	e007      	b.n	8001246 <rect_helper+0x198>
	} else {
		TxData = 0x90;
 8001236:	2390      	movs	r3, #144	; 0x90
 8001238:	75fb      	strb	r3, [r7, #23]
		SPI_write_data(hspi, &TxData);
 800123a:	f107 0317 	add.w	r3, r7, #23
 800123e:	4619      	mov	r1, r3
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff fe95 	bl	8000f70 <SPI_write_data>
	}

	wait_poll(hspi, RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	2190      	movs	r1, #144	; 0x90
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f7ff ff0c 	bl	8001068 <wait_poll>
}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <initialize_PLL>:

/**
 * Initialize the PLL
 *
 */
uint8_t initialize_PLL(SPI_HandleTypeDef* hspi){
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]
	uint8_t TxData = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	73bb      	strb	r3, [r7, #14]

	TxData = RA8875_PLLC1_PLLDIV1 + 11;
 8001268:	230b      	movs	r3, #11
 800126a:	73bb      	strb	r3, [r7, #14]
	ret = SPI_write_register(hspi, RA8875_PLLC1, &TxData);
 800126c:	f107 030e 	add.w	r3, r7, #14
 8001270:	461a      	mov	r2, r3
 8001272:	2188      	movs	r1, #136	; 0x88
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fed4 	bl	8001022 <SPI_write_register>
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]
	if (ret != DISPLAY_OK)
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <initialize_PLL+0x30>
		return DISPLAY_ERROR;
 8001284:	23ff      	movs	r3, #255	; 0xff
 8001286:	e016      	b.n	80012b6 <initialize_PLL+0x5e>
	HAL_Delay(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f002 fd63 	bl	8003d54 <HAL_Delay>

	TxData = RA8875_PLLC2_DIV4;
 800128e:	2302      	movs	r3, #2
 8001290:	73bb      	strb	r3, [r7, #14]
	ret = SPI_write_register(hspi,  RA8875_PLLC2, &TxData);
 8001292:	f107 030e 	add.w	r3, r7, #14
 8001296:	461a      	mov	r2, r3
 8001298:	2189      	movs	r1, #137	; 0x89
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fec1 	bl	8001022 <SPI_write_register>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
	if (ret != DISPLAY_OK)
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <initialize_PLL+0x56>
		return DISPLAY_ERROR;
 80012aa:	23ff      	movs	r3, #255	; 0xff
 80012ac:	e003      	b.n	80012b6 <initialize_PLL+0x5e>
	HAL_Delay(1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f002 fd50 	bl	8003d54 <HAL_Delay>

	return DISPLAY_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <initialize_driverIC>:

/**
 *  Initialize the driver IC (clock setup, etc etc)
 */
uint8_t initialize_driverIC(SPI_HandleTypeDef* hspi){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	75fb      	strb	r3, [r7, #23]
	uint8_t TxData = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	733b      	strb	r3, [r7, #12]

	// Timing value
	uint8_t   pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_2CLK;
 80012d0:	2381      	movs	r3, #129	; 0x81
 80012d2:	75bb      	strb	r3, [r7, #22]
	uint8_t   hsync_nondisp = 26;
 80012d4:	231a      	movs	r3, #26
 80012d6:	757b      	strb	r3, [r7, #21]
	uint8_t   hsync_start = 32;
 80012d8:	2320      	movs	r3, #32
 80012da:	753b      	strb	r3, [r7, #20]
	uint8_t   hsync_pw = 96;
 80012dc:	2360      	movs	r3, #96	; 0x60
 80012de:	74fb      	strb	r3, [r7, #19]
	uint8_t   hsync_finetune = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	74bb      	strb	r3, [r7, #18]
	uint16_t  vsync_nondisp = 32;
 80012e4:	2320      	movs	r3, #32
 80012e6:	823b      	strh	r3, [r7, #16]
	uint16_t  vsync_start = 23;
 80012e8:	2317      	movs	r3, #23
 80012ea:	81fb      	strh	r3, [r7, #14]
	uint8_t   vsync_pw = 2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	737b      	strb	r3, [r7, #13]
	display_voffset = 0; // vertical offset can be changed over here
 80012f0:	4bd0      	ldr	r3, [pc, #832]	; (8001634 <initialize_driverIC+0x374>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]

	initialize_PLL(hspi);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffae 	bl	8001258 <initialize_PLL>

	TxData = RA8875_SYSR_16BPP | RA8875_SYSR_MCU8;
 80012fc:	230c      	movs	r3, #12
 80012fe:	733b      	strb	r3, [r7, #12]
	ret = SPI_write_register(hspi, RA8875_SYSR , &TxData);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	461a      	mov	r2, r3
 8001306:	2110      	movs	r1, #16
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fe8a 	bl	8001022 <SPI_write_register>
 800130e:	4603      	mov	r3, r0
 8001310:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <initialize_driverIC+0x5c>
		return DISPLAY_ERROR;
 8001318:	23ff      	movs	r3, #255	; 0xff
 800131a:	e1a2      	b.n	8001662 <initialize_driverIC+0x3a2>

	TxData = pixclk;
 800131c:	7dbb      	ldrb	r3, [r7, #22]
 800131e:	733b      	strb	r3, [r7, #12]
	ret = SPI_write_register(hspi, RA8875_PCSR , &TxData);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	461a      	mov	r2, r3
 8001326:	2104      	movs	r1, #4
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fe7a 	bl	8001022 <SPI_write_register>
 800132e:	4603      	mov	r3, r0
 8001330:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <initialize_driverIC+0x7c>
		return DISPLAY_ERROR;
 8001338:	23ff      	movs	r3, #255	; 0xff
 800133a:	e192      	b.n	8001662 <initialize_driverIC+0x3a2>
	HAL_Delay(1);
 800133c:	2001      	movs	r0, #1
 800133e:	f002 fd09 	bl	8003d54 <HAL_Delay>

	// Starting to set all the registers
	// return if errors occur in each segment (easier to debug)

	/* Horizontal settings registers */
	TxData = (display_width / 8) - 1;
 8001342:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	b29b      	uxth	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3b01      	subs	r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HDWR , &TxData);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	461a      	mov	r2, r3
 8001358:	2114      	movs	r1, #20
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fe61 	bl	8001022 <SPI_write_register>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	4313      	orrs	r3, r2
 8001368:	75fb      	strb	r3, [r7, #23]
	TxData = RA8875_HNDFTR_DE_HIGH + hsync_finetune;
 800136a:	7cbb      	ldrb	r3, [r7, #18]
 800136c:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HNDFTR , &TxData);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	461a      	mov	r2, r3
 8001374:	2115      	movs	r1, #21
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fe53 	bl	8001022 <SPI_write_register>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	4313      	orrs	r3, r2
 8001384:	75fb      	strb	r3, [r7, #23]
	TxData =  (hsync_nondisp - hsync_finetune - 2) / 8;
 8001386:	7d7a      	ldrb	r2, [r7, #21]
 8001388:	7cbb      	ldrb	r3, [r7, #18]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	3b02      	subs	r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	da00      	bge.n	8001394 <initialize_driverIC+0xd4>
 8001392:	3307      	adds	r3, #7
 8001394:	10db      	asrs	r3, r3, #3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HNDR , &TxData);
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	461a      	mov	r2, r3
 80013a0:	2116      	movs	r1, #22
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fe3d 	bl	8001022 <SPI_write_register>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	75fb      	strb	r3, [r7, #23]
	TxData = hsync_start / 8 - 1;
 80013b2:	7d3b      	ldrb	r3, [r7, #20]
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	3b01      	subs	r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HSTR , &TxData);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	461a      	mov	r2, r3
 80013c4:	2117      	movs	r1, #23
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fe2b 	bl	8001022 <SPI_write_register>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	75fb      	strb	r3, [r7, #23]
	TxData = RA8875_HPWR_LOW + (hsync_pw / 8 - 1);
 80013d6:	7cfb      	ldrb	r3, [r7, #19]
 80013d8:	08db      	lsrs	r3, r3, #3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	3b01      	subs	r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HPWR , &TxData);
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	461a      	mov	r2, r3
 80013e8:	2118      	movs	r1, #24
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fe19 	bl	8001022 <SPI_write_register>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	75fb      	strb	r3, [r7, #23]

	if (ret != DISPLAY_OK)
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <initialize_driverIC+0x144>
		return DISPLAY_ERROR;
 8001400:	23ff      	movs	r3, #255	; 0xff
 8001402:	e12e      	b.n	8001662 <initialize_driverIC+0x3a2>

	/* Vertical settings registers */
	TxData = (display_height - 1 + display_voffset) & 0xFF;
 8001404:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b8a      	ldr	r3, [pc, #552]	; (8001634 <initialize_driverIC+0x374>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	b2db      	uxtb	r3, r3
 8001412:	3b01      	subs	r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VDHR0 , &TxData);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	461a      	mov	r2, r3
 800141e:	2119      	movs	r1, #25
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fdfe 	bl	8001022 <SPI_write_register>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	4313      	orrs	r3, r2
 800142e:	75fb      	strb	r3, [r7, #23]
	TxData = (display_height - 1 + display_voffset) >> 8;
 8001430:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001434:	3b01      	subs	r3, #1
 8001436:	4a7f      	ldr	r2, [pc, #508]	; (8001634 <initialize_driverIC+0x374>)
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	4413      	add	r3, r2
 800143c:	121b      	asrs	r3, r3, #8
 800143e:	b2db      	uxtb	r3, r3
 8001440:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VDHR1 , &TxData);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	461a      	mov	r2, r3
 8001448:	211a      	movs	r1, #26
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fde9 	bl	8001022 <SPI_write_register>
 8001450:	4603      	mov	r3, r0
 8001452:	461a      	mov	r2, r3
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	4313      	orrs	r3, r2
 8001458:	75fb      	strb	r3, [r7, #23]
	TxData =  vsync_nondisp - 1;
 800145a:	8a3b      	ldrh	r3, [r7, #16]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3b01      	subs	r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VNDR0 , &TxData);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	461a      	mov	r2, r3
 800146a:	211b      	movs	r1, #27
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff fdd8 	bl	8001022 <SPI_write_register>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	7dfb      	ldrb	r3, [r7, #23]
 8001478:	4313      	orrs	r3, r2
 800147a:	75fb      	strb	r3, [r7, #23]
	TxData =  vsync_nondisp >> 8;
 800147c:	8a3b      	ldrh	r3, [r7, #16]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	b29b      	uxth	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VNDR1 , &TxData);
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	461a      	mov	r2, r3
 800148c:	211c      	movs	r1, #28
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fdc7 	bl	8001022 <SPI_write_register>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	4313      	orrs	r3, r2
 800149c:	75fb      	strb	r3, [r7, #23]
	TxData = vsync_start - 1;
 800149e:	89fb      	ldrh	r3, [r7, #14]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VSTR0 , &TxData);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	461a      	mov	r2, r3
 80014ae:	211d      	movs	r1, #29
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fdb6 	bl	8001022 <SPI_write_register>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	4313      	orrs	r3, r2
 80014be:	75fb      	strb	r3, [r7, #23]
	TxData = vsync_start >> 8;
 80014c0:	89fb      	ldrh	r3, [r7, #14]
 80014c2:	0a1b      	lsrs	r3, r3, #8
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VSTR1 , &TxData);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	461a      	mov	r2, r3
 80014d0:	211e      	movs	r1, #30
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fda5 	bl	8001022 <SPI_write_register>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	4313      	orrs	r3, r2
 80014e0:	75fb      	strb	r3, [r7, #23]
	TxData = RA8875_VPWR_LOW + vsync_pw - 1;
 80014e2:	7b7b      	ldrb	r3, [r7, #13]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VPWR , &TxData);
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	461a      	mov	r2, r3
 80014f0:	211f      	movs	r1, #31
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fd95 	bl	8001022 <SPI_write_register>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	4313      	orrs	r3, r2
 8001500:	75fb      	strb	r3, [r7, #23]

	if (ret != DISPLAY_OK)
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <initialize_driverIC+0x24c>
		return DISPLAY_ERROR;
 8001508:	23ff      	movs	r3, #255	; 0xff
 800150a:	e0aa      	b.n	8001662 <initialize_driverIC+0x3a2>

	/* Set active window X */
	TxData = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HSAW0 , &TxData);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	461a      	mov	r2, r3
 8001516:	2130      	movs	r1, #48	; 0x30
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff fd82 	bl	8001022 <SPI_write_register>
 800151e:	4603      	mov	r3, r0
 8001520:	461a      	mov	r2, r3
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	4313      	orrs	r3, r2
 8001526:	75fb      	strb	r3, [r7, #23]
	TxData = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HSAW1 , &TxData);
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	461a      	mov	r2, r3
 8001532:	2131      	movs	r1, #49	; 0x31
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fd74 	bl	8001022 <SPI_write_register>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	4313      	orrs	r3, r2
 8001542:	75fb      	strb	r3, [r7, #23]
	TxData =  (display_width - 1) & 0xFF;
 8001544:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3b01      	subs	r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HEAW0 , &TxData);
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	461a      	mov	r2, r3
 8001556:	2134      	movs	r1, #52	; 0x34
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff fd62 	bl	8001022 <SPI_write_register>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	4313      	orrs	r3, r2
 8001566:	75fb      	strb	r3, [r7, #23]
	TxData = (display_width - 1) >> 8;
 8001568:	f44f 7348 	mov.w	r3, #800	; 0x320
 800156c:	3b01      	subs	r3, #1
 800156e:	121b      	asrs	r3, r3, #8
 8001570:	b2db      	uxtb	r3, r3
 8001572:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HEAW1 , &TxData);
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	461a      	mov	r2, r3
 800157a:	2135      	movs	r1, #53	; 0x35
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fd50 	bl	8001022 <SPI_write_register>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	4313      	orrs	r3, r2
 800158a:	75fb      	strb	r3, [r7, #23]

	if (ret != DISPLAY_OK)
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <initialize_driverIC+0x2d6>
		return DISPLAY_ERROR;
 8001592:	23ff      	movs	r3, #255	; 0xff
 8001594:	e065      	b.n	8001662 <initialize_driverIC+0x3a2>

	/* Set active window Y */
	TxData = 0 + display_voffset;
 8001596:	4b27      	ldr	r3, [pc, #156]	; (8001634 <initialize_driverIC+0x374>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VSAW0 , &TxData);
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	461a      	mov	r2, r3
 80015a2:	2132      	movs	r1, #50	; 0x32
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fd3c 	bl	8001022 <SPI_write_register>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	75fb      	strb	r3, [r7, #23]
	TxData = 0 + display_voffset;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <initialize_driverIC+0x374>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VSAW1 , &TxData);
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	461a      	mov	r2, r3
 80015c0:	2133      	movs	r1, #51	; 0x33
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fd2d 	bl	8001022 <SPI_write_register>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	75fb      	strb	r3, [r7, #23]
	TxData =  (display_height - 1 + display_voffset) & 0xFF;
 80015d2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <initialize_driverIC+0x374>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4413      	add	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VEAW0 , &TxData);
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	461a      	mov	r2, r3
 80015ec:	2136      	movs	r1, #54	; 0x36
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fd17 	bl	8001022 <SPI_write_register>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	7dfb      	ldrb	r3, [r7, #23]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	75fb      	strb	r3, [r7, #23]
	TxData = (display_height - 1 + display_voffset) >> 8;
 80015fe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001602:	3b01      	subs	r3, #1
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <initialize_driverIC+0x374>)
 8001606:	7812      	ldrb	r2, [r2, #0]
 8001608:	4413      	add	r3, r2
 800160a:	121b      	asrs	r3, r3, #8
 800160c:	b2db      	uxtb	r3, r3
 800160e:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VEAW1 , &TxData);
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	461a      	mov	r2, r3
 8001616:	2137      	movs	r1, #55	; 0x37
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fd02 	bl	8001022 <SPI_write_register>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	4313      	orrs	r3, r2
 8001626:	75fb      	strb	r3, [r7, #23]

	if (ret != DISPLAY_OK)
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <initialize_driverIC+0x378>
		return DISPLAY_ERROR;
 800162e:	23ff      	movs	r3, #255	; 0xff
 8001630:	e017      	b.n	8001662 <initialize_driverIC+0x3a2>
 8001632:	bf00      	nop
 8001634:	20000090 	.word	0x20000090

	/* Clear the entire window */
	TxData = RA8875_MCLR_START | RA8875_MCLR_FULL;
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	733b      	strb	r3, [r7, #12]
	ret = SPI_write_register(hspi, RA8875_MCLR, &TxData);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	461a      	mov	r2, r3
 8001642:	218e      	movs	r1, #142	; 0x8e
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff fcec 	bl	8001022 <SPI_write_register>
 800164a:	4603      	mov	r3, r0
 800164c:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <initialize_driverIC+0x398>
		return DISPLAY_ERROR;
 8001654:	23ff      	movs	r3, #255	; 0xff
 8001656:	e004      	b.n	8001662 <initialize_driverIC+0x3a2>

	HAL_Delay(500);
 8001658:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800165c:	f002 fb7a 	bl	8003d54 <HAL_Delay>

	return DISPLAY_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop

0800166c <initialize_display>:

/**
 *  initialize the LCD driver and any HW required by the display.
 *  Returns true if display is successfully been initialized
 */
bool initialize_display(SPI_HandleTypeDef *hspi) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint8_t ret;
  uint8_t reg;
  uint8_t RxData = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	737b      	strb	r3, [r7, #13]

  // CS pin to High before we start writing
  HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800167e:	481b      	ldr	r0, [pc, #108]	; (80016ec <initialize_display+0x80>)
 8001680:	f004 fa18 	bl	8005ab4 <HAL_GPIO_WritePin>

  // CS pin to LOW and to HIGH to reset
  HAL_GPIO_WritePin(GPIOE, RST_PIN, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800168a:	4818      	ldr	r0, [pc, #96]	; (80016ec <initialize_display+0x80>)
 800168c:	f004 fa12 	bl	8005ab4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001690:	2064      	movs	r0, #100	; 0x64
 8001692:	f002 fb5f 	bl	8003d54 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, RST_PIN, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <initialize_display+0x80>)
 800169e:	f004 fa09 	bl	8005ab4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80016a2:	2064      	movs	r0, #100	; 0x64
 80016a4:	f002 fb56 	bl	8003d54 <HAL_Delay>

  // read Register 0 to check the model
  reg = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
  ret = SPI_read_register(hspi, reg, &RxData);
 80016ac:	f107 020d 	add.w	r2, r7, #13
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	4619      	mov	r1, r3
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fc91 	bl	8000fdc <SPI_read_register>
 80016ba:	4603      	mov	r3, r0
 80016bc:	73bb      	strb	r3, [r7, #14]
  if(ret != DISPLAY_OK || RxData != 0x75)
 80016be:	7bbb      	ldrb	r3, [r7, #14]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <initialize_display+0x5e>
 80016c4:	7b7b      	ldrb	r3, [r7, #13]
 80016c6:	2b75      	cmp	r3, #117	; 0x75
 80016c8:	d001      	beq.n	80016ce <initialize_display+0x62>
	  return false;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e00a      	b.n	80016e4 <initialize_display+0x78>

  ret = initialize_driverIC(hspi);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fdf6 	bl	80012c0 <initialize_driverIC>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73bb      	strb	r3, [r7, #14]
  if(ret != DISPLAY_OK)
 80016d8:	7bbb      	ldrb	r3, [r7, #14]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <initialize_display+0x76>
	  return false;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <initialize_display+0x78>

  return true;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	48001000 	.word	0x48001000

080016f0 <display_on>:

/**
 *  Power on the display
 */
void display_on(SPI_HandleTypeDef *hspi, bool on){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
	uint8_t TxData = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]

	if(on == true)
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d109      	bne.n	800171a <display_on+0x2a>
	{
		TxData = RA8875_PWRR_NORMAL | RA8875_PWRR_DISPON;
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_PWRR, &TxData);
 800170a:	f107 030f 	add.w	r3, r7, #15
 800170e:	461a      	mov	r2, r3
 8001710:	2101      	movs	r1, #1
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fc85 	bl	8001022 <SPI_write_register>
	else
	{
		TxData = RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF;
		SPI_write_register(hspi, RA8875_PWRR, &TxData);
	}
	return;
 8001718:	e009      	b.n	800172e <display_on+0x3e>
		TxData = RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_PWRR, &TxData);
 800171e:	f107 030f 	add.w	r3, r7, #15
 8001722:	461a      	mov	r2, r3
 8001724:	2101      	movs	r1, #1
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fc7b 	bl	8001022 <SPI_write_register>
	return;
 800172c:	bf00      	nop
}
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <GPIOX_on>:

/**
 *  Set the Extra General Purpose IO Register
 *
 */
void GPIOX_on(SPI_HandleTypeDef *hspi, bool on){
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
	uint8_t TxData = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]

	if(on == true)
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d109      	bne.n	800175e <GPIOX_on+0x2a>
	{
		TxData = 1;
 800174a:	2301      	movs	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_GPIOX, &TxData);
 800174e:	f107 030f 	add.w	r3, r7, #15
 8001752:	461a      	mov	r2, r3
 8001754:	21c7      	movs	r1, #199	; 0xc7
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fc63 	bl	8001022 <SPI_write_register>
	else
	{
		TxData = 0;
		SPI_write_register(hspi, RA8875_GPIOX, &TxData);
	}
	return;
 800175c:	e009      	b.n	8001772 <GPIOX_on+0x3e>
		TxData = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_GPIOX, &TxData);
 8001762:	f107 030f 	add.w	r3, r7, #15
 8001766:	461a      	mov	r2, r3
 8001768:	21c7      	movs	r1, #199	; 0xc7
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fc59 	bl	8001022 <SPI_write_register>
	return;
 8001770:	bf00      	nop
}
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <PWM1_config>:

/**
 *  Configure the PWM1 clock
 */
void PWM1_config(SPI_HandleTypeDef *hspi, bool on, uint8_t clock){
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
 8001784:	4613      	mov	r3, r2
 8001786:	70bb      	strb	r3, [r7, #2]
	uint8_t TxData = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]

	if(on == true)
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d111      	bne.n	80017b6 <PWM1_config+0x3e>
	{
		TxData = RA8875_P1CR_ENABLE | (clock & 0xF);
 8001792:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	b25b      	sxtb	r3, r3
 800179c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_P1CR, &TxData);
 80017a6:	f107 030f 	add.w	r3, r7, #15
 80017aa:	461a      	mov	r2, r3
 80017ac:	218a      	movs	r1, #138	; 0x8a
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff fc37 	bl	8001022 <SPI_write_register>
	else
	{
		TxData = RA8875_P1CR_DISABLE | (clock & 0xF);
		SPI_write_register(hspi, RA8875_P1CR, &TxData);
	}
	return;
 80017b4:	e00c      	b.n	80017d0 <PWM1_config+0x58>
		TxData = RA8875_P1CR_DISABLE | (clock & 0xF);
 80017b6:	78bb      	ldrb	r3, [r7, #2]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_P1CR, &TxData);
 80017c0:	f107 030f 	add.w	r3, r7, #15
 80017c4:	461a      	mov	r2, r3
 80017c6:	218a      	movs	r1, #138	; 0x8a
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fc2a 	bl	8001022 <SPI_write_register>
	return;
 80017ce:	bf00      	nop
}
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <PWM1_out>:

/**
 * Configure the duty cycle of the PWM
 *
 */
void PWM1_out(SPI_HandleTypeDef *hspi, uint8_t duty_cycle){
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	70fb      	strb	r3, [r7, #3]
	uint8_t TxData = duty_cycle;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, RA8875_P1DCR, &TxData);
 80017e6:	f107 030f 	add.w	r3, r7, #15
 80017ea:	461a      	mov	r2, r3
 80017ec:	218b      	movs	r1, #139	; 0x8b
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fc17 	bl	8001022 <SPI_write_register>
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <fill_screen>:

/**
 *  Fill the screen with color
 *
 */
void fill_screen(SPI_HandleTypeDef *hspi, uint16_t color) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af04      	add	r7, sp, #16
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
	rect_helper(hspi, 0, 0, display_width - 1, display_height - 1, color, true);
 8001808:	f44f 7348 	mov.w	r3, #800	; 0x320
 800180c:	3b01      	subs	r3, #1
 800180e:	b29b      	uxth	r3, r3
 8001810:	b219      	sxth	r1, r3
 8001812:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001816:	3b01      	subs	r3, #1
 8001818:	b29b      	uxth	r3, r3
 800181a:	b21b      	sxth	r3, r3
 800181c:	2201      	movs	r2, #1
 800181e:	9202      	str	r2, [sp, #8]
 8001820:	887a      	ldrh	r2, [r7, #2]
 8001822:	9201      	str	r2, [sp, #4]
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	460b      	mov	r3, r1
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fc3e 	bl	80010ae <rect_helper>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <text_mode>:

/**
 *  Sets the display in text mode
 *
 */
void text_mode(SPI_HandleTypeDef *hspi) {
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
	uint8_t RxData = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
	// Set text mode
	SPI_read_register(hspi, RA8875_MWCR0, &RxData);
 8001846:	f107 030f 	add.w	r3, r7, #15
 800184a:	461a      	mov	r2, r3
 800184c:	2140      	movs	r1, #64	; 0x40
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fbc4 	bl	8000fdc <SPI_read_register>
	RxData |= RA8875_MWCR0_TXTMODE;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800185a:	b2db      	uxtb	r3, r3
 800185c:	73fb      	strb	r3, [r7, #15]
	SPI_write_data(hspi, &RxData);
 800185e:	f107 030f 	add.w	r3, r7, #15
 8001862:	4619      	mov	r1, r3
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fb83 	bl	8000f70 <SPI_write_data>

	// Select internal (ROM) font
	SPI_read_register(hspi, 0x21, &RxData);
 800186a:	f107 030f 	add.w	r3, r7, #15
 800186e:	461a      	mov	r2, r3
 8001870:	2121      	movs	r1, #33	; 0x21
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fbb2 	bl	8000fdc <SPI_read_register>
	RxData &= ~((1 << 7) | (1 << 5)); // clear bits 7 and 5
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 800187e:	b2db      	uxtb	r3, r3
 8001880:	73fb      	strb	r3, [r7, #15]
	SPI_write_data(hspi, &RxData);
 8001882:	f107 030f 	add.w	r3, r7, #15
 8001886:	4619      	mov	r1, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fb71 	bl	8000f70 <SPI_write_data>
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <set_cursor>:

/**
 *  Set the location of the cursor
 *
 */
void set_cursor(SPI_HandleTypeDef *hspi, uint16_t x, uint16_t y){
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	807b      	strh	r3, [r7, #2]
 80018a2:	4613      	mov	r3, r2
 80018a4:	803b      	strh	r3, [r7, #0]
	uint8_t TxData = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]

	TxData = x & 0xFF;
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x2A, &TxData);
 80018b0:	f107 030f 	add.w	r3, r7, #15
 80018b4:	461a      	mov	r2, r3
 80018b6:	212a      	movs	r1, #42	; 0x2a
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff fbb2 	bl	8001022 <SPI_write_register>

	TxData = x >> 8;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x2B, &TxData);
 80018c8:	f107 030f 	add.w	r3, r7, #15
 80018cc:	461a      	mov	r2, r3
 80018ce:	212b      	movs	r1, #43	; 0x2b
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff fba6 	bl	8001022 <SPI_write_register>

	TxData = y & 0xFF;
 80018d6:	883b      	ldrh	r3, [r7, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x2C, &TxData);
 80018dc:	f107 030f 	add.w	r3, r7, #15
 80018e0:	461a      	mov	r2, r3
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff fb9c 	bl	8001022 <SPI_write_register>

	TxData = y >> 8;
 80018ea:	883b      	ldrh	r3, [r7, #0]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x2D, &TxData);
 80018f4:	f107 030f 	add.w	r3, r7, #15
 80018f8:	461a      	mov	r2, r3
 80018fa:	212d      	movs	r1, #45	; 0x2d
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fb90 	bl	8001022 <SPI_write_register>
}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <text_write>:

/**
 *  Write the string to the screen
 */
void text_write(SPI_HandleTypeDef *hspi, char* buffer, uint16_t len) {
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	4613      	mov	r3, r2
 8001916:	80fb      	strh	r3, [r7, #6]
	SPI_write_command(hspi, RA8875_MRWC);
 8001918:	2102      	movs	r1, #2
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f7ff fabc 	bl	8000e98 <SPI_write_command>

	for(uint16_t i = 0; i < len; i++) {
 8001920:	2300      	movs	r3, #0
 8001922:	82fb      	strh	r3, [r7, #22]
 8001924:	e00d      	b.n	8001942 <text_write+0x38>
		uint8_t each_char = buffer[i];
 8001926:	8afb      	ldrh	r3, [r7, #22]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	4413      	add	r3, r2
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	757b      	strb	r3, [r7, #21]
		SPI_write_data(hspi, &each_char);
 8001930:	f107 0315 	add.w	r3, r7, #21
 8001934:	4619      	mov	r1, r3
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7ff fb1a 	bl	8000f70 <SPI_write_data>
	for(uint16_t i = 0; i < len; i++) {
 800193c:	8afb      	ldrh	r3, [r7, #22]
 800193e:	3301      	adds	r3, #1
 8001940:	82fb      	strh	r3, [r7, #22]
 8001942:	8afa      	ldrh	r2, [r7, #22]
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3ed      	bcc.n	8001926 <text_write+0x1c>
	}
	HAL_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f002 fa02 	bl	8003d54 <HAL_Delay>
}
 8001950:	bf00      	nop
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <clear_screen>:

void clear_screen(SPI_HandleTypeDef *hspi) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	uint8_t TxData = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]

	TxData = RA8875_MCLR_START | RA8875_MCLR_FULL;
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, RA8875_MCLR, &TxData);
 8001968:	f107 030f 	add.w	r3, r7, #15
 800196c:	461a      	mov	r2, r3
 800196e:	218e      	movs	r1, #142	; 0x8e
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fb56 	bl	8001022 <SPI_write_register>
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <set_text_color>:

/**
 *  Set the color of the text
 *
 */
void set_text_color(SPI_HandleTypeDef *hspi, uint16_t text_color) {
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	807b      	strh	r3, [r7, #2]
	uint8_t TxData = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
	uint8_t RxData = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	73bb      	strb	r3, [r7, #14]

	// Set Fore Color
	TxData = ((text_color & 0xf800) >> 11);
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	0adb      	lsrs	r3, r3, #11
 8001996:	b29b      	uxth	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x63, &TxData);
 800199c:	f107 030f 	add.w	r3, r7, #15
 80019a0:	461a      	mov	r2, r3
 80019a2:	2163      	movs	r1, #99	; 0x63
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff fb3c 	bl	8001022 <SPI_write_register>

	TxData = ((text_color & 0x07e0) >> 5);
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	115b      	asrs	r3, r3, #5
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x64, &TxData);
 80019b8:	f107 030f 	add.w	r3, r7, #15
 80019bc:	461a      	mov	r2, r3
 80019be:	2164      	movs	r1, #100	; 0x64
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff fb2e 	bl	8001022 <SPI_write_register>

	TxData = text_color & 0x001f;
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x65, &TxData);
 80019d2:	f107 030f 	add.w	r3, r7, #15
 80019d6:	461a      	mov	r2, r3
 80019d8:	2165      	movs	r1, #101	; 0x65
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff fb21 	bl	8001022 <SPI_write_register>

	// Set transparency flag
	TxData = text_color & 0x001f;
 80019e0:	887b      	ldrh	r3, [r7, #2]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	73fb      	strb	r3, [r7, #15]
	SPI_read_register(hspi, 0x22, &RxData);
 80019ec:	f107 030e 	add.w	r3, r7, #14
 80019f0:	461a      	mov	r2, r3
 80019f2:	2122      	movs	r1, #34	; 0x22
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff faf1 	bl	8000fdc <SPI_read_register>
	RxData |= (1 << 6);
 80019fa:	7bbb      	ldrb	r3, [r7, #14]
 80019fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	73bb      	strb	r3, [r7, #14]
	SPI_write_data(hspi, &RxData);
 8001a04:	f107 030e 	add.w	r3, r7, #14
 8001a08:	4619      	mov	r1, r3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fab0 	bl	8000f70 <SPI_write_data>
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <enlarge_text>:

/**
 *  Enlarge the text, 4x zoom is the max
 *
 */
void enlarge_text(SPI_HandleTypeDef *hspi, uint8_t zoom) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	70fb      	strb	r3, [r7, #3]
	uint8_t actual_zoom = zoom - 1;
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
	uint8_t RxData = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73bb      	strb	r3, [r7, #14]

	if(actual_zoom > 3)
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d901      	bls.n	8001a38 <enlarge_text+0x20>
		actual_zoom = 3;
 8001a34:	2303      	movs	r3, #3
 8001a36:	73fb      	strb	r3, [r7, #15]

	SPI_read_register(hspi, 0x22 , &RxData);
 8001a38:	f107 030e 	add.w	r3, r7, #14
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2122      	movs	r1, #34	; 0x22
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff facb 	bl	8000fdc <SPI_read_register>
	RxData &= ~(0xF);
 8001a46:	7bbb      	ldrb	r3, [r7, #14]
 8001a48:	f023 030f 	bic.w	r3, r3, #15
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	73bb      	strb	r3, [r7, #14]
	RxData |= actual_zoom << 2;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	b25a      	sxtb	r2, r3
 8001a56:	7bbb      	ldrb	r3, [r7, #14]
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	73bb      	strb	r3, [r7, #14]
	RxData |= actual_zoom;
 8001a62:	7bba      	ldrb	r2, [r7, #14]
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	73bb      	strb	r3, [r7, #14]
	SPI_write_data(hspi, &RxData);
 8001a6c:	f107 030e 	add.w	r3, r7, #14
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fa7c 	bl	8000f70 <SPI_write_data>

}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <main_display_init>:

/**
 * Initialize the display to our settings
 *
 */
void main_display_init(SPI_HandleTypeDef *hspi) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	 initialize_display(hspi); // initialize display
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fdef 	bl	800166c <initialize_display>
	 display_on(hspi, true); // turn on display
 8001a8e:	2101      	movs	r1, #1
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fe2d 	bl	80016f0 <display_on>
	 GPIOX_on(hspi, true);  // Enable TFT - display enable tied to GPIOX
 8001a96:	2101      	movs	r1, #1
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff fe4b 	bl	8001734 <GPIOX_on>
	 PWM1_config(hspi, true, RA8875_PWM_CLK_DIV1024); // turn on the backlight using PWM
 8001a9e:	220a      	movs	r2, #10
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fe68 	bl	8001778 <PWM1_config>
	 PWM1_out(hspi, 255); // set blacklight to the highest
 8001aa8:	21ff      	movs	r1, #255	; 0xff
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fe93 	bl	80017d6 <PWM1_out>
	 fill_screen(hspi, RA8875_BLACK);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fea2 	bl	80017fc <fill_screen>
	 text_mode(hspi); // Switch from graphics mode to text mode
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff febe 	bl	800183a <text_mode>

}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <print_message>:

void print_message(SPI_HandleTypeDef *hspi, char *msg, int height) {
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b084      	sub	sp, #16
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
	if(msg != NULL) {
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d017      	beq.n	8001b08 <print_message+0x42>
		set_cursor(hspi,70, 235 + height * next_line_height);
 8001ad8:	2323      	movs	r3, #35	; 0x23
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	fb12 f303 	smulbb	r3, r2, r3
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	33eb      	adds	r3, #235	; 0xeb
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	2146      	movs	r1, #70	; 0x46
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f7ff fed1 	bl	8001896 <set_cursor>
		text_write(hspi, msg, strlen(msg)); // Write the string to the display
 8001af4:	68b8      	ldr	r0, [r7, #8]
 8001af6:	f7fe fb6b 	bl	80001d0 <strlen>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f7ff ff01 	bl	800190a <text_write>
	}
}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <main_display_info>:

/**
 * Display number of people in store, number of people in Queue and output Messages:
 * using height 35 as next line
 */
void main_display_info(SPI_HandleTypeDef *hspi, int num_people_in_store, int num_people_in_queue, int max_capacity, char *msg1, char* msg2, char* msg3, char* msg4) {
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b099      	sub	sp, #100	; 0x64
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
	char buffer[64];
	char msg_header[] = "     Messages:";
 8001b1e:	4b45      	ldr	r3, [pc, #276]	; (8001c34 <main_display_info+0x124>)
 8001b20:	f107 0410 	add.w	r4, r7, #16
 8001b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b26:	c407      	stmia	r4!, {r0, r1, r2}
 8001b28:	8023      	strh	r3, [r4, #0]
 8001b2a:	3402      	adds	r4, #2
 8001b2c:	0c1b      	lsrs	r3, r3, #16
 8001b2e:	7023      	strb	r3, [r4, #0]

	// Basic setup, clear screen, set color and set text size
	clear_screen(hspi);
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff ff11 	bl	8001958 <clear_screen>
	set_text_color(hspi, RA8875_WHITE);
 8001b36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff ff1f 	bl	800197e <set_text_color>
	enlarge_text(hspi, 2);
 8001b40:	2102      	movs	r1, #2
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f7ff ff68 	bl	8001a18 <enlarge_text>

	sprintf(buffer, "     Number of people in store: %d", num_people_in_store);
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	493a      	ldr	r1, [pc, #232]	; (8001c38 <main_display_info+0x128>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f008 f8e5 	bl	8009d20 <siprintf>
	set_cursor(hspi, 15, 20);
 8001b56:	2214      	movs	r2, #20
 8001b58:	210f      	movs	r1, #15
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f7ff fe9b 	bl	8001896 <set_cursor>
	text_write(hspi, buffer, strlen(buffer)); // Write the string to the display
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fb33 	bl	80001d0 <strlen>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	f107 0320 	add.w	r3, r7, #32
 8001b72:	4619      	mov	r1, r3
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f7ff fec8 	bl	800190a <text_write>

	sprintf(buffer, "     Number of people on queue: %d", num_people_in_queue);
 8001b7a:	f107 0320 	add.w	r3, r7, #32
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	492e      	ldr	r1, [pc, #184]	; (8001c3c <main_display_info+0x12c>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f008 f8cc 	bl	8009d20 <siprintf>
	set_cursor(hspi, 15, 55);
 8001b88:	2237      	movs	r2, #55	; 0x37
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7ff fe82 	bl	8001896 <set_cursor>
	text_write(hspi, buffer, strlen(buffer)); // Write the string to the display
 8001b92:	f107 0320 	add.w	r3, r7, #32
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fb1a 	bl	80001d0 <strlen>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	f107 0320 	add.w	r3, r7, #32
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff feaf 	bl	800190a <text_write>

	sprintf(buffer, "     Max Capacity allowed: %d", max_capacity);
 8001bac:	f107 0320 	add.w	r3, r7, #32
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	4923      	ldr	r1, [pc, #140]	; (8001c40 <main_display_info+0x130>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f008 f8b3 	bl	8009d20 <siprintf>
	set_cursor(hspi, 15, 90);
 8001bba:	225a      	movs	r2, #90	; 0x5a
 8001bbc:	210f      	movs	r1, #15
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff fe69 	bl	8001896 <set_cursor>
	text_write(hspi, buffer, strlen(buffer)); // Write the string to the display
 8001bc4:	f107 0320 	add.w	r3, r7, #32
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fb01 	bl	80001d0 <strlen>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	f107 0320 	add.w	r3, r7, #32
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f7ff fe96 	bl	800190a <text_write>

	set_cursor(hspi, 15, 200);
 8001bde:	22c8      	movs	r2, #200	; 0xc8
 8001be0:	210f      	movs	r1, #15
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f7ff fe57 	bl	8001896 <set_cursor>
	text_write(hspi, msg_header, strlen(msg_header)); // Write the string to the display
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe faef 	bl	80001d0 <strlen>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff fe84 	bl	800190a <text_write>

	print_message(hspi, msg1, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff ff5d 	bl	8001ac6 <print_message>
	print_message(hspi, msg2, 1);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7ff ff58 	bl	8001ac6 <print_message>
	print_message(hspi, msg3, 2);
 8001c16:	2202      	movs	r2, #2
 8001c18:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff ff53 	bl	8001ac6 <print_message>
	print_message(hspi, msg4, 3);
 8001c20:	2203      	movs	r2, #3
 8001c22:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f7ff ff4e 	bl	8001ac6 <print_message>
}
 8001c2a:	bf00      	nop
 8001c2c:	3764      	adds	r7, #100	; 0x64
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd90      	pop	{r4, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	0800c2a8 	.word	0x0800c2a8
 8001c38:	0800c240 	.word	0x0800c240
 8001c3c:	0800c264 	.word	0x0800c264
 8001c40:	0800c288 	.word	0x0800c288

08001c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08e      	sub	sp, #56	; 0x38
 8001c48:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c4a:	f002 f812 	bl	8003c72 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LCD_GLASS_Init();
 8001c4e:	f000 fccd 	bl	80025ec <BSP_LCD_GLASS_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c52:	f000 f8af 	bl	8001db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c56:	f000 fb65 	bl	8002324 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c5a:	f000 fb45 	bl	80022e8 <MX_DMA_Init>
  MX_LCD_Init();
 8001c5e:	f000 fa45 	bl	80020ec <MX_LCD_Init>
  MX_USART2_UART_Init();
 8001c62:	f000 fb11 	bl	8002288 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001c66:	f000 fadf 	bl	8002228 <MX_UART4_Init>
  MX_I2C1_Init();
 8001c6a:	f000 fa01 	bl	8002070 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c6e:	f000 fa75 	bl	800215c <MX_SPI1_Init>
  MX_TIM16_Init();
 8001c72:	f000 fab1 	bl	80021d8 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001c76:	f000 f921 	bl	8001ebc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c7a:	f000 f995 	bl	8001fa8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //RetargetInit(&huart2);
  printf("\r\nStarting\r\n");
 8001c7e:	4840      	ldr	r0, [pc, #256]	; (8001d80 <main+0x13c>)
 8001c80:	f008 f836 	bl	8009cf0 <puts>

  // INITS
  queue_length = 0; // init these first so the display works
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <main+0x140>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
  store_capacity = 0;
 8001c8a:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <main+0x144>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
  num_in_store = 0;
 8001c90:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <main+0x148>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
  main_display_init(&hspi1); // THIS SHOULD INIT FIRST so other modules can use it for error printing
 8001c96:	483e      	ldr	r0, [pc, #248]	; (8001d90 <main+0x14c>)
 8001c98:	f7ff fef2 	bl	8001a80 <main_display_init>
  main_display_info(&hspi1, num_in_store, queue_length, store_capacity, "Starting up...", "Please wait", NULL, NULL);
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <main+0x148>)
 8001c9e:	6819      	ldr	r1, [r3, #0]
 8001ca0:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <main+0x140>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <main+0x144>)
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9303      	str	r3, [sp, #12]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <main+0x150>)
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <main+0x154>)
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4835      	ldr	r0, [pc, #212]	; (8001d90 <main+0x14c>)
 8001cbc:	f7ff ff28 	bl	8001b10 <main_display_info>
  */

  //qr_scan_pending = 0;
  //HAL_UART_Receive_IT(qr_huart, qr_buf, QR_SIZE); // note - CALL THIS HERE to restart QR scanning after WiFi setup via QR

  thermopile_init(&hadc1, &hadc2);
 8001cc0:	4936      	ldr	r1, [pc, #216]	; (8001d9c <main+0x158>)
 8001cc2:	4837      	ldr	r0, [pc, #220]	; (8001da0 <main+0x15c>)
 8001cc4:	f001 f932 	bl	8002f2c <thermopile_init>
//  int nothing = pir_size; // number of no motions
//  bool send_enable = false; // flag to prevent constantly sending when threshold met
//  int sample_i = 0; // sample index
  //memset(pir_samples, 0, pir_size);

  printf("INIT DONE\r\n");
 8001cc8:	4836      	ldr	r0, [pc, #216]	; (8001da4 <main+0x160>)
 8001cca:	f008 f811 	bl	8009cf0 <puts>
  main_display_info(&hspi1, num_in_store, queue_length, store_capacity, "Setup complete!", NULL, NULL, NULL);
 8001cce:	4b2f      	ldr	r3, [pc, #188]	; (8001d8c <main+0x148>)
 8001cd0:	6819      	ldr	r1, [r3, #0]
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <main+0x140>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <main+0x144>)
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9303      	str	r3, [sp, #12]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	9302      	str	r3, [sp, #8]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <main+0x164>)
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	4603      	mov	r3, r0
 8001cec:	4828      	ldr	r0, [pc, #160]	; (8001d90 <main+0x14c>)
 8001cee:	f7ff ff0f 	bl	8001b10 <main_display_info>
  //get_status(); // get initial queue status for monitor
  HAL_TIM_Base_Start_IT(&htim16);
 8001cf2:	482e      	ldr	r0, [pc, #184]	; (8001dac <main+0x168>)
 8001cf4:	f006 fb20 	bl	8008338 <HAL_TIM_Base_Start_IT>

  int prevent_strobe = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
			prevent_strobe = 1;
		}
		*/
		//temeprature test
		while(1){
			int temp = getTemp();
 8001cfc:	f001 f95c 	bl	8002fb8 <getTemp>
 8001d00:	6238      	str	r0, [r7, #32]
			char temp_str[4];
			sprintf(temp_str, "%d", temp);
 8001d02:	f107 0310 	add.w	r3, r7, #16
 8001d06:	6a3a      	ldr	r2, [r7, #32]
 8001d08:	4929      	ldr	r1, [pc, #164]	; (8001db0 <main+0x16c>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f008 f808 	bl	8009d20 <siprintf>


			int Tsen = getTsen();
 8001d10:	f001 fabe 	bl	8003290 <getTsen>
 8001d14:	61f8      	str	r0, [r7, #28]
			char temp_str2[4];
			sprintf(temp_str2, "%d", Tsen);
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	4924      	ldr	r1, [pc, #144]	; (8001db0 <main+0x16c>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f007 fffe 	bl	8009d20 <siprintf>

			int thermopileV = getV();
 8001d24:	f001 fc28 	bl	8003578 <getV>
 8001d28:	61b8      	str	r0, [r7, #24]
			char temp_str3[4];
			sprintf(temp_str3, "%d", thermopileV);
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	491f      	ldr	r1, [pc, #124]	; (8001db0 <main+0x16c>)
 8001d32:	4618      	mov	r0, r3
 8001d34:	f007 fff4 	bl	8009d20 <siprintf>

			int Rsen = getR();
 8001d38:	f001 fd92 	bl	8003860 <getR>
 8001d3c:	6178      	str	r0, [r7, #20]
			char temp_str4[4];
			sprintf(temp_str4, "%d", Rsen);
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	491b      	ldr	r1, [pc, #108]	; (8001db0 <main+0x16c>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f007 ffeb 	bl	8009d20 <siprintf>

			HAL_Delay(1000);
 8001d4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d4e:	f002 f801 	bl	8003d54 <HAL_Delay>
			main_display_info(&hspi1, num_in_store, queue_length, store_capacity, temp_str,temp_str2 , temp_str3, temp_str4);
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <main+0x148>)
 8001d54:	6819      	ldr	r1, [r3, #0]
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <main+0x140>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <main+0x144>)
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	9303      	str	r3, [sp, #12]
 8001d62:	f107 0308 	add.w	r3, r7, #8
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	4603      	mov	r3, r0
 8001d76:	4806      	ldr	r0, [pc, #24]	; (8001d90 <main+0x14c>)
 8001d78:	f7ff feca 	bl	8001b10 <main_display_info>
		while(1){
 8001d7c:	e7be      	b.n	8001cfc <main+0xb8>
 8001d7e:	bf00      	nop
 8001d80:	0800c2b8 	.word	0x0800c2b8
 8001d84:	20000c80 	.word	0x20000c80
 8001d88:	20000c60 	.word	0x20000c60
 8001d8c:	20000c84 	.word	0x20000c84
 8001d90:	200002f0 	.word	0x200002f0
 8001d94:	0800c2c4 	.word	0x0800c2c4
 8001d98:	0800c2d0 	.word	0x0800c2d0
 8001d9c:	200000fc 	.word	0x200000fc
 8001da0:	200001b4 	.word	0x200001b4
 8001da4:	0800c2e0 	.word	0x0800c2e0
 8001da8:	0800c2ec 	.word	0x0800c2ec
 8001dac:	200003dc 	.word	0x200003dc
 8001db0:	0800c2fc 	.word	0x0800c2fc

08001db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b0b8      	sub	sp, #224	; 0xe0
 8001db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dbe:	2244      	movs	r2, #68	; 0x44
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f007 fe6f 	bl	8009aa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2288      	movs	r2, #136	; 0x88
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f007 fe61 	bl	8009aa6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001de4:	2318      	movs	r3, #24
 8001de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001dfc:	2360      	movs	r3, #96	; 0x60
 8001dfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f004 f963 	bl	80060d8 <HAL_RCC_OscConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001e18:	f000 fb32 	bl	8002480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e3a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f004 fcf9 	bl	8006838 <HAL_RCC_ClockConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001e4c:	f000 fb18 	bl	8002480 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <SystemClock_Config+0x104>)
 8001e52:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001e60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e64:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001e76:	2310      	movs	r3, #16
 8001e78:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001e86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e8a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f004 fed6 	bl	8006c40 <HAL_RCCEx_PeriphCLKConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001e9a:	f000 faf1 	bl	8002480 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ea2:	f004 f8c3 	bl	800602c <HAL_PWREx_ControlVoltageScaling>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001eac:	f000 fae8 	bl	8002480 <Error_Handler>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	37e0      	adds	r7, #224	; 0xe0
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	0002404a 	.word	0x0002404a

08001ebc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
 8001edc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ede:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001ee0:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <MX_ADC1_Init+0xe4>)
 8001ee2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001eea:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ef6:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001efe:	2204      	movs	r2, #4
 8001f00:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f02:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f08:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f3e:	4817      	ldr	r0, [pc, #92]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001f40:	f002 f900 	bl	8004144 <HAL_ADC_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001f4a:	f000 fa99 	bl	8002480 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	4810      	ldr	r0, [pc, #64]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001f5a:	f002 ffc3 	bl	8004ee4 <HAL_ADCEx_MultiModeConfigChannel>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f64:	f000 fa8c 	bl	8002480 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <MX_ADC1_Init+0xe8>)
 8001f6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f6c:	2306      	movs	r3, #6
 8001f6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f74:	237f      	movs	r3, #127	; 0x7f
 8001f76:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	4619      	mov	r1, r3
 8001f84:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_ADC1_Init+0xe0>)
 8001f86:	f002 fbc9 	bl	800471c <HAL_ADC_ConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001f90:	f000 fa76 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200001b4 	.word	0x200001b4
 8001fa0:	50040000 	.word	0x50040000
 8001fa4:	1d500080 	.word	0x1d500080

08001fa8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
 8001fbc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <MX_ADC2_Init+0xbc>)
 8001fc0:	4a29      	ldr	r2, [pc, #164]	; (8002068 <MX_ADC2_Init+0xc0>)
 8001fc2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <MX_ADC2_Init+0xbc>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <MX_ADC2_Init+0xbc>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <MX_ADC2_Init+0xbc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fd6:	4b23      	ldr	r3, [pc, #140]	; (8002064 <MX_ADC2_Init+0xbc>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <MX_ADC2_Init+0xbc>)
 8001fde:	2204      	movs	r2, #4
 8001fe0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <MX_ADC2_Init+0xbc>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <MX_ADC2_Init+0xbc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <MX_ADC2_Init+0xbc>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <MX_ADC2_Init+0xbc>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <MX_ADC2_Init+0xbc>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <MX_ADC2_Init+0xbc>)
 8002004:	2200      	movs	r2, #0
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_ADC2_Init+0xbc>)
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MX_ADC2_Init+0xbc>)
 8002012:	2200      	movs	r2, #0
 8002014:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <MX_ADC2_Init+0xbc>)
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800201e:	4811      	ldr	r0, [pc, #68]	; (8002064 <MX_ADC2_Init+0xbc>)
 8002020:	f002 f890 	bl	8004144 <HAL_ADC_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800202a:	f000 fa29 	bl	8002480 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_ADC2_Init+0xc4>)
 8002030:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002032:	2306      	movs	r3, #6
 8002034:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800203a:	237f      	movs	r3, #127	; 0x7f
 800203c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800203e:	2304      	movs	r3, #4
 8002040:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002046:	463b      	mov	r3, r7
 8002048:	4619      	mov	r1, r3
 800204a:	4806      	ldr	r0, [pc, #24]	; (8002064 <MX_ADC2_Init+0xbc>)
 800204c:	f002 fb66 	bl	800471c <HAL_ADC_ConfigChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8002056:	f000 fa13 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200000fc 	.word	0x200000fc
 8002068:	50040100 	.word	0x50040100
 800206c:	2a000400 	.word	0x2a000400

08002070 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <MX_I2C1_Init+0x74>)
 8002076:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <MX_I2C1_Init+0x78>)
 8002078:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <MX_I2C1_Init+0x74>)
 800207c:	f640 6214 	movw	r2, #3604	; 0xe14
 8002080:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <MX_I2C1_Init+0x74>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <MX_I2C1_Init+0x74>)
 800208a:	2201      	movs	r2, #1
 800208c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <MX_I2C1_Init+0x74>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <MX_I2C1_Init+0x74>)
 8002096:	2200      	movs	r2, #0
 8002098:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <MX_I2C1_Init+0x74>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <MX_I2C1_Init+0x74>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <MX_I2C1_Init+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <MX_I2C1_Init+0x74>)
 80020ae:	f003 fd19 	bl	8005ae4 <HAL_I2C_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020b8:	f000 f9e2 	bl	8002480 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020bc:	2100      	movs	r1, #0
 80020be:	4809      	ldr	r0, [pc, #36]	; (80020e4 <MX_I2C1_Init+0x74>)
 80020c0:	f003 fd9f 	bl	8005c02 <HAL_I2CEx_ConfigAnalogFilter>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80020ca:	f000 f9d9 	bl	8002480 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020ce:	2100      	movs	r1, #0
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <MX_I2C1_Init+0x74>)
 80020d2:	f003 fde1 	bl	8005c98 <HAL_I2CEx_ConfigDigitalFilter>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80020dc:	f000 f9d0 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000164 	.word	0x20000164
 80020e8:	40005400 	.word	0x40005400

080020ec <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <MX_LCD_Init+0x68>)
 80020f2:	4a19      	ldr	r2, [pc, #100]	; (8002158 <MX_LCD_Init+0x6c>)
 80020f4:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <MX_LCD_Init+0x68>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80020fc:	4b15      	ldr	r3, [pc, #84]	; (8002154 <MX_LCD_Init+0x68>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_2;
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <MX_LCD_Init+0x68>)
 8002104:	2204      	movs	r2, #4
 8002106:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <MX_LCD_Init+0x68>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_LCD_Init+0x68>)
 8002110:	2200      	movs	r2, #0
 8002112:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_LCD_Init+0x68>)
 8002116:	2200      	movs	r2, #0
 8002118:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_LCD_Init+0x68>)
 800211c:	2200      	movs	r2, #0
 800211e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_LCD_Init+0x68>)
 8002122:	2200      	movs	r2, #0
 8002124:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <MX_LCD_Init+0x68>)
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_LCD_Init+0x68>)
 800212e:	2200      	movs	r2, #0
 8002130:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <MX_LCD_Init+0x68>)
 8002134:	2200      	movs	r2, #0
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_LCD_Init+0x68>)
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <MX_LCD_Init+0x68>)
 8002140:	f003 fdf6 	bl	8005d30 <HAL_LCD_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_LCD_Init+0x62>
  {
    Error_Handler();
 800214a:	f000 f999 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000228 	.word	0x20000228
 8002158:	40002400 	.word	0x40002400

0800215c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <MX_SPI1_Init+0x74>)
 8002162:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <MX_SPI1_Init+0x78>)
 8002164:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <MX_SPI1_Init+0x74>)
 8002168:	f44f 7282 	mov.w	r2, #260	; 0x104
 800216c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <MX_SPI1_Init+0x74>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002174:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <MX_SPI1_Init+0x74>)
 8002176:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800217a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_SPI1_Init+0x74>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <MX_SPI1_Init+0x74>)
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_SPI1_Init+0x74>)
 800218a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800218e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_SPI1_Init+0x74>)
 8002192:	2208      	movs	r2, #8
 8002194:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <MX_SPI1_Init+0x74>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <MX_SPI1_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <MX_SPI1_Init+0x74>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MX_SPI1_Init+0x74>)
 80021aa:	2207      	movs	r2, #7
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <MX_SPI1_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_SPI1_Init+0x74>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_SPI1_Init+0x74>)
 80021bc:	f005 f9f0 	bl	80075a0 <HAL_SPI_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80021c6:	f000 f95b 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200002f0 	.word	0x200002f0
 80021d4:	40013000 	.word	0x40013000

080021d8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80021dc:	4b10      	ldr	r3, [pc, #64]	; (8002220 <MX_TIM16_Init+0x48>)
 80021de:	4a11      	ldr	r2, [pc, #68]	; (8002224 <MX_TIM16_Init+0x4c>)
 80021e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <MX_TIM16_Init+0x48>)
 80021e4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80021e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <MX_TIM16_Init+0x48>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <MX_TIM16_Init+0x48>)
 80021f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021f6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_TIM16_Init+0x48>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <MX_TIM16_Init+0x48>)
 8002200:	2200      	movs	r2, #0
 8002202:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MX_TIM16_Init+0x48>)
 8002206:	2200      	movs	r2, #0
 8002208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800220a:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_TIM16_Init+0x48>)
 800220c:	f006 f868 	bl	80082e0 <HAL_TIM_Base_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002216:	f000 f933 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200003dc 	.word	0x200003dc
 8002224:	40014400 	.word	0x40014400

08002228 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <MX_UART4_Init+0x58>)
 800222e:	4a15      	ldr	r2, [pc, #84]	; (8002284 <MX_UART4_Init+0x5c>)
 8002230:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <MX_UART4_Init+0x58>)
 8002234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002238:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <MX_UART4_Init+0x58>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <MX_UART4_Init+0x58>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <MX_UART4_Init+0x58>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <MX_UART4_Init+0x58>)
 800224e:	220c      	movs	r2, #12
 8002250:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <MX_UART4_Init+0x58>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <MX_UART4_Init+0x58>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <MX_UART4_Init+0x58>)
 8002260:	2200      	movs	r2, #0
 8002262:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MX_UART4_Init+0x58>)
 8002266:	2200      	movs	r2, #0
 8002268:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800226a:	4805      	ldr	r0, [pc, #20]	; (8002280 <MX_UART4_Init+0x58>)
 800226c:	f006 fa8e 	bl	800878c <HAL_UART_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002276:	f000 f903 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000270 	.word	0x20000270
 8002284:	40004c00 	.word	0x40004c00

08002288 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <MX_USART2_UART_Init+0x5c>)
 8002290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 8002294:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002298:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022ae:	220c      	movs	r2, #12
 80022b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_USART2_UART_Init+0x58>)
 80022cc:	f006 fa5e 	bl	800878c <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022d6:	f000 f8d3 	bl	8002480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000358 	.word	0x20000358
 80022e4:	40004400 	.word	0x40004400

080022e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <MX_DMA_Init+0x38>)
 80022f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <MX_DMA_Init+0x38>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6493      	str	r3, [r2, #72]	; 0x48
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <MX_DMA_Init+0x38>)
 80022fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	203c      	movs	r0, #60	; 0x3c
 800230c:	f002 ff71 	bl	80051f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8002310:	203c      	movs	r0, #60	; 0x3c
 8002312:	f002 ff8a 	bl	800522a <HAL_NVIC_EnableIRQ>

}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000

08002324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	4b34      	ldr	r3, [pc, #208]	; (800240c <MX_GPIO_Init+0xe8>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	4a33      	ldr	r2, [pc, #204]	; (800240c <MX_GPIO_Init+0xe8>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002346:	4b31      	ldr	r3, [pc, #196]	; (800240c <MX_GPIO_Init+0xe8>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	4b2e      	ldr	r3, [pc, #184]	; (800240c <MX_GPIO_Init+0xe8>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	4a2d      	ldr	r2, [pc, #180]	; (800240c <MX_GPIO_Init+0xe8>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235e:	4b2b      	ldr	r3, [pc, #172]	; (800240c <MX_GPIO_Init+0xe8>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <MX_GPIO_Init+0xe8>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	4a27      	ldr	r2, [pc, #156]	; (800240c <MX_GPIO_Init+0xe8>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002376:	4b25      	ldr	r3, [pc, #148]	; (800240c <MX_GPIO_Init+0xe8>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002382:	4b22      	ldr	r3, [pc, #136]	; (800240c <MX_GPIO_Init+0xe8>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	4a21      	ldr	r2, [pc, #132]	; (800240c <MX_GPIO_Init+0xe8>)
 8002388:	f043 0310 	orr.w	r3, r3, #16
 800238c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <MX_GPIO_Init+0xe8>)
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <MX_GPIO_Init+0xe8>)
 800239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239e:	4a1b      	ldr	r2, [pc, #108]	; (800240c <MX_GPIO_Init+0xe8>)
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <MX_GPIO_Init+0xe8>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2104      	movs	r1, #4
 80023b6:	4816      	ldr	r0, [pc, #88]	; (8002410 <MX_GPIO_Init+0xec>)
 80023b8:	f003 fb7c 	bl	8005ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RST_Pin|CS_Pin, GPIO_PIN_RESET);
 80023bc:	2200      	movs	r2, #0
 80023be:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80023c2:	4814      	ldr	r0, [pc, #80]	; (8002414 <MX_GPIO_Init+0xf0>)
 80023c4:	f003 fb76 	bl	8005ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023c8:	2304      	movs	r3, #4
 80023ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	480c      	ldr	r0, [pc, #48]	; (8002410 <MX_GPIO_Init+0xec>)
 80023e0:	f003 f9c0 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|CS_Pin;
 80023e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	4805      	ldr	r0, [pc, #20]	; (8002414 <MX_GPIO_Init+0xf0>)
 80023fe:	f003 f9b1 	bl	8005764 <HAL_GPIO_Init>

}
 8002402:	bf00      	nop
 8002404:	3728      	adds	r7, #40	; 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	48000400 	.word	0x48000400
 8002414:	48001000 	.word	0x48001000

08002418 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */

// Only used for QR callback.
// If triggered, a QR code has been scanned, set flag.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	printf("RX CPLT CALLBACK\r\n");
 8002420:	4808      	ldr	r0, [pc, #32]	; (8002444 <HAL_UART_RxCpltCallback+0x2c>)
 8002422:	f007 fc65 	bl	8009cf0 <puts>
	if (huart == qr_huart) {
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_UART_RxCpltCallback+0x30>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d105      	bne.n	800243c <HAL_UART_RxCpltCallback+0x24>
		printf("QR INT\r\n");
 8002430:	4806      	ldr	r0, [pc, #24]	; (800244c <HAL_UART_RxCpltCallback+0x34>)
 8002432:	f007 fc5d 	bl	8009cf0 <puts>
		qr_scan_pending = 1;
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_UART_RxCpltCallback+0x38>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]
	}
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	0800c300 	.word	0x0800c300
 8002448:	20000428 	.word	0x20000428
 800244c:	0800c314 	.word	0x0800c314
 8002450:	20000424 	.word	0x20000424

08002454 <HAL_TIM_PeriodElapsedCallback>:

// Called when timer is up.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    // if is display status timer, get status
	if (htim == &htim16 ) {
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a06      	ldr	r2, [pc, #24]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d104      	bne.n	800246e <HAL_TIM_PeriodElapsedCallback+0x1a>
		printf("GETTING STATUS\r\n");
 8002464:	4805      	ldr	r0, [pc, #20]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002466:	f007 fc43 	bl	8009cf0 <puts>
		get_status();
 800246a:	f001 fbc3 	bl	8003bf4 <get_status>
	}
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200003dc 	.word	0x200003dc
 800247c:	0800c31c 	.word	0x0800c31c

08002480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db04      	blt.n	80024a6 <_isatty+0x18>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	dc01      	bgt.n	80024a6 <_isatty+0x18>
    return 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e005      	b.n	80024b2 <_isatty+0x24>

  errno = EBADF;
 80024a6:	f007 fac1 	bl	8009a2c <__errno>
 80024aa:	4602      	mov	r2, r0
 80024ac:	2309      	movs	r3, #9
 80024ae:	6013      	str	r3, [r2, #0]
  return 0;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <_write>:

int _write(int fd, char* ptr, int len) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d002      	beq.n	80024d4 <_write+0x18>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d111      	bne.n	80024f8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <_write+0x54>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	b29a      	uxth	r2, r3
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	f006 f9a1 	bl	8008828 <HAL_UART_Transmit>
 80024e6:	4603      	mov	r3, r0
 80024e8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <_write+0x38>
      return len;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	e008      	b.n	8002506 <_write+0x4a>
    else
      return EIO;
 80024f4:	2305      	movs	r3, #5
 80024f6:	e006      	b.n	8002506 <_write+0x4a>
  }
  errno = EBADF;
 80024f8:	f007 fa98 	bl	8009a2c <__errno>
 80024fc:	4602      	mov	r2, r0
 80024fe:	2309      	movs	r3, #9
 8002500:	6013      	str	r3, [r2, #0]
  return -1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000438 	.word	0x20000438

08002514 <_close>:

int _close(int fd) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	db04      	blt.n	800252c <_close+0x18>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b02      	cmp	r3, #2
 8002526:	dc01      	bgt.n	800252c <_close+0x18>
    return 0;
 8002528:	2300      	movs	r3, #0
 800252a:	e006      	b.n	800253a <_close+0x26>

  errno = EBADF;
 800252c:	f007 fa7e 	bl	8009a2c <__errno>
 8002530:	4602      	mov	r2, r0
 8002532:	2309      	movs	r3, #9
 8002534:	6013      	str	r3, [r2, #0]
  return -1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800254e:	f007 fa6d 	bl	8009a2c <__errno>
 8002552:	4602      	mov	r2, r0
 8002554:	2309      	movs	r3, #9
 8002556:	6013      	str	r3, [r2, #0]
  return -1;
 8002558:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_read>:

int _read(int fd, char* ptr, int len) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d110      	bne.n	8002598 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <_read+0x4c>)
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	2201      	movs	r2, #1
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	f006 f9e4 	bl	800894e <HAL_UART_Receive>
 8002586:	4603      	mov	r3, r0
 8002588:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <_read+0x30>
      return 1;
 8002590:	2301      	movs	r3, #1
 8002592:	e008      	b.n	80025a6 <_read+0x42>
    else
      return EIO;
 8002594:	2305      	movs	r3, #5
 8002596:	e006      	b.n	80025a6 <_read+0x42>
  }
  errno = EBADF;
 8002598:	f007 fa48 	bl	8009a2c <__errno>
 800259c:	4602      	mov	r2, r0
 800259e:	2309      	movs	r3, #9
 80025a0:	6013      	str	r3, [r2, #0]
  return -1;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000438 	.word	0x20000438

080025b4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	db08      	blt.n	80025d6 <_fstat+0x22>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	dc05      	bgt.n	80025d6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025d0:	605a      	str	r2, [r3, #4]
    return 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e005      	b.n	80025e2 <_fstat+0x2e>
  }

  errno = EBADF;
 80025d6:	f007 fa29 	bl	8009a2c <__errno>
 80025da:	4602      	mov	r2, r0
 80025dc:	2309      	movs	r3, #9
 80025de:	6013      	str	r3, [r2, #0]
  return 0;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 80025f2:	4a1a      	ldr	r2, [pc, #104]	; (800265c <BSP_LCD_GLASS_Init+0x70>)
 80025f4:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 80025fe:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002602:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 8002606:	220c      	movs	r2, #12
 8002608:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 800260c:	2240      	movs	r2, #64	; 0x40
 800260e:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 8002612:	2200      	movs	r2, #0
 8002614:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 8002618:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800261c:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 800261e:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 8002620:	2200      	movs	r2, #0
 8002622:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 8002626:	2240      	movs	r2, #64	; 0x40
 8002628:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 800262c:	2200      	movs	r2, #0
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 8002632:	2200      	movs	r2, #0
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 8002638:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8002644:	4804      	ldr	r0, [pc, #16]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 8002646:	f000 f815 	bl	8002674 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 800264a:	4803      	ldr	r0, [pc, #12]	; (8002658 <BSP_LCD_GLASS_Init+0x6c>)
 800264c:	f003 fb70 	bl	8005d30 <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 8002650:	f000 f806 	bl	8002660 <BSP_LCD_GLASS_Clear>
}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}
 8002658:	2000044c 	.word	0x2000044c
 800265c:	40002400 	.word	0x40002400

08002660 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle); 
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <BSP_LCD_GLASS_Clear+0x10>)
 8002666:	f003 fc23 	bl	8005eb0 <HAL_LCD_Clear>
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000044c 	.word	0x2000044c

08002674 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b0c0      	sub	sp, #256	; 0x100
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800267c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 800268c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002690:	2244      	movs	r2, #68	; 0x44
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f007 fa06 	bl	8009aa6 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 800269a:	f107 0320 	add.w	r3, r7, #32
 800269e:	2288      	movs	r2, #136	; 0x88
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f007 f9ff 	bl	8009aa6 <memset>
  
  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a8:	4b51      	ldr	r3, [pc, #324]	; (80027f0 <LCD_MspInit+0x17c>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	4a50      	ldr	r2, [pc, #320]	; (80027f0 <LCD_MspInit+0x17c>)
 80026ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b2:	6593      	str	r3, [r2, #88]	; 0x58
 80026b4:	4b4e      	ldr	r3, [pc, #312]	; (80027f0 <LCD_MspInit+0x17c>)
 80026b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	69fb      	ldr	r3, [r7, #28]
  
  /*##-2- Configure LSE as RTC clock soucre ###################################*/ 
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 80026c0:	2304      	movs	r3, #4
 80026c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 80026d2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 fcfe 	bl	80060d8 <HAL_RCC_OscConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d000      	beq.n	80026e4 <LCD_MspInit+0x70>
  { 
    while(1);
 80026e2:	e7fe      	b.n	80026e2 <LCD_MspInit+0x6e>
  }
  
  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e8:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80026ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 80026f2:	f107 0320 	add.w	r3, r7, #32
 80026f6:	4618      	mov	r0, r3
 80026f8:	f004 faa2 	bl	8006c40 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fc:	4b3c      	ldr	r3, [pc, #240]	; (80027f0 <LCD_MspInit+0x17c>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	4a3b      	ldr	r2, [pc, #236]	; (80027f0 <LCD_MspInit+0x17c>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002708:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <LCD_MspInit+0x17c>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <LCD_MspInit+0x17c>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	4a35      	ldr	r2, [pc, #212]	; (80027f0 <LCD_MspInit+0x17c>)
 800271a:	f043 0302 	orr.w	r3, r3, #2
 800271e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002720:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <LCD_MspInit+0x17c>)
 8002722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800272c:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <LCD_MspInit+0x17c>)
 800272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002730:	4a2f      	ldr	r2, [pc, #188]	; (80027f0 <LCD_MspInit+0x17c>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002738:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <LCD_MspInit+0x17c>)
 800273a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <LCD_MspInit+0x17c>)
 8002746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002748:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <LCD_MspInit+0x17c>)
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <LCD_MspInit+0x17c>)
 8002752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]

  
  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 800275c:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8002760:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8002776:	230b      	movs	r3, #11
 8002778:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 800277c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002780:	4619      	mov	r1, r3
 8002782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002786:	f002 ffed 	bl	8005764 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 800278a:	f24f 2333 	movw	r3, #62003	; 0xf233
 800278e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8002792:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002796:	4619      	mov	r1, r3
 8002798:	4816      	ldr	r0, [pc, #88]	; (80027f4 <LCD_MspInit+0x180>)
 800279a:	f002 ffe3 	bl	8005764 <HAL_GPIO_Init>
  
  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 800279e:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80027a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80027a6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80027aa:	4619      	mov	r1, r3
 80027ac:	4812      	ldr	r0, [pc, #72]	; (80027f8 <LCD_MspInit+0x184>)
 80027ae:	f002 ffd9 	bl	8005764 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 80027b2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80027b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 80027ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80027be:	4619      	mov	r1, r3
 80027c0:	480e      	ldr	r0, [pc, #56]	; (80027fc <LCD_MspInit+0x188>)
 80027c2:	f002 ffcf 	bl	8005764 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 80027c6:	2002      	movs	r0, #2
 80027c8:	f001 fac4 	bl	8003d54 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <LCD_MspInit+0x17c>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <LCD_MspInit+0x17c>)
 80027d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d6:	6593      	str	r3, [r2, #88]	; 0x58
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <LCD_MspInit+0x17c>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
}
 80027e4:	bf00      	nop
 80027e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	48000400 	.word	0x48000400
 80027f8:	48000800 	.word	0x48000800
 80027fc:	48000c00 	.word	0x48000c00

08002800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <HAL_MspInit+0x44>)
 8002808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280a:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <HAL_MspInit+0x44>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6613      	str	r3, [r2, #96]	; 0x60
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <HAL_MspInit+0x44>)
 8002814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_MspInit+0x44>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <HAL_MspInit+0x44>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002828:	6593      	str	r3, [r2, #88]	; 0x58
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_MspInit+0x44>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000

08002848 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	; 0x30
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a34      	ldr	r2, [pc, #208]	; (8002938 <HAL_ADC_MspInit+0xf0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d12e      	bne.n	80028c8 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800286a:	4b34      	ldr	r3, [pc, #208]	; (800293c <HAL_ADC_MspInit+0xf4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	4a32      	ldr	r2, [pc, #200]	; (800293c <HAL_ADC_MspInit+0xf4>)
 8002872:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002874:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_ADC_MspInit+0xf4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d10b      	bne.n	8002894 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800287c:	4b30      	ldr	r3, [pc, #192]	; (8002940 <HAL_ADC_MspInit+0xf8>)
 800287e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002880:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <HAL_ADC_MspInit+0xf8>)
 8002882:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002888:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_ADC_MspInit+0xf8>)
 800288a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_ADC_MspInit+0xf8>)
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002898:	4a29      	ldr	r2, [pc, #164]	; (8002940 <HAL_ADC_MspInit+0xf8>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a0:	4b27      	ldr	r3, [pc, #156]	; (8002940 <HAL_ADC_MspInit+0xf8>)
 80028a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028ac:	2304      	movs	r3, #4
 80028ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80028b0:	230b      	movs	r3, #11
 80028b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	4619      	mov	r1, r3
 80028be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c2:	f002 ff4f 	bl	8005764 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80028c6:	e032      	b.n	800292e <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <HAL_ADC_MspInit+0xfc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d12d      	bne.n	800292e <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC_CLK_ENABLED++;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <HAL_ADC_MspInit+0xf4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3301      	adds	r3, #1
 80028d8:	4a18      	ldr	r2, [pc, #96]	; (800293c <HAL_ADC_MspInit+0xf4>)
 80028da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_ADC_MspInit+0xf4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d10b      	bne.n	80028fc <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <HAL_ADC_MspInit+0xf8>)
 80028e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e8:	4a15      	ldr	r2, [pc, #84]	; (8002940 <HAL_ADC_MspInit+0xf8>)
 80028ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <HAL_ADC_MspInit+0xf8>)
 80028f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_ADC_MspInit+0xf8>)
 80028fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002900:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <HAL_ADC_MspInit+0xf8>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002908:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_ADC_MspInit+0xf8>)
 800290a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002914:	2320      	movs	r3, #32
 8002916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002918:	230b      	movs	r3, #11
 800291a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002920:	f107 031c 	add.w	r3, r7, #28
 8002924:	4619      	mov	r1, r3
 8002926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800292a:	f002 ff1b 	bl	8005764 <HAL_GPIO_Init>
}
 800292e:	bf00      	nop
 8002930:	3730      	adds	r7, #48	; 0x30
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	50040000 	.word	0x50040000
 800293c:	20000094 	.word	0x20000094
 8002940:	40021000 	.word	0x40021000
 8002944:	50040100 	.word	0x50040100

08002948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <HAL_I2C_MspInit+0x7c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d127      	bne.n	80029ba <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <HAL_I2C_MspInit+0x80>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <HAL_I2C_MspInit+0x80>)
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_I2C_MspInit+0x80>)
 8002978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002982:	23c0      	movs	r3, #192	; 0xc0
 8002984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002986:	2312      	movs	r3, #18
 8002988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800298a:	2301      	movs	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298e:	2303      	movs	r3, #3
 8002990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002992:	2304      	movs	r3, #4
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4619      	mov	r1, r3
 800299c:	480b      	ldr	r0, [pc, #44]	; (80029cc <HAL_I2C_MspInit+0x84>)
 800299e:	f002 fee1 	bl	8005764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_I2C_MspInit+0x80>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <HAL_I2C_MspInit+0x80>)
 80029a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029ac:	6593      	str	r3, [r2, #88]	; 0x58
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_I2C_MspInit+0x80>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029ba:	bf00      	nop
 80029bc:	3728      	adds	r7, #40	; 0x28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40005400 	.word	0x40005400
 80029c8:	40021000 	.word	0x40021000
 80029cc:	48000400 	.word	0x48000400

080029d0 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a26      	ldr	r2, [pc, #152]	; (8002a88 <HAL_LCD_MspInit+0xb8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d145      	bne.n	8002a7e <HAL_LCD_MspInit+0xae>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <HAL_LCD_MspInit+0xbc>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	4a25      	ldr	r2, [pc, #148]	; (8002a8c <HAL_LCD_MspInit+0xbc>)
 80029f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fc:	6593      	str	r3, [r2, #88]	; 0x58
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <HAL_LCD_MspInit+0xbc>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_LCD_MspInit+0xbc>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <HAL_LCD_MspInit+0xbc>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a16:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_LCD_MspInit+0xbc>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <HAL_LCD_MspInit+0xbc>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_LCD_MspInit+0xbc>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2e:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <HAL_LCD_MspInit+0xbc>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
    /**LCD GPIO Configuration
    PC3     ------> LCD_VLCD
    PA8     ------> LCD_COM0
    PA9     ------> LCD_COM1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002a4a:	230b      	movs	r3, #11
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	480e      	ldr	r0, [pc, #56]	; (8002a90 <HAL_LCD_MspInit+0xc0>)
 8002a56:	f002 fe85 	bl	8005764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002a6c:	230b      	movs	r3, #11
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4619      	mov	r1, r3
 8002a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7a:	f002 fe73 	bl	8005764 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8002a7e:	bf00      	nop
 8002a80:	3728      	adds	r7, #40	; 0x28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40002400 	.word	0x40002400
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	48000800 	.word	0x48000800

08002a94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a17      	ldr	r2, [pc, #92]	; (8002b10 <HAL_SPI_MspInit+0x7c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d128      	bne.n	8002b08 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_SPI_MspInit+0x80>)
 8002ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aba:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <HAL_SPI_MspInit+0x80>)
 8002abc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ac0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <HAL_SPI_MspInit+0x80>)
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_SPI_MspInit+0x80>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <HAL_SPI_MspInit+0x80>)
 8002ad4:	f043 0310 	orr.w	r3, r3, #16
 8002ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <HAL_SPI_MspInit+0x80>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002ae6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002af8:	2305      	movs	r3, #5
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4805      	ldr	r0, [pc, #20]	; (8002b18 <HAL_SPI_MspInit+0x84>)
 8002b04:	f002 fe2e 	bl	8005764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b08:	bf00      	nop
 8002b0a:	3728      	adds	r7, #40	; 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40013000 	.word	0x40013000
 8002b14:	40021000 	.word	0x40021000
 8002b18:	48001000 	.word	0x48001000

08002b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0d      	ldr	r2, [pc, #52]	; (8002b60 <HAL_TIM_Base_MspInit+0x44>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d113      	bne.n	8002b56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_TIM_Base_MspInit+0x48>)
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <HAL_TIM_Base_MspInit+0x48>)
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b38:	6613      	str	r3, [r2, #96]	; 0x60
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_TIM_Base_MspInit+0x48>)
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2019      	movs	r0, #25
 8002b4c:	f002 fb51 	bl	80051f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002b50:	2019      	movs	r0, #25
 8002b52:	f002 fb6a 	bl	800522a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40014400 	.word	0x40014400
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	; 0x30
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 031c 	add.w	r3, r7, #28
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a59      	ldr	r2, [pc, #356]	; (8002cec <HAL_UART_MspInit+0x184>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d15a      	bne.n	8002c40 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b8a:	4b59      	ldr	r3, [pc, #356]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	4a58      	ldr	r2, [pc, #352]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002b90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b94:	6593      	str	r3, [r2, #88]	; 0x58
 8002b96:	4b56      	ldr	r3, [pc, #344]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	4b53      	ldr	r3, [pc, #332]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	4a52      	ldr	r2, [pc, #328]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bae:	4b50      	ldr	r3, [pc, #320]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002bca:	2308      	movs	r3, #8
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bce:	f107 031c 	add.w	r3, r7, #28
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd8:	f002 fdc4 	bl	8005764 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8002bdc:	4b45      	ldr	r3, [pc, #276]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002bde:	4a46      	ldr	r2, [pc, #280]	; (8002cf8 <HAL_UART_MspInit+0x190>)
 8002be0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8002be2:	4b44      	ldr	r3, [pc, #272]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002be4:	2202      	movs	r2, #2
 8002be6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002be8:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bee:	4b41      	ldr	r3, [pc, #260]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bfa:	4b3e      	ldr	r3, [pc, #248]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c00:	4b3c      	ldr	r3, [pc, #240]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002c06:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c0c:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002c12:	4838      	ldr	r0, [pc, #224]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002c14:	f002 fb24 	bl	8005260 <HAL_DMA_Init>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8002c1e:	f7ff fc2f 	bl	8002480 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a33      	ldr	r2, [pc, #204]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002c26:	66da      	str	r2, [r3, #108]	; 0x6c
 8002c28:	4a32      	ldr	r2, [pc, #200]	; (8002cf4 <HAL_UART_MspInit+0x18c>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	2034      	movs	r0, #52	; 0x34
 8002c34:	f002 fadd 	bl	80051f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002c38:	2034      	movs	r0, #52	; 0x34
 8002c3a:	f002 faf6 	bl	800522a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c3e:	e051      	b.n	8002ce4 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2d      	ldr	r2, [pc, #180]	; (8002cfc <HAL_UART_MspInit+0x194>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d14c      	bne.n	8002ce4 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c4a:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	4a28      	ldr	r2, [pc, #160]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c54:	6593      	str	r3, [r2, #88]	; 0x58
 8002c56:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c62:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	4a1c      	ldr	r2, [pc, #112]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002c80:	f043 0308 	orr.w	r3, r3, #8
 8002c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_UART_MspInit+0x188>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c92:	2308      	movs	r3, #8
 8002c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	2302      	movs	r3, #2
 8002c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ca2:	2307      	movs	r3, #7
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca6:	f107 031c 	add.w	r3, r7, #28
 8002caa:	4619      	mov	r1, r3
 8002cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb0:	f002 fd58 	bl	8005764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cc4:	2307      	movs	r3, #7
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cc8:	f107 031c 	add.w	r3, r7, #28
 8002ccc:	4619      	mov	r1, r3
 8002cce:	480c      	ldr	r0, [pc, #48]	; (8002d00 <HAL_UART_MspInit+0x198>)
 8002cd0:	f002 fd48 	bl	8005764 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	2026      	movs	r0, #38	; 0x26
 8002cda:	f002 fa8a 	bl	80051f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cde:	2026      	movs	r0, #38	; 0x26
 8002ce0:	f002 faa3 	bl	800522a <HAL_NVIC_EnableIRQ>
}
 8002ce4:	bf00      	nop
 8002ce6:	3730      	adds	r7, #48	; 0x30
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40004c00 	.word	0x40004c00
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	200000a8 	.word	0x200000a8
 8002cf8:	40020458 	.word	0x40020458
 8002cfc:	40004400 	.word	0x40004400
 8002d00:	48000c00 	.word	0x48000c00

08002d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d16:	e7fe      	b.n	8002d16 <HardFault_Handler+0x4>

08002d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <MemManage_Handler+0x4>

08002d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d22:	e7fe      	b.n	8002d22 <BusFault_Handler+0x4>

08002d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <UsageFault_Handler+0x4>

08002d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d58:	f000 ffde 	bl	8003d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002d64:	4802      	ldr	r0, [pc, #8]	; (8002d70 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002d66:	f005 fb11 	bl	800838c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200003dc 	.word	0x200003dc

08002d74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d78:	4802      	ldr	r0, [pc, #8]	; (8002d84 <USART2_IRQHandler+0x10>)
 8002d7a:	f005 ffa5 	bl	8008cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000358 	.word	0x20000358

08002d88 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002d8c:	4827      	ldr	r0, [pc, #156]	; (8002e2c <UART4_IRQHandler+0xa4>)
 8002d8e:	f005 ff9b 	bl	8008cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  // If this is an IDLE interrupt
  if(RESET != __HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE)) {
 8002d92:	4b26      	ldr	r3, [pc, #152]	; (8002e2c <UART4_IRQHandler+0xa4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d143      	bne.n	8002e28 <UART4_IRQHandler+0xa0>
  	__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <UART4_IRQHandler+0xa4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2210      	movs	r2, #16
 8002da6:	621a      	str	r2, [r3, #32]
  	HAL_UART_DMAStop(&huart4);
 8002da8:	4820      	ldr	r0, [pc, #128]	; (8002e2c <UART4_IRQHandler+0xa4>)
 8002daa:	f005 ff21 	bl	8008bf0 <HAL_UART_DMAStop>

    // determine current state and state to transition to
    // in message transmission process
  	if (wait_for_send_ok == 1) {
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <UART4_IRQHandler+0xa8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d11a      	bne.n	8002dec <UART4_IRQHandler+0x64>
  		if (strstr(esp_recv_buf, ">") == NULL) { // have not gotten permission to send
 8002db6:	213e      	movs	r1, #62	; 0x3e
 8002db8:	481e      	ldr	r0, [pc, #120]	; (8002e34 <UART4_IRQHandler+0xac>)
 8002dba:	f006 ffd1 	bl	8009d60 <strchr>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10c      	bne.n	8002dde <UART4_IRQHandler+0x56>
			  HAL_UART_Receive_DMA(esp_huart, esp_recv_buf, 2000);
 8002dc4:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <UART4_IRQHandler+0xb0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002dcc:	4919      	ldr	r1, [pc, #100]	; (8002e34 <UART4_IRQHandler+0xac>)
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f005 fe8a 	bl	8008ae8 <HAL_UART_Receive_DMA>
			  printf("Not good to send: %s\r\n", esp_recv_buf);
 8002dd4:	4917      	ldr	r1, [pc, #92]	; (8002e34 <UART4_IRQHandler+0xac>)
 8002dd6:	4819      	ldr	r0, [pc, #100]	; (8002e3c <UART4_IRQHandler+0xb4>)
 8002dd8:	f006 ff16 	bl	8009c08 <iprintf>
			  return;
 8002ddc:	e024      	b.n	8002e28 <UART4_IRQHandler+0xa0>
      } else {
        wait_for_send_ok = 0;
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <UART4_IRQHandler+0xa8>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
        good_for_send = 1;
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <UART4_IRQHandler+0xb8>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	e01d      	b.n	8002e28 <UART4_IRQHandler+0xa0>
      }
  	} else if (wait_for_message_response == 1) {
 8002dec:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <UART4_IRQHandler+0xbc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d119      	bne.n	8002e28 <UART4_IRQHandler+0xa0>
  		if (strstr(esp_recv_buf, "HTTP") == NULL) { // have not gotten actual server response
 8002df4:	4914      	ldr	r1, [pc, #80]	; (8002e48 <UART4_IRQHandler+0xc0>)
 8002df6:	480f      	ldr	r0, [pc, #60]	; (8002e34 <UART4_IRQHandler+0xac>)
 8002df8:	f006 ffbf 	bl	8009d7a <strstr>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10c      	bne.n	8002e1c <UART4_IRQHandler+0x94>
        HAL_UART_Receive_DMA(esp_huart, esp_recv_buf, 2000);
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <UART4_IRQHandler+0xb0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002e0a:	490a      	ldr	r1, [pc, #40]	; (8002e34 <UART4_IRQHandler+0xac>)
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f005 fe6b 	bl	8008ae8 <HAL_UART_Receive_DMA>
        printf("Not real response: %s\r\n", esp_recv_buf);
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <UART4_IRQHandler+0xac>)
 8002e14:	480d      	ldr	r0, [pc, #52]	; (8002e4c <UART4_IRQHandler+0xc4>)
 8002e16:	f006 fef7 	bl	8009c08 <iprintf>
        return;
 8002e1a:	e005      	b.n	8002e28 <UART4_IRQHandler+0xa0>
      } else {
        wait_for_message_response = 0;
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <UART4_IRQHandler+0xbc>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
        message_pending_handling = 1;
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <UART4_IRQHandler+0xc8>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
      }
  	}
  }
  /* USER CODE END UART4_IRQn 1 */
}
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000270 	.word	0x20000270
 8002e30:	20000c64 	.word	0x20000c64
 8002e34:	20000490 	.word	0x20000490
 8002e38:	20000c68 	.word	0x20000c68
 8002e3c:	0800c32c 	.word	0x0800c32c
 8002e40:	20000c74 	.word	0x20000c74
 8002e44:	20000488 	.word	0x20000488
 8002e48:	0800c344 	.word	0x0800c344
 8002e4c:	0800c34c 	.word	0x0800c34c
 8002e50:	2000048c 	.word	0x2000048c

08002e54 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <DMA2_Channel5_IRQHandler+0x10>)
 8002e5a:	f002 fb98 	bl	800558e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200000a8 	.word	0x200000a8

08002e68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <_sbrk+0x50>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <_sbrk+0x16>
		heap_end = &end;
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <_sbrk+0x50>)
 8002e7a:	4a10      	ldr	r2, [pc, #64]	; (8002ebc <_sbrk+0x54>)
 8002e7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <_sbrk+0x50>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <_sbrk+0x50>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	466a      	mov	r2, sp
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d907      	bls.n	8002ea2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e92:	f006 fdcb 	bl	8009a2c <__errno>
 8002e96:	4602      	mov	r2, r0
 8002e98:	230c      	movs	r3, #12
 8002e9a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea0:	e006      	b.n	8002eb0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <_sbrk+0x50>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4a03      	ldr	r2, [pc, #12]	; (8002eb8 <_sbrk+0x50>)
 8002eac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000098 	.word	0x20000098
 8002ebc:	20000c90 	.word	0x20000c90

08002ec0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ec4:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <SystemInit+0x64>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	4a16      	ldr	r2, [pc, #88]	; (8002f24 <SystemInit+0x64>)
 8002ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <SystemInit+0x68>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <SystemInit+0x68>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <SystemInit+0x68>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <SystemInit+0x68>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a0f      	ldr	r2, [pc, #60]	; (8002f28 <SystemInit+0x68>)
 8002eec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002ef0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002ef4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <SystemInit+0x68>)
 8002ef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002efc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <SystemInit+0x68>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <SystemInit+0x68>)
 8002f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <SystemInit+0x68>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <SystemInit+0x64>)
 8002f12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f16:	609a      	str	r2, [r3, #8]
#endif
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00
 8002f28:	40021000 	.word	0x40021000

08002f2c <thermopile_init>:
#include "thermopile.h"

void thermopile_init(ADC_HandleTypeDef *h1, ADC_HandleTypeDef *h2) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
	beta = 3955; //Kelvin
 8002f36:	4b15      	ldr	r3, [pc, #84]	; (8002f8c <thermopile_init+0x60>)
 8002f38:	f640 7273 	movw	r2, #3955	; 0xf73
 8002f3c:	601a      	str	r2, [r3, #0]
	R25 = 118500;   //ohms
 8002f3e:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <thermopile_init+0x64>)
 8002f40:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <thermopile_init+0x68>)
 8002f42:	601a      	str	r2, [r3, #0]
	T25 = 25;    //celsius
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <thermopile_init+0x6c>)
 8002f46:	2219      	movs	r2, #25
 8002f48:	601a      	str	r2, [r3, #0]
	R1 = 100000;
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <thermopile_init+0x70>)
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <thermopile_init+0x74>)
 8002f4e:	601a      	str	r2, [r3, #0]
	s = 9;      //sensitivity conversion factor (x 10)
 8002f50:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <thermopile_init+0x78>)
 8002f52:	2209      	movs	r2, #9
 8002f54:	601a      	str	r2, [r3, #0]
	ee = 99;   //emissivity of object (x 100)
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <thermopile_init+0x7c>)
 8002f58:	2263      	movs	r2, #99	; 0x63
 8002f5a:	601a      	str	r2, [r3, #0]
	//dirac = 2;   //correction for filter transmission
	factor = 560; //factor for temperature scaling
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <thermopile_init+0x80>)
 8002f5e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8002f62:	601a      	str	r2, [r3, #0]
	hadc1 = *h1;
 8002f64:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <thermopile_init+0x84>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	2364      	movs	r3, #100	; 0x64
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f006 fd8e 	bl	8009a90 <memcpy>
	hadc2 = *h2;
 8002f74:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <thermopile_init+0x88>)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	2364      	movs	r3, #100	; 0x64
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f006 fd86 	bl	8009a90 <memcpy>
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	2000026c 	.word	0x2000026c
 8002f90:	20000264 	.word	0x20000264
 8002f94:	0001cee4 	.word	0x0001cee4
 8002f98:	20000354 	.word	0x20000354
 8002f9c:	2000021c 	.word	0x2000021c
 8002fa0:	000186a0 	.word	0x000186a0
 8002fa4:	20000268 	.word	0x20000268
 8002fa8:	200000f4 	.word	0x200000f4
 8002fac:	200003d8 	.word	0x200003d8
 8002fb0:	200001b4 	.word	0x200001b4
 8002fb4:	200000fc 	.word	0x200000fc

08002fb8 <getTemp>:

int getTemp() {
 8002fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fbc:	ed2d 8b02 	vpush	{d8}
 8002fc0:	af00      	add	r7, sp, #0
	//Thermopile
	HAL_ADC_Start(&hadc1);
 8002fc2:	48a1      	ldr	r0, [pc, #644]	; (8003248 <getTemp+0x290>)
 8002fc4:	f001 fa12 	bl	80043ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fcc:	489e      	ldr	r0, [pc, #632]	; (8003248 <getTemp+0x290>)
 8002fce:	f001 fac7 	bl	8004560 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 8002fd2:	489d      	ldr	r0, [pc, #628]	; (8003248 <getTemp+0x290>)
 8002fd4:	f001 fb94 	bl	8004700 <HAL_ADC_GetValue>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	4b9b      	ldr	r3, [pc, #620]	; (800324c <getTemp+0x294>)
 8002fde:	801a      	strh	r2, [r3, #0]

	//Thermistor
	HAL_ADC_Start(&hadc2);
 8002fe0:	489b      	ldr	r0, [pc, #620]	; (8003250 <getTemp+0x298>)
 8002fe2:	f001 fa03 	bl	80043ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8002fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8002fea:	4899      	ldr	r0, [pc, #612]	; (8003250 <getTemp+0x298>)
 8002fec:	f001 fab8 	bl	8004560 <HAL_ADC_PollForConversion>
	raw2 = HAL_ADC_GetValue(&hadc2);
 8002ff0:	4897      	ldr	r0, [pc, #604]	; (8003250 <getTemp+0x298>)
 8002ff2:	f001 fb85 	bl	8004700 <HAL_ADC_GetValue>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	4b96      	ldr	r3, [pc, #600]	; (8003254 <getTemp+0x29c>)
 8002ffc:	801a      	strh	r2, [r3, #0]

	//Ambient temperature and resistance
	thermistorV = (raw2 * 3300) / 4095; // mv
 8002ffe:	4b95      	ldr	r3, [pc, #596]	; (8003254 <getTemp+0x29c>)
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	f640 43e4 	movw	r3, #3300	; 0xce4
 8003008:	fb03 f302 	mul.w	r3, r3, r2
 800300c:	4a92      	ldr	r2, [pc, #584]	; (8003258 <getTemp+0x2a0>)
 800300e:	fb82 1203 	smull	r1, r2, r2, r3
 8003012:	441a      	add	r2, r3
 8003014:	12d2      	asrs	r2, r2, #11
 8003016:	17db      	asrs	r3, r3, #31
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	461a      	mov	r2, r3
 800301c:	4b8f      	ldr	r3, [pc, #572]	; (800325c <getTemp+0x2a4>)
 800301e:	601a      	str	r2, [r3, #0]
	Rsen = (thermistorV * R1) / (3300 - thermistorV); // ohms; equation is voltage division
 8003020:	4b8e      	ldr	r3, [pc, #568]	; (800325c <getTemp+0x2a4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a8e      	ldr	r2, [pc, #568]	; (8003260 <getTemp+0x2a8>)
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	fb02 f203 	mul.w	r2, r2, r3
 800302c:	4b8b      	ldr	r3, [pc, #556]	; (800325c <getTemp+0x2a4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f5c3 634e 	rsb	r3, r3, #3296	; 0xce0
 8003034:	3304      	adds	r3, #4
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	4a8a      	ldr	r2, [pc, #552]	; (8003264 <getTemp+0x2ac>)
 800303c:	6013      	str	r3, [r2, #0]
	Tsen = ((beta * (T25 + 273)) / (log(Rsen) - log(R25))) / ((273 + T25) + (beta / (log(Rsen) - log(R25)))) - 273;
 800303e:	4b8a      	ldr	r3, [pc, #552]	; (8003268 <getTemp+0x2b0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f203 1311 	addw	r3, r3, #273	; 0x111
 8003046:	4a89      	ldr	r2, [pc, #548]	; (800326c <getTemp+0x2b4>)
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd fa58 	bl	8000504 <__aeabi_ui2d>
 8003054:	4604      	mov	r4, r0
 8003056:	460d      	mov	r5, r1
 8003058:	4b82      	ldr	r3, [pc, #520]	; (8003264 <getTemp+0x2ac>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fa51 	bl	8000504 <__aeabi_ui2d>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	ec43 2b10 	vmov	d0, r2, r3
 800306a:	f007 fe4f 	bl	800ad0c <log>
 800306e:	ec59 8b10 	vmov	r8, r9, d0
 8003072:	4b7f      	ldr	r3, [pc, #508]	; (8003270 <getTemp+0x2b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fa44 	bl	8000504 <__aeabi_ui2d>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	ec43 2b10 	vmov	d0, r2, r3
 8003084:	f007 fe42 	bl	800ad0c <log>
 8003088:	ec53 2b10 	vmov	r2, r3, d0
 800308c:	4640      	mov	r0, r8
 800308e:	4649      	mov	r1, r9
 8003090:	f7fd f8fa 	bl	8000288 <__aeabi_dsub>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4620      	mov	r0, r4
 800309a:	4629      	mov	r1, r5
 800309c:	f7fd fbd6 	bl	800084c <__aeabi_ddiv>
 80030a0:	4603      	mov	r3, r0
 80030a2:	460c      	mov	r4, r1
 80030a4:	4625      	mov	r5, r4
 80030a6:	461c      	mov	r4, r3
 80030a8:	4b6f      	ldr	r3, [pc, #444]	; (8003268 <getTemp+0x2b0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f203 1311 	addw	r3, r3, #273	; 0x111
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd fa27 	bl	8000504 <__aeabi_ui2d>
 80030b6:	4680      	mov	r8, r0
 80030b8:	4689      	mov	r9, r1
 80030ba:	4b6c      	ldr	r3, [pc, #432]	; (800326c <getTemp+0x2b4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd fa20 	bl	8000504 <__aeabi_ui2d>
 80030c4:	4682      	mov	sl, r0
 80030c6:	468b      	mov	fp, r1
 80030c8:	4b66      	ldr	r3, [pc, #408]	; (8003264 <getTemp+0x2ac>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fa19 	bl	8000504 <__aeabi_ui2d>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	ec43 2b10 	vmov	d0, r2, r3
 80030da:	f007 fe17 	bl	800ad0c <log>
 80030de:	eeb0 8a40 	vmov.f32	s16, s0
 80030e2:	eef0 8a60 	vmov.f32	s17, s1
 80030e6:	4b62      	ldr	r3, [pc, #392]	; (8003270 <getTemp+0x2b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fd fa0a 	bl	8000504 <__aeabi_ui2d>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	ec43 2b10 	vmov	d0, r2, r3
 80030f8:	f007 fe08 	bl	800ad0c <log>
 80030fc:	ec53 2b10 	vmov	r2, r3, d0
 8003100:	ec51 0b18 	vmov	r0, r1, d8
 8003104:	f7fd f8c0 	bl	8000288 <__aeabi_dsub>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4650      	mov	r0, sl
 800310e:	4659      	mov	r1, fp
 8003110:	f7fd fb9c 	bl	800084c <__aeabi_ddiv>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4640      	mov	r0, r8
 800311a:	4649      	mov	r1, r9
 800311c:	f7fd f8b6 	bl	800028c <__adddf3>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4620      	mov	r0, r4
 8003126:	4629      	mov	r1, r5
 8003128:	f7fd fb90 	bl	800084c <__aeabi_ddiv>
 800312c:	4603      	mov	r3, r0
 800312e:	460c      	mov	r4, r1
 8003130:	4618      	mov	r0, r3
 8003132:	4621      	mov	r1, r4
 8003134:	a33e      	add	r3, pc, #248	; (adr r3, 8003230 <getTemp+0x278>)
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f7fd f8a5 	bl	8000288 <__aeabi_dsub>
 800313e:	4603      	mov	r3, r0
 8003140:	460c      	mov	r4, r1
 8003142:	4618      	mov	r0, r3
 8003144:	4621      	mov	r1, r4
 8003146:	f7fd fd07 	bl	8000b58 <__aeabi_d2uiz>
 800314a:	4602      	mov	r2, r0
 800314c:	4b49      	ldr	r3, [pc, #292]	; (8003274 <getTemp+0x2bc>)
 800314e:	601a      	str	r2, [r3, #0]
	// this works same as line above:  Tsen = 1 / (float)((log(Rsen / (float)R25) / (float)beta) + (1 / (float)(273 + T25))) - 273;

	//Thermopile Voltage and Object Temperature
	thermopileV_raw = ((raw * 3300 / 4095)); // mv; ~580 mV offset when should be 0.0 mV
 8003150:	4b3e      	ldr	r3, [pc, #248]	; (800324c <getTemp+0x294>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	f640 43e4 	movw	r3, #3300	; 0xce4
 800315a:	fb03 f302 	mul.w	r3, r3, r2
 800315e:	4a3e      	ldr	r2, [pc, #248]	; (8003258 <getTemp+0x2a0>)
 8003160:	fb82 1203 	smull	r1, r2, r2, r3
 8003164:	441a      	add	r2, r3
 8003166:	12d2      	asrs	r2, r2, #11
 8003168:	17db      	asrs	r3, r3, #31
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	461a      	mov	r2, r3
 800316e:	4b42      	ldr	r3, [pc, #264]	; (8003278 <getTemp+0x2c0>)
 8003170:	601a      	str	r2, [r3, #0]
	if(thermopileV_raw < factor){  	//if - else logic prevents overflow and negative voltages which are unrealistic for our system
 8003172:	4b41      	ldr	r3, [pc, #260]	; (8003278 <getTemp+0x2c0>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <getTemp+0x2c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d203      	bcs.n	8003186 <getTemp+0x1ce>
		thermopileV = 0;
 800317e:	4b40      	ldr	r3, [pc, #256]	; (8003280 <getTemp+0x2c8>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e010      	b.n	80031a8 <getTemp+0x1f0>
	}
	else {
		thermopileV = (thermopileV_raw - factor) / 1.0;  //mV * some scaling, 3.0 can change up or down to scale Tobj
 8003186:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <getTemp+0x2c0>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b3c      	ldr	r3, [pc, #240]	; (800327c <getTemp+0x2c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd f9b7 	bl	8000504 <__aeabi_ui2d>
 8003196:	4603      	mov	r3, r0
 8003198:	460c      	mov	r4, r1
 800319a:	4618      	mov	r0, r3
 800319c:	4621      	mov	r1, r4
 800319e:	f7fd fcdb 	bl	8000b58 <__aeabi_d2uiz>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4b36      	ldr	r3, [pc, #216]	; (8003280 <getTemp+0x2c8>)
 80031a6:	601a      	str	r2, [r3, #0]
	}
	Tobj = pow(((thermopileV * 1000) / (s * ee)) + pow(Tsen, 4 - 2.49), 1.0f / (4 - 2.49));   //dirac constant (subtracted from 4) to be changed accordingly; bigger dirac = higher temperature
 80031a8:	4b35      	ldr	r3, [pc, #212]	; (8003280 <getTemp+0x2c8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031b0:	fb02 f203 	mul.w	r2, r2, r3
 80031b4:	4b33      	ldr	r3, [pc, #204]	; (8003284 <getTemp+0x2cc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4933      	ldr	r1, [pc, #204]	; (8003288 <getTemp+0x2d0>)
 80031ba:	6809      	ldr	r1, [r1, #0]
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd f99d 	bl	8000504 <__aeabi_ui2d>
 80031ca:	4604      	mov	r4, r0
 80031cc:	460d      	mov	r5, r1
 80031ce:	4b29      	ldr	r3, [pc, #164]	; (8003274 <getTemp+0x2bc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f996 	bl	8000504 <__aeabi_ui2d>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8003238 <getTemp+0x280>
 80031e0:	ec43 2b10 	vmov	d0, r2, r3
 80031e4:	f007 fe12 	bl	800ae0c <pow>
 80031e8:	ec53 2b10 	vmov	r2, r3, d0
 80031ec:	4620      	mov	r0, r4
 80031ee:	4629      	mov	r1, r5
 80031f0:	f7fd f84c 	bl	800028c <__adddf3>
 80031f4:	4603      	mov	r3, r0
 80031f6:	460c      	mov	r4, r1
 80031f8:	ec44 3b17 	vmov	d7, r3, r4
 80031fc:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8003240 <getTemp+0x288>
 8003200:	eeb0 0a47 	vmov.f32	s0, s14
 8003204:	eef0 0a67 	vmov.f32	s1, s15
 8003208:	f007 fe00 	bl	800ae0c <pow>
 800320c:	ec54 3b10 	vmov	r3, r4, d0
 8003210:	4618      	mov	r0, r3
 8003212:	4621      	mov	r1, r4
 8003214:	f7fd fca0 	bl	8000b58 <__aeabi_d2uiz>
 8003218:	4602      	mov	r2, r0
 800321a:	4b1c      	ldr	r3, [pc, #112]	; (800328c <getTemp+0x2d4>)
 800321c:	601a      	str	r2, [r3, #0]
	return Tobj;
 800321e:	4b1b      	ldr	r3, [pc, #108]	; (800328c <getTemp+0x2d4>)
 8003220:	681b      	ldr	r3, [r3, #0]
}
 8003222:	4618      	mov	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	ecbd 8b02 	vpop	{d8}
 800322a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800322e:	bf00      	nop
 8003230:	00000000 	.word	0x00000000
 8003234:	40711000 	.word	0x40711000
 8003238:	c28f5c28 	.word	0xc28f5c28
 800323c:	3ff828f5 	.word	0x3ff828f5
 8003240:	6254c4aa 	.word	0x6254c4aa
 8003244:	3fe5312a 	.word	0x3fe5312a
 8003248:	200001b4 	.word	0x200001b4
 800324c:	20000220 	.word	0x20000220
 8003250:	200000fc 	.word	0x200000fc
 8003254:	200000f8 	.word	0x200000f8
 8003258:	80080081 	.word	0x80080081
 800325c:	200000f0 	.word	0x200000f0
 8003260:	2000021c 	.word	0x2000021c
 8003264:	20000420 	.word	0x20000420
 8003268:	20000354 	.word	0x20000354
 800326c:	2000026c 	.word	0x2000026c
 8003270:	20000264 	.word	0x20000264
 8003274:	200000a4 	.word	0x200000a4
 8003278:	20000160 	.word	0x20000160
 800327c:	200003d8 	.word	0x200003d8
 8003280:	2000041c 	.word	0x2000041c
 8003284:	20000268 	.word	0x20000268
 8003288:	200000f4 	.word	0x200000f4
 800328c:	20000218 	.word	0x20000218

08003290 <getTsen>:

int getTsen() {
 8003290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003294:	ed2d 8b02 	vpush	{d8}
 8003298:	af00      	add	r7, sp, #0
	//Thermopile
	HAL_ADC_Start(&hadc1);
 800329a:	48a5      	ldr	r0, [pc, #660]	; (8003530 <getTsen+0x2a0>)
 800329c:	f001 f8a6 	bl	80043ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295
 80032a4:	48a2      	ldr	r0, [pc, #648]	; (8003530 <getTsen+0x2a0>)
 80032a6:	f001 f95b 	bl	8004560 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 80032aa:	48a1      	ldr	r0, [pc, #644]	; (8003530 <getTsen+0x2a0>)
 80032ac:	f001 fa28 	bl	8004700 <HAL_ADC_GetValue>
 80032b0:	4603      	mov	r3, r0
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	4b9f      	ldr	r3, [pc, #636]	; (8003534 <getTsen+0x2a4>)
 80032b6:	801a      	strh	r2, [r3, #0]

	//Thermistor
	HAL_ADC_Start(&hadc2);
 80032b8:	489f      	ldr	r0, [pc, #636]	; (8003538 <getTsen+0x2a8>)
 80032ba:	f001 f897 	bl	80043ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80032be:	f04f 31ff 	mov.w	r1, #4294967295
 80032c2:	489d      	ldr	r0, [pc, #628]	; (8003538 <getTsen+0x2a8>)
 80032c4:	f001 f94c 	bl	8004560 <HAL_ADC_PollForConversion>
	raw2 = HAL_ADC_GetValue(&hadc2);
 80032c8:	489b      	ldr	r0, [pc, #620]	; (8003538 <getTsen+0x2a8>)
 80032ca:	f001 fa19 	bl	8004700 <HAL_ADC_GetValue>
 80032ce:	4603      	mov	r3, r0
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	4b9a      	ldr	r3, [pc, #616]	; (800353c <getTsen+0x2ac>)
 80032d4:	801a      	strh	r2, [r3, #0]

	//Ambient temperature and resistance
	thermistorV = (raw2 * 3300) / 4095; // mv
 80032d6:	4b99      	ldr	r3, [pc, #612]	; (800353c <getTsen+0x2ac>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	f640 43e4 	movw	r3, #3300	; 0xce4
 80032e0:	fb03 f302 	mul.w	r3, r3, r2
 80032e4:	4a96      	ldr	r2, [pc, #600]	; (8003540 <getTsen+0x2b0>)
 80032e6:	fb82 1203 	smull	r1, r2, r2, r3
 80032ea:	441a      	add	r2, r3
 80032ec:	12d2      	asrs	r2, r2, #11
 80032ee:	17db      	asrs	r3, r3, #31
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	4b93      	ldr	r3, [pc, #588]	; (8003544 <getTsen+0x2b4>)
 80032f6:	601a      	str	r2, [r3, #0]
	Rsen = (thermistorV * R1) / (3300 - thermistorV); // ohms; equation is voltage division
 80032f8:	4b92      	ldr	r3, [pc, #584]	; (8003544 <getTsen+0x2b4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a92      	ldr	r2, [pc, #584]	; (8003548 <getTsen+0x2b8>)
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	fb02 f203 	mul.w	r2, r2, r3
 8003304:	4b8f      	ldr	r3, [pc, #572]	; (8003544 <getTsen+0x2b4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f5c3 634e 	rsb	r3, r3, #3296	; 0xce0
 800330c:	3304      	adds	r3, #4
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	4a8e      	ldr	r2, [pc, #568]	; (800354c <getTsen+0x2bc>)
 8003314:	6013      	str	r3, [r2, #0]
	Tsen = ((beta * (T25 + 273)) / (log(Rsen) - log(R25))) / ((273 + T25) + (beta / (log(Rsen) - log(R25)))) - 273;
 8003316:	4b8e      	ldr	r3, [pc, #568]	; (8003550 <getTsen+0x2c0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f203 1311 	addw	r3, r3, #273	; 0x111
 800331e:	4a8d      	ldr	r2, [pc, #564]	; (8003554 <getTsen+0x2c4>)
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f8ec 	bl	8000504 <__aeabi_ui2d>
 800332c:	4604      	mov	r4, r0
 800332e:	460d      	mov	r5, r1
 8003330:	4b86      	ldr	r3, [pc, #536]	; (800354c <getTsen+0x2bc>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f8e5 	bl	8000504 <__aeabi_ui2d>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	ec43 2b10 	vmov	d0, r2, r3
 8003342:	f007 fce3 	bl	800ad0c <log>
 8003346:	ec59 8b10 	vmov	r8, r9, d0
 800334a:	4b83      	ldr	r3, [pc, #524]	; (8003558 <getTsen+0x2c8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f8d8 	bl	8000504 <__aeabi_ui2d>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	ec43 2b10 	vmov	d0, r2, r3
 800335c:	f007 fcd6 	bl	800ad0c <log>
 8003360:	ec53 2b10 	vmov	r2, r3, d0
 8003364:	4640      	mov	r0, r8
 8003366:	4649      	mov	r1, r9
 8003368:	f7fc ff8e 	bl	8000288 <__aeabi_dsub>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4620      	mov	r0, r4
 8003372:	4629      	mov	r1, r5
 8003374:	f7fd fa6a 	bl	800084c <__aeabi_ddiv>
 8003378:	4603      	mov	r3, r0
 800337a:	460c      	mov	r4, r1
 800337c:	4625      	mov	r5, r4
 800337e:	461c      	mov	r4, r3
 8003380:	4b73      	ldr	r3, [pc, #460]	; (8003550 <getTsen+0x2c0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f203 1311 	addw	r3, r3, #273	; 0x111
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd f8bb 	bl	8000504 <__aeabi_ui2d>
 800338e:	4680      	mov	r8, r0
 8003390:	4689      	mov	r9, r1
 8003392:	4b70      	ldr	r3, [pc, #448]	; (8003554 <getTsen+0x2c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd f8b4 	bl	8000504 <__aeabi_ui2d>
 800339c:	4682      	mov	sl, r0
 800339e:	468b      	mov	fp, r1
 80033a0:	4b6a      	ldr	r3, [pc, #424]	; (800354c <getTsen+0x2bc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd f8ad 	bl	8000504 <__aeabi_ui2d>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	ec43 2b10 	vmov	d0, r2, r3
 80033b2:	f007 fcab 	bl	800ad0c <log>
 80033b6:	eeb0 8a40 	vmov.f32	s16, s0
 80033ba:	eef0 8a60 	vmov.f32	s17, s1
 80033be:	4b66      	ldr	r3, [pc, #408]	; (8003558 <getTsen+0x2c8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f89e 	bl	8000504 <__aeabi_ui2d>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	ec43 2b10 	vmov	d0, r2, r3
 80033d0:	f007 fc9c 	bl	800ad0c <log>
 80033d4:	ec53 2b10 	vmov	r2, r3, d0
 80033d8:	ec51 0b18 	vmov	r0, r1, d8
 80033dc:	f7fc ff54 	bl	8000288 <__aeabi_dsub>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4650      	mov	r0, sl
 80033e6:	4659      	mov	r1, fp
 80033e8:	f7fd fa30 	bl	800084c <__aeabi_ddiv>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4640      	mov	r0, r8
 80033f2:	4649      	mov	r1, r9
 80033f4:	f7fc ff4a 	bl	800028c <__adddf3>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4620      	mov	r0, r4
 80033fe:	4629      	mov	r1, r5
 8003400:	f7fd fa24 	bl	800084c <__aeabi_ddiv>
 8003404:	4603      	mov	r3, r0
 8003406:	460c      	mov	r4, r1
 8003408:	4618      	mov	r0, r3
 800340a:	4621      	mov	r1, r4
 800340c:	a340      	add	r3, pc, #256	; (adr r3, 8003510 <getTsen+0x280>)
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f7fc ff39 	bl	8000288 <__aeabi_dsub>
 8003416:	4603      	mov	r3, r0
 8003418:	460c      	mov	r4, r1
 800341a:	4618      	mov	r0, r3
 800341c:	4621      	mov	r1, r4
 800341e:	f7fd fb9b 	bl	8000b58 <__aeabi_d2uiz>
 8003422:	4602      	mov	r2, r0
 8003424:	4b4d      	ldr	r3, [pc, #308]	; (800355c <getTsen+0x2cc>)
 8003426:	601a      	str	r2, [r3, #0]
	// this works same as line above:  Tsen = 1 / (float)((log(Rsen / (float)R25) / (float)beta) + (1 / (float)(273 + T25))) - 273;

	//Thermopile Voltage and Object Temperature
	thermopileV_raw = ((raw * 3300 / 4095)); // mv; ~580 mV offset when should be 0.0 mV
 8003428:	4b42      	ldr	r3, [pc, #264]	; (8003534 <getTsen+0x2a4>)
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	f640 43e4 	movw	r3, #3300	; 0xce4
 8003432:	fb03 f302 	mul.w	r3, r3, r2
 8003436:	4a42      	ldr	r2, [pc, #264]	; (8003540 <getTsen+0x2b0>)
 8003438:	fb82 1203 	smull	r1, r2, r2, r3
 800343c:	441a      	add	r2, r3
 800343e:	12d2      	asrs	r2, r2, #11
 8003440:	17db      	asrs	r3, r3, #31
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	461a      	mov	r2, r3
 8003446:	4b46      	ldr	r3, [pc, #280]	; (8003560 <getTsen+0x2d0>)
 8003448:	601a      	str	r2, [r3, #0]
	if(thermopileV_raw < factor){  	//if - else logic prevents overflow and negative voltages which are unrealistic for our system
 800344a:	4b45      	ldr	r3, [pc, #276]	; (8003560 <getTsen+0x2d0>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4b45      	ldr	r3, [pc, #276]	; (8003564 <getTsen+0x2d4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d203      	bcs.n	800345e <getTsen+0x1ce>
		thermopileV = 0;
 8003456:	4b44      	ldr	r3, [pc, #272]	; (8003568 <getTsen+0x2d8>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e015      	b.n	800348a <getTsen+0x1fa>
	}
	else {
		thermopileV = (thermopileV_raw - factor) / 2.9;  //mV * some scaling, 3.0 can change up or down to scale Tobj
 800345e:	4b40      	ldr	r3, [pc, #256]	; (8003560 <getTsen+0x2d0>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b40      	ldr	r3, [pc, #256]	; (8003564 <getTsen+0x2d4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f84b 	bl	8000504 <__aeabi_ui2d>
 800346e:	a32a      	add	r3, pc, #168	; (adr r3, 8003518 <getTsen+0x288>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f7fd f9ea 	bl	800084c <__aeabi_ddiv>
 8003478:	4603      	mov	r3, r0
 800347a:	460c      	mov	r4, r1
 800347c:	4618      	mov	r0, r3
 800347e:	4621      	mov	r1, r4
 8003480:	f7fd fb6a 	bl	8000b58 <__aeabi_d2uiz>
 8003484:	4602      	mov	r2, r0
 8003486:	4b38      	ldr	r3, [pc, #224]	; (8003568 <getTsen+0x2d8>)
 8003488:	601a      	str	r2, [r3, #0]
	}
	Tobj = pow(((thermopileV * 1000) / (s * ee)) + pow(Tsen, 4 - 2.49), 1.0f / (4 - 2.49));   //dirac constant (subtracted from 4) to be changed accordingly; bigger dirac = higher temperature
 800348a:	4b37      	ldr	r3, [pc, #220]	; (8003568 <getTsen+0x2d8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003492:	fb02 f203 	mul.w	r2, r2, r3
 8003496:	4b35      	ldr	r3, [pc, #212]	; (800356c <getTsen+0x2dc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4935      	ldr	r1, [pc, #212]	; (8003570 <getTsen+0x2e0>)
 800349c:	6809      	ldr	r1, [r1, #0]
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd f82c 	bl	8000504 <__aeabi_ui2d>
 80034ac:	4604      	mov	r4, r0
 80034ae:	460d      	mov	r5, r1
 80034b0:	4b2a      	ldr	r3, [pc, #168]	; (800355c <getTsen+0x2cc>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd f825 	bl	8000504 <__aeabi_ui2d>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8003520 <getTsen+0x290>
 80034c2:	ec43 2b10 	vmov	d0, r2, r3
 80034c6:	f007 fca1 	bl	800ae0c <pow>
 80034ca:	ec53 2b10 	vmov	r2, r3, d0
 80034ce:	4620      	mov	r0, r4
 80034d0:	4629      	mov	r1, r5
 80034d2:	f7fc fedb 	bl	800028c <__adddf3>
 80034d6:	4603      	mov	r3, r0
 80034d8:	460c      	mov	r4, r1
 80034da:	ec44 3b17 	vmov	d7, r3, r4
 80034de:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8003528 <getTsen+0x298>
 80034e2:	eeb0 0a47 	vmov.f32	s0, s14
 80034e6:	eef0 0a67 	vmov.f32	s1, s15
 80034ea:	f007 fc8f 	bl	800ae0c <pow>
 80034ee:	ec54 3b10 	vmov	r3, r4, d0
 80034f2:	4618      	mov	r0, r3
 80034f4:	4621      	mov	r1, r4
 80034f6:	f7fd fb2f 	bl	8000b58 <__aeabi_d2uiz>
 80034fa:	4602      	mov	r2, r0
 80034fc:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <getTsen+0x2e4>)
 80034fe:	601a      	str	r2, [r3, #0]
	return Tsen;
 8003500:	4b16      	ldr	r3, [pc, #88]	; (800355c <getTsen+0x2cc>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	ecbd 8b02 	vpop	{d8}
 800350c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003510:	00000000 	.word	0x00000000
 8003514:	40711000 	.word	0x40711000
 8003518:	33333333 	.word	0x33333333
 800351c:	40073333 	.word	0x40073333
 8003520:	c28f5c28 	.word	0xc28f5c28
 8003524:	3ff828f5 	.word	0x3ff828f5
 8003528:	6254c4aa 	.word	0x6254c4aa
 800352c:	3fe5312a 	.word	0x3fe5312a
 8003530:	200001b4 	.word	0x200001b4
 8003534:	20000220 	.word	0x20000220
 8003538:	200000fc 	.word	0x200000fc
 800353c:	200000f8 	.word	0x200000f8
 8003540:	80080081 	.word	0x80080081
 8003544:	200000f0 	.word	0x200000f0
 8003548:	2000021c 	.word	0x2000021c
 800354c:	20000420 	.word	0x20000420
 8003550:	20000354 	.word	0x20000354
 8003554:	2000026c 	.word	0x2000026c
 8003558:	20000264 	.word	0x20000264
 800355c:	200000a4 	.word	0x200000a4
 8003560:	20000160 	.word	0x20000160
 8003564:	200003d8 	.word	0x200003d8
 8003568:	2000041c 	.word	0x2000041c
 800356c:	20000268 	.word	0x20000268
 8003570:	200000f4 	.word	0x200000f4
 8003574:	20000218 	.word	0x20000218

08003578 <getV>:

int getV() {
 8003578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800357c:	ed2d 8b02 	vpush	{d8}
 8003580:	af00      	add	r7, sp, #0
	//Thermopile
	HAL_ADC_Start(&hadc1);
 8003582:	48a5      	ldr	r0, [pc, #660]	; (8003818 <getV+0x2a0>)
 8003584:	f000 ff32 	bl	80043ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003588:	f04f 31ff 	mov.w	r1, #4294967295
 800358c:	48a2      	ldr	r0, [pc, #648]	; (8003818 <getV+0x2a0>)
 800358e:	f000 ffe7 	bl	8004560 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 8003592:	48a1      	ldr	r0, [pc, #644]	; (8003818 <getV+0x2a0>)
 8003594:	f001 f8b4 	bl	8004700 <HAL_ADC_GetValue>
 8003598:	4603      	mov	r3, r0
 800359a:	b29a      	uxth	r2, r3
 800359c:	4b9f      	ldr	r3, [pc, #636]	; (800381c <getV+0x2a4>)
 800359e:	801a      	strh	r2, [r3, #0]

	//Thermistor
	HAL_ADC_Start(&hadc2);
 80035a0:	489f      	ldr	r0, [pc, #636]	; (8003820 <getV+0x2a8>)
 80035a2:	f000 ff23 	bl	80043ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80035a6:	f04f 31ff 	mov.w	r1, #4294967295
 80035aa:	489d      	ldr	r0, [pc, #628]	; (8003820 <getV+0x2a8>)
 80035ac:	f000 ffd8 	bl	8004560 <HAL_ADC_PollForConversion>
	raw2 = HAL_ADC_GetValue(&hadc2);
 80035b0:	489b      	ldr	r0, [pc, #620]	; (8003820 <getV+0x2a8>)
 80035b2:	f001 f8a5 	bl	8004700 <HAL_ADC_GetValue>
 80035b6:	4603      	mov	r3, r0
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	4b9a      	ldr	r3, [pc, #616]	; (8003824 <getV+0x2ac>)
 80035bc:	801a      	strh	r2, [r3, #0]

	//Ambient temperature and resistance
	thermistorV = (raw2 * 3300) / 4095; // mv
 80035be:	4b99      	ldr	r3, [pc, #612]	; (8003824 <getV+0x2ac>)
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	f640 43e4 	movw	r3, #3300	; 0xce4
 80035c8:	fb03 f302 	mul.w	r3, r3, r2
 80035cc:	4a96      	ldr	r2, [pc, #600]	; (8003828 <getV+0x2b0>)
 80035ce:	fb82 1203 	smull	r1, r2, r2, r3
 80035d2:	441a      	add	r2, r3
 80035d4:	12d2      	asrs	r2, r2, #11
 80035d6:	17db      	asrs	r3, r3, #31
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	4b93      	ldr	r3, [pc, #588]	; (800382c <getV+0x2b4>)
 80035de:	601a      	str	r2, [r3, #0]
	Rsen = (thermistorV * R1) / (3300 - thermistorV); // ohms; equation is voltage division
 80035e0:	4b92      	ldr	r3, [pc, #584]	; (800382c <getV+0x2b4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a92      	ldr	r2, [pc, #584]	; (8003830 <getV+0x2b8>)
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	fb02 f203 	mul.w	r2, r2, r3
 80035ec:	4b8f      	ldr	r3, [pc, #572]	; (800382c <getV+0x2b4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f5c3 634e 	rsb	r3, r3, #3296	; 0xce0
 80035f4:	3304      	adds	r3, #4
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	4a8e      	ldr	r2, [pc, #568]	; (8003834 <getV+0x2bc>)
 80035fc:	6013      	str	r3, [r2, #0]
	Tsen = ((beta * (T25 + 273)) / (log(Rsen) - log(R25))) / ((273 + T25) + (beta / (log(Rsen) - log(R25)))) - 273;
 80035fe:	4b8e      	ldr	r3, [pc, #568]	; (8003838 <getV+0x2c0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f203 1311 	addw	r3, r3, #273	; 0x111
 8003606:	4a8d      	ldr	r2, [pc, #564]	; (800383c <getV+0x2c4>)
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	4618      	mov	r0, r3
 8003610:	f7fc ff78 	bl	8000504 <__aeabi_ui2d>
 8003614:	4604      	mov	r4, r0
 8003616:	460d      	mov	r5, r1
 8003618:	4b86      	ldr	r3, [pc, #536]	; (8003834 <getV+0x2bc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fc ff71 	bl	8000504 <__aeabi_ui2d>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	ec43 2b10 	vmov	d0, r2, r3
 800362a:	f007 fb6f 	bl	800ad0c <log>
 800362e:	ec59 8b10 	vmov	r8, r9, d0
 8003632:	4b83      	ldr	r3, [pc, #524]	; (8003840 <getV+0x2c8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fc ff64 	bl	8000504 <__aeabi_ui2d>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	ec43 2b10 	vmov	d0, r2, r3
 8003644:	f007 fb62 	bl	800ad0c <log>
 8003648:	ec53 2b10 	vmov	r2, r3, d0
 800364c:	4640      	mov	r0, r8
 800364e:	4649      	mov	r1, r9
 8003650:	f7fc fe1a 	bl	8000288 <__aeabi_dsub>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4620      	mov	r0, r4
 800365a:	4629      	mov	r1, r5
 800365c:	f7fd f8f6 	bl	800084c <__aeabi_ddiv>
 8003660:	4603      	mov	r3, r0
 8003662:	460c      	mov	r4, r1
 8003664:	4625      	mov	r5, r4
 8003666:	461c      	mov	r4, r3
 8003668:	4b73      	ldr	r3, [pc, #460]	; (8003838 <getV+0x2c0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f203 1311 	addw	r3, r3, #273	; 0x111
 8003670:	4618      	mov	r0, r3
 8003672:	f7fc ff47 	bl	8000504 <__aeabi_ui2d>
 8003676:	4680      	mov	r8, r0
 8003678:	4689      	mov	r9, r1
 800367a:	4b70      	ldr	r3, [pc, #448]	; (800383c <getV+0x2c4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc ff40 	bl	8000504 <__aeabi_ui2d>
 8003684:	4682      	mov	sl, r0
 8003686:	468b      	mov	fp, r1
 8003688:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <getV+0x2bc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fc ff39 	bl	8000504 <__aeabi_ui2d>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	ec43 2b10 	vmov	d0, r2, r3
 800369a:	f007 fb37 	bl	800ad0c <log>
 800369e:	eeb0 8a40 	vmov.f32	s16, s0
 80036a2:	eef0 8a60 	vmov.f32	s17, s1
 80036a6:	4b66      	ldr	r3, [pc, #408]	; (8003840 <getV+0x2c8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fc ff2a 	bl	8000504 <__aeabi_ui2d>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	ec43 2b10 	vmov	d0, r2, r3
 80036b8:	f007 fb28 	bl	800ad0c <log>
 80036bc:	ec53 2b10 	vmov	r2, r3, d0
 80036c0:	ec51 0b18 	vmov	r0, r1, d8
 80036c4:	f7fc fde0 	bl	8000288 <__aeabi_dsub>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4650      	mov	r0, sl
 80036ce:	4659      	mov	r1, fp
 80036d0:	f7fd f8bc 	bl	800084c <__aeabi_ddiv>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4640      	mov	r0, r8
 80036da:	4649      	mov	r1, r9
 80036dc:	f7fc fdd6 	bl	800028c <__adddf3>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4620      	mov	r0, r4
 80036e6:	4629      	mov	r1, r5
 80036e8:	f7fd f8b0 	bl	800084c <__aeabi_ddiv>
 80036ec:	4603      	mov	r3, r0
 80036ee:	460c      	mov	r4, r1
 80036f0:	4618      	mov	r0, r3
 80036f2:	4621      	mov	r1, r4
 80036f4:	a340      	add	r3, pc, #256	; (adr r3, 80037f8 <getV+0x280>)
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	f7fc fdc5 	bl	8000288 <__aeabi_dsub>
 80036fe:	4603      	mov	r3, r0
 8003700:	460c      	mov	r4, r1
 8003702:	4618      	mov	r0, r3
 8003704:	4621      	mov	r1, r4
 8003706:	f7fd fa27 	bl	8000b58 <__aeabi_d2uiz>
 800370a:	4602      	mov	r2, r0
 800370c:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <getV+0x2cc>)
 800370e:	601a      	str	r2, [r3, #0]
	// this works same as line above:  Tsen = 1 / (float)((log(Rsen / (float)R25) / (float)beta) + (1 / (float)(273 + T25))) - 273;

	//Thermopile Voltage and Object Temperature
	thermopileV_raw = ((raw * 3300 / 4095)); // mv; ~580 mV offset when should be 0.0 mV
 8003710:	4b42      	ldr	r3, [pc, #264]	; (800381c <getV+0x2a4>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	f640 43e4 	movw	r3, #3300	; 0xce4
 800371a:	fb03 f302 	mul.w	r3, r3, r2
 800371e:	4a42      	ldr	r2, [pc, #264]	; (8003828 <getV+0x2b0>)
 8003720:	fb82 1203 	smull	r1, r2, r2, r3
 8003724:	441a      	add	r2, r3
 8003726:	12d2      	asrs	r2, r2, #11
 8003728:	17db      	asrs	r3, r3, #31
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	461a      	mov	r2, r3
 800372e:	4b46      	ldr	r3, [pc, #280]	; (8003848 <getV+0x2d0>)
 8003730:	601a      	str	r2, [r3, #0]
	if(thermopileV_raw < factor){  	//if - else logic prevents overflow and negative voltages which are unrealistic for our system
 8003732:	4b45      	ldr	r3, [pc, #276]	; (8003848 <getV+0x2d0>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b45      	ldr	r3, [pc, #276]	; (800384c <getV+0x2d4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d203      	bcs.n	8003746 <getV+0x1ce>
		thermopileV = 0;
 800373e:	4b44      	ldr	r3, [pc, #272]	; (8003850 <getV+0x2d8>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e015      	b.n	8003772 <getV+0x1fa>
	}
	else {
		thermopileV = (thermopileV_raw - factor) / 2.9;  //mV * some scaling, 3.0 can change up or down to scale Tobj
 8003746:	4b40      	ldr	r3, [pc, #256]	; (8003848 <getV+0x2d0>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4b40      	ldr	r3, [pc, #256]	; (800384c <getV+0x2d4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc fed7 	bl	8000504 <__aeabi_ui2d>
 8003756:	a32a      	add	r3, pc, #168	; (adr r3, 8003800 <getV+0x288>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fd f876 	bl	800084c <__aeabi_ddiv>
 8003760:	4603      	mov	r3, r0
 8003762:	460c      	mov	r4, r1
 8003764:	4618      	mov	r0, r3
 8003766:	4621      	mov	r1, r4
 8003768:	f7fd f9f6 	bl	8000b58 <__aeabi_d2uiz>
 800376c:	4602      	mov	r2, r0
 800376e:	4b38      	ldr	r3, [pc, #224]	; (8003850 <getV+0x2d8>)
 8003770:	601a      	str	r2, [r3, #0]
	}
	Tobj = pow(((thermopileV * 1000) / (s * ee)) + pow(Tsen, 4 - 2.49), 1.0f / (4 - 2.49));   //dirac constant (subtracted from 4) to be changed accordingly; bigger dirac = higher temperature
 8003772:	4b37      	ldr	r3, [pc, #220]	; (8003850 <getV+0x2d8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800377a:	fb02 f203 	mul.w	r2, r2, r3
 800377e:	4b35      	ldr	r3, [pc, #212]	; (8003854 <getV+0x2dc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4935      	ldr	r1, [pc, #212]	; (8003858 <getV+0x2e0>)
 8003784:	6809      	ldr	r1, [r1, #0]
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	4618      	mov	r0, r3
 8003790:	f7fc feb8 	bl	8000504 <__aeabi_ui2d>
 8003794:	4604      	mov	r4, r0
 8003796:	460d      	mov	r5, r1
 8003798:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <getV+0x2cc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7fc feb1 	bl	8000504 <__aeabi_ui2d>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8003808 <getV+0x290>
 80037aa:	ec43 2b10 	vmov	d0, r2, r3
 80037ae:	f007 fb2d 	bl	800ae0c <pow>
 80037b2:	ec53 2b10 	vmov	r2, r3, d0
 80037b6:	4620      	mov	r0, r4
 80037b8:	4629      	mov	r1, r5
 80037ba:	f7fc fd67 	bl	800028c <__adddf3>
 80037be:	4603      	mov	r3, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	ec44 3b17 	vmov	d7, r3, r4
 80037c6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8003810 <getV+0x298>
 80037ca:	eeb0 0a47 	vmov.f32	s0, s14
 80037ce:	eef0 0a67 	vmov.f32	s1, s15
 80037d2:	f007 fb1b 	bl	800ae0c <pow>
 80037d6:	ec54 3b10 	vmov	r3, r4, d0
 80037da:	4618      	mov	r0, r3
 80037dc:	4621      	mov	r1, r4
 80037de:	f7fd f9bb 	bl	8000b58 <__aeabi_d2uiz>
 80037e2:	4602      	mov	r2, r0
 80037e4:	4b1d      	ldr	r3, [pc, #116]	; (800385c <getV+0x2e4>)
 80037e6:	601a      	str	r2, [r3, #0]
	return thermopileV;
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <getV+0x2d8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	ecbd 8b02 	vpop	{d8}
 80037f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f8:	00000000 	.word	0x00000000
 80037fc:	40711000 	.word	0x40711000
 8003800:	33333333 	.word	0x33333333
 8003804:	40073333 	.word	0x40073333
 8003808:	c28f5c28 	.word	0xc28f5c28
 800380c:	3ff828f5 	.word	0x3ff828f5
 8003810:	6254c4aa 	.word	0x6254c4aa
 8003814:	3fe5312a 	.word	0x3fe5312a
 8003818:	200001b4 	.word	0x200001b4
 800381c:	20000220 	.word	0x20000220
 8003820:	200000fc 	.word	0x200000fc
 8003824:	200000f8 	.word	0x200000f8
 8003828:	80080081 	.word	0x80080081
 800382c:	200000f0 	.word	0x200000f0
 8003830:	2000021c 	.word	0x2000021c
 8003834:	20000420 	.word	0x20000420
 8003838:	20000354 	.word	0x20000354
 800383c:	2000026c 	.word	0x2000026c
 8003840:	20000264 	.word	0x20000264
 8003844:	200000a4 	.word	0x200000a4
 8003848:	20000160 	.word	0x20000160
 800384c:	200003d8 	.word	0x200003d8
 8003850:	2000041c 	.word	0x2000041c
 8003854:	20000268 	.word	0x20000268
 8003858:	200000f4 	.word	0x200000f4
 800385c:	20000218 	.word	0x20000218

08003860 <getR>:

int getR() {
 8003860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003864:	ed2d 8b02 	vpush	{d8}
 8003868:	af00      	add	r7, sp, #0
	//Thermopile
	HAL_ADC_Start(&hadc1);
 800386a:	48a5      	ldr	r0, [pc, #660]	; (8003b00 <getR+0x2a0>)
 800386c:	f000 fdbe 	bl	80043ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003870:	f04f 31ff 	mov.w	r1, #4294967295
 8003874:	48a2      	ldr	r0, [pc, #648]	; (8003b00 <getR+0x2a0>)
 8003876:	f000 fe73 	bl	8004560 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 800387a:	48a1      	ldr	r0, [pc, #644]	; (8003b00 <getR+0x2a0>)
 800387c:	f000 ff40 	bl	8004700 <HAL_ADC_GetValue>
 8003880:	4603      	mov	r3, r0
 8003882:	b29a      	uxth	r2, r3
 8003884:	4b9f      	ldr	r3, [pc, #636]	; (8003b04 <getR+0x2a4>)
 8003886:	801a      	strh	r2, [r3, #0]

	//Thermistor
	HAL_ADC_Start(&hadc2);
 8003888:	489f      	ldr	r0, [pc, #636]	; (8003b08 <getR+0x2a8>)
 800388a:	f000 fdaf 	bl	80043ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800388e:	f04f 31ff 	mov.w	r1, #4294967295
 8003892:	489d      	ldr	r0, [pc, #628]	; (8003b08 <getR+0x2a8>)
 8003894:	f000 fe64 	bl	8004560 <HAL_ADC_PollForConversion>
	raw2 = HAL_ADC_GetValue(&hadc2);
 8003898:	489b      	ldr	r0, [pc, #620]	; (8003b08 <getR+0x2a8>)
 800389a:	f000 ff31 	bl	8004700 <HAL_ADC_GetValue>
 800389e:	4603      	mov	r3, r0
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	4b9a      	ldr	r3, [pc, #616]	; (8003b0c <getR+0x2ac>)
 80038a4:	801a      	strh	r2, [r3, #0]

	//Ambient temperature and resistance
	thermistorV = (raw2 * 3300) / 4095; // mv
 80038a6:	4b99      	ldr	r3, [pc, #612]	; (8003b0c <getR+0x2ac>)
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f640 43e4 	movw	r3, #3300	; 0xce4
 80038b0:	fb03 f302 	mul.w	r3, r3, r2
 80038b4:	4a96      	ldr	r2, [pc, #600]	; (8003b10 <getR+0x2b0>)
 80038b6:	fb82 1203 	smull	r1, r2, r2, r3
 80038ba:	441a      	add	r2, r3
 80038bc:	12d2      	asrs	r2, r2, #11
 80038be:	17db      	asrs	r3, r3, #31
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	4b93      	ldr	r3, [pc, #588]	; (8003b14 <getR+0x2b4>)
 80038c6:	601a      	str	r2, [r3, #0]
	Rsen = (thermistorV * R1) / (3300 - thermistorV); // ohms; equation is voltage division
 80038c8:	4b92      	ldr	r3, [pc, #584]	; (8003b14 <getR+0x2b4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a92      	ldr	r2, [pc, #584]	; (8003b18 <getR+0x2b8>)
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	fb02 f203 	mul.w	r2, r2, r3
 80038d4:	4b8f      	ldr	r3, [pc, #572]	; (8003b14 <getR+0x2b4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f5c3 634e 	rsb	r3, r3, #3296	; 0xce0
 80038dc:	3304      	adds	r3, #4
 80038de:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e2:	4a8e      	ldr	r2, [pc, #568]	; (8003b1c <getR+0x2bc>)
 80038e4:	6013      	str	r3, [r2, #0]
	Tsen = ((beta * (T25 + 273)) / (log(Rsen) - log(R25))) / ((273 + T25) + (beta / (log(Rsen) - log(R25)))) - 273;
 80038e6:	4b8e      	ldr	r3, [pc, #568]	; (8003b20 <getR+0x2c0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f203 1311 	addw	r3, r3, #273	; 0x111
 80038ee:	4a8d      	ldr	r2, [pc, #564]	; (8003b24 <getR+0x2c4>)
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fc fe04 	bl	8000504 <__aeabi_ui2d>
 80038fc:	4604      	mov	r4, r0
 80038fe:	460d      	mov	r5, r1
 8003900:	4b86      	ldr	r3, [pc, #536]	; (8003b1c <getR+0x2bc>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7fc fdfd 	bl	8000504 <__aeabi_ui2d>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	ec43 2b10 	vmov	d0, r2, r3
 8003912:	f007 f9fb 	bl	800ad0c <log>
 8003916:	ec59 8b10 	vmov	r8, r9, d0
 800391a:	4b83      	ldr	r3, [pc, #524]	; (8003b28 <getR+0x2c8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fc fdf0 	bl	8000504 <__aeabi_ui2d>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	ec43 2b10 	vmov	d0, r2, r3
 800392c:	f007 f9ee 	bl	800ad0c <log>
 8003930:	ec53 2b10 	vmov	r2, r3, d0
 8003934:	4640      	mov	r0, r8
 8003936:	4649      	mov	r1, r9
 8003938:	f7fc fca6 	bl	8000288 <__aeabi_dsub>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4620      	mov	r0, r4
 8003942:	4629      	mov	r1, r5
 8003944:	f7fc ff82 	bl	800084c <__aeabi_ddiv>
 8003948:	4603      	mov	r3, r0
 800394a:	460c      	mov	r4, r1
 800394c:	4625      	mov	r5, r4
 800394e:	461c      	mov	r4, r3
 8003950:	4b73      	ldr	r3, [pc, #460]	; (8003b20 <getR+0x2c0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f203 1311 	addw	r3, r3, #273	; 0x111
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fdd3 	bl	8000504 <__aeabi_ui2d>
 800395e:	4680      	mov	r8, r0
 8003960:	4689      	mov	r9, r1
 8003962:	4b70      	ldr	r3, [pc, #448]	; (8003b24 <getR+0x2c4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fc fdcc 	bl	8000504 <__aeabi_ui2d>
 800396c:	4682      	mov	sl, r0
 800396e:	468b      	mov	fp, r1
 8003970:	4b6a      	ldr	r3, [pc, #424]	; (8003b1c <getR+0x2bc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fc fdc5 	bl	8000504 <__aeabi_ui2d>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	ec43 2b10 	vmov	d0, r2, r3
 8003982:	f007 f9c3 	bl	800ad0c <log>
 8003986:	eeb0 8a40 	vmov.f32	s16, s0
 800398a:	eef0 8a60 	vmov.f32	s17, s1
 800398e:	4b66      	ldr	r3, [pc, #408]	; (8003b28 <getR+0x2c8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fc fdb6 	bl	8000504 <__aeabi_ui2d>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	ec43 2b10 	vmov	d0, r2, r3
 80039a0:	f007 f9b4 	bl	800ad0c <log>
 80039a4:	ec53 2b10 	vmov	r2, r3, d0
 80039a8:	ec51 0b18 	vmov	r0, r1, d8
 80039ac:	f7fc fc6c 	bl	8000288 <__aeabi_dsub>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4650      	mov	r0, sl
 80039b6:	4659      	mov	r1, fp
 80039b8:	f7fc ff48 	bl	800084c <__aeabi_ddiv>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4640      	mov	r0, r8
 80039c2:	4649      	mov	r1, r9
 80039c4:	f7fc fc62 	bl	800028c <__adddf3>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4620      	mov	r0, r4
 80039ce:	4629      	mov	r1, r5
 80039d0:	f7fc ff3c 	bl	800084c <__aeabi_ddiv>
 80039d4:	4603      	mov	r3, r0
 80039d6:	460c      	mov	r4, r1
 80039d8:	4618      	mov	r0, r3
 80039da:	4621      	mov	r1, r4
 80039dc:	a340      	add	r3, pc, #256	; (adr r3, 8003ae0 <getR+0x280>)
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	f7fc fc51 	bl	8000288 <__aeabi_dsub>
 80039e6:	4603      	mov	r3, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	4618      	mov	r0, r3
 80039ec:	4621      	mov	r1, r4
 80039ee:	f7fd f8b3 	bl	8000b58 <__aeabi_d2uiz>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b4d      	ldr	r3, [pc, #308]	; (8003b2c <getR+0x2cc>)
 80039f6:	601a      	str	r2, [r3, #0]
	// this works same as line above:  Tsen = 1 / (float)((log(Rsen / (float)R25) / (float)beta) + (1 / (float)(273 + T25))) - 273;

	//Thermopile Voltage and Object Temperature
	thermopileV_raw = ((raw * 3300 / 4095)); // mv; ~580 mV offset when should be 0.0 mV
 80039f8:	4b42      	ldr	r3, [pc, #264]	; (8003b04 <getR+0x2a4>)
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f640 43e4 	movw	r3, #3300	; 0xce4
 8003a02:	fb03 f302 	mul.w	r3, r3, r2
 8003a06:	4a42      	ldr	r2, [pc, #264]	; (8003b10 <getR+0x2b0>)
 8003a08:	fb82 1203 	smull	r1, r2, r2, r3
 8003a0c:	441a      	add	r2, r3
 8003a0e:	12d2      	asrs	r2, r2, #11
 8003a10:	17db      	asrs	r3, r3, #31
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b46      	ldr	r3, [pc, #280]	; (8003b30 <getR+0x2d0>)
 8003a18:	601a      	str	r2, [r3, #0]
	if(thermopileV_raw < factor){  	//if - else logic prevents overflow and negative voltages which are unrealistic for our system
 8003a1a:	4b45      	ldr	r3, [pc, #276]	; (8003b30 <getR+0x2d0>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4b45      	ldr	r3, [pc, #276]	; (8003b34 <getR+0x2d4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d203      	bcs.n	8003a2e <getR+0x1ce>
		thermopileV = 0;
 8003a26:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <getR+0x2d8>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e015      	b.n	8003a5a <getR+0x1fa>
	}
	else {
		thermopileV = (thermopileV_raw - factor) / 2.9;  //mV * some scaling, 3.0 can change up or down to scale Tobj
 8003a2e:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <getR+0x2d0>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b40      	ldr	r3, [pc, #256]	; (8003b34 <getR+0x2d4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fc fd63 	bl	8000504 <__aeabi_ui2d>
 8003a3e:	a32a      	add	r3, pc, #168	; (adr r3, 8003ae8 <getR+0x288>)
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f7fc ff02 	bl	800084c <__aeabi_ddiv>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	4621      	mov	r1, r4
 8003a50:	f7fd f882 	bl	8000b58 <__aeabi_d2uiz>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b38      	ldr	r3, [pc, #224]	; (8003b38 <getR+0x2d8>)
 8003a58:	601a      	str	r2, [r3, #0]
	}
	Tobj = pow(((thermopileV * 1000) / (s * ee)) + pow(Tsen, 4 - 2.49), 1.0f / (4 - 2.49));   //dirac constant (subtracted from 4) to be changed accordingly; bigger dirac = higher temperature
 8003a5a:	4b37      	ldr	r3, [pc, #220]	; (8003b38 <getR+0x2d8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a62:	fb02 f203 	mul.w	r2, r2, r3
 8003a66:	4b35      	ldr	r3, [pc, #212]	; (8003b3c <getR+0x2dc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4935      	ldr	r1, [pc, #212]	; (8003b40 <getR+0x2e0>)
 8003a6c:	6809      	ldr	r1, [r1, #0]
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fc fd44 	bl	8000504 <__aeabi_ui2d>
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	460d      	mov	r5, r1
 8003a80:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <getR+0x2cc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fc fd3d 	bl	8000504 <__aeabi_ui2d>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8003af0 <getR+0x290>
 8003a92:	ec43 2b10 	vmov	d0, r2, r3
 8003a96:	f007 f9b9 	bl	800ae0c <pow>
 8003a9a:	ec53 2b10 	vmov	r2, r3, d0
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	f7fc fbf3 	bl	800028c <__adddf3>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	ec44 3b17 	vmov	d7, r3, r4
 8003aae:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8003af8 <getR+0x298>
 8003ab2:	eeb0 0a47 	vmov.f32	s0, s14
 8003ab6:	eef0 0a67 	vmov.f32	s1, s15
 8003aba:	f007 f9a7 	bl	800ae0c <pow>
 8003abe:	ec54 3b10 	vmov	r3, r4, d0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	f7fd f847 	bl	8000b58 <__aeabi_d2uiz>
 8003aca:	4602      	mov	r2, r0
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <getR+0x2e4>)
 8003ace:	601a      	str	r2, [r3, #0]
	return Rsen;
 8003ad0:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <getR+0x2bc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	ecbd 8b02 	vpop	{d8}
 8003adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae0:	00000000 	.word	0x00000000
 8003ae4:	40711000 	.word	0x40711000
 8003ae8:	33333333 	.word	0x33333333
 8003aec:	40073333 	.word	0x40073333
 8003af0:	c28f5c28 	.word	0xc28f5c28
 8003af4:	3ff828f5 	.word	0x3ff828f5
 8003af8:	6254c4aa 	.word	0x6254c4aa
 8003afc:	3fe5312a 	.word	0x3fe5312a
 8003b00:	200001b4 	.word	0x200001b4
 8003b04:	20000220 	.word	0x20000220
 8003b08:	200000fc 	.word	0x200000fc
 8003b0c:	200000f8 	.word	0x200000f8
 8003b10:	80080081 	.word	0x80080081
 8003b14:	200000f0 	.word	0x200000f0
 8003b18:	2000021c 	.word	0x2000021c
 8003b1c:	20000420 	.word	0x20000420
 8003b20:	20000354 	.word	0x20000354
 8003b24:	2000026c 	.word	0x2000026c
 8003b28:	20000264 	.word	0x20000264
 8003b2c:	200000a4 	.word	0x200000a4
 8003b30:	20000160 	.word	0x20000160
 8003b34:	200003d8 	.word	0x200003d8
 8003b38:	2000041c 	.word	0x2000041c
 8003b3c:	20000268 	.word	0x20000268
 8003b40:	200000f4 	.word	0x200000f4
 8003b44:	20000218 	.word	0x20000218

08003b48 <new_message>:
}

// adds new message to message queue
// NOTE: pass url_len = actual size - 1
// ^ this may be fixed later
void new_message(int type, uint8_t* url, int url_len) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
	printf("INSERTING NEW MESSAGE\r\n");
 8003b54:	4823      	ldr	r0, [pc, #140]	; (8003be4 <new_message+0x9c>)
 8003b56:	f006 f8cb 	bl	8009cf0 <puts>
	WifiMessage *m = malloc(sizeof(WifiMessage));
 8003b5a:	2010      	movs	r0, #16
 8003b5c:	f005 ff90 	bl	8009a80 <malloc>
 8003b60:	4603      	mov	r3, r0
 8003b62:	613b      	str	r3, [r7, #16]
	m->type = type;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	601a      	str	r2, [r3, #0]
	m->url = malloc(url_len+1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f005 ff86 	bl	8009a80 <malloc>
 8003b74:	4603      	mov	r3, r0
 8003b76:	461a      	mov	r2, r3
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	605a      	str	r2, [r3, #4]
	memcpy(m->url, url, url_len);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f005 ff83 	bl	8009a90 <memcpy>
	m->url[url_len] = '\0';
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4413      	add	r3, r2
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
	m->url_len = url_len;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
	m->next = NULL;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60da      	str	r2, [r3, #12]
	if (message_queue_head == NULL) {
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <new_message+0xa0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <new_message+0x70>
		printf("INSERTED AS HEAD\r\n");
 8003baa:	4810      	ldr	r0, [pc, #64]	; (8003bec <new_message+0xa4>)
 8003bac:	f006 f8a0 	bl	8009cf0 <puts>
		message_queue_head = m;
 8003bb0:	4a0d      	ldr	r2, [pc, #52]	; (8003be8 <new_message+0xa0>)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e00d      	b.n	8003bd4 <new_message+0x8c>
	} else {
		WifiMessage *tmp = message_queue_head;
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <new_message+0xa0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	617b      	str	r3, [r7, #20]
		while (tmp->next != NULL) {
 8003bbe:	e002      	b.n	8003bc6 <new_message+0x7e>
			tmp = tmp->next;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	617b      	str	r3, [r7, #20]
		while (tmp->next != NULL) {
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f8      	bne.n	8003bc0 <new_message+0x78>
		}
		tmp->next = m;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	60da      	str	r2, [r3, #12]
	}
	printf("NEW MESSAGE INSERTED\r\n");
 8003bd4:	4806      	ldr	r0, [pc, #24]	; (8003bf0 <new_message+0xa8>)
 8003bd6:	f006 f88b 	bl	8009cf0 <puts>
}
 8003bda:	bf00      	nop
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	0800c5b0 	.word	0x0800c5b0
 8003be8:	20000224 	.word	0x20000224
 8003bec:	0800c5c8 	.word	0x0800c5c8
 8003bf0:	0800c5dc 	.word	0x0800c5dc

08003bf4 <get_status>:
	uint8_t url[] = "https://virtualqueue477.herokuapp.com/leftStore?storeSecret=grp4";
	new_message(2, url, sizeof(url)/sizeof(uint8_t)-1);
}

// enqueues a status message
void get_status() {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b092      	sub	sp, #72	; 0x48
 8003bf8:	af00      	add	r7, sp, #0
	uint8_t url[] = "https://virtualqueue477.herokuapp.com/getStatus?storeSecret=grp4";
 8003bfa:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <get_status+0x28>)
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	4611      	mov	r1, r2
 8003c00:	2241      	movs	r2, #65	; 0x41
 8003c02:	4618      	mov	r0, r3
 8003c04:	f005 ff44 	bl	8009a90 <memcpy>
	new_message(3, url, sizeof(url)/sizeof(uint8_t)-1);
 8003c08:	1d3b      	adds	r3, r7, #4
 8003c0a:	2240      	movs	r2, #64	; 0x40
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	2003      	movs	r0, #3
 8003c10:	f7ff ff9a 	bl	8003b48 <new_message>
}
 8003c14:	bf00      	nop
 8003c16:	3748      	adds	r7, #72	; 0x48
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	0800c944 	.word	0x0800c944

08003c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c58 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003c24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003c26:	e003      	b.n	8003c30 <LoopCopyDataInit>

08003c28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003c2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003c2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003c2e:	3104      	adds	r1, #4

08003c30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003c30:	480b      	ldr	r0, [pc, #44]	; (8003c60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003c32:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003c34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003c36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003c38:	d3f6      	bcc.n	8003c28 <CopyDataInit>
	ldr	r2, =_sbss
 8003c3a:	4a0b      	ldr	r2, [pc, #44]	; (8003c68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003c3c:	e002      	b.n	8003c44 <LoopFillZerobss>

08003c3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003c3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003c40:	f842 3b04 	str.w	r3, [r2], #4

08003c44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <LoopForever+0x16>)
	cmp	r2, r3
 8003c46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003c48:	d3f9      	bcc.n	8003c3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c4a:	f7ff f939 	bl	8002ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c4e:	f005 fef3 	bl	8009a38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c52:	f7fd fff7 	bl	8001c44 <main>

08003c56 <LoopForever>:

LoopForever:
    b LoopForever
 8003c56:	e7fe      	b.n	8003c56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c58:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003c5c:	0800cba0 	.word	0x0800cba0
	ldr	r0, =_sdata
 8003c60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003c64:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8003c68:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8003c6c:	20000c90 	.word	0x20000c90

08003c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c70:	e7fe      	b.n	8003c70 <ADC1_2_IRQHandler>

08003c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c7c:	2003      	movs	r0, #3
 8003c7e:	f001 faad 	bl	80051dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c82:	2000      	movs	r0, #0
 8003c84:	f000 f80e 	bl	8003ca4 <HAL_InitTick>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	71fb      	strb	r3, [r7, #7]
 8003c92:	e001      	b.n	8003c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c94:	f7fe fdb4 	bl	8002800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c98:	79fb      	ldrb	r3, [r7, #7]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003cb0:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <HAL_InitTick+0x68>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d022      	beq.n	8003cfe <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_InitTick+0x6c>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <HAL_InitTick+0x68>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 faba 	bl	8005246 <HAL_SYSTICK_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10f      	bne.n	8003cf8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b0f      	cmp	r3, #15
 8003cdc:	d809      	bhi.n	8003cf2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce6:	f001 fa84 	bl	80051f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <HAL_InitTick+0x70>)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	e007      	b.n	8003d02 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
 8003cf6:	e004      	b.n	8003d02 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	e001      	b.n	8003d02 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000008 	.word	0x20000008
 8003d10:	20000000 	.word	0x20000000
 8003d14:	20000004 	.word	0x20000004

08003d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_IncTick+0x1c>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_IncTick+0x20>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4413      	add	r3, r2
 8003d26:	4a03      	ldr	r2, [pc, #12]	; (8003d34 <HAL_IncTick+0x1c>)
 8003d28:	6013      	str	r3, [r2, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	20000c88 	.word	0x20000c88
 8003d38:	20000008 	.word	0x20000008

08003d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_GetTick+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000c88 	.word	0x20000c88

08003d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d5c:	f7ff ffee 	bl	8003d3c <HAL_GetTick>
 8003d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d004      	beq.n	8003d78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d6e:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_Delay+0x40>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4413      	add	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d78:	bf00      	nop
 8003d7a:	f7ff ffdf 	bl	8003d3c <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d8f7      	bhi.n	8003d7a <HAL_Delay+0x26>
  {
  }
}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000008 	.word	0x20000008

08003d98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	609a      	str	r2, [r3, #8]
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003e00:	b490      	push	{r4, r7}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3360      	adds	r3, #96	; 0x60
 8003e12:	461a      	mov	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003e1c:	6822      	ldr	r2, [r4, #0]
 8003e1e:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <LL_ADC_SetOffset+0x40>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e32:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc90      	pop	{r4, r7}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	03fff000 	.word	0x03fff000

08003e44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003e44:	b490      	push	{r4, r7}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3360      	adds	r3, #96	; 0x60
 8003e52:	461a      	mov	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc90      	pop	{r4, r7}
 8003e6a:	4770      	bx	lr

08003e6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e6c:	b490      	push	{r4, r7}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3360      	adds	r3, #96	; 0x60
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc90      	pop	{r4, r7}
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ec2:	b490      	push	{r4, r7}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3330      	adds	r3, #48	; 0x30
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	4413      	add	r3, r2
 8003ee0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003ee2:	6822      	ldr	r2, [r4, #0]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	211f      	movs	r1, #31
 8003eec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	0e9b      	lsrs	r3, r3, #26
 8003ef8:	f003 011f 	and.w	r1, r3, #31
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	4313      	orrs	r3, r2
 8003f08:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc90      	pop	{r4, r7}
 8003f12:	4770      	bx	lr

08003f14 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f14:	b490      	push	{r4, r7}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3314      	adds	r3, #20
 8003f24:	461a      	mov	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	0e5b      	lsrs	r3, r3, #25
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	4413      	add	r3, r2
 8003f32:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003f34:	6822      	ldr	r2, [r4, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	0d1b      	lsrs	r3, r3, #20
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2107      	movs	r1, #7
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	401a      	ands	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	0d1b      	lsrs	r3, r3, #20
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	4313      	orrs	r3, r2
 8003f58:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc90      	pop	{r4, r7}
 8003f62:	4770      	bx	lr

08003f64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	401a      	ands	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f003 0318 	and.w	r3, r3, #24
 8003f86:	4908      	ldr	r1, [pc, #32]	; (8003fa8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f88:	40d9      	lsrs	r1, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	400b      	ands	r3, r1
 8003f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f92:	431a      	orrs	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	0007ffff 	.word	0x0007ffff

08003fac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6093      	str	r3, [r2, #8]
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800401c:	d101      	bne.n	8004022 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004040:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004044:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800406c:	d101      	bne.n	8004072 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004090:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004094:	f043 0201 	orr.w	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <LL_ADC_IsEnabled+0x18>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <LL_ADC_IsEnabled+0x1a>
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b04      	cmp	r3, #4
 8004108:	d101      	bne.n	800410e <LL_ADC_REG_IsConversionOngoing+0x18>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b08      	cmp	r3, #8
 800412e:	d101      	bne.n	8004134 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b089      	sub	sp, #36	; 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004150:	2300      	movs	r3, #0
 8004152:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e134      	b.n	80043c8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fe fb6b 	bl	8002848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ff3f 	bl	8004008 <LL_ADC_IsDeepPowerDownEnabled>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff ff25 	bl	8003fe4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff ff5a 	bl	8004058 <LL_ADC_IsInternalRegulatorEnabled>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d113      	bne.n	80041d2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff ff3e 	bl	8004030 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80041b4:	4b86      	ldr	r3, [pc, #536]	; (80043d0 <HAL_ADC_Init+0x28c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	099b      	lsrs	r3, r3, #6
 80041ba:	4a86      	ldr	r2, [pc, #536]	; (80043d4 <HAL_ADC_Init+0x290>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	099b      	lsrs	r3, r3, #6
 80041c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041c4:	e002      	b.n	80041cc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f9      	bne.n	80041c6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff ff3e 	bl	8004058 <LL_ADC_IsInternalRegulatorEnabled>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10d      	bne.n	80041fe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	f043 0210 	orr.w	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	f043 0201 	orr.w	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff ff77 	bl	80040f6 <LL_ADC_REG_IsConversionOngoing>
 8004208:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 80cf 	bne.w	80043b6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f040 80cb 	bne.w	80043b6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004228:	f043 0202 	orr.w	r2, r3, #2
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff ff37 	bl	80040a8 <LL_ADC_IsEnabled>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d115      	bne.n	800426c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004240:	4865      	ldr	r0, [pc, #404]	; (80043d8 <HAL_ADC_Init+0x294>)
 8004242:	f7ff ff31 	bl	80040a8 <LL_ADC_IsEnabled>
 8004246:	4604      	mov	r4, r0
 8004248:	4864      	ldr	r0, [pc, #400]	; (80043dc <HAL_ADC_Init+0x298>)
 800424a:	f7ff ff2d 	bl	80040a8 <LL_ADC_IsEnabled>
 800424e:	4603      	mov	r3, r0
 8004250:	431c      	orrs	r4, r3
 8004252:	4863      	ldr	r0, [pc, #396]	; (80043e0 <HAL_ADC_Init+0x29c>)
 8004254:	f7ff ff28 	bl	80040a8 <LL_ADC_IsEnabled>
 8004258:	4603      	mov	r3, r0
 800425a:	4323      	orrs	r3, r4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4619      	mov	r1, r3
 8004266:	485f      	ldr	r0, [pc, #380]	; (80043e4 <HAL_ADC_Init+0x2a0>)
 8004268:	f7ff fd96 	bl	8003d98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	7e5b      	ldrb	r3, [r3, #25]
 8004270:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004276:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800427c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004282:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800428a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d106      	bne.n	80042a8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	3b01      	subs	r3, #1
 80042a0:	045b      	lsls	r3, r3, #17
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d009      	beq.n	80042c4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <HAL_ADC_Init+0x2a4>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	69b9      	ldr	r1, [r7, #24]
 80042d4:	430b      	orrs	r3, r1
 80042d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff0a 	bl	80040f6 <LL_ADC_REG_IsConversionOngoing>
 80042e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff17 	bl	800411c <LL_ADC_INJ_IsConversionOngoing>
 80042ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d13d      	bne.n	8004372 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d13a      	bne.n	8004372 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004300:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004308:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004318:	f023 0302 	bic.w	r3, r3, #2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	69b9      	ldr	r1, [r7, #24]
 8004322:	430b      	orrs	r3, r1
 8004324:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800432c:	2b01      	cmp	r3, #1
 800432e:	d118      	bne.n	8004362 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800433a:	f023 0304 	bic.w	r3, r3, #4
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004346:	4311      	orrs	r1, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800434c:	4311      	orrs	r1, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004352:	430a      	orrs	r2, r1
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	611a      	str	r2, [r3, #16]
 8004360:	e007      	b.n	8004372 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d10c      	bne.n	8004394 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	f023 010f 	bic.w	r1, r3, #15
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
 8004392:	e007      	b.n	80043a4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 020f 	bic.w	r2, r2, #15
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	f023 0303 	bic.w	r3, r3, #3
 80043ac:	f043 0201 	orr.w	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	655a      	str	r2, [r3, #84]	; 0x54
 80043b4:	e007      	b.n	80043c6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	f043 0210 	orr.w	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3724      	adds	r7, #36	; 0x24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd90      	pop	{r4, r7, pc}
 80043d0:	20000000 	.word	0x20000000
 80043d4:	053e2d63 	.word	0x053e2d63
 80043d8:	50040000 	.word	0x50040000
 80043dc:	50040100 	.word	0x50040100
 80043e0:	50040200 	.word	0x50040200
 80043e4:	50040300 	.word	0x50040300
 80043e8:	fff0c007 	.word	0xfff0c007

080043ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043f4:	4857      	ldr	r0, [pc, #348]	; (8004554 <HAL_ADC_Start+0x168>)
 80043f6:	f7ff fdd9 	bl	8003fac <LL_ADC_GetMultimode>
 80043fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fe78 	bl	80040f6 <LL_ADC_REG_IsConversionOngoing>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	f040 809c 	bne.w	8004546 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_ADC_Start+0x30>
 8004418:	2302      	movs	r3, #2
 800441a:	e097      	b.n	800454c <HAL_ADC_Start+0x160>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fcdd 	bl	8004de4 <ADC_Enable>
 800442a:	4603      	mov	r3, r0
 800442c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 8083 	bne.w	800453c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800443e:	f023 0301 	bic.w	r3, r3, #1
 8004442:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a42      	ldr	r2, [pc, #264]	; (8004558 <HAL_ADC_Start+0x16c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d002      	beq.n	800445a <HAL_ADC_Start+0x6e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	e000      	b.n	800445c <HAL_ADC_Start+0x70>
 800445a:	4b40      	ldr	r3, [pc, #256]	; (800455c <HAL_ADC_Start+0x170>)
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	4293      	cmp	r3, r2
 8004462:	d002      	beq.n	800446a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d105      	bne.n	8004476 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004482:	d106      	bne.n	8004492 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	f023 0206 	bic.w	r2, r3, #6
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	659a      	str	r2, [r3, #88]	; 0x58
 8004490:	e002      	b.n	8004498 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	221c      	movs	r2, #28
 800449e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <HAL_ADC_Start+0x16c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d002      	beq.n	80044b8 <HAL_ADC_Start+0xcc>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	e000      	b.n	80044ba <HAL_ADC_Start+0xce>
 80044b8:	4b28      	ldr	r3, [pc, #160]	; (800455c <HAL_ADC_Start+0x170>)
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	4293      	cmp	r3, r2
 80044c0:	d008      	beq.n	80044d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d002      	beq.n	80044d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b09      	cmp	r3, #9
 80044d2:	d114      	bne.n	80044fe <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fde9 	bl	80040ce <LL_ADC_REG_StartConversion>
 80044fc:	e025      	b.n	800454a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a12      	ldr	r2, [pc, #72]	; (8004558 <HAL_ADC_Start+0x16c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d002      	beq.n	800451a <HAL_ADC_Start+0x12e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	e000      	b.n	800451c <HAL_ADC_Start+0x130>
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <HAL_ADC_Start+0x170>)
 800451c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00f      	beq.n	800454a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004532:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	655a      	str	r2, [r3, #84]	; 0x54
 800453a:	e006      	b.n	800454a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004544:	e001      	b.n	800454a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004546:	2302      	movs	r3, #2
 8004548:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800454a:	7dfb      	ldrb	r3, [r7, #23]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	50040300 	.word	0x50040300
 8004558:	50040100 	.word	0x50040100
 800455c:	50040000 	.word	0x50040000

08004560 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800456a:	4862      	ldr	r0, [pc, #392]	; (80046f4 <HAL_ADC_PollForConversion+0x194>)
 800456c:	f7ff fd1e 	bl	8003fac <LL_ADC_GetMultimode>
 8004570:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	2b08      	cmp	r3, #8
 8004578:	d102      	bne.n	8004580 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800457a:	2308      	movs	r3, #8
 800457c:	61fb      	str	r3, [r7, #28]
 800457e:	e02a      	b.n	80045d6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b05      	cmp	r3, #5
 800458a:	d002      	beq.n	8004592 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2b09      	cmp	r3, #9
 8004590:	d111      	bne.n	80045b6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d007      	beq.n	80045b0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	f043 0220 	orr.w	r2, r3, #32
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e09d      	b.n	80046ec <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80045b0:	2304      	movs	r3, #4
 80045b2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80045b4:	e00f      	b.n	80045d6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80045b6:	484f      	ldr	r0, [pc, #316]	; (80046f4 <HAL_ADC_PollForConversion+0x194>)
 80045b8:	f7ff fd06 	bl	8003fc8 <LL_ADC_GetMultiDMATransfer>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e08c      	b.n	80046ec <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80045d2:	2304      	movs	r3, #4
 80045d4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80045d6:	f7ff fbb1 	bl	8003d3c <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80045dc:	e01a      	b.n	8004614 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d016      	beq.n	8004614 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80045e6:	f7ff fba9 	bl	8003d3c <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <HAL_ADC_PollForConversion+0x9c>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10b      	bne.n	8004614 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	f043 0204 	orr.w	r2, r3, #4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e06b      	b.n	80046ec <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0dd      	beq.n	80045de <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fc32 	bl	8003e9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d01c      	beq.n	8004678 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	7e5b      	ldrb	r3, [r3, #25]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d118      	bne.n	8004678 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b08      	cmp	r3, #8
 8004652:	d111      	bne.n	8004678 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d105      	bne.n	8004678 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004670:	f043 0201 	orr.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <HAL_ADC_PollForConversion+0x198>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d002      	beq.n	8004688 <HAL_ADC_PollForConversion+0x128>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	e000      	b.n	800468a <HAL_ADC_PollForConversion+0x12a>
 8004688:	4b1c      	ldr	r3, [pc, #112]	; (80046fc <HAL_ADC_PollForConversion+0x19c>)
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6812      	ldr	r2, [r2, #0]
 800468e:	4293      	cmp	r3, r2
 8004690:	d008      	beq.n	80046a4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b05      	cmp	r3, #5
 800469c:	d002      	beq.n	80046a4 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b09      	cmp	r3, #9
 80046a2:	d104      	bne.n	80046ae <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	e00c      	b.n	80046c8 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a11      	ldr	r2, [pc, #68]	; (80046f8 <HAL_ADC_PollForConversion+0x198>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d002      	beq.n	80046be <HAL_ADC_PollForConversion+0x15e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	e000      	b.n	80046c0 <HAL_ADC_PollForConversion+0x160>
 80046be:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <HAL_ADC_PollForConversion+0x19c>)
 80046c0:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d104      	bne.n	80046d8 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2208      	movs	r2, #8
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	e008      	b.n	80046ea <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d103      	bne.n	80046ea <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	220c      	movs	r2, #12
 80046e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3720      	adds	r7, #32
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	50040300 	.word	0x50040300
 80046f8:	50040100 	.word	0x50040100
 80046fc:	50040000 	.word	0x50040000

08004700 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b0a6      	sub	sp, #152	; 0x98
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800472c:	2300      	movs	r3, #0
 800472e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_ADC_ConfigChannel+0x22>
 800473a:	2302      	movs	r3, #2
 800473c:	e348      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0x6b4>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fcd3 	bl	80040f6 <LL_ADC_REG_IsConversionOngoing>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	f040 8329 	bne.w	8004daa <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b05      	cmp	r3, #5
 800475e:	d824      	bhi.n	80047aa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	3b02      	subs	r3, #2
 8004766:	2b03      	cmp	r3, #3
 8004768:	d81b      	bhi.n	80047a2 <HAL_ADC_ConfigChannel+0x86>
 800476a:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <HAL_ADC_ConfigChannel+0x54>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	08004781 	.word	0x08004781
 8004774:	08004789 	.word	0x08004789
 8004778:	08004791 	.word	0x08004791
 800477c:	08004799 	.word	0x08004799
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	220c      	movs	r2, #12
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	e011      	b.n	80047ac <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2212      	movs	r2, #18
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	e00d      	b.n	80047ac <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2218      	movs	r2, #24
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	e009      	b.n	80047ac <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800479e:	605a      	str	r2, [r3, #4]
 80047a0:	e004      	b.n	80047ac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2206      	movs	r2, #6
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	e000      	b.n	80047ac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80047aa:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	f7ff fb82 	bl	8003ec2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fc97 	bl	80040f6 <LL_ADC_REG_IsConversionOngoing>
 80047c8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fca3 	bl	800411c <LL_ADC_INJ_IsConversionOngoing>
 80047d6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 8148 	bne.w	8004a74 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f040 8143 	bne.w	8004a74 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f7ff fb8a 	bl	8003f14 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	08db      	lsrs	r3, r3, #3
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b04      	cmp	r3, #4
 8004820:	d00a      	beq.n	8004838 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6919      	ldr	r1, [r3, #16]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004832:	f7ff fae5 	bl	8003e00 <LL_ADC_SetOffset>
 8004836:	e11d      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fb00 	bl	8003e44 <LL_ADC_GetOffsetChannel>
 8004844:	4603      	mov	r3, r0
 8004846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x148>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff faf5 	bl	8003e44 <LL_ADC_GetOffsetChannel>
 800485a:	4603      	mov	r3, r0
 800485c:	0e9b      	lsrs	r3, r3, #26
 800485e:	f003 021f 	and.w	r2, r3, #31
 8004862:	e012      	b.n	800488a <HAL_ADC_ConfigChannel+0x16e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2100      	movs	r1, #0
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff faea 	bl	8003e44 <LL_ADC_GetOffsetChannel>
 8004870:	4603      	mov	r3, r0
 8004872:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004892:	2b00      	cmp	r3, #0
 8004894:	d105      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x186>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	0e9b      	lsrs	r3, r3, #26
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	e00a      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x19c>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80048b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d106      	bne.n	80048ca <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2200      	movs	r2, #0
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fad1 	bl	8003e6c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2101      	movs	r1, #1
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fab7 	bl	8003e44 <LL_ADC_GetOffsetChannel>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x1da>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2101      	movs	r1, #1
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff faac 	bl	8003e44 <LL_ADC_GetOffsetChannel>
 80048ec:	4603      	mov	r3, r0
 80048ee:	0e9b      	lsrs	r3, r3, #26
 80048f0:	f003 021f 	and.w	r2, r3, #31
 80048f4:	e010      	b.n	8004918 <HAL_ADC_ConfigChannel+0x1fc>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2101      	movs	r1, #1
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff faa1 	bl	8003e44 <LL_ADC_GetOffsetChannel>
 8004902:	4603      	mov	r3, r0
 8004904:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800490e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004910:	fab3 f383 	clz	r3, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x214>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	0e9b      	lsrs	r3, r3, #26
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	e00a      	b.n	8004946 <HAL_ADC_ConfigChannel+0x22a>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004938:	fa93 f3a3 	rbit	r3, r3
 800493c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800493e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004940:	fab3 f383 	clz	r3, r3
 8004944:	b2db      	uxtb	r3, r3
 8004946:	429a      	cmp	r2, r3
 8004948:	d106      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	2101      	movs	r1, #1
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fa8a 	bl	8003e6c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2102      	movs	r1, #2
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fa70 	bl	8003e44 <LL_ADC_GetOffsetChannel>
 8004964:	4603      	mov	r3, r0
 8004966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x268>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2102      	movs	r1, #2
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fa65 	bl	8003e44 <LL_ADC_GetOffsetChannel>
 800497a:	4603      	mov	r3, r0
 800497c:	0e9b      	lsrs	r3, r3, #26
 800497e:	f003 021f 	and.w	r2, r3, #31
 8004982:	e010      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x28a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2102      	movs	r1, #2
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff fa5a 	bl	8003e44 <LL_ADC_GetOffsetChannel>
 8004990:	4603      	mov	r3, r0
 8004992:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004996:	fa93 f3a3 	rbit	r3, r3
 800499a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800499c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499e:	fab3 f383 	clz	r3, r3
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <HAL_ADC_ConfigChannel+0x2a2>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	0e9b      	lsrs	r3, r3, #26
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	e00a      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x2b8>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c6:	fa93 f3a3 	rbit	r3, r3
 80049ca:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80049cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d106      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2200      	movs	r2, #0
 80049de:	2102      	movs	r1, #2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fa43 	bl	8003e6c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2103      	movs	r1, #3
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fa29 	bl	8003e44 <LL_ADC_GetOffsetChannel>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x2f6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2103      	movs	r1, #3
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fa1e 	bl	8003e44 <LL_ADC_GetOffsetChannel>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	0e9b      	lsrs	r3, r3, #26
 8004a0c:	f003 021f 	and.w	r2, r3, #31
 8004a10:	e010      	b.n	8004a34 <HAL_ADC_ConfigChannel+0x318>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2103      	movs	r1, #3
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fa13 	bl	8003e44 <LL_ADC_GetOffsetChannel>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a24:	fa93 f3a3 	rbit	r3, r3
 8004a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2c:	fab3 f383 	clz	r3, r3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x330>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	0e9b      	lsrs	r3, r3, #26
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	e00a      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x346>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a54:	fa93 f3a3 	rbit	r3, r3
 8004a58:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8004a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5c:	fab3 f383 	clz	r3, r3
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d106      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2103      	movs	r1, #3
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff f9fc 	bl	8003e6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fb15 	bl	80040a8 <LL_ADC_IsEnabled>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f040 810c 	bne.w	8004c9e <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6819      	ldr	r1, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f7ff fa66 	bl	8003f64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4aad      	ldr	r2, [pc, #692]	; (8004d54 <HAL_ADC_ConfigChannel+0x638>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	f040 80fd 	bne.w	8004c9e <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x3b0>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	0e9b      	lsrs	r3, r3, #26
 8004aba:	3301      	adds	r3, #1
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	2b09      	cmp	r3, #9
 8004ac2:	bf94      	ite	ls
 8004ac4:	2301      	movls	r3, #1
 8004ac6:	2300      	movhi	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e012      	b.n	8004af2 <HAL_ADC_ConfigChannel+0x3d6>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad4:	fa93 f3a3 	rbit	r3, r3
 8004ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	2b09      	cmp	r3, #9
 8004aea:	bf94      	ite	ls
 8004aec:	2301      	movls	r3, #1
 8004aee:	2300      	movhi	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d064      	beq.n	8004bc0 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d107      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x3f6>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	0e9b      	lsrs	r3, r3, #26
 8004b08:	3301      	adds	r3, #1
 8004b0a:	069b      	lsls	r3, r3, #26
 8004b0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b10:	e00e      	b.n	8004b30 <HAL_ADC_ConfigChannel+0x414>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	fa93 f3a3 	rbit	r3, r3
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	fab3 f383 	clz	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	069b      	lsls	r3, r3, #26
 8004b2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x434>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	0e9b      	lsrs	r3, r3, #26
 8004b42:	3301      	adds	r3, #1
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	e010      	b.n	8004b72 <HAL_ADC_ConfigChannel+0x456>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	fa93 f3a3 	rbit	r3, r3
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b60:	fab3 f383 	clz	r3, r3
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	3301      	adds	r3, #1
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b72:	ea42 0103 	orr.w	r1, r2, r3
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <HAL_ADC_ConfigChannel+0x47c>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	0e9b      	lsrs	r3, r3, #26
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f003 021f 	and.w	r2, r3, #31
 8004b8e:	4613      	mov	r3, r2
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	4413      	add	r3, r2
 8004b94:	051b      	lsls	r3, r3, #20
 8004b96:	e011      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x4a0>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	fa93 f3a3 	rbit	r3, r3
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	fab3 f383 	clz	r3, r3
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f003 021f 	and.w	r2, r3, #31
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	e069      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x4c0>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	0e9b      	lsrs	r3, r3, #26
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	069b      	lsls	r3, r3, #26
 8004bd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bda:	e00e      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x4de>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	fa93 f3a3 	rbit	r3, r3
 8004be8:	61fb      	str	r3, [r7, #28]
  return result;
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	fab3 f383 	clz	r3, r3
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	069b      	lsls	r3, r3, #26
 8004bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_ADC_ConfigChannel+0x4fe>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	0e9b      	lsrs	r3, r3, #26
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	2101      	movs	r1, #1
 8004c14:	fa01 f303 	lsl.w	r3, r1, r3
 8004c18:	e010      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x520>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	617b      	str	r3, [r7, #20]
  return result;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	fab3 f383 	clz	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	3301      	adds	r3, #1
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	2101      	movs	r1, #1
 8004c38:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3c:	ea42 0103 	orr.w	r1, r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10d      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x54c>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	0e9b      	lsrs	r3, r3, #26
 8004c52:	3301      	adds	r3, #1
 8004c54:	f003 021f 	and.w	r2, r3, #31
 8004c58:	4613      	mov	r3, r2
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3b1e      	subs	r3, #30
 8004c60:	051b      	lsls	r3, r3, #20
 8004c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c66:	e014      	b.n	8004c92 <HAL_ADC_ConfigChannel+0x576>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	fa93 f3a3 	rbit	r3, r3
 8004c74:	60fb      	str	r3, [r7, #12]
  return result;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	fab3 f383 	clz	r3, r3
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	f003 021f 	and.w	r2, r3, #31
 8004c84:	4613      	mov	r3, r2
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	3b1e      	subs	r3, #30
 8004c8c:	051b      	lsls	r3, r3, #20
 8004c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c92:	430b      	orrs	r3, r1
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	6892      	ldr	r2, [r2, #8]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	f7ff f93b 	bl	8003f14 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b2d      	ldr	r3, [pc, #180]	; (8004d58 <HAL_ADC_ConfigChannel+0x63c>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 808c 	beq.w	8004dc4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cac:	482b      	ldr	r0, [pc, #172]	; (8004d5c <HAL_ADC_ConfigChannel+0x640>)
 8004cae:	f7ff f899 	bl	8003de4 <LL_ADC_GetCommonPathInternalCh>
 8004cb2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a29      	ldr	r2, [pc, #164]	; (8004d60 <HAL_ADC_ConfigChannel+0x644>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d12b      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x5fc>
 8004cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d125      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a24      	ldr	r2, [pc, #144]	; (8004d64 <HAL_ADC_ConfigChannel+0x648>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <HAL_ADC_ConfigChannel+0x5c4>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a23      	ldr	r2, [pc, #140]	; (8004d68 <HAL_ADC_ConfigChannel+0x64c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d16e      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ce4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ce8:	4619      	mov	r1, r3
 8004cea:	481c      	ldr	r0, [pc, #112]	; (8004d5c <HAL_ADC_ConfigChannel+0x640>)
 8004cec:	f7ff f867 	bl	8003dbe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004cf0:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HAL_ADC_ConfigChannel+0x650>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <HAL_ADC_ConfigChannel+0x654>)
 8004cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfc:	099a      	lsrs	r2, r3, #6
 8004cfe:	4613      	mov	r3, r2
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004d08:	e002      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f9      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d16:	e052      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <HAL_ADC_ConfigChannel+0x658>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d12a      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x65c>
 8004d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d124      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <HAL_ADC_ConfigChannel+0x648>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d004      	beq.n	8004d42 <HAL_ADC_ConfigChannel+0x626>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <HAL_ADC_ConfigChannel+0x64c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d13f      	bne.n	8004dc2 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4803      	ldr	r0, [pc, #12]	; (8004d5c <HAL_ADC_ConfigChannel+0x640>)
 8004d4e:	f7ff f836 	bl	8003dbe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d52:	e036      	b.n	8004dc2 <HAL_ADC_ConfigChannel+0x6a6>
 8004d54:	407f0000 	.word	0x407f0000
 8004d58:	80080000 	.word	0x80080000
 8004d5c:	50040300 	.word	0x50040300
 8004d60:	c7520000 	.word	0xc7520000
 8004d64:	50040000 	.word	0x50040000
 8004d68:	50040200 	.word	0x50040200
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	053e2d63 	.word	0x053e2d63
 8004d74:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a16      	ldr	r2, [pc, #88]	; (8004dd8 <HAL_ADC_ConfigChannel+0x6bc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d120      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d11a      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a12      	ldr	r2, [pc, #72]	; (8004ddc <HAL_ADC_ConfigChannel+0x6c0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d115      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004da0:	4619      	mov	r1, r3
 8004da2:	480f      	ldr	r0, [pc, #60]	; (8004de0 <HAL_ADC_ConfigChannel+0x6c4>)
 8004da4:	f7ff f80b 	bl	8003dbe <LL_ADC_SetCommonPathInternalCh>
 8004da8:	e00c      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8004dbc:	e002      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dbe:	bf00      	nop
 8004dc0:	e000      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dc2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004dcc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3798      	adds	r7, #152	; 0x98
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	80000001 	.word	0x80000001
 8004ddc:	50040000 	.word	0x50040000
 8004de0:	50040300 	.word	0x50040300

08004de4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff f959 	bl	80040a8 <LL_ADC_IsEnabled>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d146      	bne.n	8004e8a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	4b24      	ldr	r3, [pc, #144]	; (8004e94 <ADC_Enable+0xb0>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00d      	beq.n	8004e26 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	f043 0210 	orr.w	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1a:	f043 0201 	orr.w	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e032      	b.n	8004e8c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff f928 	bl	8004080 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004e30:	f7fe ff84 	bl	8003d3c <HAL_GetTick>
 8004e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e36:	e021      	b.n	8004e7c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff f933 	bl	80040a8 <LL_ADC_IsEnabled>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d104      	bne.n	8004e52 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff f917 	bl	8004080 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004e52:	f7fe ff73 	bl	8003d3c <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d90d      	bls.n	8004e7c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e64:	f043 0210 	orr.w	r2, r3, #16
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e70:	f043 0201 	orr.w	r2, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e007      	b.n	8004e8c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d1d6      	bne.n	8004e38 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	8000003f 	.word	0x8000003f

08004e98 <LL_ADC_IsEnabled>:
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <LL_ADC_IsEnabled+0x18>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <LL_ADC_IsEnabled+0x1a>
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <LL_ADC_REG_IsConversionOngoing>:
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d101      	bne.n	8004ed6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b09f      	sub	sp, #124	; 0x7c
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e08f      	b.n	8005022 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a47      	ldr	r2, [pc, #284]	; (800502c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d102      	bne.n	8004f1a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004f14:	4b46      	ldr	r3, [pc, #280]	; (8005030 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	e001      	b.n	8004f1e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10b      	bne.n	8004f3c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e072      	b.n	8005022 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff ffbd 	bl	8004ebe <LL_ADC_REG_IsConversionOngoing>
 8004f44:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff ffb7 	bl	8004ebe <LL_ADC_REG_IsConversionOngoing>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d154      	bne.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d151      	bne.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f5c:	4b35      	ldr	r3, [pc, #212]	; (8005034 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004f5e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d02c      	beq.n	8004fc2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f7a:	035b      	lsls	r3, r3, #13
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f84:	4829      	ldr	r0, [pc, #164]	; (800502c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004f86:	f7ff ff87 	bl	8004e98 <LL_ADC_IsEnabled>
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4828      	ldr	r0, [pc, #160]	; (8005030 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004f8e:	f7ff ff83 	bl	8004e98 <LL_ADC_IsEnabled>
 8004f92:	4603      	mov	r3, r0
 8004f94:	431c      	orrs	r4, r3
 8004f96:	4828      	ldr	r0, [pc, #160]	; (8005038 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004f98:	f7ff ff7e 	bl	8004e98 <LL_ADC_IsEnabled>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4323      	orrs	r3, r4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d137      	bne.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004fac:	f023 030f 	bic.w	r3, r3, #15
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	6811      	ldr	r1, [r2, #0]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	6892      	ldr	r2, [r2, #8]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fc0:	e028      	b.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fce:	4817      	ldr	r0, [pc, #92]	; (800502c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004fd0:	f7ff ff62 	bl	8004e98 <LL_ADC_IsEnabled>
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	4816      	ldr	r0, [pc, #88]	; (8005030 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004fd8:	f7ff ff5e 	bl	8004e98 <LL_ADC_IsEnabled>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	431c      	orrs	r4, r3
 8004fe0:	4815      	ldr	r0, [pc, #84]	; (8005038 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004fe2:	f7ff ff59 	bl	8004e98 <LL_ADC_IsEnabled>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4323      	orrs	r3, r4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d112      	bne.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ff6:	f023 030f 	bic.w	r3, r3, #15
 8004ffa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ffc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ffe:	e009      	b.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005004:	f043 0220 	orr.w	r2, r3, #32
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005012:	e000      	b.n	8005016 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005014:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800501e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005022:	4618      	mov	r0, r3
 8005024:	377c      	adds	r7, #124	; 0x7c
 8005026:	46bd      	mov	sp, r7
 8005028:	bd90      	pop	{r4, r7, pc}
 800502a:	bf00      	nop
 800502c:	50040000 	.word	0x50040000
 8005030:	50040100 	.word	0x50040100
 8005034:	50040300 	.word	0x50040300
 8005038:	50040200 	.word	0x50040200

0800503c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800504c:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <__NVIC_SetPriorityGrouping+0x44>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005058:	4013      	ands	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800506c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800506e:	4a04      	ldr	r2, [pc, #16]	; (8005080 <__NVIC_SetPriorityGrouping+0x44>)
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	60d3      	str	r3, [r2, #12]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	e000ed00 	.word	0xe000ed00

08005084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005088:	4b04      	ldr	r3, [pc, #16]	; (800509c <__NVIC_GetPriorityGrouping+0x18>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	f003 0307 	and.w	r3, r3, #7
}
 8005092:	4618      	mov	r0, r3
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	e000ed00 	.word	0xe000ed00

080050a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	db0b      	blt.n	80050ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	f003 021f 	and.w	r2, r3, #31
 80050b8:	4907      	ldr	r1, [pc, #28]	; (80050d8 <__NVIC_EnableIRQ+0x38>)
 80050ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2001      	movs	r0, #1
 80050c2:	fa00 f202 	lsl.w	r2, r0, r2
 80050c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	e000e100 	.word	0xe000e100

080050dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	6039      	str	r1, [r7, #0]
 80050e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	db0a      	blt.n	8005106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	490c      	ldr	r1, [pc, #48]	; (8005128 <__NVIC_SetPriority+0x4c>)
 80050f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fa:	0112      	lsls	r2, r2, #4
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	440b      	add	r3, r1
 8005100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005104:	e00a      	b.n	800511c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	4908      	ldr	r1, [pc, #32]	; (800512c <__NVIC_SetPriority+0x50>)
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	3b04      	subs	r3, #4
 8005114:	0112      	lsls	r2, r2, #4
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	440b      	add	r3, r1
 800511a:	761a      	strb	r2, [r3, #24]
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	e000e100 	.word	0xe000e100
 800512c:	e000ed00 	.word	0xe000ed00

08005130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005130:	b480      	push	{r7}
 8005132:	b089      	sub	sp, #36	; 0x24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f1c3 0307 	rsb	r3, r3, #7
 800514a:	2b04      	cmp	r3, #4
 800514c:	bf28      	it	cs
 800514e:	2304      	movcs	r3, #4
 8005150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3304      	adds	r3, #4
 8005156:	2b06      	cmp	r3, #6
 8005158:	d902      	bls.n	8005160 <NVIC_EncodePriority+0x30>
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	3b03      	subs	r3, #3
 800515e:	e000      	b.n	8005162 <NVIC_EncodePriority+0x32>
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005164:	f04f 32ff 	mov.w	r2, #4294967295
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	43da      	mvns	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	401a      	ands	r2, r3
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005178:	f04f 31ff 	mov.w	r1, #4294967295
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	fa01 f303 	lsl.w	r3, r1, r3
 8005182:	43d9      	mvns	r1, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005188:	4313      	orrs	r3, r2
         );
}
 800518a:	4618      	mov	r0, r3
 800518c:	3724      	adds	r7, #36	; 0x24
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051a8:	d301      	bcc.n	80051ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051aa:	2301      	movs	r3, #1
 80051ac:	e00f      	b.n	80051ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051ae:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <SysTick_Config+0x40>)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051b6:	210f      	movs	r1, #15
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	f7ff ff8e 	bl	80050dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <SysTick_Config+0x40>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051c6:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <SysTick_Config+0x40>)
 80051c8:	2207      	movs	r2, #7
 80051ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	e000e010 	.word	0xe000e010

080051dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff ff29 	bl	800503c <__NVIC_SetPriorityGrouping>
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b086      	sub	sp, #24
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	4603      	mov	r3, r0
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
 80051fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005204:	f7ff ff3e 	bl	8005084 <__NVIC_GetPriorityGrouping>
 8005208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	6978      	ldr	r0, [r7, #20]
 8005210:	f7ff ff8e 	bl	8005130 <NVIC_EncodePriority>
 8005214:	4602      	mov	r2, r0
 8005216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800521a:	4611      	mov	r1, r2
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ff5d 	bl	80050dc <__NVIC_SetPriority>
}
 8005222:	bf00      	nop
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	4603      	mov	r3, r0
 8005232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ff31 	bl	80050a0 <__NVIC_EnableIRQ>
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b082      	sub	sp, #8
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff ffa2 	bl	8005198 <SysTick_Config>
 8005254:	4603      	mov	r3, r0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e098      	b.n	80053a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	4b4d      	ldr	r3, [pc, #308]	; (80053b0 <HAL_DMA_Init+0x150>)
 800527a:	429a      	cmp	r2, r3
 800527c:	d80f      	bhi.n	800529e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	4b4b      	ldr	r3, [pc, #300]	; (80053b4 <HAL_DMA_Init+0x154>)
 8005286:	4413      	add	r3, r2
 8005288:	4a4b      	ldr	r2, [pc, #300]	; (80053b8 <HAL_DMA_Init+0x158>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	009a      	lsls	r2, r3, #2
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a48      	ldr	r2, [pc, #288]	; (80053bc <HAL_DMA_Init+0x15c>)
 800529a:	641a      	str	r2, [r3, #64]	; 0x40
 800529c:	e00e      	b.n	80052bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	4b46      	ldr	r3, [pc, #280]	; (80053c0 <HAL_DMA_Init+0x160>)
 80052a6:	4413      	add	r3, r2
 80052a8:	4a43      	ldr	r2, [pc, #268]	; (80053b8 <HAL_DMA_Init+0x158>)
 80052aa:	fba2 2303 	umull	r2, r3, r2, r3
 80052ae:	091b      	lsrs	r3, r3, #4
 80052b0:	009a      	lsls	r2, r3, #2
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a42      	ldr	r2, [pc, #264]	; (80053c4 <HAL_DMA_Init+0x164>)
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005316:	d039      	beq.n	800538c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	4a27      	ldr	r2, [pc, #156]	; (80053bc <HAL_DMA_Init+0x15c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d11a      	bne.n	8005358 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005322:	4b29      	ldr	r3, [pc, #164]	; (80053c8 <HAL_DMA_Init+0x168>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	f003 031c 	and.w	r3, r3, #28
 800532e:	210f      	movs	r1, #15
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	43db      	mvns	r3, r3
 8005336:	4924      	ldr	r1, [pc, #144]	; (80053c8 <HAL_DMA_Init+0x168>)
 8005338:	4013      	ands	r3, r2
 800533a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800533c:	4b22      	ldr	r3, [pc, #136]	; (80053c8 <HAL_DMA_Init+0x168>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6859      	ldr	r1, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005348:	f003 031c 	and.w	r3, r3, #28
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	491d      	ldr	r1, [pc, #116]	; (80053c8 <HAL_DMA_Init+0x168>)
 8005352:	4313      	orrs	r3, r2
 8005354:	600b      	str	r3, [r1, #0]
 8005356:	e019      	b.n	800538c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005358:	4b1c      	ldr	r3, [pc, #112]	; (80053cc <HAL_DMA_Init+0x16c>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	f003 031c 	and.w	r3, r3, #28
 8005364:	210f      	movs	r1, #15
 8005366:	fa01 f303 	lsl.w	r3, r1, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	4917      	ldr	r1, [pc, #92]	; (80053cc <HAL_DMA_Init+0x16c>)
 800536e:	4013      	ands	r3, r2
 8005370:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005372:	4b16      	ldr	r3, [pc, #88]	; (80053cc <HAL_DMA_Init+0x16c>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6859      	ldr	r1, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	f003 031c 	and.w	r3, r3, #28
 8005382:	fa01 f303 	lsl.w	r3, r1, r3
 8005386:	4911      	ldr	r1, [pc, #68]	; (80053cc <HAL_DMA_Init+0x16c>)
 8005388:	4313      	orrs	r3, r2
 800538a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	40020407 	.word	0x40020407
 80053b4:	bffdfff8 	.word	0xbffdfff8
 80053b8:	cccccccd 	.word	0xcccccccd
 80053bc:	40020000 	.word	0x40020000
 80053c0:	bffdfbf8 	.word	0xbffdfbf8
 80053c4:	40020400 	.word	0x40020400
 80053c8:	400200a8 	.word	0x400200a8
 80053cc:	400204a8 	.word	0x400204a8

080053d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_DMA_Start_IT+0x20>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e04b      	b.n	8005488 <HAL_DMA_Start_IT+0xb8>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	d13a      	bne.n	800547a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f96b 	bl	8005704 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	2b00      	cmp	r3, #0
 8005434:	d008      	beq.n	8005448 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 020e 	orr.w	r2, r2, #14
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e00f      	b.n	8005468 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0204 	bic.w	r2, r2, #4
 8005456:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 020a 	orr.w	r2, r2, #10
 8005466:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e005      	b.n	8005486 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005482:	2302      	movs	r3, #2
 8005484:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005486:	7dfb      	ldrb	r3, [r7, #23]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d008      	beq.n	80054ba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2204      	movs	r2, #4
 80054ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e022      	b.n	8005500 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 020e 	bic.w	r2, r2, #14
 80054c8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0201 	bic.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054de:	f003 021c 	and.w	r2, r3, #28
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	2101      	movs	r1, #1
 80054e8:	fa01 f202 	lsl.w	r2, r1, r2
 80054ec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d005      	beq.n	8005530 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2204      	movs	r2, #4
 8005528:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e029      	b.n	8005584 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 020e 	bic.w	r2, r2, #14
 800553e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0201 	bic.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005554:	f003 021c 	and.w	r2, r3, #28
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	2101      	movs	r1, #1
 800555e:	fa01 f202 	lsl.w	r2, r1, r2
 8005562:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	4798      	blx	r3
    }
  }
  return status;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	f003 031c 	and.w	r3, r3, #28
 80055ae:	2204      	movs	r2, #4
 80055b0:	409a      	lsls	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d026      	beq.n	8005608 <HAL_DMA_IRQHandler+0x7a>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d021      	beq.n	8005608 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d107      	bne.n	80055e2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0204 	bic.w	r2, r2, #4
 80055e0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f003 021c 	and.w	r2, r3, #28
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	2104      	movs	r1, #4
 80055f0:	fa01 f202 	lsl.w	r2, r1, r2
 80055f4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d071      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005606:	e06c      	b.n	80056e2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560c:	f003 031c 	and.w	r3, r3, #28
 8005610:	2202      	movs	r2, #2
 8005612:	409a      	lsls	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4013      	ands	r3, r2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d02e      	beq.n	800567a <HAL_DMA_IRQHandler+0xec>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d029      	beq.n	800567a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10b      	bne.n	800564c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 020a 	bic.w	r2, r2, #10
 8005642:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005650:	f003 021c 	and.w	r2, r3, #28
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	2102      	movs	r1, #2
 800565a:	fa01 f202 	lsl.w	r2, r1, r2
 800565e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	2b00      	cmp	r3, #0
 800566e:	d038      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005678:	e033      	b.n	80056e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567e:	f003 031c 	and.w	r3, r3, #28
 8005682:	2208      	movs	r2, #8
 8005684:	409a      	lsls	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d02a      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x156>
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d025      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 020e 	bic.w	r2, r2, #14
 80056a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ac:	f003 021c 	and.w	r2, r3, #28
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	2101      	movs	r1, #1
 80056b6:	fa01 f202 	lsl.w	r2, r1, r2
 80056ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d004      	beq.n	80056e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
}
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	f003 021c 	and.w	r2, r3, #28
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	2101      	movs	r1, #1
 8005720:	fa01 f202 	lsl.w	r2, r1, r2
 8005724:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b10      	cmp	r3, #16
 8005734:	d108      	bne.n	8005748 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005746:	e007      	b.n	8005758 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	60da      	str	r2, [r3, #12]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005772:	e17f      	b.n	8005a74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	2101      	movs	r1, #1
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	fa01 f303 	lsl.w	r3, r1, r3
 8005780:	4013      	ands	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 8171 	beq.w	8005a6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d003      	beq.n	800579c <HAL_GPIO_Init+0x38>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b12      	cmp	r3, #18
 800579a:	d123      	bne.n	80057e4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	08da      	lsrs	r2, r3, #3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3208      	adds	r2, #8
 80057a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	220f      	movs	r2, #15
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4013      	ands	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	08da      	lsrs	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3208      	adds	r2, #8
 80057de:	6939      	ldr	r1, [r7, #16]
 80057e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	2203      	movs	r2, #3
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4013      	ands	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 0203 	and.w	r2, r3, #3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d00b      	beq.n	8005838 <HAL_GPIO_Init+0xd4>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d007      	beq.n	8005838 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800582c:	2b11      	cmp	r3, #17
 800582e:	d003      	beq.n	8005838 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b12      	cmp	r3, #18
 8005836:	d130      	bne.n	800589a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	2203      	movs	r2, #3
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4013      	ands	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	fa02 f303 	lsl.w	r3, r2, r3
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800586e:	2201      	movs	r2, #1
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4013      	ands	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	091b      	lsrs	r3, r3, #4
 8005884:	f003 0201 	and.w	r2, r3, #1
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d118      	bne.n	80058d8 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80058ac:	2201      	movs	r2, #1
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	43db      	mvns	r3, r3
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4013      	ands	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	08db      	lsrs	r3, r3, #3
 80058c2:	f003 0201 	and.w	r2, r3, #1
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	2203      	movs	r2, #3
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	43db      	mvns	r3, r3
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4013      	ands	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 80ac 	beq.w	8005a6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005916:	4b5e      	ldr	r3, [pc, #376]	; (8005a90 <HAL_GPIO_Init+0x32c>)
 8005918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591a:	4a5d      	ldr	r2, [pc, #372]	; (8005a90 <HAL_GPIO_Init+0x32c>)
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	6613      	str	r3, [r2, #96]	; 0x60
 8005922:	4b5b      	ldr	r3, [pc, #364]	; (8005a90 <HAL_GPIO_Init+0x32c>)
 8005924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	60bb      	str	r3, [r7, #8]
 800592c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800592e:	4a59      	ldr	r2, [pc, #356]	; (8005a94 <HAL_GPIO_Init+0x330>)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	3302      	adds	r3, #2
 8005936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800593a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	220f      	movs	r2, #15
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43db      	mvns	r3, r3
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4013      	ands	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005958:	d025      	beq.n	80059a6 <HAL_GPIO_Init+0x242>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a4e      	ldr	r2, [pc, #312]	; (8005a98 <HAL_GPIO_Init+0x334>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01f      	beq.n	80059a2 <HAL_GPIO_Init+0x23e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a4d      	ldr	r2, [pc, #308]	; (8005a9c <HAL_GPIO_Init+0x338>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d019      	beq.n	800599e <HAL_GPIO_Init+0x23a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a4c      	ldr	r2, [pc, #304]	; (8005aa0 <HAL_GPIO_Init+0x33c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_GPIO_Init+0x236>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a4b      	ldr	r2, [pc, #300]	; (8005aa4 <HAL_GPIO_Init+0x340>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00d      	beq.n	8005996 <HAL_GPIO_Init+0x232>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a4a      	ldr	r2, [pc, #296]	; (8005aa8 <HAL_GPIO_Init+0x344>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d007      	beq.n	8005992 <HAL_GPIO_Init+0x22e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a49      	ldr	r2, [pc, #292]	; (8005aac <HAL_GPIO_Init+0x348>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d101      	bne.n	800598e <HAL_GPIO_Init+0x22a>
 800598a:	2306      	movs	r3, #6
 800598c:	e00c      	b.n	80059a8 <HAL_GPIO_Init+0x244>
 800598e:	2307      	movs	r3, #7
 8005990:	e00a      	b.n	80059a8 <HAL_GPIO_Init+0x244>
 8005992:	2305      	movs	r3, #5
 8005994:	e008      	b.n	80059a8 <HAL_GPIO_Init+0x244>
 8005996:	2304      	movs	r3, #4
 8005998:	e006      	b.n	80059a8 <HAL_GPIO_Init+0x244>
 800599a:	2303      	movs	r3, #3
 800599c:	e004      	b.n	80059a8 <HAL_GPIO_Init+0x244>
 800599e:	2302      	movs	r3, #2
 80059a0:	e002      	b.n	80059a8 <HAL_GPIO_Init+0x244>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <HAL_GPIO_Init+0x244>
 80059a6:	2300      	movs	r3, #0
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	f002 0203 	and.w	r2, r2, #3
 80059ae:	0092      	lsls	r2, r2, #2
 80059b0:	4093      	lsls	r3, r2
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80059b8:	4936      	ldr	r1, [pc, #216]	; (8005a94 <HAL_GPIO_Init+0x330>)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	089b      	lsrs	r3, r3, #2
 80059be:	3302      	adds	r3, #2
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80059c6:	4b3a      	ldr	r3, [pc, #232]	; (8005ab0 <HAL_GPIO_Init+0x34c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4013      	ands	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80059ea:	4a31      	ldr	r2, [pc, #196]	; (8005ab0 <HAL_GPIO_Init+0x34c>)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80059f0:	4b2f      	ldr	r3, [pc, #188]	; (8005ab0 <HAL_GPIO_Init+0x34c>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	43db      	mvns	r3, r3
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4013      	ands	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a14:	4a26      	ldr	r2, [pc, #152]	; (8005ab0 <HAL_GPIO_Init+0x34c>)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a1a:	4b25      	ldr	r3, [pc, #148]	; (8005ab0 <HAL_GPIO_Init+0x34c>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	43db      	mvns	r3, r3
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4013      	ands	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a3e:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <HAL_GPIO_Init+0x34c>)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a44:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <HAL_GPIO_Init+0x34c>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4013      	ands	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a68:	4a11      	ldr	r2, [pc, #68]	; (8005ab0 <HAL_GPIO_Init+0x34c>)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	3301      	adds	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f47f ae78 	bne.w	8005774 <HAL_GPIO_Init+0x10>
  }
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40021000 	.word	0x40021000
 8005a94:	40010000 	.word	0x40010000
 8005a98:	48000400 	.word	0x48000400
 8005a9c:	48000800 	.word	0x48000800
 8005aa0:	48000c00 	.word	0x48000c00
 8005aa4:	48001000 	.word	0x48001000
 8005aa8:	48001400 	.word	0x48001400
 8005aac:	48001800 	.word	0x48001800
 8005ab0:	40010400 	.word	0x40010400

08005ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	807b      	strh	r3, [r7, #2]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ac4:	787b      	ldrb	r3, [r7, #1]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005aca:	887a      	ldrh	r2, [r7, #2]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ad0:	e002      	b.n	8005ad8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ad2:	887a      	ldrh	r2, [r7, #2]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e081      	b.n	8005bfa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fc ff1c 	bl	8002948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	; 0x24
 8005b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d107      	bne.n	8005b5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b5a:	609a      	str	r2, [r3, #8]
 8005b5c:	e006      	b.n	8005b6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005b6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d104      	bne.n	8005b7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ba0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	ea42 0103 	orr.w	r1, r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	021a      	lsls	r2, r3, #8
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	69d9      	ldr	r1, [r3, #28]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	d138      	bne.n	8005c8a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e032      	b.n	8005c8c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2224      	movs	r2, #36	; 0x24
 8005c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0201 	bic.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c54:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6819      	ldr	r1, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0201 	orr.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e000      	b.n	8005c8c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c8a:	2302      	movs	r3, #2
  }
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b20      	cmp	r3, #32
 8005cac:	d139      	bne.n	8005d22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e033      	b.n	8005d24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2224      	movs	r2, #36	; 0x24
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0201 	bic.w	r2, r2, #1
 8005cda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0201 	orr.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e000      	b.n	8005d24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d22:	2302      	movs	r3, #2
  }
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e0af      	b.n	8005ea2 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fc fe3a 	bl	80029d0 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0201 	bic.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e00a      	b.n	8005d90 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	3304      	adds	r3, #4
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	2200      	movs	r2, #0
 8005d88:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b0f      	cmp	r3, #15
 8005d94:	d9f1      	bls.n	8005d7a <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0204 	orr.w	r2, r2, #4
 8005da4:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	4b3f      	ldr	r3, [pc, #252]	; (8005eac <HAL_LCD_Init+0x17c>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6851      	ldr	r1, [r2, #4]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6892      	ldr	r2, [r2, #8]
 8005db8:	4311      	orrs	r1, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005dbe:	4311      	orrs	r1, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005dc4:	4311      	orrs	r1, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	69d2      	ldr	r2, [r2, #28]
 8005dca:	4311      	orrs	r1, r2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6a12      	ldr	r2, [r2, #32]
 8005dd0:	4311      	orrs	r1, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6992      	ldr	r2, [r2, #24]
 8005dd6:	4311      	orrs	r1, r2
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ddc:	4311      	orrs	r1, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	430b      	orrs	r3, r1
 8005de4:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f8f1 	bl	8005fce <LCD_WaitForSynchro>
 8005dec:	4603      	mov	r3, r0
 8005dee:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8005df0:	7cfb      	ldrb	r3, [r7, #19]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <HAL_LCD_Init+0xca>
  {
    return status;
 8005df6:	7cfb      	ldrb	r3, [r7, #19]
 8005df8:	e053      	b.n	8005ea2 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0201 	orr.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8005e32:	f7fd ff83 	bl	8003d3c <HAL_GetTick>
 8005e36:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8005e38:	e00c      	b.n	8005e54 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005e3a:	f7fd ff7f 	bl	8003d3c <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e48:	d904      	bls.n	8005e54 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e026      	b.n	8005ea2 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d1eb      	bne.n	8005e3a <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8005e62:	f7fd ff6b 	bl	8003d3c <HAL_GetTick>
 8005e66:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8005e68:	e00c      	b.n	8005e84 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005e6a:	f7fd ff67 	bl	8003d3c <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e78:	d904      	bls.n	8005e84 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2210      	movs	r2, #16
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e00e      	b.n	8005ea2 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 0310 	and.w	r3, r3, #16
 8005e8e:	2b10      	cmp	r3, #16
 8005e90:	d1eb      	bne.n	8005e6a <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8005ea0:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	fc00000e 	.word	0xfc00000e

08005eb0 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ec2:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8005ec4:	7cbb      	ldrb	r3, [r7, #18]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d002      	beq.n	8005ed0 <HAL_LCD_Clear+0x20>
 8005eca:	7cbb      	ldrb	r3, [r7, #18]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d140      	bne.n	8005f52 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_LCD_Clear+0x2e>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e03a      	b.n	8005f54 <HAL_LCD_Clear+0xa4>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8005eee:	f7fd ff25 	bl	8003d3c <HAL_GetTick>
 8005ef2:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8005ef4:	e010      	b.n	8005f18 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005ef6:	f7fd ff21 	bl	8003d3c <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f04:	d908      	bls.n	8005f18 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e01d      	b.n	8005f54 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d0e7      	beq.n	8005ef6 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	e00a      	b.n	8005f42 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	3304      	adds	r3, #4
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	2200      	movs	r2, #0
 8005f3a:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b0f      	cmp	r3, #15
 8005f46:	d9f1      	bls.n	8005f2c <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f807 	bl	8005f5c <HAL_LCD_UpdateDisplayRequest>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8005f52:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3718      	adds	r7, #24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0204 	orr.w	r2, r2, #4
 8005f7a:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8005f7c:	f7fd fede 	bl	8003d3c <HAL_GetTick>
 8005f80:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8005f82:	e010      	b.n	8005fa6 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005f84:	f7fd feda 	bl	8003d3c <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f92:	d908      	bls.n	8005fa6 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2204      	movs	r2, #4
 8005f98:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e00f      	b.n	8005fc6 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d1e7      	bne.n	8005f84 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8005fd6:	f7fd feb1 	bl	8003d3c <HAL_GetTick>
 8005fda:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8005fdc:	e00c      	b.n	8005ff8 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8005fde:	f7fd fead 	bl	8003d3c <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fec:	d904      	bls.n	8005ff8 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e007      	b.n	8006008 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 0320 	and.w	r3, r3, #32
 8006002:	2b20      	cmp	r3, #32
 8006004:	d1eb      	bne.n	8005fde <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006014:	4b04      	ldr	r3, [pc, #16]	; (8006028 <HAL_PWREx_GetVoltageRange+0x18>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800601c:	4618      	mov	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40007000 	.word	0x40007000

0800602c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800603a:	d130      	bne.n	800609e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800603c:	4b23      	ldr	r3, [pc, #140]	; (80060cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006048:	d038      	beq.n	80060bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800604a:	4b20      	ldr	r3, [pc, #128]	; (80060cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006052:	4a1e      	ldr	r2, [pc, #120]	; (80060cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006054:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006058:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800605a:	4b1d      	ldr	r3, [pc, #116]	; (80060d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2232      	movs	r2, #50	; 0x32
 8006060:	fb02 f303 	mul.w	r3, r2, r3
 8006064:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006066:	fba2 2303 	umull	r2, r3, r2, r3
 800606a:	0c9b      	lsrs	r3, r3, #18
 800606c:	3301      	adds	r3, #1
 800606e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006070:	e002      	b.n	8006078 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3b01      	subs	r3, #1
 8006076:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006078:	4b14      	ldr	r3, [pc, #80]	; (80060cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006084:	d102      	bne.n	800608c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f2      	bne.n	8006072 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800608c:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006098:	d110      	bne.n	80060bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e00f      	b.n	80060be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800609e:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80060a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060aa:	d007      	beq.n	80060bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060ac:	4b07      	ldr	r3, [pc, #28]	; (80060cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80060b4:	4a05      	ldr	r2, [pc, #20]	; (80060cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80060b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40007000 	.word	0x40007000
 80060d0:	20000000 	.word	0x20000000
 80060d4:	431bde83 	.word	0x431bde83

080060d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e39d      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ea:	4ba4      	ldr	r3, [pc, #656]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 030c 	and.w	r3, r3, #12
 80060f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060f4:	4ba1      	ldr	r3, [pc, #644]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 80e1 	beq.w	80062ce <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d007      	beq.n	8006122 <HAL_RCC_OscConfig+0x4a>
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b0c      	cmp	r3, #12
 8006116:	f040 8088 	bne.w	800622a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b01      	cmp	r3, #1
 800611e:	f040 8084 	bne.w	800622a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006122:	4b96      	ldr	r3, [pc, #600]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_RCC_OscConfig+0x62>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e375      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1a      	ldr	r2, [r3, #32]
 800613e:	4b8f      	ldr	r3, [pc, #572]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0308 	and.w	r3, r3, #8
 8006146:	2b00      	cmp	r3, #0
 8006148:	d004      	beq.n	8006154 <HAL_RCC_OscConfig+0x7c>
 800614a:	4b8c      	ldr	r3, [pc, #560]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006152:	e005      	b.n	8006160 <HAL_RCC_OscConfig+0x88>
 8006154:	4b89      	ldr	r3, [pc, #548]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800615a:	091b      	lsrs	r3, r3, #4
 800615c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006160:	4293      	cmp	r3, r2
 8006162:	d223      	bcs.n	80061ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fd09 	bl	8006b80 <RCC_SetFlashLatencyFromMSIRange>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e356      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006178:	4b80      	ldr	r3, [pc, #512]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7f      	ldr	r2, [pc, #508]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 800617e:	f043 0308 	orr.w	r3, r3, #8
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	4b7d      	ldr	r3, [pc, #500]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	497a      	ldr	r1, [pc, #488]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006192:	4313      	orrs	r3, r2
 8006194:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006196:	4b79      	ldr	r3, [pc, #484]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	4975      	ldr	r1, [pc, #468]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	604b      	str	r3, [r1, #4]
 80061aa:	e022      	b.n	80061f2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061ac:	4b73      	ldr	r3, [pc, #460]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a72      	ldr	r2, [pc, #456]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 80061b2:	f043 0308 	orr.w	r3, r3, #8
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	4b70      	ldr	r3, [pc, #448]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	496d      	ldr	r1, [pc, #436]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061ca:	4b6c      	ldr	r3, [pc, #432]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	4968      	ldr	r1, [pc, #416]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fccc 	bl	8006b80 <RCC_SetFlashLatencyFromMSIRange>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e319      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061f2:	f000 fc03 	bl	80069fc <HAL_RCC_GetSysClockFreq>
 80061f6:	4601      	mov	r1, r0
 80061f8:	4b60      	ldr	r3, [pc, #384]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	091b      	lsrs	r3, r3, #4
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	4a5f      	ldr	r2, [pc, #380]	; (8006380 <HAL_RCC_OscConfig+0x2a8>)
 8006204:	5cd3      	ldrb	r3, [r2, r3]
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	fa21 f303 	lsr.w	r3, r1, r3
 800620e:	4a5d      	ldr	r2, [pc, #372]	; (8006384 <HAL_RCC_OscConfig+0x2ac>)
 8006210:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006212:	4b5d      	ldr	r3, [pc, #372]	; (8006388 <HAL_RCC_OscConfig+0x2b0>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fd fd44 	bl	8003ca4 <HAL_InitTick>
 800621c:	4603      	mov	r3, r0
 800621e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006220:	7bfb      	ldrb	r3, [r7, #15]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d052      	beq.n	80062cc <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	e2fd      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d032      	beq.n	8006298 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006232:	4b52      	ldr	r3, [pc, #328]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a51      	ldr	r2, [pc, #324]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006238:	f043 0301 	orr.w	r3, r3, #1
 800623c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800623e:	f7fd fd7d 	bl	8003d3c <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006246:	f7fd fd79 	bl	8003d3c <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e2e6      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006258:	4b48      	ldr	r3, [pc, #288]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006264:	4b45      	ldr	r3, [pc, #276]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a44      	ldr	r2, [pc, #272]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 800626a:	f043 0308 	orr.w	r3, r3, #8
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	4b42      	ldr	r3, [pc, #264]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	493f      	ldr	r1, [pc, #252]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 800627e:	4313      	orrs	r3, r2
 8006280:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006282:	4b3e      	ldr	r3, [pc, #248]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	493a      	ldr	r1, [pc, #232]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006292:	4313      	orrs	r3, r2
 8006294:	604b      	str	r3, [r1, #4]
 8006296:	e01a      	b.n	80062ce <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006298:	4b38      	ldr	r3, [pc, #224]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a37      	ldr	r2, [pc, #220]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 800629e:	f023 0301 	bic.w	r3, r3, #1
 80062a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062a4:	f7fd fd4a 	bl	8003d3c <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062ac:	f7fd fd46 	bl	8003d3c <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e2b3      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80062be:	4b2f      	ldr	r3, [pc, #188]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x1d4>
 80062ca:	e000      	b.n	80062ce <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d074      	beq.n	80063c4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d005      	beq.n	80062ec <HAL_RCC_OscConfig+0x214>
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b0c      	cmp	r3, #12
 80062e4:	d10e      	bne.n	8006304 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d10b      	bne.n	8006304 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ec:	4b23      	ldr	r3, [pc, #140]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d064      	beq.n	80063c2 <HAL_RCC_OscConfig+0x2ea>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d160      	bne.n	80063c2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e290      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630c:	d106      	bne.n	800631c <HAL_RCC_OscConfig+0x244>
 800630e:	4b1b      	ldr	r3, [pc, #108]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1a      	ldr	r2, [pc, #104]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	e01d      	b.n	8006358 <HAL_RCC_OscConfig+0x280>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006324:	d10c      	bne.n	8006340 <HAL_RCC_OscConfig+0x268>
 8006326:	4b15      	ldr	r3, [pc, #84]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a14      	ldr	r2, [pc, #80]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 800632c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	4b12      	ldr	r3, [pc, #72]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a11      	ldr	r2, [pc, #68]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e00b      	b.n	8006358 <HAL_RCC_OscConfig+0x280>
 8006340:	4b0e      	ldr	r3, [pc, #56]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a0d      	ldr	r2, [pc, #52]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	4b0b      	ldr	r3, [pc, #44]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0a      	ldr	r2, [pc, #40]	; (800637c <HAL_RCC_OscConfig+0x2a4>)
 8006352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01c      	beq.n	800639a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006360:	f7fd fcec 	bl	8003d3c <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006366:	e011      	b.n	800638c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006368:	f7fd fce8 	bl	8003d3c <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b64      	cmp	r3, #100	; 0x64
 8006374:	d90a      	bls.n	800638c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e255      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
 800637a:	bf00      	nop
 800637c:	40021000 	.word	0x40021000
 8006380:	0800ca64 	.word	0x0800ca64
 8006384:	20000000 	.word	0x20000000
 8006388:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800638c:	4bae      	ldr	r3, [pc, #696]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0e7      	beq.n	8006368 <HAL_RCC_OscConfig+0x290>
 8006398:	e014      	b.n	80063c4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639a:	f7fd fccf 	bl	8003d3c <HAL_GetTick>
 800639e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063a2:	f7fd fccb 	bl	8003d3c <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b64      	cmp	r3, #100	; 0x64
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e238      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80063b4:	4ba4      	ldr	r3, [pc, #656]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1f0      	bne.n	80063a2 <HAL_RCC_OscConfig+0x2ca>
 80063c0:	e000      	b.n	80063c4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d060      	beq.n	8006492 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d005      	beq.n	80063e2 <HAL_RCC_OscConfig+0x30a>
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b0c      	cmp	r3, #12
 80063da:	d119      	bne.n	8006410 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d116      	bne.n	8006410 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063e2:	4b99      	ldr	r3, [pc, #612]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d005      	beq.n	80063fa <HAL_RCC_OscConfig+0x322>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e215      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fa:	4b93      	ldr	r3, [pc, #588]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	061b      	lsls	r3, r3, #24
 8006408:	498f      	ldr	r1, [pc, #572]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 800640a:	4313      	orrs	r3, r2
 800640c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800640e:	e040      	b.n	8006492 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d023      	beq.n	8006460 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006418:	4b8b      	ldr	r3, [pc, #556]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a8a      	ldr	r2, [pc, #552]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 800641e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006424:	f7fd fc8a 	bl	8003d3c <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800642c:	f7fd fc86 	bl	8003d3c <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e1f3      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800643e:	4b82      	ldr	r3, [pc, #520]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0f0      	beq.n	800642c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644a:	4b7f      	ldr	r3, [pc, #508]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	061b      	lsls	r3, r3, #24
 8006458:	497b      	ldr	r1, [pc, #492]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 800645a:	4313      	orrs	r3, r2
 800645c:	604b      	str	r3, [r1, #4]
 800645e:	e018      	b.n	8006492 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006460:	4b79      	ldr	r3, [pc, #484]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a78      	ldr	r2, [pc, #480]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 8006466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800646a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646c:	f7fd fc66 	bl	8003d3c <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006474:	f7fd fc62 	bl	8003d3c <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e1cf      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006486:	4b70      	ldr	r3, [pc, #448]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f0      	bne.n	8006474 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d03c      	beq.n	8006518 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d01c      	beq.n	80064e0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064a6:	4b68      	ldr	r3, [pc, #416]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80064a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ac:	4a66      	ldr	r2, [pc, #408]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b6:	f7fd fc41 	bl	8003d3c <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064bc:	e008      	b.n	80064d0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064be:	f7fd fc3d 	bl	8003d3c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e1aa      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064d0:	4b5d      	ldr	r3, [pc, #372]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80064d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0ef      	beq.n	80064be <HAL_RCC_OscConfig+0x3e6>
 80064de:	e01b      	b.n	8006518 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064e0:	4b59      	ldr	r3, [pc, #356]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80064e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e6:	4a58      	ldr	r2, [pc, #352]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80064e8:	f023 0301 	bic.w	r3, r3, #1
 80064ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f0:	f7fd fc24 	bl	8003d3c <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064f8:	f7fd fc20 	bl	8003d3c <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e18d      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800650a:	4b4f      	ldr	r3, [pc, #316]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 800650c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1ef      	bne.n	80064f8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80a5 	beq.w	8006670 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006526:	2300      	movs	r3, #0
 8006528:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800652a:	4b47      	ldr	r3, [pc, #284]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 800652c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10d      	bne.n	8006552 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006536:	4b44      	ldr	r3, [pc, #272]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 8006538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653a:	4a43      	ldr	r2, [pc, #268]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 800653c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006540:	6593      	str	r3, [r2, #88]	; 0x58
 8006542:	4b41      	ldr	r3, [pc, #260]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 8006544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800654a:	60bb      	str	r3, [r7, #8]
 800654c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800654e:	2301      	movs	r3, #1
 8006550:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006552:	4b3e      	ldr	r3, [pc, #248]	; (800664c <HAL_RCC_OscConfig+0x574>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655a:	2b00      	cmp	r3, #0
 800655c:	d118      	bne.n	8006590 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800655e:	4b3b      	ldr	r3, [pc, #236]	; (800664c <HAL_RCC_OscConfig+0x574>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a3a      	ldr	r2, [pc, #232]	; (800664c <HAL_RCC_OscConfig+0x574>)
 8006564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800656a:	f7fd fbe7 	bl	8003d3c <HAL_GetTick>
 800656e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006570:	e008      	b.n	8006584 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006572:	f7fd fbe3 	bl	8003d3c <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e150      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006584:	4b31      	ldr	r3, [pc, #196]	; (800664c <HAL_RCC_OscConfig+0x574>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0f0      	beq.n	8006572 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d108      	bne.n	80065aa <HAL_RCC_OscConfig+0x4d2>
 8006598:	4b2b      	ldr	r3, [pc, #172]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 800659a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659e:	4a2a      	ldr	r2, [pc, #168]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065a8:	e024      	b.n	80065f4 <HAL_RCC_OscConfig+0x51c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	2b05      	cmp	r3, #5
 80065b0:	d110      	bne.n	80065d4 <HAL_RCC_OscConfig+0x4fc>
 80065b2:	4b25      	ldr	r3, [pc, #148]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80065b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b8:	4a23      	ldr	r2, [pc, #140]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80065ba:	f043 0304 	orr.w	r3, r3, #4
 80065be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065c2:	4b21      	ldr	r3, [pc, #132]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80065c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c8:	4a1f      	ldr	r2, [pc, #124]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065d2:	e00f      	b.n	80065f4 <HAL_RCC_OscConfig+0x51c>
 80065d4:	4b1c      	ldr	r3, [pc, #112]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80065d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065da:	4a1b      	ldr	r2, [pc, #108]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065e4:	4b18      	ldr	r3, [pc, #96]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ea:	4a17      	ldr	r2, [pc, #92]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 80065ec:	f023 0304 	bic.w	r3, r3, #4
 80065f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d016      	beq.n	800662a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065fc:	f7fd fb9e 	bl	8003d3c <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006602:	e00a      	b.n	800661a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006604:	f7fd fb9a 	bl	8003d3c <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006612:	4293      	cmp	r3, r2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e105      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800661a:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <HAL_RCC_OscConfig+0x570>)
 800661c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0ed      	beq.n	8006604 <HAL_RCC_OscConfig+0x52c>
 8006628:	e019      	b.n	800665e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662a:	f7fd fb87 	bl	8003d3c <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006630:	e00e      	b.n	8006650 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006632:	f7fd fb83 	bl	8003d3c <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006640:	4293      	cmp	r3, r2
 8006642:	d905      	bls.n	8006650 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e0ee      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
 8006648:	40021000 	.word	0x40021000
 800664c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006650:	4b77      	ldr	r3, [pc, #476]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e9      	bne.n	8006632 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800665e:	7ffb      	ldrb	r3, [r7, #31]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d105      	bne.n	8006670 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006664:	4b72      	ldr	r3, [pc, #456]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006668:	4a71      	ldr	r2, [pc, #452]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 800666a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800666e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80d5 	beq.w	8006824 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b0c      	cmp	r3, #12
 800667e:	f000 808e 	beq.w	800679e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	2b02      	cmp	r3, #2
 8006688:	d15b      	bne.n	8006742 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800668a:	4b69      	ldr	r3, [pc, #420]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a68      	ldr	r2, [pc, #416]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006696:	f7fd fb51 	bl	8003d3c <HAL_GetTick>
 800669a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800669c:	e008      	b.n	80066b0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800669e:	f7fd fb4d 	bl	8003d3c <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d901      	bls.n	80066b0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e0ba      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066b0:	4b5f      	ldr	r3, [pc, #380]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f0      	bne.n	800669e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066bc:	4b5c      	ldr	r3, [pc, #368]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	4b5c      	ldr	r3, [pc, #368]	; (8006834 <HAL_RCC_OscConfig+0x75c>)
 80066c2:	4013      	ands	r3, r2
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066cc:	3a01      	subs	r2, #1
 80066ce:	0112      	lsls	r2, r2, #4
 80066d0:	4311      	orrs	r1, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066d6:	0212      	lsls	r2, r2, #8
 80066d8:	4311      	orrs	r1, r2
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80066de:	0852      	lsrs	r2, r2, #1
 80066e0:	3a01      	subs	r2, #1
 80066e2:	0552      	lsls	r2, r2, #21
 80066e4:	4311      	orrs	r1, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80066ea:	0852      	lsrs	r2, r2, #1
 80066ec:	3a01      	subs	r2, #1
 80066ee:	0652      	lsls	r2, r2, #25
 80066f0:	4311      	orrs	r1, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066f6:	0912      	lsrs	r2, r2, #4
 80066f8:	0452      	lsls	r2, r2, #17
 80066fa:	430a      	orrs	r2, r1
 80066fc:	494c      	ldr	r1, [pc, #304]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006702:	4b4b      	ldr	r3, [pc, #300]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a4a      	ldr	r2, [pc, #296]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800670c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800670e:	4b48      	ldr	r3, [pc, #288]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	4a47      	ldr	r2, [pc, #284]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006718:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671a:	f7fd fb0f 	bl	8003d3c <HAL_GetTick>
 800671e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006720:	e008      	b.n	8006734 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006722:	f7fd fb0b 	bl	8003d3c <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e078      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006734:	4b3e      	ldr	r3, [pc, #248]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <HAL_RCC_OscConfig+0x64a>
 8006740:	e070      	b.n	8006824 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006742:	4b3b      	ldr	r3, [pc, #236]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a3a      	ldr	r2, [pc, #232]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800674c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800674e:	4b38      	ldr	r3, [pc, #224]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d105      	bne.n	8006766 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800675a:	4b35      	ldr	r3, [pc, #212]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	4a34      	ldr	r2, [pc, #208]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006760:	f023 0303 	bic.w	r3, r3, #3
 8006764:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006766:	4b32      	ldr	r3, [pc, #200]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	4a31      	ldr	r2, [pc, #196]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 800676c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006774:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006776:	f7fd fae1 	bl	8003d3c <HAL_GetTick>
 800677a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800677e:	f7fd fadd 	bl	8003d3c <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e04a      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006790:	4b27      	ldr	r3, [pc, #156]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1f0      	bne.n	800677e <HAL_RCC_OscConfig+0x6a6>
 800679c:	e042      	b.n	8006824 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d101      	bne.n	80067aa <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e03d      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80067aa:	4b21      	ldr	r3, [pc, #132]	; (8006830 <HAL_RCC_OscConfig+0x758>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f003 0203 	and.w	r2, r3, #3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d130      	bne.n	8006820 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	3b01      	subs	r3, #1
 80067ca:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d127      	bne.n	8006820 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067da:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067dc:	429a      	cmp	r2, r3
 80067de:	d11f      	bne.n	8006820 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80067ea:	2a07      	cmp	r2, #7
 80067ec:	bf14      	ite	ne
 80067ee:	2201      	movne	r2, #1
 80067f0:	2200      	moveq	r2, #0
 80067f2:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d113      	bne.n	8006820 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	3b01      	subs	r3, #1
 8006806:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006808:	429a      	cmp	r2, r3
 800680a:	d109      	bne.n	8006820 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	085b      	lsrs	r3, r3, #1
 8006818:	3b01      	subs	r3, #1
 800681a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800681c:	429a      	cmp	r2, r3
 800681e:	d001      	beq.n	8006824 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e000      	b.n	8006826 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3720      	adds	r7, #32
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40021000 	.word	0x40021000
 8006834:	f99d808c 	.word	0xf99d808c

08006838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e0c8      	b.n	80069de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800684c:	4b66      	ldr	r3, [pc, #408]	; (80069e8 <HAL_RCC_ClockConfig+0x1b0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d910      	bls.n	800687c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685a:	4b63      	ldr	r3, [pc, #396]	; (80069e8 <HAL_RCC_ClockConfig+0x1b0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f023 0207 	bic.w	r2, r3, #7
 8006862:	4961      	ldr	r1, [pc, #388]	; (80069e8 <HAL_RCC_ClockConfig+0x1b0>)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	4313      	orrs	r3, r2
 8006868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800686a:	4b5f      	ldr	r3, [pc, #380]	; (80069e8 <HAL_RCC_ClockConfig+0x1b0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d001      	beq.n	800687c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e0b0      	b.n	80069de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d04c      	beq.n	8006922 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b03      	cmp	r3, #3
 800688e:	d107      	bne.n	80068a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006890:	4b56      	ldr	r3, [pc, #344]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d121      	bne.n	80068e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e09e      	b.n	80069de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d107      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068a8:	4b50      	ldr	r3, [pc, #320]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d115      	bne.n	80068e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e092      	b.n	80069de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d107      	bne.n	80068d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068c0:	4b4a      	ldr	r3, [pc, #296]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d109      	bne.n	80068e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e086      	b.n	80069de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068d0:	4b46      	ldr	r3, [pc, #280]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e07e      	b.n	80069de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068e0:	4b42      	ldr	r3, [pc, #264]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f023 0203 	bic.w	r2, r3, #3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	493f      	ldr	r1, [pc, #252]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068f2:	f7fd fa23 	bl	8003d3c <HAL_GetTick>
 80068f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f8:	e00a      	b.n	8006910 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068fa:	f7fd fa1f 	bl	8003d3c <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	f241 3288 	movw	r2, #5000	; 0x1388
 8006908:	4293      	cmp	r3, r2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e066      	b.n	80069de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006910:	4b36      	ldr	r3, [pc, #216]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f003 020c 	and.w	r2, r3, #12
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	429a      	cmp	r2, r3
 8006920:	d1eb      	bne.n	80068fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d008      	beq.n	8006940 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800692e:	4b2f      	ldr	r3, [pc, #188]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	492c      	ldr	r1, [pc, #176]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 800693c:	4313      	orrs	r3, r2
 800693e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006940:	4b29      	ldr	r3, [pc, #164]	; (80069e8 <HAL_RCC_ClockConfig+0x1b0>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d210      	bcs.n	8006970 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694e:	4b26      	ldr	r3, [pc, #152]	; (80069e8 <HAL_RCC_ClockConfig+0x1b0>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f023 0207 	bic.w	r2, r3, #7
 8006956:	4924      	ldr	r1, [pc, #144]	; (80069e8 <HAL_RCC_ClockConfig+0x1b0>)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	4313      	orrs	r3, r2
 800695c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800695e:	4b22      	ldr	r3, [pc, #136]	; (80069e8 <HAL_RCC_ClockConfig+0x1b0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d001      	beq.n	8006970 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e036      	b.n	80069de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800697c:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	4918      	ldr	r1, [pc, #96]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 800698a:	4313      	orrs	r3, r2
 800698c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800699a:	4b14      	ldr	r3, [pc, #80]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	4910      	ldr	r1, [pc, #64]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069ae:	f000 f825 	bl	80069fc <HAL_RCC_GetSysClockFreq>
 80069b2:	4601      	mov	r1, r0
 80069b4:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <HAL_RCC_ClockConfig+0x1b4>)
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	091b      	lsrs	r3, r3, #4
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 80069c0:	5cd3      	ldrb	r3, [r2, r3]
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	fa21 f303 	lsr.w	r3, r1, r3
 80069ca:	4a0a      	ldr	r2, [pc, #40]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80069cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80069ce:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <HAL_RCC_ClockConfig+0x1c0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fd f966 	bl	8003ca4 <HAL_InitTick>
 80069d8:	4603      	mov	r3, r0
 80069da:	72fb      	strb	r3, [r7, #11]

  return status;
 80069dc:	7afb      	ldrb	r3, [r7, #11]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	40022000 	.word	0x40022000
 80069ec:	40021000 	.word	0x40021000
 80069f0:	0800ca64 	.word	0x0800ca64
 80069f4:	20000000 	.word	0x20000000
 80069f8:	20000004 	.word	0x20000004

080069fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b089      	sub	sp, #36	; 0x24
 8006a00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	2300      	movs	r3, #0
 8006a08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a0a:	4b3d      	ldr	r3, [pc, #244]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 030c 	and.w	r3, r3, #12
 8006a12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a14:	4b3a      	ldr	r3, [pc, #232]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d005      	beq.n	8006a30 <HAL_RCC_GetSysClockFreq+0x34>
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	2b0c      	cmp	r3, #12
 8006a28:	d121      	bne.n	8006a6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d11e      	bne.n	8006a6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006a30:	4b33      	ldr	r3, [pc, #204]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0308 	and.w	r3, r3, #8
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d107      	bne.n	8006a4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006a3c:	4b30      	ldr	r3, [pc, #192]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8006a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a42:	0a1b      	lsrs	r3, r3, #8
 8006a44:	f003 030f 	and.w	r3, r3, #15
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	e005      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006a4c:	4b2c      	ldr	r3, [pc, #176]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	091b      	lsrs	r3, r3, #4
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a58:	4a2a      	ldr	r2, [pc, #168]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10d      	bne.n	8006a84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a6c:	e00a      	b.n	8006a84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d102      	bne.n	8006a7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a74:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006a76:	61bb      	str	r3, [r7, #24]
 8006a78:	e004      	b.n	8006a84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d101      	bne.n	8006a84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a80:	4b22      	ldr	r3, [pc, #136]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8006a82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2b0c      	cmp	r3, #12
 8006a88:	d133      	bne.n	8006af2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a8a:	4b1d      	ldr	r3, [pc, #116]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d002      	beq.n	8006aa0 <HAL_RCC_GetSysClockFreq+0xa4>
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d003      	beq.n	8006aa6 <HAL_RCC_GetSysClockFreq+0xaa>
 8006a9e:	e005      	b.n	8006aac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006aa0:	4b19      	ldr	r3, [pc, #100]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006aa2:	617b      	str	r3, [r7, #20]
      break;
 8006aa4:	e005      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006aa6:	4b19      	ldr	r3, [pc, #100]	; (8006b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8006aa8:	617b      	str	r3, [r7, #20]
      break;
 8006aaa:	e002      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	617b      	str	r3, [r7, #20]
      break;
 8006ab0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ab2:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	091b      	lsrs	r3, r3, #4
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	3301      	adds	r3, #1
 8006abe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ac0:	4b0f      	ldr	r3, [pc, #60]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	0a1b      	lsrs	r3, r3, #8
 8006ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	fb02 f203 	mul.w	r2, r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ad8:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	0e5b      	lsrs	r3, r3, #25
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006af2:	69bb      	ldr	r3, [r7, #24]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3724      	adds	r7, #36	; 0x24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40021000 	.word	0x40021000
 8006b04:	0800ca7c 	.word	0x0800ca7c
 8006b08:	00f42400 	.word	0x00f42400
 8006b0c:	007a1200 	.word	0x007a1200

08006b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b14:	4b03      	ldr	r3, [pc, #12]	; (8006b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b16:	681b      	ldr	r3, [r3, #0]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	20000000 	.word	0x20000000

08006b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b2c:	f7ff fff0 	bl	8006b10 <HAL_RCC_GetHCLKFreq>
 8006b30:	4601      	mov	r1, r0
 8006b32:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	4a04      	ldr	r2, [pc, #16]	; (8006b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b3e:	5cd3      	ldrb	r3, [r2, r3]
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	40021000 	.word	0x40021000
 8006b50:	0800ca74 	.word	0x0800ca74

08006b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b58:	f7ff ffda 	bl	8006b10 <HAL_RCC_GetHCLKFreq>
 8006b5c:	4601      	mov	r1, r0
 8006b5e:	4b06      	ldr	r3, [pc, #24]	; (8006b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	0adb      	lsrs	r3, r3, #11
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	4a04      	ldr	r2, [pc, #16]	; (8006b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b6a:	5cd3      	ldrb	r3, [r2, r3]
 8006b6c:	f003 031f 	and.w	r3, r3, #31
 8006b70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	0800ca74 	.word	0x0800ca74

08006b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006b88:	2300      	movs	r3, #0
 8006b8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006b8c:	4b2a      	ldr	r3, [pc, #168]	; (8006c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006b98:	f7ff fa3a 	bl	8006010 <HAL_PWREx_GetVoltageRange>
 8006b9c:	6178      	str	r0, [r7, #20]
 8006b9e:	e014      	b.n	8006bca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ba0:	4b25      	ldr	r3, [pc, #148]	; (8006c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba4:	4a24      	ldr	r2, [pc, #144]	; (8006c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006baa:	6593      	str	r3, [r2, #88]	; 0x58
 8006bac:	4b22      	ldr	r3, [pc, #136]	; (8006c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006bb8:	f7ff fa2a 	bl	8006010 <HAL_PWREx_GetVoltageRange>
 8006bbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006bbe:	4b1e      	ldr	r3, [pc, #120]	; (8006c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc2:	4a1d      	ldr	r2, [pc, #116]	; (8006c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd0:	d10b      	bne.n	8006bea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b80      	cmp	r3, #128	; 0x80
 8006bd6:	d919      	bls.n	8006c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2ba0      	cmp	r3, #160	; 0xa0
 8006bdc:	d902      	bls.n	8006be4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006bde:	2302      	movs	r3, #2
 8006be0:	613b      	str	r3, [r7, #16]
 8006be2:	e013      	b.n	8006c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006be4:	2301      	movs	r3, #1
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	e010      	b.n	8006c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b80      	cmp	r3, #128	; 0x80
 8006bee:	d902      	bls.n	8006bf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	613b      	str	r3, [r7, #16]
 8006bf4:	e00a      	b.n	8006c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b80      	cmp	r3, #128	; 0x80
 8006bfa:	d102      	bne.n	8006c02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	e004      	b.n	8006c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b70      	cmp	r3, #112	; 0x70
 8006c06:	d101      	bne.n	8006c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c08:	2301      	movs	r3, #1
 8006c0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f023 0207 	bic.w	r2, r3, #7
 8006c14:	4909      	ldr	r1, [pc, #36]	; (8006c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c1c:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d001      	beq.n	8006c2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	40022000 	.word	0x40022000

08006c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c48:	2300      	movs	r3, #0
 8006c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d03f      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c64:	d01c      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c6a:	d802      	bhi.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00e      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006c70:	e01f      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006c72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c76:	d003      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006c78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c7c:	d01c      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006c7e:	e018      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c80:	4b85      	ldr	r3, [pc, #532]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	4a84      	ldr	r2, [pc, #528]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c8c:	e015      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3304      	adds	r3, #4
 8006c92:	2100      	movs	r1, #0
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 fab9 	bl	800720c <RCCEx_PLLSAI1_Config>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c9e:	e00c      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3320      	adds	r3, #32
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fba0 	bl	80073ec <RCCEx_PLLSAI2_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006cb0:	e003      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	74fb      	strb	r3, [r7, #19]
      break;
 8006cb6:	e000      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cba:	7cfb      	ldrb	r3, [r7, #19]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10b      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cc0:	4b75      	ldr	r3, [pc, #468]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cce:	4972      	ldr	r1, [pc, #456]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006cd6:	e001      	b.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd8:	7cfb      	ldrb	r3, [r7, #19]
 8006cda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d03f      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cf0:	d01c      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006cf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cf6:	d802      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00e      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8006cfc:	e01f      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d02:	d003      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8006d04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d08:	d01c      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006d0a:	e018      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006d0c:	4b62      	ldr	r3, [pc, #392]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	4a61      	ldr	r2, [pc, #388]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d18:	e015      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	2100      	movs	r1, #0
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fa73 	bl	800720c <RCCEx_PLLSAI1_Config>
 8006d26:	4603      	mov	r3, r0
 8006d28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d2a:	e00c      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3320      	adds	r3, #32
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fb5a 	bl	80073ec <RCCEx_PLLSAI2_Config>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d3c:	e003      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	74fb      	strb	r3, [r7, #19]
      break;
 8006d42:	e000      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d46:	7cfb      	ldrb	r3, [r7, #19]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10b      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006d4c:	4b52      	ldr	r3, [pc, #328]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d5a:	494f      	ldr	r1, [pc, #316]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006d62:	e001      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d64:	7cfb      	ldrb	r3, [r7, #19]
 8006d66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80a0 	beq.w	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d76:	2300      	movs	r3, #0
 8006d78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d7a:	4b47      	ldr	r3, [pc, #284]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00d      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d90:	4b41      	ldr	r3, [pc, #260]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d94:	4a40      	ldr	r2, [pc, #256]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8006d9c:	4b3e      	ldr	r3, [pc, #248]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006da4:	60bb      	str	r3, [r7, #8]
 8006da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006da8:	2301      	movs	r3, #1
 8006daa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dac:	4b3b      	ldr	r3, [pc, #236]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a3a      	ldr	r2, [pc, #232]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006db8:	f7fc ffc0 	bl	8003d3c <HAL_GetTick>
 8006dbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006dbe:	e009      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dc0:	f7fc ffbc 	bl	8003d3c <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d902      	bls.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	74fb      	strb	r3, [r7, #19]
        break;
 8006dd2:	e005      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006dd4:	4b31      	ldr	r3, [pc, #196]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0ef      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8006de0:	7cfb      	ldrb	r3, [r7, #19]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d15c      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006de6:	4b2c      	ldr	r3, [pc, #176]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d01f      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d019      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e04:	4b24      	ldr	r3, [pc, #144]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e10:	4b21      	ldr	r3, [pc, #132]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e16:	4a20      	ldr	r2, [pc, #128]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e20:	4b1d      	ldr	r3, [pc, #116]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e26:	4a1c      	ldr	r2, [pc, #112]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e30:	4a19      	ldr	r2, [pc, #100]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d016      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e42:	f7fc ff7b 	bl	8003d3c <HAL_GetTick>
 8006e46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e48:	e00b      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e4a:	f7fc ff77 	bl	8003d3c <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d902      	bls.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	74fb      	strb	r3, [r7, #19]
            break;
 8006e60:	e006      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e62:	4b0d      	ldr	r3, [pc, #52]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0ec      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8006e70:	7cfb      	ldrb	r3, [r7, #19]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10c      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e76:	4b08      	ldr	r3, [pc, #32]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e86:	4904      	ldr	r1, [pc, #16]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006e8e:	e009      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e90:	7cfb      	ldrb	r3, [r7, #19]
 8006e92:	74bb      	strb	r3, [r7, #18]
 8006e94:	e006      	b.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006e96:	bf00      	nop
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea0:	7cfb      	ldrb	r3, [r7, #19]
 8006ea2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ea4:	7c7b      	ldrb	r3, [r7, #17]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d105      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eaa:	4b9e      	ldr	r3, [pc, #632]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eae:	4a9d      	ldr	r2, [pc, #628]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ec2:	4b98      	ldr	r3, [pc, #608]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec8:	f023 0203 	bic.w	r2, r3, #3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	4994      	ldr	r1, [pc, #592]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00a      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ee4:	4b8f      	ldr	r3, [pc, #572]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eea:	f023 020c 	bic.w	r2, r3, #12
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	498c      	ldr	r1, [pc, #560]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f06:	4b87      	ldr	r3, [pc, #540]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	4983      	ldr	r1, [pc, #524]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00a      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f28:	4b7e      	ldr	r3, [pc, #504]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	497b      	ldr	r1, [pc, #492]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0310 	and.w	r3, r3, #16
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f4a:	4b76      	ldr	r3, [pc, #472]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f58:	4972      	ldr	r1, [pc, #456]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0320 	and.w	r3, r3, #32
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00a      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f6c:	4b6d      	ldr	r3, [pc, #436]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f7a:	496a      	ldr	r1, [pc, #424]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f8e:	4b65      	ldr	r3, [pc, #404]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f9c:	4961      	ldr	r1, [pc, #388]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fb0:	4b5c      	ldr	r3, [pc, #368]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fbe:	4959      	ldr	r1, [pc, #356]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fd2:	4b54      	ldr	r3, [pc, #336]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe0:	4950      	ldr	r1, [pc, #320]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ff4:	4b4b      	ldr	r3, [pc, #300]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007002:	4948      	ldr	r1, [pc, #288]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007004:	4313      	orrs	r3, r2
 8007006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007016:	4b43      	ldr	r3, [pc, #268]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800701c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007024:	493f      	ldr	r1, [pc, #252]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007026:	4313      	orrs	r3, r2
 8007028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d028      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007038:	4b3a      	ldr	r3, [pc, #232]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800703a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007046:	4937      	ldr	r1, [pc, #220]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007048:	4313      	orrs	r3, r2
 800704a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007056:	d106      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007058:	4b32      	ldr	r3, [pc, #200]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	4a31      	ldr	r2, [pc, #196]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800705e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007062:	60d3      	str	r3, [r2, #12]
 8007064:	e011      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800706a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800706e:	d10c      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3304      	adds	r3, #4
 8007074:	2101      	movs	r1, #1
 8007076:	4618      	mov	r0, r3
 8007078:	f000 f8c8 	bl	800720c <RCCEx_PLLSAI1_Config>
 800707c:	4603      	mov	r3, r0
 800707e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007080:	7cfb      	ldrb	r3, [r7, #19]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8007086:	7cfb      	ldrb	r3, [r7, #19]
 8007088:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d028      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007096:	4b23      	ldr	r3, [pc, #140]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a4:	491f      	ldr	r1, [pc, #124]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070b4:	d106      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070b6:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80070bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070c0:	60d3      	str	r3, [r2, #12]
 80070c2:	e011      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070cc:	d10c      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3304      	adds	r3, #4
 80070d2:	2101      	movs	r1, #1
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 f899 	bl	800720c <RCCEx_PLLSAI1_Config>
 80070da:	4603      	mov	r3, r0
 80070dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070de:	7cfb      	ldrb	r3, [r7, #19]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80070e4:	7cfb      	ldrb	r3, [r7, #19]
 80070e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d02b      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070f4:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80070f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007102:	4908      	ldr	r1, [pc, #32]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007104:	4313      	orrs	r3, r2
 8007106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800710e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007112:	d109      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007114:	4b03      	ldr	r3, [pc, #12]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	4a02      	ldr	r2, [pc, #8]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800711a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800711e:	60d3      	str	r3, [r2, #12]
 8007120:	e014      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007122:	bf00      	nop
 8007124:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007130:	d10c      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3304      	adds	r3, #4
 8007136:	2101      	movs	r1, #1
 8007138:	4618      	mov	r0, r3
 800713a:	f000 f867 	bl	800720c <RCCEx_PLLSAI1_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007142:	7cfb      	ldrb	r3, [r7, #19]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8007148:	7cfb      	ldrb	r3, [r7, #19]
 800714a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d02f      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007158:	4b2b      	ldr	r3, [pc, #172]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800715a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800715e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007166:	4928      	ldr	r1, [pc, #160]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007168:	4313      	orrs	r3, r2
 800716a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007176:	d10d      	bne.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3304      	adds	r3, #4
 800717c:	2102      	movs	r1, #2
 800717e:	4618      	mov	r0, r3
 8007180:	f000 f844 	bl	800720c <RCCEx_PLLSAI1_Config>
 8007184:	4603      	mov	r3, r0
 8007186:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007188:	7cfb      	ldrb	r3, [r7, #19]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d014      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800718e:	7cfb      	ldrb	r3, [r7, #19]
 8007190:	74bb      	strb	r3, [r7, #18]
 8007192:	e011      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800719c:	d10c      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3320      	adds	r3, #32
 80071a2:	2102      	movs	r1, #2
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 f921 	bl	80073ec <RCCEx_PLLSAI2_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071ae:	7cfb      	ldrb	r3, [r7, #19]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80071b4:	7cfb      	ldrb	r3, [r7, #19]
 80071b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00a      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80071c4:	4b10      	ldr	r3, [pc, #64]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d2:	490d      	ldr	r1, [pc, #52]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071e6:	4b08      	ldr	r3, [pc, #32]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071f6:	4904      	ldr	r1, [pc, #16]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80071fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40021000 	.word	0x40021000

0800720c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800721a:	4b73      	ldr	r3, [pc, #460]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d018      	beq.n	8007258 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007226:	4b70      	ldr	r3, [pc, #448]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f003 0203 	and.w	r2, r3, #3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d10d      	bne.n	8007252 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
       ||
 800723a:	2b00      	cmp	r3, #0
 800723c:	d009      	beq.n	8007252 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800723e:	4b6a      	ldr	r3, [pc, #424]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	091b      	lsrs	r3, r3, #4
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
       ||
 800724e:	429a      	cmp	r2, r3
 8007250:	d044      	beq.n	80072dc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
 8007256:	e041      	b.n	80072dc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d00c      	beq.n	800727a <RCCEx_PLLSAI1_Config+0x6e>
 8007260:	2b03      	cmp	r3, #3
 8007262:	d013      	beq.n	800728c <RCCEx_PLLSAI1_Config+0x80>
 8007264:	2b01      	cmp	r3, #1
 8007266:	d120      	bne.n	80072aa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007268:	4b5f      	ldr	r3, [pc, #380]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d11d      	bne.n	80072b0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007278:	e01a      	b.n	80072b0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800727a:	4b5b      	ldr	r3, [pc, #364]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007282:	2b00      	cmp	r3, #0
 8007284:	d116      	bne.n	80072b4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800728a:	e013      	b.n	80072b4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800728c:	4b56      	ldr	r3, [pc, #344]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10f      	bne.n	80072b8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007298:	4b53      	ldr	r3, [pc, #332]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d109      	bne.n	80072b8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072a8:	e006      	b.n	80072b8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	73fb      	strb	r3, [r7, #15]
      break;
 80072ae:	e004      	b.n	80072ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80072b0:	bf00      	nop
 80072b2:	e002      	b.n	80072ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80072b4:	bf00      	nop
 80072b6:	e000      	b.n	80072ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80072b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10d      	bne.n	80072dc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80072c0:	4b49      	ldr	r3, [pc, #292]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6819      	ldr	r1, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	011b      	lsls	r3, r3, #4
 80072d4:	430b      	orrs	r3, r1
 80072d6:	4944      	ldr	r1, [pc, #272]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d17d      	bne.n	80073de <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80072e2:	4b41      	ldr	r3, [pc, #260]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a40      	ldr	r2, [pc, #256]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80072e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ee:	f7fc fd25 	bl	8003d3c <HAL_GetTick>
 80072f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80072f4:	e009      	b.n	800730a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072f6:	f7fc fd21 	bl	8003d3c <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d902      	bls.n	800730a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	73fb      	strb	r3, [r7, #15]
        break;
 8007308:	e005      	b.n	8007316 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800730a:	4b37      	ldr	r3, [pc, #220]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1ef      	bne.n	80072f6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d160      	bne.n	80073de <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d111      	bne.n	8007346 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007322:	4b31      	ldr	r3, [pc, #196]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800732a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6892      	ldr	r2, [r2, #8]
 8007332:	0211      	lsls	r1, r2, #8
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	68d2      	ldr	r2, [r2, #12]
 8007338:	0912      	lsrs	r2, r2, #4
 800733a:	0452      	lsls	r2, r2, #17
 800733c:	430a      	orrs	r2, r1
 800733e:	492a      	ldr	r1, [pc, #168]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007340:	4313      	orrs	r3, r2
 8007342:	610b      	str	r3, [r1, #16]
 8007344:	e027      	b.n	8007396 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d112      	bne.n	8007372 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800734c:	4b26      	ldr	r3, [pc, #152]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007354:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6892      	ldr	r2, [r2, #8]
 800735c:	0211      	lsls	r1, r2, #8
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6912      	ldr	r2, [r2, #16]
 8007362:	0852      	lsrs	r2, r2, #1
 8007364:	3a01      	subs	r2, #1
 8007366:	0552      	lsls	r2, r2, #21
 8007368:	430a      	orrs	r2, r1
 800736a:	491f      	ldr	r1, [pc, #124]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800736c:	4313      	orrs	r3, r2
 800736e:	610b      	str	r3, [r1, #16]
 8007370:	e011      	b.n	8007396 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007372:	4b1d      	ldr	r3, [pc, #116]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800737a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6892      	ldr	r2, [r2, #8]
 8007382:	0211      	lsls	r1, r2, #8
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6952      	ldr	r2, [r2, #20]
 8007388:	0852      	lsrs	r2, r2, #1
 800738a:	3a01      	subs	r2, #1
 800738c:	0652      	lsls	r2, r2, #25
 800738e:	430a      	orrs	r2, r1
 8007390:	4915      	ldr	r1, [pc, #84]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007392:	4313      	orrs	r3, r2
 8007394:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007396:	4b14      	ldr	r3, [pc, #80]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a13      	ldr	r2, [pc, #76]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800739c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a2:	f7fc fccb 	bl	8003d3c <HAL_GetTick>
 80073a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80073a8:	e009      	b.n	80073be <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073aa:	f7fc fcc7 	bl	8003d3c <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d902      	bls.n	80073be <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	73fb      	strb	r3, [r7, #15]
          break;
 80073bc:	e005      	b.n	80073ca <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80073be:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0ef      	beq.n	80073aa <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d106      	bne.n	80073de <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80073d0:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80073d2:	691a      	ldr	r2, [r3, #16]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	4903      	ldr	r1, [pc, #12]	; (80073e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	40021000 	.word	0x40021000

080073ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80073fa:	4b68      	ldr	r3, [pc, #416]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d018      	beq.n	8007438 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007406:	4b65      	ldr	r3, [pc, #404]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f003 0203 	and.w	r2, r3, #3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d10d      	bne.n	8007432 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
       ||
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800741e:	4b5f      	ldr	r3, [pc, #380]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	091b      	lsrs	r3, r3, #4
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
       ||
 800742e:	429a      	cmp	r2, r3
 8007430:	d044      	beq.n	80074bc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	73fb      	strb	r3, [r7, #15]
 8007436:	e041      	b.n	80074bc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d00c      	beq.n	800745a <RCCEx_PLLSAI2_Config+0x6e>
 8007440:	2b03      	cmp	r3, #3
 8007442:	d013      	beq.n	800746c <RCCEx_PLLSAI2_Config+0x80>
 8007444:	2b01      	cmp	r3, #1
 8007446:	d120      	bne.n	800748a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007448:	4b54      	ldr	r3, [pc, #336]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d11d      	bne.n	8007490 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007458:	e01a      	b.n	8007490 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800745a:	4b50      	ldr	r3, [pc, #320]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007462:	2b00      	cmp	r3, #0
 8007464:	d116      	bne.n	8007494 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800746a:	e013      	b.n	8007494 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800746c:	4b4b      	ldr	r3, [pc, #300]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10f      	bne.n	8007498 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007478:	4b48      	ldr	r3, [pc, #288]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d109      	bne.n	8007498 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007488:	e006      	b.n	8007498 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	73fb      	strb	r3, [r7, #15]
      break;
 800748e:	e004      	b.n	800749a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007490:	bf00      	nop
 8007492:	e002      	b.n	800749a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007494:	bf00      	nop
 8007496:	e000      	b.n	800749a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007498:	bf00      	nop
    }

    if(status == HAL_OK)
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10d      	bne.n	80074bc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80074a0:	4b3e      	ldr	r3, [pc, #248]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6819      	ldr	r1, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	430b      	orrs	r3, r1
 80074b6:	4939      	ldr	r1, [pc, #228]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d167      	bne.n	8007592 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80074c2:	4b36      	ldr	r3, [pc, #216]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a35      	ldr	r2, [pc, #212]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 80074c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ce:	f7fc fc35 	bl	8003d3c <HAL_GetTick>
 80074d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80074d4:	e009      	b.n	80074ea <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074d6:	f7fc fc31 	bl	8003d3c <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d902      	bls.n	80074ea <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	73fb      	strb	r3, [r7, #15]
        break;
 80074e8:	e005      	b.n	80074f6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80074ea:	4b2c      	ldr	r3, [pc, #176]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1ef      	bne.n	80074d6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d14a      	bne.n	8007592 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d111      	bne.n	8007526 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007502:	4b26      	ldr	r3, [pc, #152]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800750a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6892      	ldr	r2, [r2, #8]
 8007512:	0211      	lsls	r1, r2, #8
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	68d2      	ldr	r2, [r2, #12]
 8007518:	0912      	lsrs	r2, r2, #4
 800751a:	0452      	lsls	r2, r2, #17
 800751c:	430a      	orrs	r2, r1
 800751e:	491f      	ldr	r1, [pc, #124]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007520:	4313      	orrs	r3, r2
 8007522:	614b      	str	r3, [r1, #20]
 8007524:	e011      	b.n	800754a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007526:	4b1d      	ldr	r3, [pc, #116]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800752e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6892      	ldr	r2, [r2, #8]
 8007536:	0211      	lsls	r1, r2, #8
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	6912      	ldr	r2, [r2, #16]
 800753c:	0852      	lsrs	r2, r2, #1
 800753e:	3a01      	subs	r2, #1
 8007540:	0652      	lsls	r2, r2, #25
 8007542:	430a      	orrs	r2, r1
 8007544:	4915      	ldr	r1, [pc, #84]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007546:	4313      	orrs	r3, r2
 8007548:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800754a:	4b14      	ldr	r3, [pc, #80]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a13      	ldr	r2, [pc, #76]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007554:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007556:	f7fc fbf1 	bl	8003d3c <HAL_GetTick>
 800755a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800755c:	e009      	b.n	8007572 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800755e:	f7fc fbed 	bl	8003d3c <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d902      	bls.n	8007572 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	73fb      	strb	r3, [r7, #15]
          break;
 8007570:	e005      	b.n	800757e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007572:	4b0a      	ldr	r3, [pc, #40]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0ef      	beq.n	800755e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d106      	bne.n	8007592 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007586:	695a      	ldr	r2, [r3, #20]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	4903      	ldr	r1, [pc, #12]	; (800759c <RCCEx_PLLSAI2_Config+0x1b0>)
 800758e:	4313      	orrs	r3, r2
 8007590:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007592:	7bfb      	ldrb	r3, [r7, #15]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40021000 	.word	0x40021000

080075a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e07c      	b.n	80076ac <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d106      	bne.n	80075d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7fb fa61 	bl	8002a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2202      	movs	r2, #2
 80075d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075f2:	d902      	bls.n	80075fa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	e002      	b.n	8007600 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007608:	d007      	beq.n	800761a <HAL_SPI_Init+0x7a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007612:	d002      	beq.n	800761a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10b      	bne.n	800763a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800762a:	d903      	bls.n	8007634 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	631a      	str	r2, [r3, #48]	; 0x30
 8007632:	e002      	b.n	800763a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	431a      	orrs	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	ea42 0103 	orr.w	r1, r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	0c1b      	lsrs	r3, r3, #16
 800767a:	f003 0204 	and.w	r2, r3, #4
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	ea42 0103 	orr.w	r1, r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	430a      	orrs	r2, r1
 800769a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	4613      	mov	r3, r2
 80076c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_SPI_Transmit+0x22>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e150      	b.n	8007978 <HAL_SPI_Transmit+0x2c4>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076de:	f7fc fb2d 	bl	8003d3c <HAL_GetTick>
 80076e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80076e4:	88fb      	ldrh	r3, [r7, #6]
 80076e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d002      	beq.n	80076fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076f4:	2302      	movs	r3, #2
 80076f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076f8:	e135      	b.n	8007966 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <HAL_SPI_Transmit+0x52>
 8007700:	88fb      	ldrh	r3, [r7, #6]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	77fb      	strb	r3, [r7, #31]
    goto error;
 800770a:	e12c      	b.n	8007966 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2203      	movs	r2, #3
 8007710:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	88fa      	ldrh	r2, [r7, #6]
 8007724:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	88fa      	ldrh	r2, [r7, #6]
 800772a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007756:	d107      	bne.n	8007768 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007766:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	d007      	beq.n	8007786 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007784:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800778e:	d94b      	bls.n	8007828 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <HAL_SPI_Transmit+0xea>
 8007798:	8afb      	ldrh	r3, [r7, #22]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d13e      	bne.n	800781c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	881a      	ldrh	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	1c9a      	adds	r2, r3, #2
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80077c2:	e02b      	b.n	800781c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d112      	bne.n	80077f8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	881a      	ldrh	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	1c9a      	adds	r2, r3, #2
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077f6:	e011      	b.n	800781c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077f8:	f7fc faa0 	bl	8003d3c <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d803      	bhi.n	8007810 <HAL_SPI_Transmit+0x15c>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780e:	d102      	bne.n	8007816 <HAL_SPI_Transmit+0x162>
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	77fb      	strb	r3, [r7, #31]
          goto error;
 800781a:	e0a4      	b.n	8007966 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1ce      	bne.n	80077c4 <HAL_SPI_Transmit+0x110>
 8007826:	e07c      	b.n	8007922 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d002      	beq.n	8007836 <HAL_SPI_Transmit+0x182>
 8007830:	8afb      	ldrh	r3, [r7, #22]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d170      	bne.n	8007918 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b01      	cmp	r3, #1
 800783e:	d912      	bls.n	8007866 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	881a      	ldrh	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007850:	1c9a      	adds	r2, r3, #2
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b02      	subs	r3, #2
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007864:	e058      	b.n	8007918 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	330c      	adds	r3, #12
 8007870:	7812      	ldrb	r2, [r2, #0]
 8007872:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007882:	b29b      	uxth	r3, r3
 8007884:	3b01      	subs	r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800788c:	e044      	b.n	8007918 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b02      	cmp	r3, #2
 800789a:	d12b      	bne.n	80078f4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d912      	bls.n	80078cc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	881a      	ldrh	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	1c9a      	adds	r2, r3, #2
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	3b02      	subs	r3, #2
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078ca:	e025      	b.n	8007918 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	7812      	ldrb	r2, [r2, #0]
 80078d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078f2:	e011      	b.n	8007918 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078f4:	f7fc fa22 	bl	8003d3c <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d803      	bhi.n	800790c <HAL_SPI_Transmit+0x258>
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790a:	d102      	bne.n	8007912 <HAL_SPI_Transmit+0x25e>
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007916:	e026      	b.n	8007966 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1b5      	bne.n	800788e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 fc94 	bl	8008254 <SPI_EndRxTxTransaction>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2220      	movs	r2, #32
 8007936:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10a      	bne.n	8007956 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007940:	2300      	movs	r3, #0
 8007942:	613b      	str	r3, [r7, #16]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	613b      	str	r3, [r7, #16]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	613b      	str	r3, [r7, #16]
 8007954:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	77fb      	strb	r3, [r7, #31]
 8007962:	e000      	b.n	8007966 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8007964:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007976:	7ffb      	ldrb	r3, [r7, #31]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3720      	adds	r7, #32
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af02      	add	r7, sp, #8
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	4613      	mov	r3, r2
 800798e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800799c:	d112      	bne.n	80079c4 <HAL_SPI_Receive+0x44>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10e      	bne.n	80079c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2204      	movs	r2, #4
 80079aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079ae:	88fa      	ldrh	r2, [r7, #6]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	4613      	mov	r3, r2
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	68b9      	ldr	r1, [r7, #8]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 f908 	bl	8007bd0 <HAL_SPI_TransmitReceive>
 80079c0:	4603      	mov	r3, r0
 80079c2:	e101      	b.n	8007bc8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_SPI_Receive+0x52>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e0fa      	b.n	8007bc8 <HAL_SPI_Receive+0x248>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079da:	f7fc f9af 	bl	8003d3c <HAL_GetTick>
 80079de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d002      	beq.n	80079f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80079ec:	2302      	movs	r3, #2
 80079ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079f0:	e0e1      	b.n	8007bb6 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <HAL_SPI_Receive+0x7e>
 80079f8:	88fb      	ldrh	r3, [r7, #6]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d102      	bne.n	8007a04 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a02:	e0d8      	b.n	8007bb6 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2204      	movs	r2, #4
 8007a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	88fa      	ldrh	r2, [r7, #6]
 8007a1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	88fa      	ldrh	r2, [r7, #6]
 8007a24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a4e:	d908      	bls.n	8007a62 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a5e:	605a      	str	r2, [r3, #4]
 8007a60:	e007      	b.n	8007a72 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a70:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a7a:	d107      	bne.n	8007a8c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a8a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a96:	2b40      	cmp	r3, #64	; 0x40
 8007a98:	d007      	beq.n	8007aaa <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aa8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ab2:	d867      	bhi.n	8007b84 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007ab4:	e030      	b.n	8007b18 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d117      	bne.n	8007af4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f103 020c 	add.w	r2, r3, #12
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad0:	7812      	ldrb	r2, [r2, #0]
 8007ad2:	b2d2      	uxtb	r2, r2
 8007ad4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007af2:	e011      	b.n	8007b18 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007af4:	f7fc f922 	bl	8003d3c <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d803      	bhi.n	8007b0c <HAL_SPI_Receive+0x18c>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0a:	d102      	bne.n	8007b12 <HAL_SPI_Receive+0x192>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b16:	e04e      	b.n	8007bb6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1c8      	bne.n	8007ab6 <HAL_SPI_Receive+0x136>
 8007b24:	e034      	b.n	8007b90 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d115      	bne.n	8007b60 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	b292      	uxth	r2, r2
 8007b40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	1c9a      	adds	r2, r3, #2
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	3b01      	subs	r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007b5e:	e011      	b.n	8007b84 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b60:	f7fc f8ec 	bl	8003d3c <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d803      	bhi.n	8007b78 <HAL_SPI_Receive+0x1f8>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b76:	d102      	bne.n	8007b7e <HAL_SPI_Receive+0x1fe>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d102      	bne.n	8007b84 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b82:	e018      	b.n	8007bb6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1ca      	bne.n	8007b26 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 fb05 	bl	80081a4 <SPI_EndRxTransaction>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]
 8007bb2:	e000      	b.n	8007bb6 <HAL_SPI_Receive+0x236>
  }

error :
 8007bb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08a      	sub	sp, #40	; 0x28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007bde:	2301      	movs	r3, #1
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_SPI_TransmitReceive+0x26>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	e1fb      	b.n	8007fee <HAL_SPI_TransmitReceive+0x41e>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bfe:	f7fc f89d 	bl	8003d3c <HAL_GetTick>
 8007c02:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c0a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007c12:	887b      	ldrh	r3, [r7, #2]
 8007c14:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007c16:	887b      	ldrh	r3, [r7, #2]
 8007c18:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c1a:	7efb      	ldrb	r3, [r7, #27]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d00e      	beq.n	8007c3e <HAL_SPI_TransmitReceive+0x6e>
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c26:	d106      	bne.n	8007c36 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d102      	bne.n	8007c36 <HAL_SPI_TransmitReceive+0x66>
 8007c30:	7efb      	ldrb	r3, [r7, #27]
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	d003      	beq.n	8007c3e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007c36:	2302      	movs	r3, #2
 8007c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007c3c:	e1cd      	b.n	8007fda <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <HAL_SPI_TransmitReceive+0x80>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <HAL_SPI_TransmitReceive+0x80>
 8007c4a:	887b      	ldrh	r3, [r7, #2]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d103      	bne.n	8007c58 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007c56:	e1c0      	b.n	8007fda <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d003      	beq.n	8007c6c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2205      	movs	r2, #5
 8007c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	887a      	ldrh	r2, [r7, #2]
 8007c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	887a      	ldrh	r2, [r7, #2]
 8007c84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	887a      	ldrh	r2, [r7, #2]
 8007c92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	887a      	ldrh	r2, [r7, #2]
 8007c98:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cae:	d802      	bhi.n	8007cb6 <HAL_SPI_TransmitReceive+0xe6>
 8007cb0:	8a3b      	ldrh	r3, [r7, #16]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d908      	bls.n	8007cc8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cc4:	605a      	str	r2, [r3, #4]
 8007cc6:	e007      	b.n	8007cd8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007cd6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce2:	2b40      	cmp	r3, #64	; 0x40
 8007ce4:	d007      	beq.n	8007cf6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cfe:	d97c      	bls.n	8007dfa <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_SPI_TransmitReceive+0x13e>
 8007d08:	8a7b      	ldrh	r3, [r7, #18]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d169      	bne.n	8007de2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	881a      	ldrh	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1e:	1c9a      	adds	r2, r3, #2
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d32:	e056      	b.n	8007de2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d11b      	bne.n	8007d7a <HAL_SPI_TransmitReceive+0x1aa>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d016      	beq.n	8007d7a <HAL_SPI_TransmitReceive+0x1aa>
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d113      	bne.n	8007d7a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	881a      	ldrh	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	1c9a      	adds	r2, r3, #2
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d11c      	bne.n	8007dc2 <HAL_SPI_TransmitReceive+0x1f2>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d016      	beq.n	8007dc2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	b292      	uxth	r2, r2
 8007da0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	1c9a      	adds	r2, r3, #2
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	3b01      	subs	r3, #1
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007dc2:	f7fb ffbb 	bl	8003d3c <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d807      	bhi.n	8007de2 <HAL_SPI_TransmitReceive+0x212>
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd8:	d003      	beq.n	8007de2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007de0:	e0fb      	b.n	8007fda <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1a3      	bne.n	8007d34 <HAL_SPI_TransmitReceive+0x164>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d19d      	bne.n	8007d34 <HAL_SPI_TransmitReceive+0x164>
 8007df8:	e0df      	b.n	8007fba <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_SPI_TransmitReceive+0x23a>
 8007e02:	8a7b      	ldrh	r3, [r7, #18]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	f040 80cb 	bne.w	8007fa0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d912      	bls.n	8007e3a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	881a      	ldrh	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e24:	1c9a      	adds	r2, r3, #2
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	3b02      	subs	r3, #2
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e38:	e0b2      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	330c      	adds	r3, #12
 8007e44:	7812      	ldrb	r2, [r2, #0]
 8007e46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e60:	e09e      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d134      	bne.n	8007eda <HAL_SPI_TransmitReceive+0x30a>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d02f      	beq.n	8007eda <HAL_SPI_TransmitReceive+0x30a>
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d12c      	bne.n	8007eda <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d912      	bls.n	8007eb0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	881a      	ldrh	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	1c9a      	adds	r2, r3, #2
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	3b02      	subs	r3, #2
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007eae:	e012      	b.n	8007ed6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	330c      	adds	r3, #12
 8007eba:	7812      	ldrb	r2, [r2, #0]
 8007ebc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d148      	bne.n	8007f7a <HAL_SPI_TransmitReceive+0x3aa>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d042      	beq.n	8007f7a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d923      	bls.n	8007f48 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0a:	b292      	uxth	r2, r2
 8007f0c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	1c9a      	adds	r2, r3, #2
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	3b02      	subs	r3, #2
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d81f      	bhi.n	8007f76 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f44:	605a      	str	r2, [r3, #4]
 8007f46:	e016      	b.n	8007f76 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f103 020c 	add.w	r2, r3, #12
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f54:	7812      	ldrb	r2, [r2, #0]
 8007f56:	b2d2      	uxtb	r2, r2
 8007f58:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	1c5a      	adds	r2, r3, #1
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f76:	2301      	movs	r3, #1
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f7a:	f7fb fedf 	bl	8003d3c <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d803      	bhi.n	8007f92 <HAL_SPI_TransmitReceive+0x3c2>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f90:	d102      	bne.n	8007f98 <HAL_SPI_TransmitReceive+0x3c8>
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d103      	bne.n	8007fa0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007f9e:	e01c      	b.n	8007fda <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f47f af5b 	bne.w	8007e62 <HAL_SPI_TransmitReceive+0x292>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f47f af54 	bne.w	8007e62 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 f948 	bl	8008254 <SPI_EndRxTxTransaction>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d006      	beq.n	8007fd8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	661a      	str	r2, [r3, #96]	; 0x60
 8007fd6:	e000      	b.n	8007fda <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007fd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3728      	adds	r7, #40	; 0x28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	4613      	mov	r3, r2
 8008004:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008006:	e04c      	b.n	80080a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800e:	d048      	beq.n	80080a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008010:	f7fb fe94 	bl	8003d3c <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	429a      	cmp	r2, r3
 800801e:	d902      	bls.n	8008026 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d13d      	bne.n	80080a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008034:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800803e:	d111      	bne.n	8008064 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008048:	d004      	beq.n	8008054 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008052:	d107      	bne.n	8008064 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008062:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800806c:	d10f      	bne.n	800808e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800808c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e00f      	b.n	80080c2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4013      	ands	r3, r2
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	bf0c      	ite	eq
 80080b2:	2301      	moveq	r3, #1
 80080b4:	2300      	movne	r3, #0
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	79fb      	ldrb	r3, [r7, #7]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d1a3      	bne.n	8008008 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	607a      	str	r2, [r7, #4]
 80080d6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80080d8:	e057      	b.n	800818a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80080e0:	d106      	bne.n	80080f0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d103      	bne.n	80080f0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	330c      	adds	r3, #12
 80080ee:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f6:	d048      	beq.n	800818a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80080f8:	f7fb fe20 	bl	8003d3c <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	429a      	cmp	r2, r3
 8008106:	d902      	bls.n	800810e <SPI_WaitFifoStateUntilTimeout+0x44>
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d13d      	bne.n	800818a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800811c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008126:	d111      	bne.n	800814c <SPI_WaitFifoStateUntilTimeout+0x82>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008130:	d004      	beq.n	800813c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800813a:	d107      	bne.n	800814c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800814a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008154:	d10f      	bne.n	8008176 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008174:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e008      	b.n	800819c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	4013      	ands	r3, r2
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	429a      	cmp	r2, r3
 8008198:	d19f      	bne.n	80080da <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af02      	add	r7, sp, #8
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081b8:	d111      	bne.n	80081de <SPI_EndRxTransaction+0x3a>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081c2:	d004      	beq.n	80081ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081cc:	d107      	bne.n	80081de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2200      	movs	r2, #0
 80081e6:	2180      	movs	r1, #128	; 0x80
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f7ff ff04 	bl	8007ff6 <SPI_WaitFlagStateUntilTimeout>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d007      	beq.n	8008204 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081f8:	f043 0220 	orr.w	r2, r3, #32
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e023      	b.n	800824c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800820c:	d11d      	bne.n	800824a <SPI_EndRxTransaction+0xa6>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008216:	d004      	beq.n	8008222 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008220:	d113      	bne.n	800824a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2200      	movs	r2, #0
 800822a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7ff ff4b 	bl	80080ca <SPI_WaitFifoStateUntilTimeout>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800823e:	f043 0220 	orr.w	r2, r3, #32
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e000      	b.n	800824c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af02      	add	r7, sp, #8
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2200      	movs	r2, #0
 8008268:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f7ff ff2c 	bl	80080ca <SPI_WaitFifoStateUntilTimeout>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d007      	beq.n	8008288 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827c:	f043 0220 	orr.w	r2, r3, #32
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e027      	b.n	80082d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2200      	movs	r2, #0
 8008290:	2180      	movs	r1, #128	; 0x80
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f7ff feaf 	bl	8007ff6 <SPI_WaitFlagStateUntilTimeout>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d007      	beq.n	80082ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a2:	f043 0220 	orr.w	r2, r3, #32
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e014      	b.n	80082d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7ff ff05 	bl	80080ca <SPI_WaitFifoStateUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082ca:	f043 0220 	orr.w	r2, r3, #32
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e000      	b.n	80082d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e01d      	b.n	800832e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d106      	bne.n	800830c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7fa fc08 	bl	8002b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	3304      	adds	r3, #4
 800831c:	4619      	mov	r1, r3
 800831e:	4610      	mov	r0, r2
 8008320:	f000 f97c 	bl	800861c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68da      	ldr	r2, [r3, #12]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0201 	orr.w	r2, r2, #1
 800834e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689a      	ldr	r2, [r3, #8]
 8008356:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <HAL_TIM_Base_Start_IT+0x50>)
 8008358:	4013      	ands	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b06      	cmp	r3, #6
 8008360:	d00b      	beq.n	800837a <HAL_TIM_Base_Start_IT+0x42>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008368:	d007      	beq.n	800837a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f042 0201 	orr.w	r2, r2, #1
 8008378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	00010007 	.word	0x00010007

0800838c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d122      	bne.n	80083e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f003 0302 	and.w	r3, r3, #2
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d11b      	bne.n	80083e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f06f 0202 	mvn.w	r2, #2
 80083b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	f003 0303 	and.w	r3, r3, #3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f905 	bl	80085de <HAL_TIM_IC_CaptureCallback>
 80083d4:	e005      	b.n	80083e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f8f7 	bl	80085ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f908 	bl	80085f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	f003 0304 	and.w	r3, r3, #4
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d122      	bne.n	800843c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	f003 0304 	and.w	r3, r3, #4
 8008400:	2b04      	cmp	r3, #4
 8008402:	d11b      	bne.n	800843c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f06f 0204 	mvn.w	r2, #4
 800840c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2202      	movs	r2, #2
 8008412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800841e:	2b00      	cmp	r3, #0
 8008420:	d003      	beq.n	800842a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f8db 	bl	80085de <HAL_TIM_IC_CaptureCallback>
 8008428:	e005      	b.n	8008436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f8cd 	bl	80085ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f8de 	bl	80085f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	f003 0308 	and.w	r3, r3, #8
 8008446:	2b08      	cmp	r3, #8
 8008448:	d122      	bne.n	8008490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f003 0308 	and.w	r3, r3, #8
 8008454:	2b08      	cmp	r3, #8
 8008456:	d11b      	bne.n	8008490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f06f 0208 	mvn.w	r2, #8
 8008460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2204      	movs	r2, #4
 8008466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	f003 0303 	and.w	r3, r3, #3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f8b1 	bl	80085de <HAL_TIM_IC_CaptureCallback>
 800847c:	e005      	b.n	800848a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f8a3 	bl	80085ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f8b4 	bl	80085f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	f003 0310 	and.w	r3, r3, #16
 800849a:	2b10      	cmp	r3, #16
 800849c:	d122      	bne.n	80084e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	f003 0310 	and.w	r3, r3, #16
 80084a8:	2b10      	cmp	r3, #16
 80084aa:	d11b      	bne.n	80084e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f06f 0210 	mvn.w	r2, #16
 80084b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2208      	movs	r2, #8
 80084ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d003      	beq.n	80084d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f887 	bl	80085de <HAL_TIM_IC_CaptureCallback>
 80084d0:	e005      	b.n	80084de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f879 	bl	80085ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f88a 	bl	80085f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d10e      	bne.n	8008510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d107      	bne.n	8008510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f06f 0201 	mvn.w	r2, #1
 8008508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7f9 ffa2 	bl	8002454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851a:	2b80      	cmp	r3, #128	; 0x80
 800851c:	d10e      	bne.n	800853c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008528:	2b80      	cmp	r3, #128	; 0x80
 800852a:	d107      	bne.n	800853c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f914 	bl	8008764 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854a:	d10e      	bne.n	800856a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008556:	2b80      	cmp	r3, #128	; 0x80
 8008558:	d107      	bne.n	800856a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f907 	bl	8008778 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008574:	2b40      	cmp	r3, #64	; 0x40
 8008576:	d10e      	bne.n	8008596 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008582:	2b40      	cmp	r3, #64	; 0x40
 8008584:	d107      	bne.n	8008596 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800858e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f838 	bl	8008606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	f003 0320 	and.w	r3, r3, #32
 80085a0:	2b20      	cmp	r3, #32
 80085a2:	d10e      	bne.n	80085c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f003 0320 	and.w	r3, r3, #32
 80085ae:	2b20      	cmp	r3, #32
 80085b0:	d107      	bne.n	80085c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f06f 0220 	mvn.w	r2, #32
 80085ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f8c7 	bl	8008750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800860e:	bf00      	nop
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
	...

0800861c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a40      	ldr	r2, [pc, #256]	; (8008730 <TIM_Base_SetConfig+0x114>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d013      	beq.n	800865c <TIM_Base_SetConfig+0x40>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863a:	d00f      	beq.n	800865c <TIM_Base_SetConfig+0x40>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a3d      	ldr	r2, [pc, #244]	; (8008734 <TIM_Base_SetConfig+0x118>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00b      	beq.n	800865c <TIM_Base_SetConfig+0x40>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a3c      	ldr	r2, [pc, #240]	; (8008738 <TIM_Base_SetConfig+0x11c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d007      	beq.n	800865c <TIM_Base_SetConfig+0x40>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a3b      	ldr	r2, [pc, #236]	; (800873c <TIM_Base_SetConfig+0x120>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d003      	beq.n	800865c <TIM_Base_SetConfig+0x40>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a3a      	ldr	r2, [pc, #232]	; (8008740 <TIM_Base_SetConfig+0x124>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d108      	bne.n	800866e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a2f      	ldr	r2, [pc, #188]	; (8008730 <TIM_Base_SetConfig+0x114>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d01f      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800867c:	d01b      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a2c      	ldr	r2, [pc, #176]	; (8008734 <TIM_Base_SetConfig+0x118>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d017      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a2b      	ldr	r2, [pc, #172]	; (8008738 <TIM_Base_SetConfig+0x11c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d013      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a2a      	ldr	r2, [pc, #168]	; (800873c <TIM_Base_SetConfig+0x120>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d00f      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a29      	ldr	r2, [pc, #164]	; (8008740 <TIM_Base_SetConfig+0x124>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d00b      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a28      	ldr	r2, [pc, #160]	; (8008744 <TIM_Base_SetConfig+0x128>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d007      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a27      	ldr	r2, [pc, #156]	; (8008748 <TIM_Base_SetConfig+0x12c>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d003      	beq.n	80086b6 <TIM_Base_SetConfig+0x9a>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a26      	ldr	r2, [pc, #152]	; (800874c <TIM_Base_SetConfig+0x130>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d108      	bne.n	80086c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a10      	ldr	r2, [pc, #64]	; (8008730 <TIM_Base_SetConfig+0x114>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d00f      	beq.n	8008714 <TIM_Base_SetConfig+0xf8>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a12      	ldr	r2, [pc, #72]	; (8008740 <TIM_Base_SetConfig+0x124>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d00b      	beq.n	8008714 <TIM_Base_SetConfig+0xf8>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a11      	ldr	r2, [pc, #68]	; (8008744 <TIM_Base_SetConfig+0x128>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d007      	beq.n	8008714 <TIM_Base_SetConfig+0xf8>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a10      	ldr	r2, [pc, #64]	; (8008748 <TIM_Base_SetConfig+0x12c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d003      	beq.n	8008714 <TIM_Base_SetConfig+0xf8>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a0f      	ldr	r2, [pc, #60]	; (800874c <TIM_Base_SetConfig+0x130>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d103      	bne.n	800871c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	691a      	ldr	r2, [r3, #16]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	615a      	str	r2, [r3, #20]
}
 8008722:	bf00      	nop
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	40012c00 	.word	0x40012c00
 8008734:	40000400 	.word	0x40000400
 8008738:	40000800 	.word	0x40000800
 800873c:	40000c00 	.word	0x40000c00
 8008740:	40013400 	.word	0x40013400
 8008744:	40014000 	.word	0x40014000
 8008748:	40014400 	.word	0x40014400
 800874c:	40014800 	.word	0x40014800

08008750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e040      	b.n	8008820 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d106      	bne.n	80087b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7fa f9da 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2224      	movs	r2, #36	; 0x24
 80087b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f022 0201 	bic.w	r2, r2, #1
 80087c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fbca 	bl	8008f64 <UART_SetConfig>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d101      	bne.n	80087da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e022      	b.n	8008820 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 ff06 	bl	80095f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f042 0201 	orr.w	r2, r2, #1
 8008816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 ff8d 	bl	8009738 <UART_CheckIdleState>
 800881e:	4603      	mov	r3, r0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08a      	sub	sp, #40	; 0x28
 800882c:	af02      	add	r7, sp, #8
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	4613      	mov	r3, r2
 8008836:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883c:	2b20      	cmp	r3, #32
 800883e:	f040 8081 	bne.w	8008944 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <HAL_UART_Transmit+0x26>
 8008848:	88fb      	ldrh	r3, [r7, #6]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e079      	b.n	8008946 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008858:	2b01      	cmp	r3, #1
 800885a:	d101      	bne.n	8008860 <HAL_UART_Transmit+0x38>
 800885c:	2302      	movs	r3, #2
 800885e:	e072      	b.n	8008946 <HAL_UART_Transmit+0x11e>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2221      	movs	r2, #33	; 0x21
 8008872:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008874:	f7fb fa62 	bl	8003d3c <HAL_GetTick>
 8008878:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	88fa      	ldrh	r2, [r7, #6]
 800887e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	88fa      	ldrh	r2, [r7, #6]
 8008886:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008892:	d108      	bne.n	80088a6 <HAL_UART_Transmit+0x7e>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d104      	bne.n	80088a6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800889c:	2300      	movs	r3, #0
 800889e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	61bb      	str	r3, [r7, #24]
 80088a4:	e003      	b.n	80088ae <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088ae:	e02d      	b.n	800890c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2200      	movs	r2, #0
 80088b8:	2180      	movs	r1, #128	; 0x80
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 ff81 	bl	80097c2 <UART_WaitOnFlagUntilTimeout>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e03d      	b.n	8008946 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10b      	bne.n	80088e8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	881a      	ldrh	r2, [r3, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088dc:	b292      	uxth	r2, r2
 80088de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	3302      	adds	r3, #2
 80088e4:	61bb      	str	r3, [r7, #24]
 80088e6:	e008      	b.n	80088fa <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	781a      	ldrb	r2, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	b292      	uxth	r2, r2
 80088f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	3301      	adds	r3, #1
 80088f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008900:	b29b      	uxth	r3, r3
 8008902:	3b01      	subs	r3, #1
 8008904:	b29a      	uxth	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008912:	b29b      	uxth	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1cb      	bne.n	80088b0 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2200      	movs	r2, #0
 8008920:	2140      	movs	r1, #64	; 0x40
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f000 ff4d 	bl	80097c2 <UART_WaitOnFlagUntilTimeout>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e009      	b.n	8008946 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2220      	movs	r2, #32
 8008936:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	e000      	b.n	8008946 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008944:	2302      	movs	r3, #2
  }
}
 8008946:	4618      	mov	r0, r3
 8008948:	3720      	adds	r7, #32
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b08a      	sub	sp, #40	; 0x28
 8008952:	af02      	add	r7, sp, #8
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	603b      	str	r3, [r7, #0]
 800895a:	4613      	mov	r3, r2
 800895c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008962:	2b20      	cmp	r3, #32
 8008964:	f040 80bb 	bne.w	8008ade <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <HAL_UART_Receive+0x26>
 800896e:	88fb      	ldrh	r3, [r7, #6]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e0b3      	b.n	8008ae0 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800897e:	2b01      	cmp	r3, #1
 8008980:	d101      	bne.n	8008986 <HAL_UART_Receive+0x38>
 8008982:	2302      	movs	r3, #2
 8008984:	e0ac      	b.n	8008ae0 <HAL_UART_Receive+0x192>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2222      	movs	r2, #34	; 0x22
 8008998:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800899a:	f7fb f9cf 	bl	8003d3c <HAL_GetTick>
 800899e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	88fa      	ldrh	r2, [r7, #6]
 80089a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	88fa      	ldrh	r2, [r7, #6]
 80089ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b8:	d10e      	bne.n	80089d8 <HAL_UART_Receive+0x8a>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d105      	bne.n	80089ce <HAL_UART_Receive+0x80>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80089c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089cc:	e02d      	b.n	8008a2a <HAL_UART_Receive+0xdc>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	22ff      	movs	r2, #255	; 0xff
 80089d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089d6:	e028      	b.n	8008a2a <HAL_UART_Receive+0xdc>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10d      	bne.n	80089fc <HAL_UART_Receive+0xae>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d104      	bne.n	80089f2 <HAL_UART_Receive+0xa4>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	22ff      	movs	r2, #255	; 0xff
 80089ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089f0:	e01b      	b.n	8008a2a <HAL_UART_Receive+0xdc>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	227f      	movs	r2, #127	; 0x7f
 80089f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089fa:	e016      	b.n	8008a2a <HAL_UART_Receive+0xdc>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a04:	d10d      	bne.n	8008a22 <HAL_UART_Receive+0xd4>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d104      	bne.n	8008a18 <HAL_UART_Receive+0xca>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	227f      	movs	r2, #127	; 0x7f
 8008a12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a16:	e008      	b.n	8008a2a <HAL_UART_Receive+0xdc>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	223f      	movs	r2, #63	; 0x3f
 8008a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a20:	e003      	b.n	8008a2a <HAL_UART_Receive+0xdc>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a30:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3a:	d108      	bne.n	8008a4e <HAL_UART_Receive+0x100>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d104      	bne.n	8008a4e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8008a44:	2300      	movs	r3, #0
 8008a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	61bb      	str	r3, [r7, #24]
 8008a4c:	e003      	b.n	8008a56 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a52:	2300      	movs	r3, #0
 8008a54:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008a56:	e033      	b.n	8008ac0 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2120      	movs	r1, #32
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 fead 	bl	80097c2 <UART_WaitOnFlagUntilTimeout>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e036      	b.n	8008ae0 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10c      	bne.n	8008a92 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	8a7b      	ldrh	r3, [r7, #18]
 8008a82:	4013      	ands	r3, r2
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	3302      	adds	r3, #2
 8008a8e:	61bb      	str	r3, [r7, #24]
 8008a90:	e00d      	b.n	8008aae <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	8a7b      	ldrh	r3, [r7, #18]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1c5      	bne.n	8008a58 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2220      	movs	r2, #32
 8008ad0:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	e000      	b.n	8008ae0 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8008ade:	2302      	movs	r3, #2
  }
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3720      	adds	r7, #32
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	4613      	mov	r3, r2
 8008af4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d16c      	bne.n	8008bd8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <HAL_UART_Receive_DMA+0x22>
 8008b04:	88fb      	ldrh	r3, [r7, #6]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e065      	b.n	8008bda <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_UART_Receive_DMA+0x34>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e05e      	b.n	8008bda <HAL_UART_Receive_DMA+0xf2>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	88fa      	ldrh	r2, [r7, #6]
 8008b2e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2222      	movs	r2, #34	; 0x22
 8008b3c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d02a      	beq.n	8008b9c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b4a:	4a26      	ldr	r2, [pc, #152]	; (8008be4 <HAL_UART_Receive_DMA+0xfc>)
 8008b4c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b52:	4a25      	ldr	r2, [pc, #148]	; (8008be8 <HAL_UART_Receive_DMA+0x100>)
 8008b54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b5a:	4a24      	ldr	r2, [pc, #144]	; (8008bec <HAL_UART_Receive_DMA+0x104>)
 8008b5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b62:	2200      	movs	r2, #0
 8008b64:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3324      	adds	r3, #36	; 0x24
 8008b70:	4619      	mov	r1, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b76:	461a      	mov	r2, r3
 8008b78:	88fb      	ldrh	r3, [r7, #6]
 8008b7a:	f7fc fc29 	bl	80053d0 <HAL_DMA_Start_IT>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00b      	beq.n	8008b9c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2210      	movs	r2, #16
 8008b88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2220      	movs	r2, #32
 8008b96:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e01e      	b.n	8008bda <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bb2:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689a      	ldr	r2, [r3, #8]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f042 0201 	orr.w	r2, r2, #1
 8008bc2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689a      	ldr	r2, [r3, #8]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bd2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	e000      	b.n	8008bda <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8008bd8:	2302      	movs	r3, #2
  }
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	080098bd 	.word	0x080098bd
 8008be8:	08009925 	.word	0x08009925
 8008bec:	08009941 	.word	0x08009941

08008bf0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bfc:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c02:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c0e:	2b80      	cmp	r3, #128	; 0x80
 8008c10:	d126      	bne.n	8008c60 <HAL_UART_DMAStop+0x70>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b21      	cmp	r3, #33	; 0x21
 8008c16:	d123      	bne.n	8008c60 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c26:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d014      	beq.n	8008c5a <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fc fc2b 	bl	8005490 <HAL_DMA_Abort>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00c      	beq.n	8008c5a <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fc fd51 	bl	80056ec <HAL_DMA_GetError>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b20      	cmp	r3, #32
 8008c4e:	d104      	bne.n	8008c5a <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2210      	movs	r2, #16
 8008c54:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e031      	b.n	8008cbe <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fdf9 	bl	8009852 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6a:	2b40      	cmp	r3, #64	; 0x40
 8008c6c:	d126      	bne.n	8008cbc <HAL_UART_DMAStop+0xcc>
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2b22      	cmp	r3, #34	; 0x22
 8008c72:	d123      	bne.n	8008cbc <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689a      	ldr	r2, [r3, #8]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c82:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d014      	beq.n	8008cb6 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fc fbfd 	bl	8005490 <HAL_DMA_Abort>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00c      	beq.n	8008cb6 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fc fd23 	bl	80056ec <HAL_DMA_GetError>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b20      	cmp	r3, #32
 8008caa:	d104      	bne.n	8008cb6 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2210      	movs	r2, #16
 8008cb0:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e003      	b.n	8008cbe <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fde0 	bl	800987c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
	...

08008cc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b088      	sub	sp, #32
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	f003 030f 	and.w	r3, r3, #15
 8008cee:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d113      	bne.n	8008d1e <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	f003 0320 	and.w	r3, r3, #32
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00e      	beq.n	8008d1e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	f003 0320 	and.w	r3, r3, #32
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d009      	beq.n	8008d1e <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 80ff 	beq.w	8008f12 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	4798      	blx	r3
      }
      return;
 8008d1c:	e0f9      	b.n	8008f12 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 80c1 	beq.w	8008ea8 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d105      	bne.n	8008d3c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 80b6 	beq.w	8008ea8 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00e      	beq.n	8008d64 <HAL_UART_IRQHandler+0x9c>
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d009      	beq.n	8008d64 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2201      	movs	r2, #1
 8008d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d5c:	f043 0201 	orr.w	r2, r3, #1
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00e      	beq.n	8008d8c <HAL_UART_IRQHandler+0xc4>
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d009      	beq.n	8008d8c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d84:	f043 0204 	orr.w	r2, r3, #4
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	f003 0304 	and.w	r3, r3, #4
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00e      	beq.n	8008db4 <HAL_UART_IRQHandler+0xec>
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d009      	beq.n	8008db4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2204      	movs	r2, #4
 8008da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dac:	f043 0202 	orr.w	r2, r3, #2
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	f003 0308 	and.w	r3, r3, #8
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d013      	beq.n	8008de6 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	f003 0320 	and.w	r3, r3, #32
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d009      	beq.n	8008de6 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2208      	movs	r2, #8
 8008dd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dde:	f043 0208 	orr.w	r2, r3, #8
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 8093 	beq.w	8008f16 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00c      	beq.n	8008e14 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	f003 0320 	and.w	r3, r3, #32
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d007      	beq.n	8008e14 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e18:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e24:	2b40      	cmp	r3, #64	; 0x40
 8008e26:	d004      	beq.n	8008e32 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d031      	beq.n	8008e96 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fd22 	bl	800987c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e42:	2b40      	cmp	r3, #64	; 0x40
 8008e44:	d123      	bne.n	8008e8e <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e54:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d013      	beq.n	8008e86 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e62:	4a30      	ldr	r2, [pc, #192]	; (8008f24 <HAL_UART_IRQHandler+0x25c>)
 8008e64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fc fb4e 	bl	800550c <HAL_DMA_Abort_IT>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d016      	beq.n	8008ea4 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008e80:	4610      	mov	r0, r2
 8008e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e84:	e00e      	b.n	8008ea4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f862 	bl	8008f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e8c:	e00a      	b.n	8008ea4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f85e 	bl	8008f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e94:	e006      	b.n	8008ea4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f85a 	bl	8008f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008ea2:	e038      	b.n	8008f16 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea4:	bf00      	nop
    return;
 8008ea6:	e036      	b.n	8008f16 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00d      	beq.n	8008ece <HAL_UART_IRQHandler+0x206>
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d008      	beq.n	8008ece <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008ec4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fda5 	bl	8009a16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ecc:	e026      	b.n	8008f1c <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00d      	beq.n	8008ef4 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d008      	beq.n	8008ef4 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d017      	beq.n	8008f1a <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	4798      	blx	r3
    }
    return;
 8008ef2:	e012      	b.n	8008f1a <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00e      	beq.n	8008f1c <HAL_UART_IRQHandler+0x254>
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d009      	beq.n	8008f1c <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fd6b 	bl	80099e4 <UART_EndTransmit_IT>
    return;
 8008f0e:	bf00      	nop
 8008f10:	e004      	b.n	8008f1c <HAL_UART_IRQHandler+0x254>
      return;
 8008f12:	bf00      	nop
 8008f14:	e002      	b.n	8008f1c <HAL_UART_IRQHandler+0x254>
    return;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <HAL_UART_IRQHandler+0x254>
    return;
 8008f1a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008f1c:	3720      	adds	r7, #32
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	080099b9 	.word	0x080099b9

08008f28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f64:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008f68:	b088      	sub	sp, #32
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	689a      	ldr	r2, [r3, #8]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	431a      	orrs	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	4bac      	ldr	r3, [pc, #688]	; (800924c <UART_SetConfig+0x2e8>)
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	6812      	ldr	r2, [r2, #0]
 8008fa0:	69f9      	ldr	r1, [r7, #28]
 8008fa2:	430b      	orrs	r3, r1
 8008fa4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4aa2      	ldr	r2, [pc, #648]	; (8009250 <UART_SetConfig+0x2ec>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d004      	beq.n	8008fd6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	69fa      	ldr	r2, [r7, #28]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69fa      	ldr	r2, [r7, #28]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a99      	ldr	r2, [pc, #612]	; (8009254 <UART_SetConfig+0x2f0>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d121      	bne.n	8009038 <UART_SetConfig+0xd4>
 8008ff4:	4b98      	ldr	r3, [pc, #608]	; (8009258 <UART_SetConfig+0x2f4>)
 8008ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ffa:	f003 0303 	and.w	r3, r3, #3
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d816      	bhi.n	8009030 <UART_SetConfig+0xcc>
 8009002:	a201      	add	r2, pc, #4	; (adr r2, 8009008 <UART_SetConfig+0xa4>)
 8009004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009008:	08009019 	.word	0x08009019
 800900c:	08009025 	.word	0x08009025
 8009010:	0800901f 	.word	0x0800901f
 8009014:	0800902b 	.word	0x0800902b
 8009018:	2301      	movs	r3, #1
 800901a:	76fb      	strb	r3, [r7, #27]
 800901c:	e0e8      	b.n	80091f0 <UART_SetConfig+0x28c>
 800901e:	2302      	movs	r3, #2
 8009020:	76fb      	strb	r3, [r7, #27]
 8009022:	e0e5      	b.n	80091f0 <UART_SetConfig+0x28c>
 8009024:	2304      	movs	r3, #4
 8009026:	76fb      	strb	r3, [r7, #27]
 8009028:	e0e2      	b.n	80091f0 <UART_SetConfig+0x28c>
 800902a:	2308      	movs	r3, #8
 800902c:	76fb      	strb	r3, [r7, #27]
 800902e:	e0df      	b.n	80091f0 <UART_SetConfig+0x28c>
 8009030:	2310      	movs	r3, #16
 8009032:	76fb      	strb	r3, [r7, #27]
 8009034:	bf00      	nop
 8009036:	e0db      	b.n	80091f0 <UART_SetConfig+0x28c>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a87      	ldr	r2, [pc, #540]	; (800925c <UART_SetConfig+0x2f8>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d134      	bne.n	80090ac <UART_SetConfig+0x148>
 8009042:	4b85      	ldr	r3, [pc, #532]	; (8009258 <UART_SetConfig+0x2f4>)
 8009044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009048:	f003 030c 	and.w	r3, r3, #12
 800904c:	2b0c      	cmp	r3, #12
 800904e:	d829      	bhi.n	80090a4 <UART_SetConfig+0x140>
 8009050:	a201      	add	r2, pc, #4	; (adr r2, 8009058 <UART_SetConfig+0xf4>)
 8009052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009056:	bf00      	nop
 8009058:	0800908d 	.word	0x0800908d
 800905c:	080090a5 	.word	0x080090a5
 8009060:	080090a5 	.word	0x080090a5
 8009064:	080090a5 	.word	0x080090a5
 8009068:	08009099 	.word	0x08009099
 800906c:	080090a5 	.word	0x080090a5
 8009070:	080090a5 	.word	0x080090a5
 8009074:	080090a5 	.word	0x080090a5
 8009078:	08009093 	.word	0x08009093
 800907c:	080090a5 	.word	0x080090a5
 8009080:	080090a5 	.word	0x080090a5
 8009084:	080090a5 	.word	0x080090a5
 8009088:	0800909f 	.word	0x0800909f
 800908c:	2300      	movs	r3, #0
 800908e:	76fb      	strb	r3, [r7, #27]
 8009090:	e0ae      	b.n	80091f0 <UART_SetConfig+0x28c>
 8009092:	2302      	movs	r3, #2
 8009094:	76fb      	strb	r3, [r7, #27]
 8009096:	e0ab      	b.n	80091f0 <UART_SetConfig+0x28c>
 8009098:	2304      	movs	r3, #4
 800909a:	76fb      	strb	r3, [r7, #27]
 800909c:	e0a8      	b.n	80091f0 <UART_SetConfig+0x28c>
 800909e:	2308      	movs	r3, #8
 80090a0:	76fb      	strb	r3, [r7, #27]
 80090a2:	e0a5      	b.n	80091f0 <UART_SetConfig+0x28c>
 80090a4:	2310      	movs	r3, #16
 80090a6:	76fb      	strb	r3, [r7, #27]
 80090a8:	bf00      	nop
 80090aa:	e0a1      	b.n	80091f0 <UART_SetConfig+0x28c>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a6b      	ldr	r2, [pc, #428]	; (8009260 <UART_SetConfig+0x2fc>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d120      	bne.n	80090f8 <UART_SetConfig+0x194>
 80090b6:	4b68      	ldr	r3, [pc, #416]	; (8009258 <UART_SetConfig+0x2f4>)
 80090b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80090c0:	2b10      	cmp	r3, #16
 80090c2:	d00f      	beq.n	80090e4 <UART_SetConfig+0x180>
 80090c4:	2b10      	cmp	r3, #16
 80090c6:	d802      	bhi.n	80090ce <UART_SetConfig+0x16a>
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <UART_SetConfig+0x174>
 80090cc:	e010      	b.n	80090f0 <UART_SetConfig+0x18c>
 80090ce:	2b20      	cmp	r3, #32
 80090d0:	d005      	beq.n	80090de <UART_SetConfig+0x17a>
 80090d2:	2b30      	cmp	r3, #48	; 0x30
 80090d4:	d009      	beq.n	80090ea <UART_SetConfig+0x186>
 80090d6:	e00b      	b.n	80090f0 <UART_SetConfig+0x18c>
 80090d8:	2300      	movs	r3, #0
 80090da:	76fb      	strb	r3, [r7, #27]
 80090dc:	e088      	b.n	80091f0 <UART_SetConfig+0x28c>
 80090de:	2302      	movs	r3, #2
 80090e0:	76fb      	strb	r3, [r7, #27]
 80090e2:	e085      	b.n	80091f0 <UART_SetConfig+0x28c>
 80090e4:	2304      	movs	r3, #4
 80090e6:	76fb      	strb	r3, [r7, #27]
 80090e8:	e082      	b.n	80091f0 <UART_SetConfig+0x28c>
 80090ea:	2308      	movs	r3, #8
 80090ec:	76fb      	strb	r3, [r7, #27]
 80090ee:	e07f      	b.n	80091f0 <UART_SetConfig+0x28c>
 80090f0:	2310      	movs	r3, #16
 80090f2:	76fb      	strb	r3, [r7, #27]
 80090f4:	bf00      	nop
 80090f6:	e07b      	b.n	80091f0 <UART_SetConfig+0x28c>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a59      	ldr	r2, [pc, #356]	; (8009264 <UART_SetConfig+0x300>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d120      	bne.n	8009144 <UART_SetConfig+0x1e0>
 8009102:	4b55      	ldr	r3, [pc, #340]	; (8009258 <UART_SetConfig+0x2f4>)
 8009104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009108:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800910c:	2b40      	cmp	r3, #64	; 0x40
 800910e:	d00f      	beq.n	8009130 <UART_SetConfig+0x1cc>
 8009110:	2b40      	cmp	r3, #64	; 0x40
 8009112:	d802      	bhi.n	800911a <UART_SetConfig+0x1b6>
 8009114:	2b00      	cmp	r3, #0
 8009116:	d005      	beq.n	8009124 <UART_SetConfig+0x1c0>
 8009118:	e010      	b.n	800913c <UART_SetConfig+0x1d8>
 800911a:	2b80      	cmp	r3, #128	; 0x80
 800911c:	d005      	beq.n	800912a <UART_SetConfig+0x1c6>
 800911e:	2bc0      	cmp	r3, #192	; 0xc0
 8009120:	d009      	beq.n	8009136 <UART_SetConfig+0x1d2>
 8009122:	e00b      	b.n	800913c <UART_SetConfig+0x1d8>
 8009124:	2300      	movs	r3, #0
 8009126:	76fb      	strb	r3, [r7, #27]
 8009128:	e062      	b.n	80091f0 <UART_SetConfig+0x28c>
 800912a:	2302      	movs	r3, #2
 800912c:	76fb      	strb	r3, [r7, #27]
 800912e:	e05f      	b.n	80091f0 <UART_SetConfig+0x28c>
 8009130:	2304      	movs	r3, #4
 8009132:	76fb      	strb	r3, [r7, #27]
 8009134:	e05c      	b.n	80091f0 <UART_SetConfig+0x28c>
 8009136:	2308      	movs	r3, #8
 8009138:	76fb      	strb	r3, [r7, #27]
 800913a:	e059      	b.n	80091f0 <UART_SetConfig+0x28c>
 800913c:	2310      	movs	r3, #16
 800913e:	76fb      	strb	r3, [r7, #27]
 8009140:	bf00      	nop
 8009142:	e055      	b.n	80091f0 <UART_SetConfig+0x28c>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a47      	ldr	r2, [pc, #284]	; (8009268 <UART_SetConfig+0x304>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d124      	bne.n	8009198 <UART_SetConfig+0x234>
 800914e:	4b42      	ldr	r3, [pc, #264]	; (8009258 <UART_SetConfig+0x2f4>)
 8009150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800915c:	d012      	beq.n	8009184 <UART_SetConfig+0x220>
 800915e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009162:	d802      	bhi.n	800916a <UART_SetConfig+0x206>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d007      	beq.n	8009178 <UART_SetConfig+0x214>
 8009168:	e012      	b.n	8009190 <UART_SetConfig+0x22c>
 800916a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800916e:	d006      	beq.n	800917e <UART_SetConfig+0x21a>
 8009170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009174:	d009      	beq.n	800918a <UART_SetConfig+0x226>
 8009176:	e00b      	b.n	8009190 <UART_SetConfig+0x22c>
 8009178:	2300      	movs	r3, #0
 800917a:	76fb      	strb	r3, [r7, #27]
 800917c:	e038      	b.n	80091f0 <UART_SetConfig+0x28c>
 800917e:	2302      	movs	r3, #2
 8009180:	76fb      	strb	r3, [r7, #27]
 8009182:	e035      	b.n	80091f0 <UART_SetConfig+0x28c>
 8009184:	2304      	movs	r3, #4
 8009186:	76fb      	strb	r3, [r7, #27]
 8009188:	e032      	b.n	80091f0 <UART_SetConfig+0x28c>
 800918a:	2308      	movs	r3, #8
 800918c:	76fb      	strb	r3, [r7, #27]
 800918e:	e02f      	b.n	80091f0 <UART_SetConfig+0x28c>
 8009190:	2310      	movs	r3, #16
 8009192:	76fb      	strb	r3, [r7, #27]
 8009194:	bf00      	nop
 8009196:	e02b      	b.n	80091f0 <UART_SetConfig+0x28c>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a2c      	ldr	r2, [pc, #176]	; (8009250 <UART_SetConfig+0x2ec>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d124      	bne.n	80091ec <UART_SetConfig+0x288>
 80091a2:	4b2d      	ldr	r3, [pc, #180]	; (8009258 <UART_SetConfig+0x2f4>)
 80091a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80091ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091b0:	d012      	beq.n	80091d8 <UART_SetConfig+0x274>
 80091b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091b6:	d802      	bhi.n	80091be <UART_SetConfig+0x25a>
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d007      	beq.n	80091cc <UART_SetConfig+0x268>
 80091bc:	e012      	b.n	80091e4 <UART_SetConfig+0x280>
 80091be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091c2:	d006      	beq.n	80091d2 <UART_SetConfig+0x26e>
 80091c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091c8:	d009      	beq.n	80091de <UART_SetConfig+0x27a>
 80091ca:	e00b      	b.n	80091e4 <UART_SetConfig+0x280>
 80091cc:	2300      	movs	r3, #0
 80091ce:	76fb      	strb	r3, [r7, #27]
 80091d0:	e00e      	b.n	80091f0 <UART_SetConfig+0x28c>
 80091d2:	2302      	movs	r3, #2
 80091d4:	76fb      	strb	r3, [r7, #27]
 80091d6:	e00b      	b.n	80091f0 <UART_SetConfig+0x28c>
 80091d8:	2304      	movs	r3, #4
 80091da:	76fb      	strb	r3, [r7, #27]
 80091dc:	e008      	b.n	80091f0 <UART_SetConfig+0x28c>
 80091de:	2308      	movs	r3, #8
 80091e0:	76fb      	strb	r3, [r7, #27]
 80091e2:	e005      	b.n	80091f0 <UART_SetConfig+0x28c>
 80091e4:	2310      	movs	r3, #16
 80091e6:	76fb      	strb	r3, [r7, #27]
 80091e8:	bf00      	nop
 80091ea:	e001      	b.n	80091f0 <UART_SetConfig+0x28c>
 80091ec:	2310      	movs	r3, #16
 80091ee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a16      	ldr	r2, [pc, #88]	; (8009250 <UART_SetConfig+0x2ec>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	f040 80fa 	bne.w	80093f0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80091fc:	7efb      	ldrb	r3, [r7, #27]
 80091fe:	2b08      	cmp	r3, #8
 8009200:	d836      	bhi.n	8009270 <UART_SetConfig+0x30c>
 8009202:	a201      	add	r2, pc, #4	; (adr r2, 8009208 <UART_SetConfig+0x2a4>)
 8009204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009208:	0800922d 	.word	0x0800922d
 800920c:	08009271 	.word	0x08009271
 8009210:	08009235 	.word	0x08009235
 8009214:	08009271 	.word	0x08009271
 8009218:	0800923b 	.word	0x0800923b
 800921c:	08009271 	.word	0x08009271
 8009220:	08009271 	.word	0x08009271
 8009224:	08009271 	.word	0x08009271
 8009228:	08009243 	.word	0x08009243
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800922c:	f7fd fc7c 	bl	8006b28 <HAL_RCC_GetPCLK1Freq>
 8009230:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009232:	e020      	b.n	8009276 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8009234:	4b0d      	ldr	r3, [pc, #52]	; (800926c <UART_SetConfig+0x308>)
 8009236:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009238:	e01d      	b.n	8009276 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800923a:	f7fd fbdf 	bl	80069fc <HAL_RCC_GetSysClockFreq>
 800923e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009240:	e019      	b.n	8009276 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8009242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009246:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009248:	e015      	b.n	8009276 <UART_SetConfig+0x312>
 800924a:	bf00      	nop
 800924c:	efff69f3 	.word	0xefff69f3
 8009250:	40008000 	.word	0x40008000
 8009254:	40013800 	.word	0x40013800
 8009258:	40021000 	.word	0x40021000
 800925c:	40004400 	.word	0x40004400
 8009260:	40004800 	.word	0x40004800
 8009264:	40004c00 	.word	0x40004c00
 8009268:	40005000 	.word	0x40005000
 800926c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	74fb      	strb	r3, [r7, #19]
        break;
 8009274:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 81ac 	beq.w	80095d6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	4413      	add	r3, r2
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	429a      	cmp	r2, r3
 800928c:	d305      	bcc.n	800929a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	429a      	cmp	r2, r3
 8009298:	d902      	bls.n	80092a0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	74fb      	strb	r3, [r7, #19]
 800929e:	e19a      	b.n	80095d6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80092a0:	7efb      	ldrb	r3, [r7, #27]
 80092a2:	2b08      	cmp	r3, #8
 80092a4:	f200 8091 	bhi.w	80093ca <UART_SetConfig+0x466>
 80092a8:	a201      	add	r2, pc, #4	; (adr r2, 80092b0 <UART_SetConfig+0x34c>)
 80092aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ae:	bf00      	nop
 80092b0:	080092d5 	.word	0x080092d5
 80092b4:	080093cb 	.word	0x080093cb
 80092b8:	08009321 	.word	0x08009321
 80092bc:	080093cb 	.word	0x080093cb
 80092c0:	08009355 	.word	0x08009355
 80092c4:	080093cb 	.word	0x080093cb
 80092c8:	080093cb 	.word	0x080093cb
 80092cc:	080093cb 	.word	0x080093cb
 80092d0:	080093a1 	.word	0x080093a1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80092d4:	f7fd fc28 	bl	8006b28 <HAL_RCC_GetPCLK1Freq>
 80092d8:	4603      	mov	r3, r0
 80092da:	4619      	mov	r1, r3
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	f04f 0300 	mov.w	r3, #0
 80092e4:	f04f 0400 	mov.w	r4, #0
 80092e8:	0214      	lsls	r4, r2, #8
 80092ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80092ee:	020b      	lsls	r3, r1, #8
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	6852      	ldr	r2, [r2, #4]
 80092f4:	0852      	lsrs	r2, r2, #1
 80092f6:	4611      	mov	r1, r2
 80092f8:	f04f 0200 	mov.w	r2, #0
 80092fc:	eb13 0b01 	adds.w	fp, r3, r1
 8009300:	eb44 0c02 	adc.w	ip, r4, r2
 8009304:	4658      	mov	r0, fp
 8009306:	4661      	mov	r1, ip
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	f04f 0400 	mov.w	r4, #0
 8009310:	461a      	mov	r2, r3
 8009312:	4623      	mov	r3, r4
 8009314:	f7f7 fc40 	bl	8000b98 <__aeabi_uldivmod>
 8009318:	4603      	mov	r3, r0
 800931a:	460c      	mov	r4, r1
 800931c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800931e:	e057      	b.n	80093d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	085b      	lsrs	r3, r3, #1
 8009326:	f04f 0400 	mov.w	r4, #0
 800932a:	49b1      	ldr	r1, [pc, #708]	; (80095f0 <UART_SetConfig+0x68c>)
 800932c:	f04f 0200 	mov.w	r2, #0
 8009330:	eb13 0b01 	adds.w	fp, r3, r1
 8009334:	eb44 0c02 	adc.w	ip, r4, r2
 8009338:	4658      	mov	r0, fp
 800933a:	4661      	mov	r1, ip
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	f04f 0400 	mov.w	r4, #0
 8009344:	461a      	mov	r2, r3
 8009346:	4623      	mov	r3, r4
 8009348:	f7f7 fc26 	bl	8000b98 <__aeabi_uldivmod>
 800934c:	4603      	mov	r3, r0
 800934e:	460c      	mov	r4, r1
 8009350:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8009352:	e03d      	b.n	80093d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009354:	f7fd fb52 	bl	80069fc <HAL_RCC_GetSysClockFreq>
 8009358:	4603      	mov	r3, r0
 800935a:	4619      	mov	r1, r3
 800935c:	f04f 0200 	mov.w	r2, #0
 8009360:	f04f 0300 	mov.w	r3, #0
 8009364:	f04f 0400 	mov.w	r4, #0
 8009368:	0214      	lsls	r4, r2, #8
 800936a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800936e:	020b      	lsls	r3, r1, #8
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6852      	ldr	r2, [r2, #4]
 8009374:	0852      	lsrs	r2, r2, #1
 8009376:	4611      	mov	r1, r2
 8009378:	f04f 0200 	mov.w	r2, #0
 800937c:	eb13 0b01 	adds.w	fp, r3, r1
 8009380:	eb44 0c02 	adc.w	ip, r4, r2
 8009384:	4658      	mov	r0, fp
 8009386:	4661      	mov	r1, ip
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f04f 0400 	mov.w	r4, #0
 8009390:	461a      	mov	r2, r3
 8009392:	4623      	mov	r3, r4
 8009394:	f7f7 fc00 	bl	8000b98 <__aeabi_uldivmod>
 8009398:	4603      	mov	r3, r0
 800939a:	460c      	mov	r4, r1
 800939c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800939e:	e017      	b.n	80093d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	085b      	lsrs	r3, r3, #1
 80093a6:	f04f 0400 	mov.w	r4, #0
 80093aa:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80093ae:	f144 0100 	adc.w	r1, r4, #0
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	f04f 0400 	mov.w	r4, #0
 80093ba:	461a      	mov	r2, r3
 80093bc:	4623      	mov	r3, r4
 80093be:	f7f7 fbeb 	bl	8000b98 <__aeabi_uldivmod>
 80093c2:	4603      	mov	r3, r0
 80093c4:	460c      	mov	r4, r1
 80093c6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80093c8:	e002      	b.n	80093d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	74fb      	strb	r3, [r7, #19]
            break;
 80093ce:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093d6:	d308      	bcc.n	80093ea <UART_SetConfig+0x486>
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093de:	d204      	bcs.n	80093ea <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	60da      	str	r2, [r3, #12]
 80093e8:	e0f5      	b.n	80095d6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	74fb      	strb	r3, [r7, #19]
 80093ee:	e0f2      	b.n	80095d6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093f8:	d17f      	bne.n	80094fa <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80093fa:	7efb      	ldrb	r3, [r7, #27]
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d85c      	bhi.n	80094ba <UART_SetConfig+0x556>
 8009400:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <UART_SetConfig+0x4a4>)
 8009402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009406:	bf00      	nop
 8009408:	0800942d 	.word	0x0800942d
 800940c:	0800944b 	.word	0x0800944b
 8009410:	08009469 	.word	0x08009469
 8009414:	080094bb 	.word	0x080094bb
 8009418:	08009485 	.word	0x08009485
 800941c:	080094bb 	.word	0x080094bb
 8009420:	080094bb 	.word	0x080094bb
 8009424:	080094bb 	.word	0x080094bb
 8009428:	080094a3 	.word	0x080094a3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800942c:	f7fd fb7c 	bl	8006b28 <HAL_RCC_GetPCLK1Freq>
 8009430:	4603      	mov	r3, r0
 8009432:	005a      	lsls	r2, r3, #1
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	085b      	lsrs	r3, r3, #1
 800943a:	441a      	add	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	fbb2 f3f3 	udiv	r3, r2, r3
 8009444:	b29b      	uxth	r3, r3
 8009446:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009448:	e03a      	b.n	80094c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800944a:	f7fd fb83 	bl	8006b54 <HAL_RCC_GetPCLK2Freq>
 800944e:	4603      	mov	r3, r0
 8009450:	005a      	lsls	r2, r3, #1
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	441a      	add	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009462:	b29b      	uxth	r3, r3
 8009464:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009466:	e02b      	b.n	80094c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	085b      	lsrs	r3, r3, #1
 800946e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8009472:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	6852      	ldr	r2, [r2, #4]
 800947a:	fbb3 f3f2 	udiv	r3, r3, r2
 800947e:	b29b      	uxth	r3, r3
 8009480:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009482:	e01d      	b.n	80094c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009484:	f7fd faba 	bl	80069fc <HAL_RCC_GetSysClockFreq>
 8009488:	4603      	mov	r3, r0
 800948a:	005a      	lsls	r2, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	085b      	lsrs	r3, r3, #1
 8009492:	441a      	add	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	fbb2 f3f3 	udiv	r3, r2, r3
 800949c:	b29b      	uxth	r3, r3
 800949e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80094a0:	e00e      	b.n	80094c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	085b      	lsrs	r3, r3, #1
 80094a8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80094b8:	e002      	b.n	80094c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	74fb      	strb	r3, [r7, #19]
        break;
 80094be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	2b0f      	cmp	r3, #15
 80094c4:	d916      	bls.n	80094f4 <UART_SetConfig+0x590>
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094cc:	d212      	bcs.n	80094f4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	f023 030f 	bic.w	r3, r3, #15
 80094d6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	085b      	lsrs	r3, r3, #1
 80094dc:	b29b      	uxth	r3, r3
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	897b      	ldrh	r3, [r7, #10]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	897a      	ldrh	r2, [r7, #10]
 80094f0:	60da      	str	r2, [r3, #12]
 80094f2:	e070      	b.n	80095d6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	74fb      	strb	r3, [r7, #19]
 80094f8:	e06d      	b.n	80095d6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80094fa:	7efb      	ldrb	r3, [r7, #27]
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	d859      	bhi.n	80095b4 <UART_SetConfig+0x650>
 8009500:	a201      	add	r2, pc, #4	; (adr r2, 8009508 <UART_SetConfig+0x5a4>)
 8009502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009506:	bf00      	nop
 8009508:	0800952d 	.word	0x0800952d
 800950c:	08009549 	.word	0x08009549
 8009510:	08009565 	.word	0x08009565
 8009514:	080095b5 	.word	0x080095b5
 8009518:	08009581 	.word	0x08009581
 800951c:	080095b5 	.word	0x080095b5
 8009520:	080095b5 	.word	0x080095b5
 8009524:	080095b5 	.word	0x080095b5
 8009528:	0800959d 	.word	0x0800959d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800952c:	f7fd fafc 	bl	8006b28 <HAL_RCC_GetPCLK1Freq>
 8009530:	4602      	mov	r2, r0
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	085b      	lsrs	r3, r3, #1
 8009538:	441a      	add	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009542:	b29b      	uxth	r3, r3
 8009544:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009546:	e038      	b.n	80095ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009548:	f7fd fb04 	bl	8006b54 <HAL_RCC_GetPCLK2Freq>
 800954c:	4602      	mov	r2, r0
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	085b      	lsrs	r3, r3, #1
 8009554:	441a      	add	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	fbb2 f3f3 	udiv	r3, r2, r3
 800955e:	b29b      	uxth	r3, r3
 8009560:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8009562:	e02a      	b.n	80095ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	085b      	lsrs	r3, r3, #1
 800956a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800956e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	6852      	ldr	r2, [r2, #4]
 8009576:	fbb3 f3f2 	udiv	r3, r3, r2
 800957a:	b29b      	uxth	r3, r3
 800957c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800957e:	e01c      	b.n	80095ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009580:	f7fd fa3c 	bl	80069fc <HAL_RCC_GetSysClockFreq>
 8009584:	4602      	mov	r2, r0
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	085b      	lsrs	r3, r3, #1
 800958c:	441a      	add	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	fbb2 f3f3 	udiv	r3, r2, r3
 8009596:	b29b      	uxth	r3, r3
 8009598:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800959a:	e00e      	b.n	80095ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	085b      	lsrs	r3, r3, #1
 80095a2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80095b2:	e002      	b.n	80095ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	74fb      	strb	r3, [r7, #19]
        break;
 80095b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2b0f      	cmp	r3, #15
 80095be:	d908      	bls.n	80095d2 <UART_SetConfig+0x66e>
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095c6:	d204      	bcs.n	80095d2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	60da      	str	r2, [r3, #12]
 80095d0:	e001      	b.n	80095d6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80095e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3720      	adds	r7, #32
 80095e8:	46bd      	mov	sp, r7
 80095ea:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80095ee:	bf00      	nop
 80095f0:	f4240000 	.word	0xf4240000

080095f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00a      	beq.n	800961e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	430a      	orrs	r2, r1
 800961c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00a      	beq.n	8009640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00a      	beq.n	8009662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	430a      	orrs	r2, r1
 8009660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009666:	f003 0308 	and.w	r3, r3, #8
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00a      	beq.n	8009684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	f003 0310 	and.w	r3, r3, #16
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00a      	beq.n	80096a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	430a      	orrs	r2, r1
 80096a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00a      	beq.n	80096c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d01a      	beq.n	800970a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096f2:	d10a      	bne.n	800970a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00a      	beq.n	800972c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	430a      	orrs	r2, r1
 800972a:	605a      	str	r2, [r3, #4]
  }
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af02      	add	r7, sp, #8
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009746:	f7fa faf9 	bl	8003d3c <HAL_GetTick>
 800974a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0308 	and.w	r3, r3, #8
 8009756:	2b08      	cmp	r3, #8
 8009758:	d10e      	bne.n	8009778 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800975a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f82a 	bl	80097c2 <UART_WaitOnFlagUntilTimeout>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e020      	b.n	80097ba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 0304 	and.w	r3, r3, #4
 8009782:	2b04      	cmp	r3, #4
 8009784:	d10e      	bne.n	80097a4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009786:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f814 	bl	80097c2 <UART_WaitOnFlagUntilTimeout>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097a0:	2303      	movs	r3, #3
 80097a2:	e00a      	b.n	80097ba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2220      	movs	r2, #32
 80097a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2220      	movs	r2, #32
 80097ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	60b9      	str	r1, [r7, #8]
 80097cc:	603b      	str	r3, [r7, #0]
 80097ce:	4613      	mov	r3, r2
 80097d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097d2:	e02a      	b.n	800982a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097da:	d026      	beq.n	800982a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097dc:	f7fa faae 	bl	8003d3c <HAL_GetTick>
 80097e0:	4602      	mov	r2, r0
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d302      	bcc.n	80097f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d11b      	bne.n	800982a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009800:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689a      	ldr	r2, [r3, #8]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0201 	bic.w	r2, r2, #1
 8009810:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2220      	movs	r2, #32
 8009816:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2220      	movs	r2, #32
 800981c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e00f      	b.n	800984a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69da      	ldr	r2, [r3, #28]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4013      	ands	r3, r2
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	429a      	cmp	r2, r3
 8009838:	bf0c      	ite	eq
 800983a:	2301      	moveq	r3, #1
 800983c:	2300      	movne	r3, #0
 800983e:	b2db      	uxtb	r3, r3
 8009840:	461a      	mov	r2, r3
 8009842:	79fb      	ldrb	r3, [r7, #7]
 8009844:	429a      	cmp	r2, r3
 8009846:	d0c5      	beq.n	80097d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009852:	b480      	push	{r7}
 8009854:	b083      	sub	sp, #12
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009868:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2220      	movs	r2, #32
 800986e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009892:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689a      	ldr	r2, [r3, #8]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f022 0201 	bic.w	r2, r2, #1
 80098a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2220      	movs	r2, #32
 80098a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	661a      	str	r2, [r3, #96]	; 0x60
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0320 	and.w	r3, r3, #32
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d11e      	bne.n	8009916 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098ee:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689a      	ldr	r2, [r3, #8]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f022 0201 	bic.w	r2, r2, #1
 80098fe:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689a      	ldr	r2, [r3, #8]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800990e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2220      	movs	r2, #32
 8009914:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f7f8 fd7e 	bl	8002418 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800991c:	bf00      	nop
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009930:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f7ff fb02 	bl	8008f3c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009938:	bf00      	nop
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009952:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009958:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009964:	2b80      	cmp	r3, #128	; 0x80
 8009966:	d109      	bne.n	800997c <UART_DMAError+0x3c>
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	2b21      	cmp	r3, #33	; 0x21
 800996c:	d106      	bne.n	800997c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2200      	movs	r2, #0
 8009972:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009976:	6978      	ldr	r0, [r7, #20]
 8009978:	f7ff ff6b 	bl	8009852 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009986:	2b40      	cmp	r3, #64	; 0x40
 8009988:	d109      	bne.n	800999e <UART_DMAError+0x5e>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2b22      	cmp	r3, #34	; 0x22
 800998e:	d106      	bne.n	800999e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	2200      	movs	r2, #0
 8009994:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009998:	6978      	ldr	r0, [r7, #20]
 800999a:	f7ff ff6f 	bl	800987c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099a2:	f043 0210 	orr.w	r2, r3, #16
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099aa:	6978      	ldr	r0, [r7, #20]
 80099ac:	f7ff fad0 	bl	8008f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099b0:	bf00      	nop
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f7ff faba 	bl	8008f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099dc:	bf00      	nop
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099fa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2220      	movs	r2, #32
 8009a00:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff fa8d 	bl	8008f28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a16:	b480      	push	{r7}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a1e:	bf00      	nop
 8009a20:	370c      	adds	r7, #12
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
	...

08009a2c <__errno>:
 8009a2c:	4b01      	ldr	r3, [pc, #4]	; (8009a34 <__errno+0x8>)
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	2000000c 	.word	0x2000000c

08009a38 <__libc_init_array>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	4e0d      	ldr	r6, [pc, #52]	; (8009a70 <__libc_init_array+0x38>)
 8009a3c:	4c0d      	ldr	r4, [pc, #52]	; (8009a74 <__libc_init_array+0x3c>)
 8009a3e:	1ba4      	subs	r4, r4, r6
 8009a40:	10a4      	asrs	r4, r4, #2
 8009a42:	2500      	movs	r5, #0
 8009a44:	42a5      	cmp	r5, r4
 8009a46:	d109      	bne.n	8009a5c <__libc_init_array+0x24>
 8009a48:	4e0b      	ldr	r6, [pc, #44]	; (8009a78 <__libc_init_array+0x40>)
 8009a4a:	4c0c      	ldr	r4, [pc, #48]	; (8009a7c <__libc_init_array+0x44>)
 8009a4c:	f002 fbea 	bl	800c224 <_init>
 8009a50:	1ba4      	subs	r4, r4, r6
 8009a52:	10a4      	asrs	r4, r4, #2
 8009a54:	2500      	movs	r5, #0
 8009a56:	42a5      	cmp	r5, r4
 8009a58:	d105      	bne.n	8009a66 <__libc_init_array+0x2e>
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a60:	4798      	blx	r3
 8009a62:	3501      	adds	r5, #1
 8009a64:	e7ee      	b.n	8009a44 <__libc_init_array+0xc>
 8009a66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a6a:	4798      	blx	r3
 8009a6c:	3501      	adds	r5, #1
 8009a6e:	e7f2      	b.n	8009a56 <__libc_init_array+0x1e>
 8009a70:	0800cb98 	.word	0x0800cb98
 8009a74:	0800cb98 	.word	0x0800cb98
 8009a78:	0800cb98 	.word	0x0800cb98
 8009a7c:	0800cb9c 	.word	0x0800cb9c

08009a80 <malloc>:
 8009a80:	4b02      	ldr	r3, [pc, #8]	; (8009a8c <malloc+0xc>)
 8009a82:	4601      	mov	r1, r0
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	f000 b865 	b.w	8009b54 <_malloc_r>
 8009a8a:	bf00      	nop
 8009a8c:	2000000c 	.word	0x2000000c

08009a90 <memcpy>:
 8009a90:	b510      	push	{r4, lr}
 8009a92:	1e43      	subs	r3, r0, #1
 8009a94:	440a      	add	r2, r1
 8009a96:	4291      	cmp	r1, r2
 8009a98:	d100      	bne.n	8009a9c <memcpy+0xc>
 8009a9a:	bd10      	pop	{r4, pc}
 8009a9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aa4:	e7f7      	b.n	8009a96 <memcpy+0x6>

08009aa6 <memset>:
 8009aa6:	4402      	add	r2, r0
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d100      	bne.n	8009ab0 <memset+0xa>
 8009aae:	4770      	bx	lr
 8009ab0:	f803 1b01 	strb.w	r1, [r3], #1
 8009ab4:	e7f9      	b.n	8009aaa <memset+0x4>
	...

08009ab8 <_free_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4605      	mov	r5, r0
 8009abc:	2900      	cmp	r1, #0
 8009abe:	d045      	beq.n	8009b4c <_free_r+0x94>
 8009ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac4:	1f0c      	subs	r4, r1, #4
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	bfb8      	it	lt
 8009aca:	18e4      	addlt	r4, r4, r3
 8009acc:	f000 fc0e 	bl	800a2ec <__malloc_lock>
 8009ad0:	4a1f      	ldr	r2, [pc, #124]	; (8009b50 <_free_r+0x98>)
 8009ad2:	6813      	ldr	r3, [r2, #0]
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	b933      	cbnz	r3, 8009ae6 <_free_r+0x2e>
 8009ad8:	6063      	str	r3, [r4, #4]
 8009ada:	6014      	str	r4, [r2, #0]
 8009adc:	4628      	mov	r0, r5
 8009ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ae2:	f000 bc04 	b.w	800a2ee <__malloc_unlock>
 8009ae6:	42a3      	cmp	r3, r4
 8009ae8:	d90c      	bls.n	8009b04 <_free_r+0x4c>
 8009aea:	6821      	ldr	r1, [r4, #0]
 8009aec:	1862      	adds	r2, r4, r1
 8009aee:	4293      	cmp	r3, r2
 8009af0:	bf04      	itt	eq
 8009af2:	681a      	ldreq	r2, [r3, #0]
 8009af4:	685b      	ldreq	r3, [r3, #4]
 8009af6:	6063      	str	r3, [r4, #4]
 8009af8:	bf04      	itt	eq
 8009afa:	1852      	addeq	r2, r2, r1
 8009afc:	6022      	streq	r2, [r4, #0]
 8009afe:	6004      	str	r4, [r0, #0]
 8009b00:	e7ec      	b.n	8009adc <_free_r+0x24>
 8009b02:	4613      	mov	r3, r2
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	b10a      	cbz	r2, 8009b0c <_free_r+0x54>
 8009b08:	42a2      	cmp	r2, r4
 8009b0a:	d9fa      	bls.n	8009b02 <_free_r+0x4a>
 8009b0c:	6819      	ldr	r1, [r3, #0]
 8009b0e:	1858      	adds	r0, r3, r1
 8009b10:	42a0      	cmp	r0, r4
 8009b12:	d10b      	bne.n	8009b2c <_free_r+0x74>
 8009b14:	6820      	ldr	r0, [r4, #0]
 8009b16:	4401      	add	r1, r0
 8009b18:	1858      	adds	r0, r3, r1
 8009b1a:	4282      	cmp	r2, r0
 8009b1c:	6019      	str	r1, [r3, #0]
 8009b1e:	d1dd      	bne.n	8009adc <_free_r+0x24>
 8009b20:	6810      	ldr	r0, [r2, #0]
 8009b22:	6852      	ldr	r2, [r2, #4]
 8009b24:	605a      	str	r2, [r3, #4]
 8009b26:	4401      	add	r1, r0
 8009b28:	6019      	str	r1, [r3, #0]
 8009b2a:	e7d7      	b.n	8009adc <_free_r+0x24>
 8009b2c:	d902      	bls.n	8009b34 <_free_r+0x7c>
 8009b2e:	230c      	movs	r3, #12
 8009b30:	602b      	str	r3, [r5, #0]
 8009b32:	e7d3      	b.n	8009adc <_free_r+0x24>
 8009b34:	6820      	ldr	r0, [r4, #0]
 8009b36:	1821      	adds	r1, r4, r0
 8009b38:	428a      	cmp	r2, r1
 8009b3a:	bf04      	itt	eq
 8009b3c:	6811      	ldreq	r1, [r2, #0]
 8009b3e:	6852      	ldreq	r2, [r2, #4]
 8009b40:	6062      	str	r2, [r4, #4]
 8009b42:	bf04      	itt	eq
 8009b44:	1809      	addeq	r1, r1, r0
 8009b46:	6021      	streq	r1, [r4, #0]
 8009b48:	605c      	str	r4, [r3, #4]
 8009b4a:	e7c7      	b.n	8009adc <_free_r+0x24>
 8009b4c:	bd38      	pop	{r3, r4, r5, pc}
 8009b4e:	bf00      	nop
 8009b50:	2000009c 	.word	0x2000009c

08009b54 <_malloc_r>:
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	1ccd      	adds	r5, r1, #3
 8009b58:	f025 0503 	bic.w	r5, r5, #3
 8009b5c:	3508      	adds	r5, #8
 8009b5e:	2d0c      	cmp	r5, #12
 8009b60:	bf38      	it	cc
 8009b62:	250c      	movcc	r5, #12
 8009b64:	2d00      	cmp	r5, #0
 8009b66:	4606      	mov	r6, r0
 8009b68:	db01      	blt.n	8009b6e <_malloc_r+0x1a>
 8009b6a:	42a9      	cmp	r1, r5
 8009b6c:	d903      	bls.n	8009b76 <_malloc_r+0x22>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	6033      	str	r3, [r6, #0]
 8009b72:	2000      	movs	r0, #0
 8009b74:	bd70      	pop	{r4, r5, r6, pc}
 8009b76:	f000 fbb9 	bl	800a2ec <__malloc_lock>
 8009b7a:	4a21      	ldr	r2, [pc, #132]	; (8009c00 <_malloc_r+0xac>)
 8009b7c:	6814      	ldr	r4, [r2, #0]
 8009b7e:	4621      	mov	r1, r4
 8009b80:	b991      	cbnz	r1, 8009ba8 <_malloc_r+0x54>
 8009b82:	4c20      	ldr	r4, [pc, #128]	; (8009c04 <_malloc_r+0xb0>)
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	b91b      	cbnz	r3, 8009b90 <_malloc_r+0x3c>
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f000 f8b9 	bl	8009d00 <_sbrk_r>
 8009b8e:	6020      	str	r0, [r4, #0]
 8009b90:	4629      	mov	r1, r5
 8009b92:	4630      	mov	r0, r6
 8009b94:	f000 f8b4 	bl	8009d00 <_sbrk_r>
 8009b98:	1c43      	adds	r3, r0, #1
 8009b9a:	d124      	bne.n	8009be6 <_malloc_r+0x92>
 8009b9c:	230c      	movs	r3, #12
 8009b9e:	6033      	str	r3, [r6, #0]
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f000 fba4 	bl	800a2ee <__malloc_unlock>
 8009ba6:	e7e4      	b.n	8009b72 <_malloc_r+0x1e>
 8009ba8:	680b      	ldr	r3, [r1, #0]
 8009baa:	1b5b      	subs	r3, r3, r5
 8009bac:	d418      	bmi.n	8009be0 <_malloc_r+0x8c>
 8009bae:	2b0b      	cmp	r3, #11
 8009bb0:	d90f      	bls.n	8009bd2 <_malloc_r+0x7e>
 8009bb2:	600b      	str	r3, [r1, #0]
 8009bb4:	50cd      	str	r5, [r1, r3]
 8009bb6:	18cc      	adds	r4, r1, r3
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f000 fb98 	bl	800a2ee <__malloc_unlock>
 8009bbe:	f104 000b 	add.w	r0, r4, #11
 8009bc2:	1d23      	adds	r3, r4, #4
 8009bc4:	f020 0007 	bic.w	r0, r0, #7
 8009bc8:	1ac3      	subs	r3, r0, r3
 8009bca:	d0d3      	beq.n	8009b74 <_malloc_r+0x20>
 8009bcc:	425a      	negs	r2, r3
 8009bce:	50e2      	str	r2, [r4, r3]
 8009bd0:	e7d0      	b.n	8009b74 <_malloc_r+0x20>
 8009bd2:	428c      	cmp	r4, r1
 8009bd4:	684b      	ldr	r3, [r1, #4]
 8009bd6:	bf16      	itet	ne
 8009bd8:	6063      	strne	r3, [r4, #4]
 8009bda:	6013      	streq	r3, [r2, #0]
 8009bdc:	460c      	movne	r4, r1
 8009bde:	e7eb      	b.n	8009bb8 <_malloc_r+0x64>
 8009be0:	460c      	mov	r4, r1
 8009be2:	6849      	ldr	r1, [r1, #4]
 8009be4:	e7cc      	b.n	8009b80 <_malloc_r+0x2c>
 8009be6:	1cc4      	adds	r4, r0, #3
 8009be8:	f024 0403 	bic.w	r4, r4, #3
 8009bec:	42a0      	cmp	r0, r4
 8009bee:	d005      	beq.n	8009bfc <_malloc_r+0xa8>
 8009bf0:	1a21      	subs	r1, r4, r0
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f000 f884 	bl	8009d00 <_sbrk_r>
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d0cf      	beq.n	8009b9c <_malloc_r+0x48>
 8009bfc:	6025      	str	r5, [r4, #0]
 8009bfe:	e7db      	b.n	8009bb8 <_malloc_r+0x64>
 8009c00:	2000009c 	.word	0x2000009c
 8009c04:	200000a0 	.word	0x200000a0

08009c08 <iprintf>:
 8009c08:	b40f      	push	{r0, r1, r2, r3}
 8009c0a:	4b0a      	ldr	r3, [pc, #40]	; (8009c34 <iprintf+0x2c>)
 8009c0c:	b513      	push	{r0, r1, r4, lr}
 8009c0e:	681c      	ldr	r4, [r3, #0]
 8009c10:	b124      	cbz	r4, 8009c1c <iprintf+0x14>
 8009c12:	69a3      	ldr	r3, [r4, #24]
 8009c14:	b913      	cbnz	r3, 8009c1c <iprintf+0x14>
 8009c16:	4620      	mov	r0, r4
 8009c18:	f000 fa7a 	bl	800a110 <__sinit>
 8009c1c:	ab05      	add	r3, sp, #20
 8009c1e:	9a04      	ldr	r2, [sp, #16]
 8009c20:	68a1      	ldr	r1, [r4, #8]
 8009c22:	9301      	str	r3, [sp, #4]
 8009c24:	4620      	mov	r0, r4
 8009c26:	f000 fcdf 	bl	800a5e8 <_vfiprintf_r>
 8009c2a:	b002      	add	sp, #8
 8009c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c30:	b004      	add	sp, #16
 8009c32:	4770      	bx	lr
 8009c34:	2000000c 	.word	0x2000000c

08009c38 <_puts_r>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	460e      	mov	r6, r1
 8009c3c:	4605      	mov	r5, r0
 8009c3e:	b118      	cbz	r0, 8009c48 <_puts_r+0x10>
 8009c40:	6983      	ldr	r3, [r0, #24]
 8009c42:	b90b      	cbnz	r3, 8009c48 <_puts_r+0x10>
 8009c44:	f000 fa64 	bl	800a110 <__sinit>
 8009c48:	69ab      	ldr	r3, [r5, #24]
 8009c4a:	68ac      	ldr	r4, [r5, #8]
 8009c4c:	b913      	cbnz	r3, 8009c54 <_puts_r+0x1c>
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f000 fa5e 	bl	800a110 <__sinit>
 8009c54:	4b23      	ldr	r3, [pc, #140]	; (8009ce4 <_puts_r+0xac>)
 8009c56:	429c      	cmp	r4, r3
 8009c58:	d117      	bne.n	8009c8a <_puts_r+0x52>
 8009c5a:	686c      	ldr	r4, [r5, #4]
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	071b      	lsls	r3, r3, #28
 8009c60:	d51d      	bpl.n	8009c9e <_puts_r+0x66>
 8009c62:	6923      	ldr	r3, [r4, #16]
 8009c64:	b1db      	cbz	r3, 8009c9e <_puts_r+0x66>
 8009c66:	3e01      	subs	r6, #1
 8009c68:	68a3      	ldr	r3, [r4, #8]
 8009c6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	60a3      	str	r3, [r4, #8]
 8009c72:	b9e9      	cbnz	r1, 8009cb0 <_puts_r+0x78>
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	da2e      	bge.n	8009cd6 <_puts_r+0x9e>
 8009c78:	4622      	mov	r2, r4
 8009c7a:	210a      	movs	r1, #10
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f000 f897 	bl	8009db0 <__swbuf_r>
 8009c82:	3001      	adds	r0, #1
 8009c84:	d011      	beq.n	8009caa <_puts_r+0x72>
 8009c86:	200a      	movs	r0, #10
 8009c88:	e011      	b.n	8009cae <_puts_r+0x76>
 8009c8a:	4b17      	ldr	r3, [pc, #92]	; (8009ce8 <_puts_r+0xb0>)
 8009c8c:	429c      	cmp	r4, r3
 8009c8e:	d101      	bne.n	8009c94 <_puts_r+0x5c>
 8009c90:	68ac      	ldr	r4, [r5, #8]
 8009c92:	e7e3      	b.n	8009c5c <_puts_r+0x24>
 8009c94:	4b15      	ldr	r3, [pc, #84]	; (8009cec <_puts_r+0xb4>)
 8009c96:	429c      	cmp	r4, r3
 8009c98:	bf08      	it	eq
 8009c9a:	68ec      	ldreq	r4, [r5, #12]
 8009c9c:	e7de      	b.n	8009c5c <_puts_r+0x24>
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	f000 f8d7 	bl	8009e54 <__swsetup_r>
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d0dd      	beq.n	8009c66 <_puts_r+0x2e>
 8009caa:	f04f 30ff 	mov.w	r0, #4294967295
 8009cae:	bd70      	pop	{r4, r5, r6, pc}
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	da04      	bge.n	8009cbe <_puts_r+0x86>
 8009cb4:	69a2      	ldr	r2, [r4, #24]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	dc06      	bgt.n	8009cc8 <_puts_r+0x90>
 8009cba:	290a      	cmp	r1, #10
 8009cbc:	d004      	beq.n	8009cc8 <_puts_r+0x90>
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	1c5a      	adds	r2, r3, #1
 8009cc2:	6022      	str	r2, [r4, #0]
 8009cc4:	7019      	strb	r1, [r3, #0]
 8009cc6:	e7cf      	b.n	8009c68 <_puts_r+0x30>
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 f870 	bl	8009db0 <__swbuf_r>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d1c9      	bne.n	8009c68 <_puts_r+0x30>
 8009cd4:	e7e9      	b.n	8009caa <_puts_r+0x72>
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	200a      	movs	r0, #10
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	6022      	str	r2, [r4, #0]
 8009cde:	7018      	strb	r0, [r3, #0]
 8009ce0:	e7e5      	b.n	8009cae <_puts_r+0x76>
 8009ce2:	bf00      	nop
 8009ce4:	0800cad0 	.word	0x0800cad0
 8009ce8:	0800caf0 	.word	0x0800caf0
 8009cec:	0800cab0 	.word	0x0800cab0

08009cf0 <puts>:
 8009cf0:	4b02      	ldr	r3, [pc, #8]	; (8009cfc <puts+0xc>)
 8009cf2:	4601      	mov	r1, r0
 8009cf4:	6818      	ldr	r0, [r3, #0]
 8009cf6:	f7ff bf9f 	b.w	8009c38 <_puts_r>
 8009cfa:	bf00      	nop
 8009cfc:	2000000c 	.word	0x2000000c

08009d00 <_sbrk_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4c06      	ldr	r4, [pc, #24]	; (8009d1c <_sbrk_r+0x1c>)
 8009d04:	2300      	movs	r3, #0
 8009d06:	4605      	mov	r5, r0
 8009d08:	4608      	mov	r0, r1
 8009d0a:	6023      	str	r3, [r4, #0]
 8009d0c:	f7f9 f8ac 	bl	8002e68 <_sbrk>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d102      	bne.n	8009d1a <_sbrk_r+0x1a>
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	b103      	cbz	r3, 8009d1a <_sbrk_r+0x1a>
 8009d18:	602b      	str	r3, [r5, #0]
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	20000c8c 	.word	0x20000c8c

08009d20 <siprintf>:
 8009d20:	b40e      	push	{r1, r2, r3}
 8009d22:	b500      	push	{lr}
 8009d24:	b09c      	sub	sp, #112	; 0x70
 8009d26:	ab1d      	add	r3, sp, #116	; 0x74
 8009d28:	9002      	str	r0, [sp, #8]
 8009d2a:	9006      	str	r0, [sp, #24]
 8009d2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d30:	4809      	ldr	r0, [pc, #36]	; (8009d58 <siprintf+0x38>)
 8009d32:	9107      	str	r1, [sp, #28]
 8009d34:	9104      	str	r1, [sp, #16]
 8009d36:	4909      	ldr	r1, [pc, #36]	; (8009d5c <siprintf+0x3c>)
 8009d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d3c:	9105      	str	r1, [sp, #20]
 8009d3e:	6800      	ldr	r0, [r0, #0]
 8009d40:	9301      	str	r3, [sp, #4]
 8009d42:	a902      	add	r1, sp, #8
 8009d44:	f000 fb2e 	bl	800a3a4 <_svfiprintf_r>
 8009d48:	9b02      	ldr	r3, [sp, #8]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	b01c      	add	sp, #112	; 0x70
 8009d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d54:	b003      	add	sp, #12
 8009d56:	4770      	bx	lr
 8009d58:	2000000c 	.word	0x2000000c
 8009d5c:	ffff0208 	.word	0xffff0208

08009d60 <strchr>:
 8009d60:	b2c9      	uxtb	r1, r1
 8009d62:	4603      	mov	r3, r0
 8009d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d68:	b11a      	cbz	r2, 8009d72 <strchr+0x12>
 8009d6a:	428a      	cmp	r2, r1
 8009d6c:	d1f9      	bne.n	8009d62 <strchr+0x2>
 8009d6e:	4618      	mov	r0, r3
 8009d70:	4770      	bx	lr
 8009d72:	2900      	cmp	r1, #0
 8009d74:	bf18      	it	ne
 8009d76:	2300      	movne	r3, #0
 8009d78:	e7f9      	b.n	8009d6e <strchr+0xe>

08009d7a <strstr>:
 8009d7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d7c:	7803      	ldrb	r3, [r0, #0]
 8009d7e:	b17b      	cbz	r3, 8009da0 <strstr+0x26>
 8009d80:	4604      	mov	r4, r0
 8009d82:	7823      	ldrb	r3, [r4, #0]
 8009d84:	4620      	mov	r0, r4
 8009d86:	1c66      	adds	r6, r4, #1
 8009d88:	b17b      	cbz	r3, 8009daa <strstr+0x30>
 8009d8a:	1e4a      	subs	r2, r1, #1
 8009d8c:	1e63      	subs	r3, r4, #1
 8009d8e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009d92:	b14d      	cbz	r5, 8009da8 <strstr+0x2e>
 8009d94:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009d98:	42af      	cmp	r7, r5
 8009d9a:	4634      	mov	r4, r6
 8009d9c:	d0f7      	beq.n	8009d8e <strstr+0x14>
 8009d9e:	e7f0      	b.n	8009d82 <strstr+0x8>
 8009da0:	780b      	ldrb	r3, [r1, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	bf18      	it	ne
 8009da6:	2000      	movne	r0, #0
 8009da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009daa:	4618      	mov	r0, r3
 8009dac:	e7fc      	b.n	8009da8 <strstr+0x2e>
	...

08009db0 <__swbuf_r>:
 8009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db2:	460e      	mov	r6, r1
 8009db4:	4614      	mov	r4, r2
 8009db6:	4605      	mov	r5, r0
 8009db8:	b118      	cbz	r0, 8009dc2 <__swbuf_r+0x12>
 8009dba:	6983      	ldr	r3, [r0, #24]
 8009dbc:	b90b      	cbnz	r3, 8009dc2 <__swbuf_r+0x12>
 8009dbe:	f000 f9a7 	bl	800a110 <__sinit>
 8009dc2:	4b21      	ldr	r3, [pc, #132]	; (8009e48 <__swbuf_r+0x98>)
 8009dc4:	429c      	cmp	r4, r3
 8009dc6:	d12a      	bne.n	8009e1e <__swbuf_r+0x6e>
 8009dc8:	686c      	ldr	r4, [r5, #4]
 8009dca:	69a3      	ldr	r3, [r4, #24]
 8009dcc:	60a3      	str	r3, [r4, #8]
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	071a      	lsls	r2, r3, #28
 8009dd2:	d52e      	bpl.n	8009e32 <__swbuf_r+0x82>
 8009dd4:	6923      	ldr	r3, [r4, #16]
 8009dd6:	b363      	cbz	r3, 8009e32 <__swbuf_r+0x82>
 8009dd8:	6923      	ldr	r3, [r4, #16]
 8009dda:	6820      	ldr	r0, [r4, #0]
 8009ddc:	1ac0      	subs	r0, r0, r3
 8009dde:	6963      	ldr	r3, [r4, #20]
 8009de0:	b2f6      	uxtb	r6, r6
 8009de2:	4283      	cmp	r3, r0
 8009de4:	4637      	mov	r7, r6
 8009de6:	dc04      	bgt.n	8009df2 <__swbuf_r+0x42>
 8009de8:	4621      	mov	r1, r4
 8009dea:	4628      	mov	r0, r5
 8009dec:	f000 f926 	bl	800a03c <_fflush_r>
 8009df0:	bb28      	cbnz	r0, 8009e3e <__swbuf_r+0x8e>
 8009df2:	68a3      	ldr	r3, [r4, #8]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	60a3      	str	r3, [r4, #8]
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	6022      	str	r2, [r4, #0]
 8009dfe:	701e      	strb	r6, [r3, #0]
 8009e00:	6963      	ldr	r3, [r4, #20]
 8009e02:	3001      	adds	r0, #1
 8009e04:	4283      	cmp	r3, r0
 8009e06:	d004      	beq.n	8009e12 <__swbuf_r+0x62>
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	07db      	lsls	r3, r3, #31
 8009e0c:	d519      	bpl.n	8009e42 <__swbuf_r+0x92>
 8009e0e:	2e0a      	cmp	r6, #10
 8009e10:	d117      	bne.n	8009e42 <__swbuf_r+0x92>
 8009e12:	4621      	mov	r1, r4
 8009e14:	4628      	mov	r0, r5
 8009e16:	f000 f911 	bl	800a03c <_fflush_r>
 8009e1a:	b190      	cbz	r0, 8009e42 <__swbuf_r+0x92>
 8009e1c:	e00f      	b.n	8009e3e <__swbuf_r+0x8e>
 8009e1e:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <__swbuf_r+0x9c>)
 8009e20:	429c      	cmp	r4, r3
 8009e22:	d101      	bne.n	8009e28 <__swbuf_r+0x78>
 8009e24:	68ac      	ldr	r4, [r5, #8]
 8009e26:	e7d0      	b.n	8009dca <__swbuf_r+0x1a>
 8009e28:	4b09      	ldr	r3, [pc, #36]	; (8009e50 <__swbuf_r+0xa0>)
 8009e2a:	429c      	cmp	r4, r3
 8009e2c:	bf08      	it	eq
 8009e2e:	68ec      	ldreq	r4, [r5, #12]
 8009e30:	e7cb      	b.n	8009dca <__swbuf_r+0x1a>
 8009e32:	4621      	mov	r1, r4
 8009e34:	4628      	mov	r0, r5
 8009e36:	f000 f80d 	bl	8009e54 <__swsetup_r>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d0cc      	beq.n	8009dd8 <__swbuf_r+0x28>
 8009e3e:	f04f 37ff 	mov.w	r7, #4294967295
 8009e42:	4638      	mov	r0, r7
 8009e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e46:	bf00      	nop
 8009e48:	0800cad0 	.word	0x0800cad0
 8009e4c:	0800caf0 	.word	0x0800caf0
 8009e50:	0800cab0 	.word	0x0800cab0

08009e54 <__swsetup_r>:
 8009e54:	4b32      	ldr	r3, [pc, #200]	; (8009f20 <__swsetup_r+0xcc>)
 8009e56:	b570      	push	{r4, r5, r6, lr}
 8009e58:	681d      	ldr	r5, [r3, #0]
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	b125      	cbz	r5, 8009e6a <__swsetup_r+0x16>
 8009e60:	69ab      	ldr	r3, [r5, #24]
 8009e62:	b913      	cbnz	r3, 8009e6a <__swsetup_r+0x16>
 8009e64:	4628      	mov	r0, r5
 8009e66:	f000 f953 	bl	800a110 <__sinit>
 8009e6a:	4b2e      	ldr	r3, [pc, #184]	; (8009f24 <__swsetup_r+0xd0>)
 8009e6c:	429c      	cmp	r4, r3
 8009e6e:	d10f      	bne.n	8009e90 <__swsetup_r+0x3c>
 8009e70:	686c      	ldr	r4, [r5, #4]
 8009e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	0715      	lsls	r5, r2, #28
 8009e7a:	d42c      	bmi.n	8009ed6 <__swsetup_r+0x82>
 8009e7c:	06d0      	lsls	r0, r2, #27
 8009e7e:	d411      	bmi.n	8009ea4 <__swsetup_r+0x50>
 8009e80:	2209      	movs	r2, #9
 8009e82:	6032      	str	r2, [r6, #0]
 8009e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e88:	81a3      	strh	r3, [r4, #12]
 8009e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8e:	e03e      	b.n	8009f0e <__swsetup_r+0xba>
 8009e90:	4b25      	ldr	r3, [pc, #148]	; (8009f28 <__swsetup_r+0xd4>)
 8009e92:	429c      	cmp	r4, r3
 8009e94:	d101      	bne.n	8009e9a <__swsetup_r+0x46>
 8009e96:	68ac      	ldr	r4, [r5, #8]
 8009e98:	e7eb      	b.n	8009e72 <__swsetup_r+0x1e>
 8009e9a:	4b24      	ldr	r3, [pc, #144]	; (8009f2c <__swsetup_r+0xd8>)
 8009e9c:	429c      	cmp	r4, r3
 8009e9e:	bf08      	it	eq
 8009ea0:	68ec      	ldreq	r4, [r5, #12]
 8009ea2:	e7e6      	b.n	8009e72 <__swsetup_r+0x1e>
 8009ea4:	0751      	lsls	r1, r2, #29
 8009ea6:	d512      	bpl.n	8009ece <__swsetup_r+0x7a>
 8009ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009eaa:	b141      	cbz	r1, 8009ebe <__swsetup_r+0x6a>
 8009eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009eb0:	4299      	cmp	r1, r3
 8009eb2:	d002      	beq.n	8009eba <__swsetup_r+0x66>
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	f7ff fdff 	bl	8009ab8 <_free_r>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	6363      	str	r3, [r4, #52]	; 0x34
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ec4:	81a3      	strh	r3, [r4, #12]
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	6063      	str	r3, [r4, #4]
 8009eca:	6923      	ldr	r3, [r4, #16]
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	f043 0308 	orr.w	r3, r3, #8
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	6923      	ldr	r3, [r4, #16]
 8009ed8:	b94b      	cbnz	r3, 8009eee <__swsetup_r+0x9a>
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ee4:	d003      	beq.n	8009eee <__swsetup_r+0x9a>
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f000 f9bf 	bl	800a26c <__smakebuf_r>
 8009eee:	89a2      	ldrh	r2, [r4, #12]
 8009ef0:	f012 0301 	ands.w	r3, r2, #1
 8009ef4:	d00c      	beq.n	8009f10 <__swsetup_r+0xbc>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60a3      	str	r3, [r4, #8]
 8009efa:	6963      	ldr	r3, [r4, #20]
 8009efc:	425b      	negs	r3, r3
 8009efe:	61a3      	str	r3, [r4, #24]
 8009f00:	6923      	ldr	r3, [r4, #16]
 8009f02:	b953      	cbnz	r3, 8009f1a <__swsetup_r+0xc6>
 8009f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009f0c:	d1ba      	bne.n	8009e84 <__swsetup_r+0x30>
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}
 8009f10:	0792      	lsls	r2, r2, #30
 8009f12:	bf58      	it	pl
 8009f14:	6963      	ldrpl	r3, [r4, #20]
 8009f16:	60a3      	str	r3, [r4, #8]
 8009f18:	e7f2      	b.n	8009f00 <__swsetup_r+0xac>
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	e7f7      	b.n	8009f0e <__swsetup_r+0xba>
 8009f1e:	bf00      	nop
 8009f20:	2000000c 	.word	0x2000000c
 8009f24:	0800cad0 	.word	0x0800cad0
 8009f28:	0800caf0 	.word	0x0800caf0
 8009f2c:	0800cab0 	.word	0x0800cab0

08009f30 <__sflush_r>:
 8009f30:	898a      	ldrh	r2, [r1, #12]
 8009f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f36:	4605      	mov	r5, r0
 8009f38:	0710      	lsls	r0, r2, #28
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	d458      	bmi.n	8009ff0 <__sflush_r+0xc0>
 8009f3e:	684b      	ldr	r3, [r1, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	dc05      	bgt.n	8009f50 <__sflush_r+0x20>
 8009f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	dc02      	bgt.n	8009f50 <__sflush_r+0x20>
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f52:	2e00      	cmp	r6, #0
 8009f54:	d0f9      	beq.n	8009f4a <__sflush_r+0x1a>
 8009f56:	2300      	movs	r3, #0
 8009f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f5c:	682f      	ldr	r7, [r5, #0]
 8009f5e:	6a21      	ldr	r1, [r4, #32]
 8009f60:	602b      	str	r3, [r5, #0]
 8009f62:	d032      	beq.n	8009fca <__sflush_r+0x9a>
 8009f64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	075a      	lsls	r2, r3, #29
 8009f6a:	d505      	bpl.n	8009f78 <__sflush_r+0x48>
 8009f6c:	6863      	ldr	r3, [r4, #4]
 8009f6e:	1ac0      	subs	r0, r0, r3
 8009f70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f72:	b10b      	cbz	r3, 8009f78 <__sflush_r+0x48>
 8009f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f76:	1ac0      	subs	r0, r0, r3
 8009f78:	2300      	movs	r3, #0
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f7e:	6a21      	ldr	r1, [r4, #32]
 8009f80:	4628      	mov	r0, r5
 8009f82:	47b0      	blx	r6
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	d106      	bne.n	8009f98 <__sflush_r+0x68>
 8009f8a:	6829      	ldr	r1, [r5, #0]
 8009f8c:	291d      	cmp	r1, #29
 8009f8e:	d848      	bhi.n	800a022 <__sflush_r+0xf2>
 8009f90:	4a29      	ldr	r2, [pc, #164]	; (800a038 <__sflush_r+0x108>)
 8009f92:	40ca      	lsrs	r2, r1
 8009f94:	07d6      	lsls	r6, r2, #31
 8009f96:	d544      	bpl.n	800a022 <__sflush_r+0xf2>
 8009f98:	2200      	movs	r2, #0
 8009f9a:	6062      	str	r2, [r4, #4]
 8009f9c:	04d9      	lsls	r1, r3, #19
 8009f9e:	6922      	ldr	r2, [r4, #16]
 8009fa0:	6022      	str	r2, [r4, #0]
 8009fa2:	d504      	bpl.n	8009fae <__sflush_r+0x7e>
 8009fa4:	1c42      	adds	r2, r0, #1
 8009fa6:	d101      	bne.n	8009fac <__sflush_r+0x7c>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	b903      	cbnz	r3, 8009fae <__sflush_r+0x7e>
 8009fac:	6560      	str	r0, [r4, #84]	; 0x54
 8009fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fb0:	602f      	str	r7, [r5, #0]
 8009fb2:	2900      	cmp	r1, #0
 8009fb4:	d0c9      	beq.n	8009f4a <__sflush_r+0x1a>
 8009fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fba:	4299      	cmp	r1, r3
 8009fbc:	d002      	beq.n	8009fc4 <__sflush_r+0x94>
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f7ff fd7a 	bl	8009ab8 <_free_r>
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	6360      	str	r0, [r4, #52]	; 0x34
 8009fc8:	e7c0      	b.n	8009f4c <__sflush_r+0x1c>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b0      	blx	r6
 8009fd0:	1c41      	adds	r1, r0, #1
 8009fd2:	d1c8      	bne.n	8009f66 <__sflush_r+0x36>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0c5      	beq.n	8009f66 <__sflush_r+0x36>
 8009fda:	2b1d      	cmp	r3, #29
 8009fdc:	d001      	beq.n	8009fe2 <__sflush_r+0xb2>
 8009fde:	2b16      	cmp	r3, #22
 8009fe0:	d101      	bne.n	8009fe6 <__sflush_r+0xb6>
 8009fe2:	602f      	str	r7, [r5, #0]
 8009fe4:	e7b1      	b.n	8009f4a <__sflush_r+0x1a>
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	e7ad      	b.n	8009f4c <__sflush_r+0x1c>
 8009ff0:	690f      	ldr	r7, [r1, #16]
 8009ff2:	2f00      	cmp	r7, #0
 8009ff4:	d0a9      	beq.n	8009f4a <__sflush_r+0x1a>
 8009ff6:	0793      	lsls	r3, r2, #30
 8009ff8:	680e      	ldr	r6, [r1, #0]
 8009ffa:	bf08      	it	eq
 8009ffc:	694b      	ldreq	r3, [r1, #20]
 8009ffe:	600f      	str	r7, [r1, #0]
 800a000:	bf18      	it	ne
 800a002:	2300      	movne	r3, #0
 800a004:	eba6 0807 	sub.w	r8, r6, r7
 800a008:	608b      	str	r3, [r1, #8]
 800a00a:	f1b8 0f00 	cmp.w	r8, #0
 800a00e:	dd9c      	ble.n	8009f4a <__sflush_r+0x1a>
 800a010:	4643      	mov	r3, r8
 800a012:	463a      	mov	r2, r7
 800a014:	6a21      	ldr	r1, [r4, #32]
 800a016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a018:	4628      	mov	r0, r5
 800a01a:	47b0      	blx	r6
 800a01c:	2800      	cmp	r0, #0
 800a01e:	dc06      	bgt.n	800a02e <__sflush_r+0xfe>
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	f04f 30ff 	mov.w	r0, #4294967295
 800a02c:	e78e      	b.n	8009f4c <__sflush_r+0x1c>
 800a02e:	4407      	add	r7, r0
 800a030:	eba8 0800 	sub.w	r8, r8, r0
 800a034:	e7e9      	b.n	800a00a <__sflush_r+0xda>
 800a036:	bf00      	nop
 800a038:	20400001 	.word	0x20400001

0800a03c <_fflush_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	690b      	ldr	r3, [r1, #16]
 800a040:	4605      	mov	r5, r0
 800a042:	460c      	mov	r4, r1
 800a044:	b1db      	cbz	r3, 800a07e <_fflush_r+0x42>
 800a046:	b118      	cbz	r0, 800a050 <_fflush_r+0x14>
 800a048:	6983      	ldr	r3, [r0, #24]
 800a04a:	b90b      	cbnz	r3, 800a050 <_fflush_r+0x14>
 800a04c:	f000 f860 	bl	800a110 <__sinit>
 800a050:	4b0c      	ldr	r3, [pc, #48]	; (800a084 <_fflush_r+0x48>)
 800a052:	429c      	cmp	r4, r3
 800a054:	d109      	bne.n	800a06a <_fflush_r+0x2e>
 800a056:	686c      	ldr	r4, [r5, #4]
 800a058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a05c:	b17b      	cbz	r3, 800a07e <_fflush_r+0x42>
 800a05e:	4621      	mov	r1, r4
 800a060:	4628      	mov	r0, r5
 800a062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a066:	f7ff bf63 	b.w	8009f30 <__sflush_r>
 800a06a:	4b07      	ldr	r3, [pc, #28]	; (800a088 <_fflush_r+0x4c>)
 800a06c:	429c      	cmp	r4, r3
 800a06e:	d101      	bne.n	800a074 <_fflush_r+0x38>
 800a070:	68ac      	ldr	r4, [r5, #8]
 800a072:	e7f1      	b.n	800a058 <_fflush_r+0x1c>
 800a074:	4b05      	ldr	r3, [pc, #20]	; (800a08c <_fflush_r+0x50>)
 800a076:	429c      	cmp	r4, r3
 800a078:	bf08      	it	eq
 800a07a:	68ec      	ldreq	r4, [r5, #12]
 800a07c:	e7ec      	b.n	800a058 <_fflush_r+0x1c>
 800a07e:	2000      	movs	r0, #0
 800a080:	bd38      	pop	{r3, r4, r5, pc}
 800a082:	bf00      	nop
 800a084:	0800cad0 	.word	0x0800cad0
 800a088:	0800caf0 	.word	0x0800caf0
 800a08c:	0800cab0 	.word	0x0800cab0

0800a090 <std>:
 800a090:	2300      	movs	r3, #0
 800a092:	b510      	push	{r4, lr}
 800a094:	4604      	mov	r4, r0
 800a096:	e9c0 3300 	strd	r3, r3, [r0]
 800a09a:	6083      	str	r3, [r0, #8]
 800a09c:	8181      	strh	r1, [r0, #12]
 800a09e:	6643      	str	r3, [r0, #100]	; 0x64
 800a0a0:	81c2      	strh	r2, [r0, #14]
 800a0a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0a6:	6183      	str	r3, [r0, #24]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	2208      	movs	r2, #8
 800a0ac:	305c      	adds	r0, #92	; 0x5c
 800a0ae:	f7ff fcfa 	bl	8009aa6 <memset>
 800a0b2:	4b05      	ldr	r3, [pc, #20]	; (800a0c8 <std+0x38>)
 800a0b4:	6263      	str	r3, [r4, #36]	; 0x24
 800a0b6:	4b05      	ldr	r3, [pc, #20]	; (800a0cc <std+0x3c>)
 800a0b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0ba:	4b05      	ldr	r3, [pc, #20]	; (800a0d0 <std+0x40>)
 800a0bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0be:	4b05      	ldr	r3, [pc, #20]	; (800a0d4 <std+0x44>)
 800a0c0:	6224      	str	r4, [r4, #32]
 800a0c2:	6323      	str	r3, [r4, #48]	; 0x30
 800a0c4:	bd10      	pop	{r4, pc}
 800a0c6:	bf00      	nop
 800a0c8:	0800ab25 	.word	0x0800ab25
 800a0cc:	0800ab47 	.word	0x0800ab47
 800a0d0:	0800ab7f 	.word	0x0800ab7f
 800a0d4:	0800aba3 	.word	0x0800aba3

0800a0d8 <_cleanup_r>:
 800a0d8:	4901      	ldr	r1, [pc, #4]	; (800a0e0 <_cleanup_r+0x8>)
 800a0da:	f000 b885 	b.w	800a1e8 <_fwalk_reent>
 800a0de:	bf00      	nop
 800a0e0:	0800a03d 	.word	0x0800a03d

0800a0e4 <__sfmoreglue>:
 800a0e4:	b570      	push	{r4, r5, r6, lr}
 800a0e6:	1e4a      	subs	r2, r1, #1
 800a0e8:	2568      	movs	r5, #104	; 0x68
 800a0ea:	4355      	muls	r5, r2
 800a0ec:	460e      	mov	r6, r1
 800a0ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a0f2:	f7ff fd2f 	bl	8009b54 <_malloc_r>
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	b140      	cbz	r0, 800a10c <__sfmoreglue+0x28>
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	e9c0 1600 	strd	r1, r6, [r0]
 800a100:	300c      	adds	r0, #12
 800a102:	60a0      	str	r0, [r4, #8]
 800a104:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a108:	f7ff fccd 	bl	8009aa6 <memset>
 800a10c:	4620      	mov	r0, r4
 800a10e:	bd70      	pop	{r4, r5, r6, pc}

0800a110 <__sinit>:
 800a110:	6983      	ldr	r3, [r0, #24]
 800a112:	b510      	push	{r4, lr}
 800a114:	4604      	mov	r4, r0
 800a116:	bb33      	cbnz	r3, 800a166 <__sinit+0x56>
 800a118:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a11c:	6503      	str	r3, [r0, #80]	; 0x50
 800a11e:	4b12      	ldr	r3, [pc, #72]	; (800a168 <__sinit+0x58>)
 800a120:	4a12      	ldr	r2, [pc, #72]	; (800a16c <__sinit+0x5c>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6282      	str	r2, [r0, #40]	; 0x28
 800a126:	4298      	cmp	r0, r3
 800a128:	bf04      	itt	eq
 800a12a:	2301      	moveq	r3, #1
 800a12c:	6183      	streq	r3, [r0, #24]
 800a12e:	f000 f81f 	bl	800a170 <__sfp>
 800a132:	6060      	str	r0, [r4, #4]
 800a134:	4620      	mov	r0, r4
 800a136:	f000 f81b 	bl	800a170 <__sfp>
 800a13a:	60a0      	str	r0, [r4, #8]
 800a13c:	4620      	mov	r0, r4
 800a13e:	f000 f817 	bl	800a170 <__sfp>
 800a142:	2200      	movs	r2, #0
 800a144:	60e0      	str	r0, [r4, #12]
 800a146:	2104      	movs	r1, #4
 800a148:	6860      	ldr	r0, [r4, #4]
 800a14a:	f7ff ffa1 	bl	800a090 <std>
 800a14e:	2201      	movs	r2, #1
 800a150:	2109      	movs	r1, #9
 800a152:	68a0      	ldr	r0, [r4, #8]
 800a154:	f7ff ff9c 	bl	800a090 <std>
 800a158:	2202      	movs	r2, #2
 800a15a:	2112      	movs	r1, #18
 800a15c:	68e0      	ldr	r0, [r4, #12]
 800a15e:	f7ff ff97 	bl	800a090 <std>
 800a162:	2301      	movs	r3, #1
 800a164:	61a3      	str	r3, [r4, #24]
 800a166:	bd10      	pop	{r4, pc}
 800a168:	0800caac 	.word	0x0800caac
 800a16c:	0800a0d9 	.word	0x0800a0d9

0800a170 <__sfp>:
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	4b1b      	ldr	r3, [pc, #108]	; (800a1e0 <__sfp+0x70>)
 800a174:	681e      	ldr	r6, [r3, #0]
 800a176:	69b3      	ldr	r3, [r6, #24]
 800a178:	4607      	mov	r7, r0
 800a17a:	b913      	cbnz	r3, 800a182 <__sfp+0x12>
 800a17c:	4630      	mov	r0, r6
 800a17e:	f7ff ffc7 	bl	800a110 <__sinit>
 800a182:	3648      	adds	r6, #72	; 0x48
 800a184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a188:	3b01      	subs	r3, #1
 800a18a:	d503      	bpl.n	800a194 <__sfp+0x24>
 800a18c:	6833      	ldr	r3, [r6, #0]
 800a18e:	b133      	cbz	r3, 800a19e <__sfp+0x2e>
 800a190:	6836      	ldr	r6, [r6, #0]
 800a192:	e7f7      	b.n	800a184 <__sfp+0x14>
 800a194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a198:	b16d      	cbz	r5, 800a1b6 <__sfp+0x46>
 800a19a:	3468      	adds	r4, #104	; 0x68
 800a19c:	e7f4      	b.n	800a188 <__sfp+0x18>
 800a19e:	2104      	movs	r1, #4
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	f7ff ff9f 	bl	800a0e4 <__sfmoreglue>
 800a1a6:	6030      	str	r0, [r6, #0]
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d1f1      	bne.n	800a190 <__sfp+0x20>
 800a1ac:	230c      	movs	r3, #12
 800a1ae:	603b      	str	r3, [r7, #0]
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1b6:	4b0b      	ldr	r3, [pc, #44]	; (800a1e4 <__sfp+0x74>)
 800a1b8:	6665      	str	r5, [r4, #100]	; 0x64
 800a1ba:	e9c4 5500 	strd	r5, r5, [r4]
 800a1be:	60a5      	str	r5, [r4, #8]
 800a1c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a1c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a1c8:	2208      	movs	r2, #8
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1d0:	f7ff fc69 	bl	8009aa6 <memset>
 800a1d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1dc:	e7e9      	b.n	800a1b2 <__sfp+0x42>
 800a1de:	bf00      	nop
 800a1e0:	0800caac 	.word	0x0800caac
 800a1e4:	ffff0001 	.word	0xffff0001

0800a1e8 <_fwalk_reent>:
 800a1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1ec:	4680      	mov	r8, r0
 800a1ee:	4689      	mov	r9, r1
 800a1f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1f4:	2600      	movs	r6, #0
 800a1f6:	b914      	cbnz	r4, 800a1fe <_fwalk_reent+0x16>
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a202:	3f01      	subs	r7, #1
 800a204:	d501      	bpl.n	800a20a <_fwalk_reent+0x22>
 800a206:	6824      	ldr	r4, [r4, #0]
 800a208:	e7f5      	b.n	800a1f6 <_fwalk_reent+0xe>
 800a20a:	89ab      	ldrh	r3, [r5, #12]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d907      	bls.n	800a220 <_fwalk_reent+0x38>
 800a210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a214:	3301      	adds	r3, #1
 800a216:	d003      	beq.n	800a220 <_fwalk_reent+0x38>
 800a218:	4629      	mov	r1, r5
 800a21a:	4640      	mov	r0, r8
 800a21c:	47c8      	blx	r9
 800a21e:	4306      	orrs	r6, r0
 800a220:	3568      	adds	r5, #104	; 0x68
 800a222:	e7ee      	b.n	800a202 <_fwalk_reent+0x1a>

0800a224 <__swhatbuf_r>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	460e      	mov	r6, r1
 800a228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22c:	2900      	cmp	r1, #0
 800a22e:	b096      	sub	sp, #88	; 0x58
 800a230:	4614      	mov	r4, r2
 800a232:	461d      	mov	r5, r3
 800a234:	da07      	bge.n	800a246 <__swhatbuf_r+0x22>
 800a236:	2300      	movs	r3, #0
 800a238:	602b      	str	r3, [r5, #0]
 800a23a:	89b3      	ldrh	r3, [r6, #12]
 800a23c:	061a      	lsls	r2, r3, #24
 800a23e:	d410      	bmi.n	800a262 <__swhatbuf_r+0x3e>
 800a240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a244:	e00e      	b.n	800a264 <__swhatbuf_r+0x40>
 800a246:	466a      	mov	r2, sp
 800a248:	f000 fcd2 	bl	800abf0 <_fstat_r>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	dbf2      	blt.n	800a236 <__swhatbuf_r+0x12>
 800a250:	9a01      	ldr	r2, [sp, #4]
 800a252:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a256:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a25a:	425a      	negs	r2, r3
 800a25c:	415a      	adcs	r2, r3
 800a25e:	602a      	str	r2, [r5, #0]
 800a260:	e7ee      	b.n	800a240 <__swhatbuf_r+0x1c>
 800a262:	2340      	movs	r3, #64	; 0x40
 800a264:	2000      	movs	r0, #0
 800a266:	6023      	str	r3, [r4, #0]
 800a268:	b016      	add	sp, #88	; 0x58
 800a26a:	bd70      	pop	{r4, r5, r6, pc}

0800a26c <__smakebuf_r>:
 800a26c:	898b      	ldrh	r3, [r1, #12]
 800a26e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a270:	079d      	lsls	r5, r3, #30
 800a272:	4606      	mov	r6, r0
 800a274:	460c      	mov	r4, r1
 800a276:	d507      	bpl.n	800a288 <__smakebuf_r+0x1c>
 800a278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a27c:	6023      	str	r3, [r4, #0]
 800a27e:	6123      	str	r3, [r4, #16]
 800a280:	2301      	movs	r3, #1
 800a282:	6163      	str	r3, [r4, #20]
 800a284:	b002      	add	sp, #8
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	ab01      	add	r3, sp, #4
 800a28a:	466a      	mov	r2, sp
 800a28c:	f7ff ffca 	bl	800a224 <__swhatbuf_r>
 800a290:	9900      	ldr	r1, [sp, #0]
 800a292:	4605      	mov	r5, r0
 800a294:	4630      	mov	r0, r6
 800a296:	f7ff fc5d 	bl	8009b54 <_malloc_r>
 800a29a:	b948      	cbnz	r0, 800a2b0 <__smakebuf_r+0x44>
 800a29c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2a0:	059a      	lsls	r2, r3, #22
 800a2a2:	d4ef      	bmi.n	800a284 <__smakebuf_r+0x18>
 800a2a4:	f023 0303 	bic.w	r3, r3, #3
 800a2a8:	f043 0302 	orr.w	r3, r3, #2
 800a2ac:	81a3      	strh	r3, [r4, #12]
 800a2ae:	e7e3      	b.n	800a278 <__smakebuf_r+0xc>
 800a2b0:	4b0d      	ldr	r3, [pc, #52]	; (800a2e8 <__smakebuf_r+0x7c>)
 800a2b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	6020      	str	r0, [r4, #0]
 800a2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2bc:	81a3      	strh	r3, [r4, #12]
 800a2be:	9b00      	ldr	r3, [sp, #0]
 800a2c0:	6163      	str	r3, [r4, #20]
 800a2c2:	9b01      	ldr	r3, [sp, #4]
 800a2c4:	6120      	str	r0, [r4, #16]
 800a2c6:	b15b      	cbz	r3, 800a2e0 <__smakebuf_r+0x74>
 800a2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f000 fca1 	bl	800ac14 <_isatty_r>
 800a2d2:	b128      	cbz	r0, 800a2e0 <__smakebuf_r+0x74>
 800a2d4:	89a3      	ldrh	r3, [r4, #12]
 800a2d6:	f023 0303 	bic.w	r3, r3, #3
 800a2da:	f043 0301 	orr.w	r3, r3, #1
 800a2de:	81a3      	strh	r3, [r4, #12]
 800a2e0:	89a3      	ldrh	r3, [r4, #12]
 800a2e2:	431d      	orrs	r5, r3
 800a2e4:	81a5      	strh	r5, [r4, #12]
 800a2e6:	e7cd      	b.n	800a284 <__smakebuf_r+0x18>
 800a2e8:	0800a0d9 	.word	0x0800a0d9

0800a2ec <__malloc_lock>:
 800a2ec:	4770      	bx	lr

0800a2ee <__malloc_unlock>:
 800a2ee:	4770      	bx	lr

0800a2f0 <__ssputs_r>:
 800a2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f4:	688e      	ldr	r6, [r1, #8]
 800a2f6:	429e      	cmp	r6, r3
 800a2f8:	4682      	mov	sl, r0
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	4690      	mov	r8, r2
 800a2fe:	4699      	mov	r9, r3
 800a300:	d837      	bhi.n	800a372 <__ssputs_r+0x82>
 800a302:	898a      	ldrh	r2, [r1, #12]
 800a304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a308:	d031      	beq.n	800a36e <__ssputs_r+0x7e>
 800a30a:	6825      	ldr	r5, [r4, #0]
 800a30c:	6909      	ldr	r1, [r1, #16]
 800a30e:	1a6f      	subs	r7, r5, r1
 800a310:	6965      	ldr	r5, [r4, #20]
 800a312:	2302      	movs	r3, #2
 800a314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a318:	fb95 f5f3 	sdiv	r5, r5, r3
 800a31c:	f109 0301 	add.w	r3, r9, #1
 800a320:	443b      	add	r3, r7
 800a322:	429d      	cmp	r5, r3
 800a324:	bf38      	it	cc
 800a326:	461d      	movcc	r5, r3
 800a328:	0553      	lsls	r3, r2, #21
 800a32a:	d530      	bpl.n	800a38e <__ssputs_r+0x9e>
 800a32c:	4629      	mov	r1, r5
 800a32e:	f7ff fc11 	bl	8009b54 <_malloc_r>
 800a332:	4606      	mov	r6, r0
 800a334:	b950      	cbnz	r0, 800a34c <__ssputs_r+0x5c>
 800a336:	230c      	movs	r3, #12
 800a338:	f8ca 3000 	str.w	r3, [sl]
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	f04f 30ff 	mov.w	r0, #4294967295
 800a348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a34c:	463a      	mov	r2, r7
 800a34e:	6921      	ldr	r1, [r4, #16]
 800a350:	f7ff fb9e 	bl	8009a90 <memcpy>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a35a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a35e:	81a3      	strh	r3, [r4, #12]
 800a360:	6126      	str	r6, [r4, #16]
 800a362:	6165      	str	r5, [r4, #20]
 800a364:	443e      	add	r6, r7
 800a366:	1bed      	subs	r5, r5, r7
 800a368:	6026      	str	r6, [r4, #0]
 800a36a:	60a5      	str	r5, [r4, #8]
 800a36c:	464e      	mov	r6, r9
 800a36e:	454e      	cmp	r6, r9
 800a370:	d900      	bls.n	800a374 <__ssputs_r+0x84>
 800a372:	464e      	mov	r6, r9
 800a374:	4632      	mov	r2, r6
 800a376:	4641      	mov	r1, r8
 800a378:	6820      	ldr	r0, [r4, #0]
 800a37a:	f000 fc6d 	bl	800ac58 <memmove>
 800a37e:	68a3      	ldr	r3, [r4, #8]
 800a380:	1b9b      	subs	r3, r3, r6
 800a382:	60a3      	str	r3, [r4, #8]
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	441e      	add	r6, r3
 800a388:	6026      	str	r6, [r4, #0]
 800a38a:	2000      	movs	r0, #0
 800a38c:	e7dc      	b.n	800a348 <__ssputs_r+0x58>
 800a38e:	462a      	mov	r2, r5
 800a390:	f000 fc7b 	bl	800ac8a <_realloc_r>
 800a394:	4606      	mov	r6, r0
 800a396:	2800      	cmp	r0, #0
 800a398:	d1e2      	bne.n	800a360 <__ssputs_r+0x70>
 800a39a:	6921      	ldr	r1, [r4, #16]
 800a39c:	4650      	mov	r0, sl
 800a39e:	f7ff fb8b 	bl	8009ab8 <_free_r>
 800a3a2:	e7c8      	b.n	800a336 <__ssputs_r+0x46>

0800a3a4 <_svfiprintf_r>:
 800a3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a8:	461d      	mov	r5, r3
 800a3aa:	898b      	ldrh	r3, [r1, #12]
 800a3ac:	061f      	lsls	r7, r3, #24
 800a3ae:	b09d      	sub	sp, #116	; 0x74
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	4616      	mov	r6, r2
 800a3b6:	d50f      	bpl.n	800a3d8 <_svfiprintf_r+0x34>
 800a3b8:	690b      	ldr	r3, [r1, #16]
 800a3ba:	b96b      	cbnz	r3, 800a3d8 <_svfiprintf_r+0x34>
 800a3bc:	2140      	movs	r1, #64	; 0x40
 800a3be:	f7ff fbc9 	bl	8009b54 <_malloc_r>
 800a3c2:	6020      	str	r0, [r4, #0]
 800a3c4:	6120      	str	r0, [r4, #16]
 800a3c6:	b928      	cbnz	r0, 800a3d4 <_svfiprintf_r+0x30>
 800a3c8:	230c      	movs	r3, #12
 800a3ca:	f8c8 3000 	str.w	r3, [r8]
 800a3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d2:	e0c8      	b.n	800a566 <_svfiprintf_r+0x1c2>
 800a3d4:	2340      	movs	r3, #64	; 0x40
 800a3d6:	6163      	str	r3, [r4, #20]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	9309      	str	r3, [sp, #36]	; 0x24
 800a3dc:	2320      	movs	r3, #32
 800a3de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3e2:	2330      	movs	r3, #48	; 0x30
 800a3e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3e8:	9503      	str	r5, [sp, #12]
 800a3ea:	f04f 0b01 	mov.w	fp, #1
 800a3ee:	4637      	mov	r7, r6
 800a3f0:	463d      	mov	r5, r7
 800a3f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a3f6:	b10b      	cbz	r3, 800a3fc <_svfiprintf_r+0x58>
 800a3f8:	2b25      	cmp	r3, #37	; 0x25
 800a3fa:	d13e      	bne.n	800a47a <_svfiprintf_r+0xd6>
 800a3fc:	ebb7 0a06 	subs.w	sl, r7, r6
 800a400:	d00b      	beq.n	800a41a <_svfiprintf_r+0x76>
 800a402:	4653      	mov	r3, sl
 800a404:	4632      	mov	r2, r6
 800a406:	4621      	mov	r1, r4
 800a408:	4640      	mov	r0, r8
 800a40a:	f7ff ff71 	bl	800a2f0 <__ssputs_r>
 800a40e:	3001      	adds	r0, #1
 800a410:	f000 80a4 	beq.w	800a55c <_svfiprintf_r+0x1b8>
 800a414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a416:	4453      	add	r3, sl
 800a418:	9309      	str	r3, [sp, #36]	; 0x24
 800a41a:	783b      	ldrb	r3, [r7, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 809d 	beq.w	800a55c <_svfiprintf_r+0x1b8>
 800a422:	2300      	movs	r3, #0
 800a424:	f04f 32ff 	mov.w	r2, #4294967295
 800a428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a42c:	9304      	str	r3, [sp, #16]
 800a42e:	9307      	str	r3, [sp, #28]
 800a430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a434:	931a      	str	r3, [sp, #104]	; 0x68
 800a436:	462f      	mov	r7, r5
 800a438:	2205      	movs	r2, #5
 800a43a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a43e:	4850      	ldr	r0, [pc, #320]	; (800a580 <_svfiprintf_r+0x1dc>)
 800a440:	f7f5 fece 	bl	80001e0 <memchr>
 800a444:	9b04      	ldr	r3, [sp, #16]
 800a446:	b9d0      	cbnz	r0, 800a47e <_svfiprintf_r+0xda>
 800a448:	06d9      	lsls	r1, r3, #27
 800a44a:	bf44      	itt	mi
 800a44c:	2220      	movmi	r2, #32
 800a44e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a452:	071a      	lsls	r2, r3, #28
 800a454:	bf44      	itt	mi
 800a456:	222b      	movmi	r2, #43	; 0x2b
 800a458:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a45c:	782a      	ldrb	r2, [r5, #0]
 800a45e:	2a2a      	cmp	r2, #42	; 0x2a
 800a460:	d015      	beq.n	800a48e <_svfiprintf_r+0xea>
 800a462:	9a07      	ldr	r2, [sp, #28]
 800a464:	462f      	mov	r7, r5
 800a466:	2000      	movs	r0, #0
 800a468:	250a      	movs	r5, #10
 800a46a:	4639      	mov	r1, r7
 800a46c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a470:	3b30      	subs	r3, #48	; 0x30
 800a472:	2b09      	cmp	r3, #9
 800a474:	d94d      	bls.n	800a512 <_svfiprintf_r+0x16e>
 800a476:	b1b8      	cbz	r0, 800a4a8 <_svfiprintf_r+0x104>
 800a478:	e00f      	b.n	800a49a <_svfiprintf_r+0xf6>
 800a47a:	462f      	mov	r7, r5
 800a47c:	e7b8      	b.n	800a3f0 <_svfiprintf_r+0x4c>
 800a47e:	4a40      	ldr	r2, [pc, #256]	; (800a580 <_svfiprintf_r+0x1dc>)
 800a480:	1a80      	subs	r0, r0, r2
 800a482:	fa0b f000 	lsl.w	r0, fp, r0
 800a486:	4318      	orrs	r0, r3
 800a488:	9004      	str	r0, [sp, #16]
 800a48a:	463d      	mov	r5, r7
 800a48c:	e7d3      	b.n	800a436 <_svfiprintf_r+0x92>
 800a48e:	9a03      	ldr	r2, [sp, #12]
 800a490:	1d11      	adds	r1, r2, #4
 800a492:	6812      	ldr	r2, [r2, #0]
 800a494:	9103      	str	r1, [sp, #12]
 800a496:	2a00      	cmp	r2, #0
 800a498:	db01      	blt.n	800a49e <_svfiprintf_r+0xfa>
 800a49a:	9207      	str	r2, [sp, #28]
 800a49c:	e004      	b.n	800a4a8 <_svfiprintf_r+0x104>
 800a49e:	4252      	negs	r2, r2
 800a4a0:	f043 0302 	orr.w	r3, r3, #2
 800a4a4:	9207      	str	r2, [sp, #28]
 800a4a6:	9304      	str	r3, [sp, #16]
 800a4a8:	783b      	ldrb	r3, [r7, #0]
 800a4aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a4ac:	d10c      	bne.n	800a4c8 <_svfiprintf_r+0x124>
 800a4ae:	787b      	ldrb	r3, [r7, #1]
 800a4b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4b2:	d133      	bne.n	800a51c <_svfiprintf_r+0x178>
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	1d1a      	adds	r2, r3, #4
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	9203      	str	r2, [sp, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	bfb8      	it	lt
 800a4c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4c4:	3702      	adds	r7, #2
 800a4c6:	9305      	str	r3, [sp, #20]
 800a4c8:	4d2e      	ldr	r5, [pc, #184]	; (800a584 <_svfiprintf_r+0x1e0>)
 800a4ca:	7839      	ldrb	r1, [r7, #0]
 800a4cc:	2203      	movs	r2, #3
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	f7f5 fe86 	bl	80001e0 <memchr>
 800a4d4:	b138      	cbz	r0, 800a4e6 <_svfiprintf_r+0x142>
 800a4d6:	2340      	movs	r3, #64	; 0x40
 800a4d8:	1b40      	subs	r0, r0, r5
 800a4da:	fa03 f000 	lsl.w	r0, r3, r0
 800a4de:	9b04      	ldr	r3, [sp, #16]
 800a4e0:	4303      	orrs	r3, r0
 800a4e2:	3701      	adds	r7, #1
 800a4e4:	9304      	str	r3, [sp, #16]
 800a4e6:	7839      	ldrb	r1, [r7, #0]
 800a4e8:	4827      	ldr	r0, [pc, #156]	; (800a588 <_svfiprintf_r+0x1e4>)
 800a4ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ee:	2206      	movs	r2, #6
 800a4f0:	1c7e      	adds	r6, r7, #1
 800a4f2:	f7f5 fe75 	bl	80001e0 <memchr>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d038      	beq.n	800a56c <_svfiprintf_r+0x1c8>
 800a4fa:	4b24      	ldr	r3, [pc, #144]	; (800a58c <_svfiprintf_r+0x1e8>)
 800a4fc:	bb13      	cbnz	r3, 800a544 <_svfiprintf_r+0x1a0>
 800a4fe:	9b03      	ldr	r3, [sp, #12]
 800a500:	3307      	adds	r3, #7
 800a502:	f023 0307 	bic.w	r3, r3, #7
 800a506:	3308      	adds	r3, #8
 800a508:	9303      	str	r3, [sp, #12]
 800a50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a50c:	444b      	add	r3, r9
 800a50e:	9309      	str	r3, [sp, #36]	; 0x24
 800a510:	e76d      	b.n	800a3ee <_svfiprintf_r+0x4a>
 800a512:	fb05 3202 	mla	r2, r5, r2, r3
 800a516:	2001      	movs	r0, #1
 800a518:	460f      	mov	r7, r1
 800a51a:	e7a6      	b.n	800a46a <_svfiprintf_r+0xc6>
 800a51c:	2300      	movs	r3, #0
 800a51e:	3701      	adds	r7, #1
 800a520:	9305      	str	r3, [sp, #20]
 800a522:	4619      	mov	r1, r3
 800a524:	250a      	movs	r5, #10
 800a526:	4638      	mov	r0, r7
 800a528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a52c:	3a30      	subs	r2, #48	; 0x30
 800a52e:	2a09      	cmp	r2, #9
 800a530:	d903      	bls.n	800a53a <_svfiprintf_r+0x196>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0c8      	beq.n	800a4c8 <_svfiprintf_r+0x124>
 800a536:	9105      	str	r1, [sp, #20]
 800a538:	e7c6      	b.n	800a4c8 <_svfiprintf_r+0x124>
 800a53a:	fb05 2101 	mla	r1, r5, r1, r2
 800a53e:	2301      	movs	r3, #1
 800a540:	4607      	mov	r7, r0
 800a542:	e7f0      	b.n	800a526 <_svfiprintf_r+0x182>
 800a544:	ab03      	add	r3, sp, #12
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	4622      	mov	r2, r4
 800a54a:	4b11      	ldr	r3, [pc, #68]	; (800a590 <_svfiprintf_r+0x1ec>)
 800a54c:	a904      	add	r1, sp, #16
 800a54e:	4640      	mov	r0, r8
 800a550:	f3af 8000 	nop.w
 800a554:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a558:	4681      	mov	r9, r0
 800a55a:	d1d6      	bne.n	800a50a <_svfiprintf_r+0x166>
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	065b      	lsls	r3, r3, #25
 800a560:	f53f af35 	bmi.w	800a3ce <_svfiprintf_r+0x2a>
 800a564:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a566:	b01d      	add	sp, #116	; 0x74
 800a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56c:	ab03      	add	r3, sp, #12
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	4622      	mov	r2, r4
 800a572:	4b07      	ldr	r3, [pc, #28]	; (800a590 <_svfiprintf_r+0x1ec>)
 800a574:	a904      	add	r1, sp, #16
 800a576:	4640      	mov	r0, r8
 800a578:	f000 f9c2 	bl	800a900 <_printf_i>
 800a57c:	e7ea      	b.n	800a554 <_svfiprintf_r+0x1b0>
 800a57e:	bf00      	nop
 800a580:	0800cb10 	.word	0x0800cb10
 800a584:	0800cb16 	.word	0x0800cb16
 800a588:	0800cb1a 	.word	0x0800cb1a
 800a58c:	00000000 	.word	0x00000000
 800a590:	0800a2f1 	.word	0x0800a2f1

0800a594 <__sfputc_r>:
 800a594:	6893      	ldr	r3, [r2, #8]
 800a596:	3b01      	subs	r3, #1
 800a598:	2b00      	cmp	r3, #0
 800a59a:	b410      	push	{r4}
 800a59c:	6093      	str	r3, [r2, #8]
 800a59e:	da08      	bge.n	800a5b2 <__sfputc_r+0x1e>
 800a5a0:	6994      	ldr	r4, [r2, #24]
 800a5a2:	42a3      	cmp	r3, r4
 800a5a4:	db01      	blt.n	800a5aa <__sfputc_r+0x16>
 800a5a6:	290a      	cmp	r1, #10
 800a5a8:	d103      	bne.n	800a5b2 <__sfputc_r+0x1e>
 800a5aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ae:	f7ff bbff 	b.w	8009db0 <__swbuf_r>
 800a5b2:	6813      	ldr	r3, [r2, #0]
 800a5b4:	1c58      	adds	r0, r3, #1
 800a5b6:	6010      	str	r0, [r2, #0]
 800a5b8:	7019      	strb	r1, [r3, #0]
 800a5ba:	4608      	mov	r0, r1
 800a5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <__sfputs_r>:
 800a5c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	460f      	mov	r7, r1
 800a5c8:	4614      	mov	r4, r2
 800a5ca:	18d5      	adds	r5, r2, r3
 800a5cc:	42ac      	cmp	r4, r5
 800a5ce:	d101      	bne.n	800a5d4 <__sfputs_r+0x12>
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	e007      	b.n	800a5e4 <__sfputs_r+0x22>
 800a5d4:	463a      	mov	r2, r7
 800a5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7ff ffda 	bl	800a594 <__sfputc_r>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d1f3      	bne.n	800a5cc <__sfputs_r+0xa>
 800a5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5e8 <_vfiprintf_r>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	b09d      	sub	sp, #116	; 0x74
 800a5f0:	4617      	mov	r7, r2
 800a5f2:	461d      	mov	r5, r3
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	b118      	cbz	r0, 800a600 <_vfiprintf_r+0x18>
 800a5f8:	6983      	ldr	r3, [r0, #24]
 800a5fa:	b90b      	cbnz	r3, 800a600 <_vfiprintf_r+0x18>
 800a5fc:	f7ff fd88 	bl	800a110 <__sinit>
 800a600:	4b7c      	ldr	r3, [pc, #496]	; (800a7f4 <_vfiprintf_r+0x20c>)
 800a602:	429c      	cmp	r4, r3
 800a604:	d158      	bne.n	800a6b8 <_vfiprintf_r+0xd0>
 800a606:	6874      	ldr	r4, [r6, #4]
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	0718      	lsls	r0, r3, #28
 800a60c:	d55e      	bpl.n	800a6cc <_vfiprintf_r+0xe4>
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d05b      	beq.n	800a6cc <_vfiprintf_r+0xe4>
 800a614:	2300      	movs	r3, #0
 800a616:	9309      	str	r3, [sp, #36]	; 0x24
 800a618:	2320      	movs	r3, #32
 800a61a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a61e:	2330      	movs	r3, #48	; 0x30
 800a620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a624:	9503      	str	r5, [sp, #12]
 800a626:	f04f 0b01 	mov.w	fp, #1
 800a62a:	46b8      	mov	r8, r7
 800a62c:	4645      	mov	r5, r8
 800a62e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a632:	b10b      	cbz	r3, 800a638 <_vfiprintf_r+0x50>
 800a634:	2b25      	cmp	r3, #37	; 0x25
 800a636:	d154      	bne.n	800a6e2 <_vfiprintf_r+0xfa>
 800a638:	ebb8 0a07 	subs.w	sl, r8, r7
 800a63c:	d00b      	beq.n	800a656 <_vfiprintf_r+0x6e>
 800a63e:	4653      	mov	r3, sl
 800a640:	463a      	mov	r2, r7
 800a642:	4621      	mov	r1, r4
 800a644:	4630      	mov	r0, r6
 800a646:	f7ff ffbc 	bl	800a5c2 <__sfputs_r>
 800a64a:	3001      	adds	r0, #1
 800a64c:	f000 80c2 	beq.w	800a7d4 <_vfiprintf_r+0x1ec>
 800a650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a652:	4453      	add	r3, sl
 800a654:	9309      	str	r3, [sp, #36]	; 0x24
 800a656:	f898 3000 	ldrb.w	r3, [r8]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 80ba 	beq.w	800a7d4 <_vfiprintf_r+0x1ec>
 800a660:	2300      	movs	r3, #0
 800a662:	f04f 32ff 	mov.w	r2, #4294967295
 800a666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a66a:	9304      	str	r3, [sp, #16]
 800a66c:	9307      	str	r3, [sp, #28]
 800a66e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a672:	931a      	str	r3, [sp, #104]	; 0x68
 800a674:	46a8      	mov	r8, r5
 800a676:	2205      	movs	r2, #5
 800a678:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a67c:	485e      	ldr	r0, [pc, #376]	; (800a7f8 <_vfiprintf_r+0x210>)
 800a67e:	f7f5 fdaf 	bl	80001e0 <memchr>
 800a682:	9b04      	ldr	r3, [sp, #16]
 800a684:	bb78      	cbnz	r0, 800a6e6 <_vfiprintf_r+0xfe>
 800a686:	06d9      	lsls	r1, r3, #27
 800a688:	bf44      	itt	mi
 800a68a:	2220      	movmi	r2, #32
 800a68c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a690:	071a      	lsls	r2, r3, #28
 800a692:	bf44      	itt	mi
 800a694:	222b      	movmi	r2, #43	; 0x2b
 800a696:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a69a:	782a      	ldrb	r2, [r5, #0]
 800a69c:	2a2a      	cmp	r2, #42	; 0x2a
 800a69e:	d02a      	beq.n	800a6f6 <_vfiprintf_r+0x10e>
 800a6a0:	9a07      	ldr	r2, [sp, #28]
 800a6a2:	46a8      	mov	r8, r5
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	250a      	movs	r5, #10
 800a6a8:	4641      	mov	r1, r8
 800a6aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ae:	3b30      	subs	r3, #48	; 0x30
 800a6b0:	2b09      	cmp	r3, #9
 800a6b2:	d969      	bls.n	800a788 <_vfiprintf_r+0x1a0>
 800a6b4:	b360      	cbz	r0, 800a710 <_vfiprintf_r+0x128>
 800a6b6:	e024      	b.n	800a702 <_vfiprintf_r+0x11a>
 800a6b8:	4b50      	ldr	r3, [pc, #320]	; (800a7fc <_vfiprintf_r+0x214>)
 800a6ba:	429c      	cmp	r4, r3
 800a6bc:	d101      	bne.n	800a6c2 <_vfiprintf_r+0xda>
 800a6be:	68b4      	ldr	r4, [r6, #8]
 800a6c0:	e7a2      	b.n	800a608 <_vfiprintf_r+0x20>
 800a6c2:	4b4f      	ldr	r3, [pc, #316]	; (800a800 <_vfiprintf_r+0x218>)
 800a6c4:	429c      	cmp	r4, r3
 800a6c6:	bf08      	it	eq
 800a6c8:	68f4      	ldreq	r4, [r6, #12]
 800a6ca:	e79d      	b.n	800a608 <_vfiprintf_r+0x20>
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f7ff fbc0 	bl	8009e54 <__swsetup_r>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d09d      	beq.n	800a614 <_vfiprintf_r+0x2c>
 800a6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6dc:	b01d      	add	sp, #116	; 0x74
 800a6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e2:	46a8      	mov	r8, r5
 800a6e4:	e7a2      	b.n	800a62c <_vfiprintf_r+0x44>
 800a6e6:	4a44      	ldr	r2, [pc, #272]	; (800a7f8 <_vfiprintf_r+0x210>)
 800a6e8:	1a80      	subs	r0, r0, r2
 800a6ea:	fa0b f000 	lsl.w	r0, fp, r0
 800a6ee:	4318      	orrs	r0, r3
 800a6f0:	9004      	str	r0, [sp, #16]
 800a6f2:	4645      	mov	r5, r8
 800a6f4:	e7be      	b.n	800a674 <_vfiprintf_r+0x8c>
 800a6f6:	9a03      	ldr	r2, [sp, #12]
 800a6f8:	1d11      	adds	r1, r2, #4
 800a6fa:	6812      	ldr	r2, [r2, #0]
 800a6fc:	9103      	str	r1, [sp, #12]
 800a6fe:	2a00      	cmp	r2, #0
 800a700:	db01      	blt.n	800a706 <_vfiprintf_r+0x11e>
 800a702:	9207      	str	r2, [sp, #28]
 800a704:	e004      	b.n	800a710 <_vfiprintf_r+0x128>
 800a706:	4252      	negs	r2, r2
 800a708:	f043 0302 	orr.w	r3, r3, #2
 800a70c:	9207      	str	r2, [sp, #28]
 800a70e:	9304      	str	r3, [sp, #16]
 800a710:	f898 3000 	ldrb.w	r3, [r8]
 800a714:	2b2e      	cmp	r3, #46	; 0x2e
 800a716:	d10e      	bne.n	800a736 <_vfiprintf_r+0x14e>
 800a718:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a71c:	2b2a      	cmp	r3, #42	; 0x2a
 800a71e:	d138      	bne.n	800a792 <_vfiprintf_r+0x1aa>
 800a720:	9b03      	ldr	r3, [sp, #12]
 800a722:	1d1a      	adds	r2, r3, #4
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	9203      	str	r2, [sp, #12]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	bfb8      	it	lt
 800a72c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a730:	f108 0802 	add.w	r8, r8, #2
 800a734:	9305      	str	r3, [sp, #20]
 800a736:	4d33      	ldr	r5, [pc, #204]	; (800a804 <_vfiprintf_r+0x21c>)
 800a738:	f898 1000 	ldrb.w	r1, [r8]
 800a73c:	2203      	movs	r2, #3
 800a73e:	4628      	mov	r0, r5
 800a740:	f7f5 fd4e 	bl	80001e0 <memchr>
 800a744:	b140      	cbz	r0, 800a758 <_vfiprintf_r+0x170>
 800a746:	2340      	movs	r3, #64	; 0x40
 800a748:	1b40      	subs	r0, r0, r5
 800a74a:	fa03 f000 	lsl.w	r0, r3, r0
 800a74e:	9b04      	ldr	r3, [sp, #16]
 800a750:	4303      	orrs	r3, r0
 800a752:	f108 0801 	add.w	r8, r8, #1
 800a756:	9304      	str	r3, [sp, #16]
 800a758:	f898 1000 	ldrb.w	r1, [r8]
 800a75c:	482a      	ldr	r0, [pc, #168]	; (800a808 <_vfiprintf_r+0x220>)
 800a75e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a762:	2206      	movs	r2, #6
 800a764:	f108 0701 	add.w	r7, r8, #1
 800a768:	f7f5 fd3a 	bl	80001e0 <memchr>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d037      	beq.n	800a7e0 <_vfiprintf_r+0x1f8>
 800a770:	4b26      	ldr	r3, [pc, #152]	; (800a80c <_vfiprintf_r+0x224>)
 800a772:	bb1b      	cbnz	r3, 800a7bc <_vfiprintf_r+0x1d4>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	3307      	adds	r3, #7
 800a778:	f023 0307 	bic.w	r3, r3, #7
 800a77c:	3308      	adds	r3, #8
 800a77e:	9303      	str	r3, [sp, #12]
 800a780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a782:	444b      	add	r3, r9
 800a784:	9309      	str	r3, [sp, #36]	; 0x24
 800a786:	e750      	b.n	800a62a <_vfiprintf_r+0x42>
 800a788:	fb05 3202 	mla	r2, r5, r2, r3
 800a78c:	2001      	movs	r0, #1
 800a78e:	4688      	mov	r8, r1
 800a790:	e78a      	b.n	800a6a8 <_vfiprintf_r+0xc0>
 800a792:	2300      	movs	r3, #0
 800a794:	f108 0801 	add.w	r8, r8, #1
 800a798:	9305      	str	r3, [sp, #20]
 800a79a:	4619      	mov	r1, r3
 800a79c:	250a      	movs	r5, #10
 800a79e:	4640      	mov	r0, r8
 800a7a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7a4:	3a30      	subs	r2, #48	; 0x30
 800a7a6:	2a09      	cmp	r2, #9
 800a7a8:	d903      	bls.n	800a7b2 <_vfiprintf_r+0x1ca>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0c3      	beq.n	800a736 <_vfiprintf_r+0x14e>
 800a7ae:	9105      	str	r1, [sp, #20]
 800a7b0:	e7c1      	b.n	800a736 <_vfiprintf_r+0x14e>
 800a7b2:	fb05 2101 	mla	r1, r5, r1, r2
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	4680      	mov	r8, r0
 800a7ba:	e7f0      	b.n	800a79e <_vfiprintf_r+0x1b6>
 800a7bc:	ab03      	add	r3, sp, #12
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	4b13      	ldr	r3, [pc, #76]	; (800a810 <_vfiprintf_r+0x228>)
 800a7c4:	a904      	add	r1, sp, #16
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f3af 8000 	nop.w
 800a7cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a7d0:	4681      	mov	r9, r0
 800a7d2:	d1d5      	bne.n	800a780 <_vfiprintf_r+0x198>
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	065b      	lsls	r3, r3, #25
 800a7d8:	f53f af7e 	bmi.w	800a6d8 <_vfiprintf_r+0xf0>
 800a7dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7de:	e77d      	b.n	800a6dc <_vfiprintf_r+0xf4>
 800a7e0:	ab03      	add	r3, sp, #12
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4b0a      	ldr	r3, [pc, #40]	; (800a810 <_vfiprintf_r+0x228>)
 800a7e8:	a904      	add	r1, sp, #16
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f000 f888 	bl	800a900 <_printf_i>
 800a7f0:	e7ec      	b.n	800a7cc <_vfiprintf_r+0x1e4>
 800a7f2:	bf00      	nop
 800a7f4:	0800cad0 	.word	0x0800cad0
 800a7f8:	0800cb10 	.word	0x0800cb10
 800a7fc:	0800caf0 	.word	0x0800caf0
 800a800:	0800cab0 	.word	0x0800cab0
 800a804:	0800cb16 	.word	0x0800cb16
 800a808:	0800cb1a 	.word	0x0800cb1a
 800a80c:	00000000 	.word	0x00000000
 800a810:	0800a5c3 	.word	0x0800a5c3

0800a814 <_printf_common>:
 800a814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a818:	4691      	mov	r9, r2
 800a81a:	461f      	mov	r7, r3
 800a81c:	688a      	ldr	r2, [r1, #8]
 800a81e:	690b      	ldr	r3, [r1, #16]
 800a820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a824:	4293      	cmp	r3, r2
 800a826:	bfb8      	it	lt
 800a828:	4613      	movlt	r3, r2
 800a82a:	f8c9 3000 	str.w	r3, [r9]
 800a82e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a832:	4606      	mov	r6, r0
 800a834:	460c      	mov	r4, r1
 800a836:	b112      	cbz	r2, 800a83e <_printf_common+0x2a>
 800a838:	3301      	adds	r3, #1
 800a83a:	f8c9 3000 	str.w	r3, [r9]
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	0699      	lsls	r1, r3, #26
 800a842:	bf42      	ittt	mi
 800a844:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a848:	3302      	addmi	r3, #2
 800a84a:	f8c9 3000 	strmi.w	r3, [r9]
 800a84e:	6825      	ldr	r5, [r4, #0]
 800a850:	f015 0506 	ands.w	r5, r5, #6
 800a854:	d107      	bne.n	800a866 <_printf_common+0x52>
 800a856:	f104 0a19 	add.w	sl, r4, #25
 800a85a:	68e3      	ldr	r3, [r4, #12]
 800a85c:	f8d9 2000 	ldr.w	r2, [r9]
 800a860:	1a9b      	subs	r3, r3, r2
 800a862:	42ab      	cmp	r3, r5
 800a864:	dc28      	bgt.n	800a8b8 <_printf_common+0xa4>
 800a866:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a86a:	6822      	ldr	r2, [r4, #0]
 800a86c:	3300      	adds	r3, #0
 800a86e:	bf18      	it	ne
 800a870:	2301      	movne	r3, #1
 800a872:	0692      	lsls	r2, r2, #26
 800a874:	d42d      	bmi.n	800a8d2 <_printf_common+0xbe>
 800a876:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a87a:	4639      	mov	r1, r7
 800a87c:	4630      	mov	r0, r6
 800a87e:	47c0      	blx	r8
 800a880:	3001      	adds	r0, #1
 800a882:	d020      	beq.n	800a8c6 <_printf_common+0xb2>
 800a884:	6823      	ldr	r3, [r4, #0]
 800a886:	68e5      	ldr	r5, [r4, #12]
 800a888:	f8d9 2000 	ldr.w	r2, [r9]
 800a88c:	f003 0306 	and.w	r3, r3, #6
 800a890:	2b04      	cmp	r3, #4
 800a892:	bf08      	it	eq
 800a894:	1aad      	subeq	r5, r5, r2
 800a896:	68a3      	ldr	r3, [r4, #8]
 800a898:	6922      	ldr	r2, [r4, #16]
 800a89a:	bf0c      	ite	eq
 800a89c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8a0:	2500      	movne	r5, #0
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	bfc4      	itt	gt
 800a8a6:	1a9b      	subgt	r3, r3, r2
 800a8a8:	18ed      	addgt	r5, r5, r3
 800a8aa:	f04f 0900 	mov.w	r9, #0
 800a8ae:	341a      	adds	r4, #26
 800a8b0:	454d      	cmp	r5, r9
 800a8b2:	d11a      	bne.n	800a8ea <_printf_common+0xd6>
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	e008      	b.n	800a8ca <_printf_common+0xb6>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	4652      	mov	r2, sl
 800a8bc:	4639      	mov	r1, r7
 800a8be:	4630      	mov	r0, r6
 800a8c0:	47c0      	blx	r8
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	d103      	bne.n	800a8ce <_printf_common+0xba>
 800a8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ce:	3501      	adds	r5, #1
 800a8d0:	e7c3      	b.n	800a85a <_printf_common+0x46>
 800a8d2:	18e1      	adds	r1, r4, r3
 800a8d4:	1c5a      	adds	r2, r3, #1
 800a8d6:	2030      	movs	r0, #48	; 0x30
 800a8d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8dc:	4422      	add	r2, r4
 800a8de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8e6:	3302      	adds	r3, #2
 800a8e8:	e7c5      	b.n	800a876 <_printf_common+0x62>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	4639      	mov	r1, r7
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	47c0      	blx	r8
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	d0e6      	beq.n	800a8c6 <_printf_common+0xb2>
 800a8f8:	f109 0901 	add.w	r9, r9, #1
 800a8fc:	e7d8      	b.n	800a8b0 <_printf_common+0x9c>
	...

0800a900 <_printf_i>:
 800a900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a904:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a908:	460c      	mov	r4, r1
 800a90a:	7e09      	ldrb	r1, [r1, #24]
 800a90c:	b085      	sub	sp, #20
 800a90e:	296e      	cmp	r1, #110	; 0x6e
 800a910:	4617      	mov	r7, r2
 800a912:	4606      	mov	r6, r0
 800a914:	4698      	mov	r8, r3
 800a916:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a918:	f000 80b3 	beq.w	800aa82 <_printf_i+0x182>
 800a91c:	d822      	bhi.n	800a964 <_printf_i+0x64>
 800a91e:	2963      	cmp	r1, #99	; 0x63
 800a920:	d036      	beq.n	800a990 <_printf_i+0x90>
 800a922:	d80a      	bhi.n	800a93a <_printf_i+0x3a>
 800a924:	2900      	cmp	r1, #0
 800a926:	f000 80b9 	beq.w	800aa9c <_printf_i+0x19c>
 800a92a:	2958      	cmp	r1, #88	; 0x58
 800a92c:	f000 8083 	beq.w	800aa36 <_printf_i+0x136>
 800a930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a934:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a938:	e032      	b.n	800a9a0 <_printf_i+0xa0>
 800a93a:	2964      	cmp	r1, #100	; 0x64
 800a93c:	d001      	beq.n	800a942 <_printf_i+0x42>
 800a93e:	2969      	cmp	r1, #105	; 0x69
 800a940:	d1f6      	bne.n	800a930 <_printf_i+0x30>
 800a942:	6820      	ldr	r0, [r4, #0]
 800a944:	6813      	ldr	r3, [r2, #0]
 800a946:	0605      	lsls	r5, r0, #24
 800a948:	f103 0104 	add.w	r1, r3, #4
 800a94c:	d52a      	bpl.n	800a9a4 <_printf_i+0xa4>
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6011      	str	r1, [r2, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	da03      	bge.n	800a95e <_printf_i+0x5e>
 800a956:	222d      	movs	r2, #45	; 0x2d
 800a958:	425b      	negs	r3, r3
 800a95a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a95e:	486f      	ldr	r0, [pc, #444]	; (800ab1c <_printf_i+0x21c>)
 800a960:	220a      	movs	r2, #10
 800a962:	e039      	b.n	800a9d8 <_printf_i+0xd8>
 800a964:	2973      	cmp	r1, #115	; 0x73
 800a966:	f000 809d 	beq.w	800aaa4 <_printf_i+0x1a4>
 800a96a:	d808      	bhi.n	800a97e <_printf_i+0x7e>
 800a96c:	296f      	cmp	r1, #111	; 0x6f
 800a96e:	d020      	beq.n	800a9b2 <_printf_i+0xb2>
 800a970:	2970      	cmp	r1, #112	; 0x70
 800a972:	d1dd      	bne.n	800a930 <_printf_i+0x30>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	f043 0320 	orr.w	r3, r3, #32
 800a97a:	6023      	str	r3, [r4, #0]
 800a97c:	e003      	b.n	800a986 <_printf_i+0x86>
 800a97e:	2975      	cmp	r1, #117	; 0x75
 800a980:	d017      	beq.n	800a9b2 <_printf_i+0xb2>
 800a982:	2978      	cmp	r1, #120	; 0x78
 800a984:	d1d4      	bne.n	800a930 <_printf_i+0x30>
 800a986:	2378      	movs	r3, #120	; 0x78
 800a988:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a98c:	4864      	ldr	r0, [pc, #400]	; (800ab20 <_printf_i+0x220>)
 800a98e:	e055      	b.n	800aa3c <_printf_i+0x13c>
 800a990:	6813      	ldr	r3, [r2, #0]
 800a992:	1d19      	adds	r1, r3, #4
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6011      	str	r1, [r2, #0]
 800a998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a99c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e08c      	b.n	800aabe <_printf_i+0x1be>
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	6011      	str	r1, [r2, #0]
 800a9a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9ac:	bf18      	it	ne
 800a9ae:	b21b      	sxthne	r3, r3
 800a9b0:	e7cf      	b.n	800a952 <_printf_i+0x52>
 800a9b2:	6813      	ldr	r3, [r2, #0]
 800a9b4:	6825      	ldr	r5, [r4, #0]
 800a9b6:	1d18      	adds	r0, r3, #4
 800a9b8:	6010      	str	r0, [r2, #0]
 800a9ba:	0628      	lsls	r0, r5, #24
 800a9bc:	d501      	bpl.n	800a9c2 <_printf_i+0xc2>
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	e002      	b.n	800a9c8 <_printf_i+0xc8>
 800a9c2:	0668      	lsls	r0, r5, #25
 800a9c4:	d5fb      	bpl.n	800a9be <_printf_i+0xbe>
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	4854      	ldr	r0, [pc, #336]	; (800ab1c <_printf_i+0x21c>)
 800a9ca:	296f      	cmp	r1, #111	; 0x6f
 800a9cc:	bf14      	ite	ne
 800a9ce:	220a      	movne	r2, #10
 800a9d0:	2208      	moveq	r2, #8
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9d8:	6865      	ldr	r5, [r4, #4]
 800a9da:	60a5      	str	r5, [r4, #8]
 800a9dc:	2d00      	cmp	r5, #0
 800a9de:	f2c0 8095 	blt.w	800ab0c <_printf_i+0x20c>
 800a9e2:	6821      	ldr	r1, [r4, #0]
 800a9e4:	f021 0104 	bic.w	r1, r1, #4
 800a9e8:	6021      	str	r1, [r4, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d13d      	bne.n	800aa6a <_printf_i+0x16a>
 800a9ee:	2d00      	cmp	r5, #0
 800a9f0:	f040 808e 	bne.w	800ab10 <_printf_i+0x210>
 800a9f4:	4665      	mov	r5, ip
 800a9f6:	2a08      	cmp	r2, #8
 800a9f8:	d10b      	bne.n	800aa12 <_printf_i+0x112>
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	07db      	lsls	r3, r3, #31
 800a9fe:	d508      	bpl.n	800aa12 <_printf_i+0x112>
 800aa00:	6923      	ldr	r3, [r4, #16]
 800aa02:	6862      	ldr	r2, [r4, #4]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	bfde      	ittt	le
 800aa08:	2330      	movle	r3, #48	; 0x30
 800aa0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa12:	ebac 0305 	sub.w	r3, ip, r5
 800aa16:	6123      	str	r3, [r4, #16]
 800aa18:	f8cd 8000 	str.w	r8, [sp]
 800aa1c:	463b      	mov	r3, r7
 800aa1e:	aa03      	add	r2, sp, #12
 800aa20:	4621      	mov	r1, r4
 800aa22:	4630      	mov	r0, r6
 800aa24:	f7ff fef6 	bl	800a814 <_printf_common>
 800aa28:	3001      	adds	r0, #1
 800aa2a:	d14d      	bne.n	800aac8 <_printf_i+0x1c8>
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa30:	b005      	add	sp, #20
 800aa32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa36:	4839      	ldr	r0, [pc, #228]	; (800ab1c <_printf_i+0x21c>)
 800aa38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aa3c:	6813      	ldr	r3, [r2, #0]
 800aa3e:	6821      	ldr	r1, [r4, #0]
 800aa40:	1d1d      	adds	r5, r3, #4
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6015      	str	r5, [r2, #0]
 800aa46:	060a      	lsls	r2, r1, #24
 800aa48:	d50b      	bpl.n	800aa62 <_printf_i+0x162>
 800aa4a:	07ca      	lsls	r2, r1, #31
 800aa4c:	bf44      	itt	mi
 800aa4e:	f041 0120 	orrmi.w	r1, r1, #32
 800aa52:	6021      	strmi	r1, [r4, #0]
 800aa54:	b91b      	cbnz	r3, 800aa5e <_printf_i+0x15e>
 800aa56:	6822      	ldr	r2, [r4, #0]
 800aa58:	f022 0220 	bic.w	r2, r2, #32
 800aa5c:	6022      	str	r2, [r4, #0]
 800aa5e:	2210      	movs	r2, #16
 800aa60:	e7b7      	b.n	800a9d2 <_printf_i+0xd2>
 800aa62:	064d      	lsls	r5, r1, #25
 800aa64:	bf48      	it	mi
 800aa66:	b29b      	uxthmi	r3, r3
 800aa68:	e7ef      	b.n	800aa4a <_printf_i+0x14a>
 800aa6a:	4665      	mov	r5, ip
 800aa6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa70:	fb02 3311 	mls	r3, r2, r1, r3
 800aa74:	5cc3      	ldrb	r3, [r0, r3]
 800aa76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	2900      	cmp	r1, #0
 800aa7e:	d1f5      	bne.n	800aa6c <_printf_i+0x16c>
 800aa80:	e7b9      	b.n	800a9f6 <_printf_i+0xf6>
 800aa82:	6813      	ldr	r3, [r2, #0]
 800aa84:	6825      	ldr	r5, [r4, #0]
 800aa86:	6961      	ldr	r1, [r4, #20]
 800aa88:	1d18      	adds	r0, r3, #4
 800aa8a:	6010      	str	r0, [r2, #0]
 800aa8c:	0628      	lsls	r0, r5, #24
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	d501      	bpl.n	800aa96 <_printf_i+0x196>
 800aa92:	6019      	str	r1, [r3, #0]
 800aa94:	e002      	b.n	800aa9c <_printf_i+0x19c>
 800aa96:	066a      	lsls	r2, r5, #25
 800aa98:	d5fb      	bpl.n	800aa92 <_printf_i+0x192>
 800aa9a:	8019      	strh	r1, [r3, #0]
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	6123      	str	r3, [r4, #16]
 800aaa0:	4665      	mov	r5, ip
 800aaa2:	e7b9      	b.n	800aa18 <_printf_i+0x118>
 800aaa4:	6813      	ldr	r3, [r2, #0]
 800aaa6:	1d19      	adds	r1, r3, #4
 800aaa8:	6011      	str	r1, [r2, #0]
 800aaaa:	681d      	ldr	r5, [r3, #0]
 800aaac:	6862      	ldr	r2, [r4, #4]
 800aaae:	2100      	movs	r1, #0
 800aab0:	4628      	mov	r0, r5
 800aab2:	f7f5 fb95 	bl	80001e0 <memchr>
 800aab6:	b108      	cbz	r0, 800aabc <_printf_i+0x1bc>
 800aab8:	1b40      	subs	r0, r0, r5
 800aaba:	6060      	str	r0, [r4, #4]
 800aabc:	6863      	ldr	r3, [r4, #4]
 800aabe:	6123      	str	r3, [r4, #16]
 800aac0:	2300      	movs	r3, #0
 800aac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aac6:	e7a7      	b.n	800aa18 <_printf_i+0x118>
 800aac8:	6923      	ldr	r3, [r4, #16]
 800aaca:	462a      	mov	r2, r5
 800aacc:	4639      	mov	r1, r7
 800aace:	4630      	mov	r0, r6
 800aad0:	47c0      	blx	r8
 800aad2:	3001      	adds	r0, #1
 800aad4:	d0aa      	beq.n	800aa2c <_printf_i+0x12c>
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	079b      	lsls	r3, r3, #30
 800aada:	d413      	bmi.n	800ab04 <_printf_i+0x204>
 800aadc:	68e0      	ldr	r0, [r4, #12]
 800aade:	9b03      	ldr	r3, [sp, #12]
 800aae0:	4298      	cmp	r0, r3
 800aae2:	bfb8      	it	lt
 800aae4:	4618      	movlt	r0, r3
 800aae6:	e7a3      	b.n	800aa30 <_printf_i+0x130>
 800aae8:	2301      	movs	r3, #1
 800aaea:	464a      	mov	r2, r9
 800aaec:	4639      	mov	r1, r7
 800aaee:	4630      	mov	r0, r6
 800aaf0:	47c0      	blx	r8
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	d09a      	beq.n	800aa2c <_printf_i+0x12c>
 800aaf6:	3501      	adds	r5, #1
 800aaf8:	68e3      	ldr	r3, [r4, #12]
 800aafa:	9a03      	ldr	r2, [sp, #12]
 800aafc:	1a9b      	subs	r3, r3, r2
 800aafe:	42ab      	cmp	r3, r5
 800ab00:	dcf2      	bgt.n	800aae8 <_printf_i+0x1e8>
 800ab02:	e7eb      	b.n	800aadc <_printf_i+0x1dc>
 800ab04:	2500      	movs	r5, #0
 800ab06:	f104 0919 	add.w	r9, r4, #25
 800ab0a:	e7f5      	b.n	800aaf8 <_printf_i+0x1f8>
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1ac      	bne.n	800aa6a <_printf_i+0x16a>
 800ab10:	7803      	ldrb	r3, [r0, #0]
 800ab12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab1a:	e76c      	b.n	800a9f6 <_printf_i+0xf6>
 800ab1c:	0800cb21 	.word	0x0800cb21
 800ab20:	0800cb32 	.word	0x0800cb32

0800ab24 <__sread>:
 800ab24:	b510      	push	{r4, lr}
 800ab26:	460c      	mov	r4, r1
 800ab28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2c:	f000 f8d4 	bl	800acd8 <_read_r>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	bfab      	itete	ge
 800ab34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab36:	89a3      	ldrhlt	r3, [r4, #12]
 800ab38:	181b      	addge	r3, r3, r0
 800ab3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab3e:	bfac      	ite	ge
 800ab40:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab42:	81a3      	strhlt	r3, [r4, #12]
 800ab44:	bd10      	pop	{r4, pc}

0800ab46 <__swrite>:
 800ab46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4a:	461f      	mov	r7, r3
 800ab4c:	898b      	ldrh	r3, [r1, #12]
 800ab4e:	05db      	lsls	r3, r3, #23
 800ab50:	4605      	mov	r5, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	4616      	mov	r6, r2
 800ab56:	d505      	bpl.n	800ab64 <__swrite+0x1e>
 800ab58:	2302      	movs	r3, #2
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab60:	f000 f868 	bl	800ac34 <_lseek_r>
 800ab64:	89a3      	ldrh	r3, [r4, #12]
 800ab66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab6e:	81a3      	strh	r3, [r4, #12]
 800ab70:	4632      	mov	r2, r6
 800ab72:	463b      	mov	r3, r7
 800ab74:	4628      	mov	r0, r5
 800ab76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab7a:	f000 b817 	b.w	800abac <_write_r>

0800ab7e <__sseek>:
 800ab7e:	b510      	push	{r4, lr}
 800ab80:	460c      	mov	r4, r1
 800ab82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab86:	f000 f855 	bl	800ac34 <_lseek_r>
 800ab8a:	1c43      	adds	r3, r0, #1
 800ab8c:	89a3      	ldrh	r3, [r4, #12]
 800ab8e:	bf15      	itete	ne
 800ab90:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab9a:	81a3      	strheq	r3, [r4, #12]
 800ab9c:	bf18      	it	ne
 800ab9e:	81a3      	strhne	r3, [r4, #12]
 800aba0:	bd10      	pop	{r4, pc}

0800aba2 <__sclose>:
 800aba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba6:	f000 b813 	b.w	800abd0 <_close_r>
	...

0800abac <_write_r>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	4c07      	ldr	r4, [pc, #28]	; (800abcc <_write_r+0x20>)
 800abb0:	4605      	mov	r5, r0
 800abb2:	4608      	mov	r0, r1
 800abb4:	4611      	mov	r1, r2
 800abb6:	2200      	movs	r2, #0
 800abb8:	6022      	str	r2, [r4, #0]
 800abba:	461a      	mov	r2, r3
 800abbc:	f7f7 fc7e 	bl	80024bc <_write>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d102      	bne.n	800abca <_write_r+0x1e>
 800abc4:	6823      	ldr	r3, [r4, #0]
 800abc6:	b103      	cbz	r3, 800abca <_write_r+0x1e>
 800abc8:	602b      	str	r3, [r5, #0]
 800abca:	bd38      	pop	{r3, r4, r5, pc}
 800abcc:	20000c8c 	.word	0x20000c8c

0800abd0 <_close_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4c06      	ldr	r4, [pc, #24]	; (800abec <_close_r+0x1c>)
 800abd4:	2300      	movs	r3, #0
 800abd6:	4605      	mov	r5, r0
 800abd8:	4608      	mov	r0, r1
 800abda:	6023      	str	r3, [r4, #0]
 800abdc:	f7f7 fc9a 	bl	8002514 <_close>
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	d102      	bne.n	800abea <_close_r+0x1a>
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	b103      	cbz	r3, 800abea <_close_r+0x1a>
 800abe8:	602b      	str	r3, [r5, #0]
 800abea:	bd38      	pop	{r3, r4, r5, pc}
 800abec:	20000c8c 	.word	0x20000c8c

0800abf0 <_fstat_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	4c07      	ldr	r4, [pc, #28]	; (800ac10 <_fstat_r+0x20>)
 800abf4:	2300      	movs	r3, #0
 800abf6:	4605      	mov	r5, r0
 800abf8:	4608      	mov	r0, r1
 800abfa:	4611      	mov	r1, r2
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	f7f7 fcd9 	bl	80025b4 <_fstat>
 800ac02:	1c43      	adds	r3, r0, #1
 800ac04:	d102      	bne.n	800ac0c <_fstat_r+0x1c>
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	b103      	cbz	r3, 800ac0c <_fstat_r+0x1c>
 800ac0a:	602b      	str	r3, [r5, #0]
 800ac0c:	bd38      	pop	{r3, r4, r5, pc}
 800ac0e:	bf00      	nop
 800ac10:	20000c8c 	.word	0x20000c8c

0800ac14 <_isatty_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4c06      	ldr	r4, [pc, #24]	; (800ac30 <_isatty_r+0x1c>)
 800ac18:	2300      	movs	r3, #0
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	4608      	mov	r0, r1
 800ac1e:	6023      	str	r3, [r4, #0]
 800ac20:	f7f7 fc35 	bl	800248e <_isatty>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	d102      	bne.n	800ac2e <_isatty_r+0x1a>
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	b103      	cbz	r3, 800ac2e <_isatty_r+0x1a>
 800ac2c:	602b      	str	r3, [r5, #0]
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	20000c8c 	.word	0x20000c8c

0800ac34 <_lseek_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4c07      	ldr	r4, [pc, #28]	; (800ac54 <_lseek_r+0x20>)
 800ac38:	4605      	mov	r5, r0
 800ac3a:	4608      	mov	r0, r1
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	2200      	movs	r2, #0
 800ac40:	6022      	str	r2, [r4, #0]
 800ac42:	461a      	mov	r2, r3
 800ac44:	f7f7 fc7d 	bl	8002542 <_lseek>
 800ac48:	1c43      	adds	r3, r0, #1
 800ac4a:	d102      	bne.n	800ac52 <_lseek_r+0x1e>
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	b103      	cbz	r3, 800ac52 <_lseek_r+0x1e>
 800ac50:	602b      	str	r3, [r5, #0]
 800ac52:	bd38      	pop	{r3, r4, r5, pc}
 800ac54:	20000c8c 	.word	0x20000c8c

0800ac58 <memmove>:
 800ac58:	4288      	cmp	r0, r1
 800ac5a:	b510      	push	{r4, lr}
 800ac5c:	eb01 0302 	add.w	r3, r1, r2
 800ac60:	d807      	bhi.n	800ac72 <memmove+0x1a>
 800ac62:	1e42      	subs	r2, r0, #1
 800ac64:	4299      	cmp	r1, r3
 800ac66:	d00a      	beq.n	800ac7e <memmove+0x26>
 800ac68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac6c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ac70:	e7f8      	b.n	800ac64 <memmove+0xc>
 800ac72:	4283      	cmp	r3, r0
 800ac74:	d9f5      	bls.n	800ac62 <memmove+0xa>
 800ac76:	1881      	adds	r1, r0, r2
 800ac78:	1ad2      	subs	r2, r2, r3
 800ac7a:	42d3      	cmn	r3, r2
 800ac7c:	d100      	bne.n	800ac80 <memmove+0x28>
 800ac7e:	bd10      	pop	{r4, pc}
 800ac80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac84:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ac88:	e7f7      	b.n	800ac7a <memmove+0x22>

0800ac8a <_realloc_r>:
 800ac8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8c:	4607      	mov	r7, r0
 800ac8e:	4614      	mov	r4, r2
 800ac90:	460e      	mov	r6, r1
 800ac92:	b921      	cbnz	r1, 800ac9e <_realloc_r+0x14>
 800ac94:	4611      	mov	r1, r2
 800ac96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac9a:	f7fe bf5b 	b.w	8009b54 <_malloc_r>
 800ac9e:	b922      	cbnz	r2, 800acaa <_realloc_r+0x20>
 800aca0:	f7fe ff0a 	bl	8009ab8 <_free_r>
 800aca4:	4625      	mov	r5, r4
 800aca6:	4628      	mov	r0, r5
 800aca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acaa:	f000 f827 	bl	800acfc <_malloc_usable_size_r>
 800acae:	42a0      	cmp	r0, r4
 800acb0:	d20f      	bcs.n	800acd2 <_realloc_r+0x48>
 800acb2:	4621      	mov	r1, r4
 800acb4:	4638      	mov	r0, r7
 800acb6:	f7fe ff4d 	bl	8009b54 <_malloc_r>
 800acba:	4605      	mov	r5, r0
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d0f2      	beq.n	800aca6 <_realloc_r+0x1c>
 800acc0:	4631      	mov	r1, r6
 800acc2:	4622      	mov	r2, r4
 800acc4:	f7fe fee4 	bl	8009a90 <memcpy>
 800acc8:	4631      	mov	r1, r6
 800acca:	4638      	mov	r0, r7
 800accc:	f7fe fef4 	bl	8009ab8 <_free_r>
 800acd0:	e7e9      	b.n	800aca6 <_realloc_r+0x1c>
 800acd2:	4635      	mov	r5, r6
 800acd4:	e7e7      	b.n	800aca6 <_realloc_r+0x1c>
	...

0800acd8 <_read_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4c07      	ldr	r4, [pc, #28]	; (800acf8 <_read_r+0x20>)
 800acdc:	4605      	mov	r5, r0
 800acde:	4608      	mov	r0, r1
 800ace0:	4611      	mov	r1, r2
 800ace2:	2200      	movs	r2, #0
 800ace4:	6022      	str	r2, [r4, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	f7f7 fc3c 	bl	8002564 <_read>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	d102      	bne.n	800acf6 <_read_r+0x1e>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	b103      	cbz	r3, 800acf6 <_read_r+0x1e>
 800acf4:	602b      	str	r3, [r5, #0]
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	20000c8c 	.word	0x20000c8c

0800acfc <_malloc_usable_size_r>:
 800acfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad00:	1f18      	subs	r0, r3, #4
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	bfbc      	itt	lt
 800ad06:	580b      	ldrlt	r3, [r1, r0]
 800ad08:	18c0      	addlt	r0, r0, r3
 800ad0a:	4770      	bx	lr

0800ad0c <log>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	ed2d 8b02 	vpush	{d8}
 800ad12:	b08a      	sub	sp, #40	; 0x28
 800ad14:	ec55 4b10 	vmov	r4, r5, d0
 800ad18:	f000 f9ea 	bl	800b0f0 <__ieee754_log>
 800ad1c:	4b36      	ldr	r3, [pc, #216]	; (800adf8 <log+0xec>)
 800ad1e:	eeb0 8a40 	vmov.f32	s16, s0
 800ad22:	eef0 8a60 	vmov.f32	s17, s1
 800ad26:	f993 6000 	ldrsb.w	r6, [r3]
 800ad2a:	1c73      	adds	r3, r6, #1
 800ad2c:	d05b      	beq.n	800ade6 <log+0xda>
 800ad2e:	4622      	mov	r2, r4
 800ad30:	462b      	mov	r3, r5
 800ad32:	4620      	mov	r0, r4
 800ad34:	4629      	mov	r1, r5
 800ad36:	f7f5 fef9 	bl	8000b2c <__aeabi_dcmpun>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d153      	bne.n	800ade6 <log+0xda>
 800ad3e:	2200      	movs	r2, #0
 800ad40:	2300      	movs	r3, #0
 800ad42:	4620      	mov	r0, r4
 800ad44:	4629      	mov	r1, r5
 800ad46:	f7f5 fee7 	bl	8000b18 <__aeabi_dcmpgt>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	d14b      	bne.n	800ade6 <log+0xda>
 800ad4e:	4b2b      	ldr	r3, [pc, #172]	; (800adfc <log+0xf0>)
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	9008      	str	r0, [sp, #32]
 800ad54:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ad58:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ad5c:	b9a6      	cbnz	r6, 800ad88 <log+0x7c>
 800ad5e:	4b28      	ldr	r3, [pc, #160]	; (800ae00 <log+0xf4>)
 800ad60:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ad64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad68:	4620      	mov	r0, r4
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4629      	mov	r1, r5
 800ad70:	f7f5 feaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad74:	bb40      	cbnz	r0, 800adc8 <log+0xbc>
 800ad76:	2301      	movs	r3, #1
 800ad78:	2e02      	cmp	r6, #2
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	d119      	bne.n	800adb2 <log+0xa6>
 800ad7e:	f7fe fe55 	bl	8009a2c <__errno>
 800ad82:	2321      	movs	r3, #33	; 0x21
 800ad84:	6003      	str	r3, [r0, #0]
 800ad86:	e019      	b.n	800adbc <log+0xb0>
 800ad88:	4b1e      	ldr	r3, [pc, #120]	; (800ae04 <log+0xf8>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad90:	4620      	mov	r0, r4
 800ad92:	2200      	movs	r2, #0
 800ad94:	2300      	movs	r3, #0
 800ad96:	4629      	mov	r1, r5
 800ad98:	f7f5 fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d0ea      	beq.n	800ad76 <log+0x6a>
 800ada0:	2302      	movs	r3, #2
 800ada2:	429e      	cmp	r6, r3
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	d111      	bne.n	800adcc <log+0xc0>
 800ada8:	f7fe fe40 	bl	8009a2c <__errno>
 800adac:	2322      	movs	r3, #34	; 0x22
 800adae:	6003      	str	r3, [r0, #0]
 800adb0:	e011      	b.n	800add6 <log+0xca>
 800adb2:	4668      	mov	r0, sp
 800adb4:	f001 f91f 	bl	800bff6 <matherr>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d0e0      	beq.n	800ad7e <log+0x72>
 800adbc:	4812      	ldr	r0, [pc, #72]	; (800ae08 <log+0xfc>)
 800adbe:	f001 f91f 	bl	800c000 <nan>
 800adc2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800adc6:	e006      	b.n	800add6 <log+0xca>
 800adc8:	2302      	movs	r3, #2
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	4668      	mov	r0, sp
 800adce:	f001 f912 	bl	800bff6 <matherr>
 800add2:	2800      	cmp	r0, #0
 800add4:	d0e8      	beq.n	800ada8 <log+0x9c>
 800add6:	9b08      	ldr	r3, [sp, #32]
 800add8:	b11b      	cbz	r3, 800ade2 <log+0xd6>
 800adda:	f7fe fe27 	bl	8009a2c <__errno>
 800adde:	9b08      	ldr	r3, [sp, #32]
 800ade0:	6003      	str	r3, [r0, #0]
 800ade2:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ade6:	eeb0 0a48 	vmov.f32	s0, s16
 800adea:	eef0 0a68 	vmov.f32	s1, s17
 800adee:	b00a      	add	sp, #40	; 0x28
 800adf0:	ecbd 8b02 	vpop	{d8}
 800adf4:	bd70      	pop	{r4, r5, r6, pc}
 800adf6:	bf00      	nop
 800adf8:	20000070 	.word	0x20000070
 800adfc:	0800cb43 	.word	0x0800cb43
 800ae00:	c7efffff 	.word	0xc7efffff
 800ae04:	fff00000 	.word	0xfff00000
 800ae08:	0800cb15 	.word	0x0800cb15

0800ae0c <pow>:
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	ed2d 8b04 	vpush	{d8-d9}
 800ae14:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b0e8 <pow+0x2dc>
 800ae18:	b08d      	sub	sp, #52	; 0x34
 800ae1a:	ec57 6b10 	vmov	r6, r7, d0
 800ae1e:	ec55 4b11 	vmov	r4, r5, d1
 800ae22:	f000 fb19 	bl	800b458 <__ieee754_pow>
 800ae26:	f999 3000 	ldrsb.w	r3, [r9]
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	eeb0 8a40 	vmov.f32	s16, s0
 800ae32:	eef0 8a60 	vmov.f32	s17, s1
 800ae36:	46c8      	mov	r8, r9
 800ae38:	d05f      	beq.n	800aefa <pow+0xee>
 800ae3a:	4622      	mov	r2, r4
 800ae3c:	462b      	mov	r3, r5
 800ae3e:	4620      	mov	r0, r4
 800ae40:	4629      	mov	r1, r5
 800ae42:	f7f5 fe73 	bl	8000b2c <__aeabi_dcmpun>
 800ae46:	4683      	mov	fp, r0
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d156      	bne.n	800aefa <pow+0xee>
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	463b      	mov	r3, r7
 800ae50:	4630      	mov	r0, r6
 800ae52:	4639      	mov	r1, r7
 800ae54:	f7f5 fe6a 	bl	8000b2c <__aeabi_dcmpun>
 800ae58:	9001      	str	r0, [sp, #4]
 800ae5a:	b1e8      	cbz	r0, 800ae98 <pow+0x8c>
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	2300      	movs	r3, #0
 800ae60:	4620      	mov	r0, r4
 800ae62:	4629      	mov	r1, r5
 800ae64:	f7f5 fe30 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d046      	beq.n	800aefa <pow+0xee>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	9302      	str	r3, [sp, #8]
 800ae70:	4b96      	ldr	r3, [pc, #600]	; (800b0cc <pow+0x2c0>)
 800ae72:	9303      	str	r3, [sp, #12]
 800ae74:	4b96      	ldr	r3, [pc, #600]	; (800b0d0 <pow+0x2c4>)
 800ae76:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ae80:	9b00      	ldr	r3, [sp, #0]
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ae88:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ae8c:	d033      	beq.n	800aef6 <pow+0xea>
 800ae8e:	a802      	add	r0, sp, #8
 800ae90:	f001 f8b1 	bl	800bff6 <matherr>
 800ae94:	bb48      	cbnz	r0, 800aeea <pow+0xde>
 800ae96:	e05d      	b.n	800af54 <pow+0x148>
 800ae98:	f04f 0a00 	mov.w	sl, #0
 800ae9c:	f04f 0b00 	mov.w	fp, #0
 800aea0:	4652      	mov	r2, sl
 800aea2:	465b      	mov	r3, fp
 800aea4:	4630      	mov	r0, r6
 800aea6:	4639      	mov	r1, r7
 800aea8:	f7f5 fe0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeac:	ec4b ab19 	vmov	d9, sl, fp
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	d054      	beq.n	800af5e <pow+0x152>
 800aeb4:	4652      	mov	r2, sl
 800aeb6:	465b      	mov	r3, fp
 800aeb8:	4620      	mov	r0, r4
 800aeba:	4629      	mov	r1, r5
 800aebc:	f7f5 fe04 	bl	8000ac8 <__aeabi_dcmpeq>
 800aec0:	4680      	mov	r8, r0
 800aec2:	b318      	cbz	r0, 800af0c <pow+0x100>
 800aec4:	2301      	movs	r3, #1
 800aec6:	9302      	str	r3, [sp, #8]
 800aec8:	4b80      	ldr	r3, [pc, #512]	; (800b0cc <pow+0x2c0>)
 800aeca:	9303      	str	r3, [sp, #12]
 800aecc:	9b01      	ldr	r3, [sp, #4]
 800aece:	930a      	str	r3, [sp, #40]	; 0x28
 800aed0:	9b00      	ldr	r3, [sp, #0]
 800aed2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800aed6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800aeda:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d0d5      	beq.n	800ae8e <pow+0x82>
 800aee2:	4b7b      	ldr	r3, [pc, #492]	; (800b0d0 <pow+0x2c4>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aeea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeec:	b11b      	cbz	r3, 800aef6 <pow+0xea>
 800aeee:	f7fe fd9d 	bl	8009a2c <__errno>
 800aef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef4:	6003      	str	r3, [r0, #0]
 800aef6:	ed9d 8b08 	vldr	d8, [sp, #32]
 800aefa:	eeb0 0a48 	vmov.f32	s0, s16
 800aefe:	eef0 0a68 	vmov.f32	s1, s17
 800af02:	b00d      	add	sp, #52	; 0x34
 800af04:	ecbd 8b04 	vpop	{d8-d9}
 800af08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0c:	ec45 4b10 	vmov	d0, r4, r5
 800af10:	f001 f869 	bl	800bfe6 <finite>
 800af14:	2800      	cmp	r0, #0
 800af16:	d0f0      	beq.n	800aefa <pow+0xee>
 800af18:	4652      	mov	r2, sl
 800af1a:	465b      	mov	r3, fp
 800af1c:	4620      	mov	r0, r4
 800af1e:	4629      	mov	r1, r5
 800af20:	f7f5 fddc 	bl	8000adc <__aeabi_dcmplt>
 800af24:	2800      	cmp	r0, #0
 800af26:	d0e8      	beq.n	800aefa <pow+0xee>
 800af28:	2301      	movs	r3, #1
 800af2a:	9302      	str	r3, [sp, #8]
 800af2c:	4b67      	ldr	r3, [pc, #412]	; (800b0cc <pow+0x2c0>)
 800af2e:	9303      	str	r3, [sp, #12]
 800af30:	f999 3000 	ldrsb.w	r3, [r9]
 800af34:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800af38:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800af3c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800af40:	b913      	cbnz	r3, 800af48 <pow+0x13c>
 800af42:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800af46:	e7a2      	b.n	800ae8e <pow+0x82>
 800af48:	4962      	ldr	r1, [pc, #392]	; (800b0d4 <pow+0x2c8>)
 800af4a:	2000      	movs	r0, #0
 800af4c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af50:	2b02      	cmp	r3, #2
 800af52:	d19c      	bne.n	800ae8e <pow+0x82>
 800af54:	f7fe fd6a 	bl	8009a2c <__errno>
 800af58:	2321      	movs	r3, #33	; 0x21
 800af5a:	6003      	str	r3, [r0, #0]
 800af5c:	e7c5      	b.n	800aeea <pow+0xde>
 800af5e:	eeb0 0a48 	vmov.f32	s0, s16
 800af62:	eef0 0a68 	vmov.f32	s1, s17
 800af66:	f001 f83e 	bl	800bfe6 <finite>
 800af6a:	9000      	str	r0, [sp, #0]
 800af6c:	2800      	cmp	r0, #0
 800af6e:	f040 8081 	bne.w	800b074 <pow+0x268>
 800af72:	ec47 6b10 	vmov	d0, r6, r7
 800af76:	f001 f836 	bl	800bfe6 <finite>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d07a      	beq.n	800b074 <pow+0x268>
 800af7e:	ec45 4b10 	vmov	d0, r4, r5
 800af82:	f001 f830 	bl	800bfe6 <finite>
 800af86:	2800      	cmp	r0, #0
 800af88:	d074      	beq.n	800b074 <pow+0x268>
 800af8a:	ec53 2b18 	vmov	r2, r3, d8
 800af8e:	ee18 0a10 	vmov	r0, s16
 800af92:	4619      	mov	r1, r3
 800af94:	f7f5 fdca 	bl	8000b2c <__aeabi_dcmpun>
 800af98:	f999 9000 	ldrsb.w	r9, [r9]
 800af9c:	4b4b      	ldr	r3, [pc, #300]	; (800b0cc <pow+0x2c0>)
 800af9e:	b1b0      	cbz	r0, 800afce <pow+0x1c2>
 800afa0:	2201      	movs	r2, #1
 800afa2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afa6:	9b00      	ldr	r3, [sp, #0]
 800afa8:	930a      	str	r3, [sp, #40]	; 0x28
 800afaa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800afae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800afb2:	f1b9 0f00 	cmp.w	r9, #0
 800afb6:	d0c4      	beq.n	800af42 <pow+0x136>
 800afb8:	4652      	mov	r2, sl
 800afba:	465b      	mov	r3, fp
 800afbc:	4650      	mov	r0, sl
 800afbe:	4659      	mov	r1, fp
 800afc0:	f7f5 fc44 	bl	800084c <__aeabi_ddiv>
 800afc4:	f1b9 0f02 	cmp.w	r9, #2
 800afc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afcc:	e7c1      	b.n	800af52 <pow+0x146>
 800afce:	2203      	movs	r2, #3
 800afd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afd4:	900a      	str	r0, [sp, #40]	; 0x28
 800afd6:	4629      	mov	r1, r5
 800afd8:	4620      	mov	r0, r4
 800afda:	2200      	movs	r2, #0
 800afdc:	4b3e      	ldr	r3, [pc, #248]	; (800b0d8 <pow+0x2cc>)
 800afde:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800afe2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800afe6:	f7f5 fb07 	bl	80005f8 <__aeabi_dmul>
 800afea:	4604      	mov	r4, r0
 800afec:	460d      	mov	r5, r1
 800afee:	f1b9 0f00 	cmp.w	r9, #0
 800aff2:	d124      	bne.n	800b03e <pow+0x232>
 800aff4:	4b39      	ldr	r3, [pc, #228]	; (800b0dc <pow+0x2d0>)
 800aff6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800affa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800affe:	4630      	mov	r0, r6
 800b000:	4652      	mov	r2, sl
 800b002:	465b      	mov	r3, fp
 800b004:	4639      	mov	r1, r7
 800b006:	f7f5 fd69 	bl	8000adc <__aeabi_dcmplt>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d056      	beq.n	800b0bc <pow+0x2b0>
 800b00e:	ec45 4b10 	vmov	d0, r4, r5
 800b012:	f000 fffd 	bl	800c010 <rint>
 800b016:	4622      	mov	r2, r4
 800b018:	462b      	mov	r3, r5
 800b01a:	ec51 0b10 	vmov	r0, r1, d0
 800b01e:	f7f5 fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 800b022:	b920      	cbnz	r0, 800b02e <pow+0x222>
 800b024:	4b2e      	ldr	r3, [pc, #184]	; (800b0e0 <pow+0x2d4>)
 800b026:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b02a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b02e:	f998 3000 	ldrsb.w	r3, [r8]
 800b032:	2b02      	cmp	r3, #2
 800b034:	d142      	bne.n	800b0bc <pow+0x2b0>
 800b036:	f7fe fcf9 	bl	8009a2c <__errno>
 800b03a:	2322      	movs	r3, #34	; 0x22
 800b03c:	e78d      	b.n	800af5a <pow+0x14e>
 800b03e:	4b29      	ldr	r3, [pc, #164]	; (800b0e4 <pow+0x2d8>)
 800b040:	2200      	movs	r2, #0
 800b042:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b046:	4630      	mov	r0, r6
 800b048:	4652      	mov	r2, sl
 800b04a:	465b      	mov	r3, fp
 800b04c:	4639      	mov	r1, r7
 800b04e:	f7f5 fd45 	bl	8000adc <__aeabi_dcmplt>
 800b052:	2800      	cmp	r0, #0
 800b054:	d0eb      	beq.n	800b02e <pow+0x222>
 800b056:	ec45 4b10 	vmov	d0, r4, r5
 800b05a:	f000 ffd9 	bl	800c010 <rint>
 800b05e:	4622      	mov	r2, r4
 800b060:	462b      	mov	r3, r5
 800b062:	ec51 0b10 	vmov	r0, r1, d0
 800b066:	f7f5 fd2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d1df      	bne.n	800b02e <pow+0x222>
 800b06e:	2200      	movs	r2, #0
 800b070:	4b18      	ldr	r3, [pc, #96]	; (800b0d4 <pow+0x2c8>)
 800b072:	e7da      	b.n	800b02a <pow+0x21e>
 800b074:	2200      	movs	r2, #0
 800b076:	2300      	movs	r3, #0
 800b078:	ec51 0b18 	vmov	r0, r1, d8
 800b07c:	f7f5 fd24 	bl	8000ac8 <__aeabi_dcmpeq>
 800b080:	2800      	cmp	r0, #0
 800b082:	f43f af3a 	beq.w	800aefa <pow+0xee>
 800b086:	ec47 6b10 	vmov	d0, r6, r7
 800b08a:	f000 ffac 	bl	800bfe6 <finite>
 800b08e:	2800      	cmp	r0, #0
 800b090:	f43f af33 	beq.w	800aefa <pow+0xee>
 800b094:	ec45 4b10 	vmov	d0, r4, r5
 800b098:	f000 ffa5 	bl	800bfe6 <finite>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	f43f af2c 	beq.w	800aefa <pow+0xee>
 800b0a2:	2304      	movs	r3, #4
 800b0a4:	9302      	str	r3, [sp, #8]
 800b0a6:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <pow+0x2c0>)
 800b0a8:	9303      	str	r3, [sp, #12]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	930a      	str	r3, [sp, #40]	; 0x28
 800b0ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b0b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b0b6:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b0ba:	e7b8      	b.n	800b02e <pow+0x222>
 800b0bc:	a802      	add	r0, sp, #8
 800b0be:	f000 ff9a 	bl	800bff6 <matherr>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	f47f af11 	bne.w	800aeea <pow+0xde>
 800b0c8:	e7b5      	b.n	800b036 <pow+0x22a>
 800b0ca:	bf00      	nop
 800b0cc:	0800cb47 	.word	0x0800cb47
 800b0d0:	3ff00000 	.word	0x3ff00000
 800b0d4:	fff00000 	.word	0xfff00000
 800b0d8:	3fe00000 	.word	0x3fe00000
 800b0dc:	47efffff 	.word	0x47efffff
 800b0e0:	c7efffff 	.word	0xc7efffff
 800b0e4:	7ff00000 	.word	0x7ff00000
 800b0e8:	20000070 	.word	0x20000070
 800b0ec:	00000000 	.word	0x00000000

0800b0f0 <__ieee754_log>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	ec51 0b10 	vmov	r0, r1, d0
 800b0f8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b0fc:	b087      	sub	sp, #28
 800b0fe:	460d      	mov	r5, r1
 800b100:	da27      	bge.n	800b152 <__ieee754_log+0x62>
 800b102:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b106:	4303      	orrs	r3, r0
 800b108:	ee10 2a10 	vmov	r2, s0
 800b10c:	d10a      	bne.n	800b124 <__ieee754_log+0x34>
 800b10e:	49cc      	ldr	r1, [pc, #816]	; (800b440 <__ieee754_log+0x350>)
 800b110:	2200      	movs	r2, #0
 800b112:	2300      	movs	r3, #0
 800b114:	2000      	movs	r0, #0
 800b116:	f7f5 fb99 	bl	800084c <__aeabi_ddiv>
 800b11a:	ec41 0b10 	vmov	d0, r0, r1
 800b11e:	b007      	add	sp, #28
 800b120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b124:	2900      	cmp	r1, #0
 800b126:	da05      	bge.n	800b134 <__ieee754_log+0x44>
 800b128:	460b      	mov	r3, r1
 800b12a:	f7f5 f8ad 	bl	8000288 <__aeabi_dsub>
 800b12e:	2200      	movs	r2, #0
 800b130:	2300      	movs	r3, #0
 800b132:	e7f0      	b.n	800b116 <__ieee754_log+0x26>
 800b134:	4bc3      	ldr	r3, [pc, #780]	; (800b444 <__ieee754_log+0x354>)
 800b136:	2200      	movs	r2, #0
 800b138:	f7f5 fa5e 	bl	80005f8 <__aeabi_dmul>
 800b13c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b140:	460d      	mov	r5, r1
 800b142:	4ac1      	ldr	r2, [pc, #772]	; (800b448 <__ieee754_log+0x358>)
 800b144:	4295      	cmp	r5, r2
 800b146:	dd06      	ble.n	800b156 <__ieee754_log+0x66>
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	f7f5 f89e 	bl	800028c <__adddf3>
 800b150:	e7e3      	b.n	800b11a <__ieee754_log+0x2a>
 800b152:	2300      	movs	r3, #0
 800b154:	e7f5      	b.n	800b142 <__ieee754_log+0x52>
 800b156:	152c      	asrs	r4, r5, #20
 800b158:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b15c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b160:	441c      	add	r4, r3
 800b162:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b166:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b16a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b16e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b172:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b176:	ea42 0105 	orr.w	r1, r2, r5
 800b17a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b17e:	2200      	movs	r2, #0
 800b180:	4bb2      	ldr	r3, [pc, #712]	; (800b44c <__ieee754_log+0x35c>)
 800b182:	f7f5 f881 	bl	8000288 <__aeabi_dsub>
 800b186:	1cab      	adds	r3, r5, #2
 800b188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	4682      	mov	sl, r0
 800b190:	468b      	mov	fp, r1
 800b192:	f04f 0200 	mov.w	r2, #0
 800b196:	dc53      	bgt.n	800b240 <__ieee754_log+0x150>
 800b198:	2300      	movs	r3, #0
 800b19a:	f7f5 fc95 	bl	8000ac8 <__aeabi_dcmpeq>
 800b19e:	b1d0      	cbz	r0, 800b1d6 <__ieee754_log+0xe6>
 800b1a0:	2c00      	cmp	r4, #0
 800b1a2:	f000 8120 	beq.w	800b3e6 <__ieee754_log+0x2f6>
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f7f5 f9bc 	bl	8000524 <__aeabi_i2d>
 800b1ac:	a390      	add	r3, pc, #576	; (adr r3, 800b3f0 <__ieee754_log+0x300>)
 800b1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	460f      	mov	r7, r1
 800b1b6:	f7f5 fa1f 	bl	80005f8 <__aeabi_dmul>
 800b1ba:	a38f      	add	r3, pc, #572	; (adr r3, 800b3f8 <__ieee754_log+0x308>)
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	460d      	mov	r5, r1
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	f7f5 fa16 	bl	80005f8 <__aeabi_dmul>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	e7ba      	b.n	800b14c <__ieee754_log+0x5c>
 800b1d6:	a38a      	add	r3, pc, #552	; (adr r3, 800b400 <__ieee754_log+0x310>)
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	4650      	mov	r0, sl
 800b1de:	4659      	mov	r1, fp
 800b1e0:	f7f5 fa0a 	bl	80005f8 <__aeabi_dmul>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	4999      	ldr	r1, [pc, #612]	; (800b450 <__ieee754_log+0x360>)
 800b1ec:	f7f5 f84c 	bl	8000288 <__aeabi_dsub>
 800b1f0:	4652      	mov	r2, sl
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	460f      	mov	r7, r1
 800b1f6:	465b      	mov	r3, fp
 800b1f8:	4650      	mov	r0, sl
 800b1fa:	4659      	mov	r1, fp
 800b1fc:	f7f5 f9fc 	bl	80005f8 <__aeabi_dmul>
 800b200:	4602      	mov	r2, r0
 800b202:	460b      	mov	r3, r1
 800b204:	4630      	mov	r0, r6
 800b206:	4639      	mov	r1, r7
 800b208:	f7f5 f9f6 	bl	80005f8 <__aeabi_dmul>
 800b20c:	4606      	mov	r6, r0
 800b20e:	460f      	mov	r7, r1
 800b210:	b914      	cbnz	r4, 800b218 <__ieee754_log+0x128>
 800b212:	4632      	mov	r2, r6
 800b214:	463b      	mov	r3, r7
 800b216:	e0a0      	b.n	800b35a <__ieee754_log+0x26a>
 800b218:	4620      	mov	r0, r4
 800b21a:	f7f5 f983 	bl	8000524 <__aeabi_i2d>
 800b21e:	a374      	add	r3, pc, #464	; (adr r3, 800b3f0 <__ieee754_log+0x300>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	4680      	mov	r8, r0
 800b226:	4689      	mov	r9, r1
 800b228:	f7f5 f9e6 	bl	80005f8 <__aeabi_dmul>
 800b22c:	a372      	add	r3, pc, #456	; (adr r3, 800b3f8 <__ieee754_log+0x308>)
 800b22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b232:	4604      	mov	r4, r0
 800b234:	460d      	mov	r5, r1
 800b236:	4640      	mov	r0, r8
 800b238:	4649      	mov	r1, r9
 800b23a:	f7f5 f9dd 	bl	80005f8 <__aeabi_dmul>
 800b23e:	e0a5      	b.n	800b38c <__ieee754_log+0x29c>
 800b240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b244:	f7f5 f822 	bl	800028c <__adddf3>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4650      	mov	r0, sl
 800b24e:	4659      	mov	r1, fp
 800b250:	f7f5 fafc 	bl	800084c <__aeabi_ddiv>
 800b254:	e9cd 0100 	strd	r0, r1, [sp]
 800b258:	4620      	mov	r0, r4
 800b25a:	f7f5 f963 	bl	8000524 <__aeabi_i2d>
 800b25e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b266:	4610      	mov	r0, r2
 800b268:	4619      	mov	r1, r3
 800b26a:	f7f5 f9c5 	bl	80005f8 <__aeabi_dmul>
 800b26e:	4602      	mov	r2, r0
 800b270:	460b      	mov	r3, r1
 800b272:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b276:	f7f5 f9bf 	bl	80005f8 <__aeabi_dmul>
 800b27a:	a363      	add	r3, pc, #396	; (adr r3, 800b408 <__ieee754_log+0x318>)
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	4680      	mov	r8, r0
 800b282:	4689      	mov	r9, r1
 800b284:	f7f5 f9b8 	bl	80005f8 <__aeabi_dmul>
 800b288:	a361      	add	r3, pc, #388	; (adr r3, 800b410 <__ieee754_log+0x320>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f4 fffd 	bl	800028c <__adddf3>
 800b292:	4642      	mov	r2, r8
 800b294:	464b      	mov	r3, r9
 800b296:	f7f5 f9af 	bl	80005f8 <__aeabi_dmul>
 800b29a:	a35f      	add	r3, pc, #380	; (adr r3, 800b418 <__ieee754_log+0x328>)
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	f7f4 fff4 	bl	800028c <__adddf3>
 800b2a4:	4642      	mov	r2, r8
 800b2a6:	464b      	mov	r3, r9
 800b2a8:	f7f5 f9a6 	bl	80005f8 <__aeabi_dmul>
 800b2ac:	a35c      	add	r3, pc, #368	; (adr r3, 800b420 <__ieee754_log+0x330>)
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f7f4 ffeb 	bl	800028c <__adddf3>
 800b2b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2ba:	f7f5 f99d 	bl	80005f8 <__aeabi_dmul>
 800b2be:	a35a      	add	r3, pc, #360	; (adr r3, 800b428 <__ieee754_log+0x338>)
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2c8:	4640      	mov	r0, r8
 800b2ca:	4649      	mov	r1, r9
 800b2cc:	f7f5 f994 	bl	80005f8 <__aeabi_dmul>
 800b2d0:	a357      	add	r3, pc, #348	; (adr r3, 800b430 <__ieee754_log+0x340>)
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	f7f4 ffd9 	bl	800028c <__adddf3>
 800b2da:	4642      	mov	r2, r8
 800b2dc:	464b      	mov	r3, r9
 800b2de:	f7f5 f98b 	bl	80005f8 <__aeabi_dmul>
 800b2e2:	a355      	add	r3, pc, #340	; (adr r3, 800b438 <__ieee754_log+0x348>)
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	f7f4 ffd0 	bl	800028c <__adddf3>
 800b2ec:	4642      	mov	r2, r8
 800b2ee:	464b      	mov	r3, r9
 800b2f0:	f7f5 f982 	bl	80005f8 <__aeabi_dmul>
 800b2f4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b304:	f7f4 ffc2 	bl	800028c <__adddf3>
 800b308:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800b30c:	3551      	adds	r5, #81	; 0x51
 800b30e:	4335      	orrs	r5, r6
 800b310:	2d00      	cmp	r5, #0
 800b312:	4680      	mov	r8, r0
 800b314:	4689      	mov	r9, r1
 800b316:	dd48      	ble.n	800b3aa <__ieee754_log+0x2ba>
 800b318:	2200      	movs	r2, #0
 800b31a:	4b4d      	ldr	r3, [pc, #308]	; (800b450 <__ieee754_log+0x360>)
 800b31c:	4650      	mov	r0, sl
 800b31e:	4659      	mov	r1, fp
 800b320:	f7f5 f96a 	bl	80005f8 <__aeabi_dmul>
 800b324:	4652      	mov	r2, sl
 800b326:	465b      	mov	r3, fp
 800b328:	f7f5 f966 	bl	80005f8 <__aeabi_dmul>
 800b32c:	4602      	mov	r2, r0
 800b32e:	460b      	mov	r3, r1
 800b330:	4606      	mov	r6, r0
 800b332:	460f      	mov	r7, r1
 800b334:	4640      	mov	r0, r8
 800b336:	4649      	mov	r1, r9
 800b338:	f7f4 ffa8 	bl	800028c <__adddf3>
 800b33c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b340:	f7f5 f95a 	bl	80005f8 <__aeabi_dmul>
 800b344:	4680      	mov	r8, r0
 800b346:	4689      	mov	r9, r1
 800b348:	b964      	cbnz	r4, 800b364 <__ieee754_log+0x274>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	4630      	mov	r0, r6
 800b350:	4639      	mov	r1, r7
 800b352:	f7f4 ff99 	bl	8000288 <__aeabi_dsub>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4650      	mov	r0, sl
 800b35c:	4659      	mov	r1, fp
 800b35e:	f7f4 ff93 	bl	8000288 <__aeabi_dsub>
 800b362:	e6da      	b.n	800b11a <__ieee754_log+0x2a>
 800b364:	a322      	add	r3, pc, #136	; (adr r3, 800b3f0 <__ieee754_log+0x300>)
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b36e:	f7f5 f943 	bl	80005f8 <__aeabi_dmul>
 800b372:	a321      	add	r3, pc, #132	; (adr r3, 800b3f8 <__ieee754_log+0x308>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	4604      	mov	r4, r0
 800b37a:	460d      	mov	r5, r1
 800b37c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b380:	f7f5 f93a 	bl	80005f8 <__aeabi_dmul>
 800b384:	4642      	mov	r2, r8
 800b386:	464b      	mov	r3, r9
 800b388:	f7f4 ff80 	bl	800028c <__adddf3>
 800b38c:	4602      	mov	r2, r0
 800b38e:	460b      	mov	r3, r1
 800b390:	4630      	mov	r0, r6
 800b392:	4639      	mov	r1, r7
 800b394:	f7f4 ff78 	bl	8000288 <__aeabi_dsub>
 800b398:	4652      	mov	r2, sl
 800b39a:	465b      	mov	r3, fp
 800b39c:	f7f4 ff74 	bl	8000288 <__aeabi_dsub>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	4629      	mov	r1, r5
 800b3a8:	e7d9      	b.n	800b35e <__ieee754_log+0x26e>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4650      	mov	r0, sl
 800b3b0:	4659      	mov	r1, fp
 800b3b2:	f7f4 ff69 	bl	8000288 <__aeabi_dsub>
 800b3b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ba:	f7f5 f91d 	bl	80005f8 <__aeabi_dmul>
 800b3be:	4606      	mov	r6, r0
 800b3c0:	460f      	mov	r7, r1
 800b3c2:	2c00      	cmp	r4, #0
 800b3c4:	f43f af25 	beq.w	800b212 <__ieee754_log+0x122>
 800b3c8:	a309      	add	r3, pc, #36	; (adr r3, 800b3f0 <__ieee754_log+0x300>)
 800b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3d2:	f7f5 f911 	bl	80005f8 <__aeabi_dmul>
 800b3d6:	a308      	add	r3, pc, #32	; (adr r3, 800b3f8 <__ieee754_log+0x308>)
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	4604      	mov	r4, r0
 800b3de:	460d      	mov	r5, r1
 800b3e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3e4:	e729      	b.n	800b23a <__ieee754_log+0x14a>
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	e696      	b.n	800b11a <__ieee754_log+0x2a>
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	fee00000 	.word	0xfee00000
 800b3f4:	3fe62e42 	.word	0x3fe62e42
 800b3f8:	35793c76 	.word	0x35793c76
 800b3fc:	3dea39ef 	.word	0x3dea39ef
 800b400:	55555555 	.word	0x55555555
 800b404:	3fd55555 	.word	0x3fd55555
 800b408:	df3e5244 	.word	0xdf3e5244
 800b40c:	3fc2f112 	.word	0x3fc2f112
 800b410:	96cb03de 	.word	0x96cb03de
 800b414:	3fc74664 	.word	0x3fc74664
 800b418:	94229359 	.word	0x94229359
 800b41c:	3fd24924 	.word	0x3fd24924
 800b420:	55555593 	.word	0x55555593
 800b424:	3fe55555 	.word	0x3fe55555
 800b428:	d078c69f 	.word	0xd078c69f
 800b42c:	3fc39a09 	.word	0x3fc39a09
 800b430:	1d8e78af 	.word	0x1d8e78af
 800b434:	3fcc71c5 	.word	0x3fcc71c5
 800b438:	9997fa04 	.word	0x9997fa04
 800b43c:	3fd99999 	.word	0x3fd99999
 800b440:	c3500000 	.word	0xc3500000
 800b444:	43500000 	.word	0x43500000
 800b448:	7fefffff 	.word	0x7fefffff
 800b44c:	3ff00000 	.word	0x3ff00000
 800b450:	3fe00000 	.word	0x3fe00000
 800b454:	00000000 	.word	0x00000000

0800b458 <__ieee754_pow>:
 800b458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	b091      	sub	sp, #68	; 0x44
 800b45e:	ed8d 1b00 	vstr	d1, [sp]
 800b462:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b466:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b46a:	ea58 0302 	orrs.w	r3, r8, r2
 800b46e:	ec57 6b10 	vmov	r6, r7, d0
 800b472:	f000 84be 	beq.w	800bdf2 <__ieee754_pow+0x99a>
 800b476:	4b7a      	ldr	r3, [pc, #488]	; (800b660 <__ieee754_pow+0x208>)
 800b478:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b47c:	429c      	cmp	r4, r3
 800b47e:	463d      	mov	r5, r7
 800b480:	ee10 aa10 	vmov	sl, s0
 800b484:	dc09      	bgt.n	800b49a <__ieee754_pow+0x42>
 800b486:	d103      	bne.n	800b490 <__ieee754_pow+0x38>
 800b488:	b93e      	cbnz	r6, 800b49a <__ieee754_pow+0x42>
 800b48a:	45a0      	cmp	r8, r4
 800b48c:	dc0d      	bgt.n	800b4aa <__ieee754_pow+0x52>
 800b48e:	e001      	b.n	800b494 <__ieee754_pow+0x3c>
 800b490:	4598      	cmp	r8, r3
 800b492:	dc02      	bgt.n	800b49a <__ieee754_pow+0x42>
 800b494:	4598      	cmp	r8, r3
 800b496:	d10e      	bne.n	800b4b6 <__ieee754_pow+0x5e>
 800b498:	b16a      	cbz	r2, 800b4b6 <__ieee754_pow+0x5e>
 800b49a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b49e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b4a2:	ea54 030a 	orrs.w	r3, r4, sl
 800b4a6:	f000 84a4 	beq.w	800bdf2 <__ieee754_pow+0x99a>
 800b4aa:	486e      	ldr	r0, [pc, #440]	; (800b664 <__ieee754_pow+0x20c>)
 800b4ac:	b011      	add	sp, #68	; 0x44
 800b4ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b2:	f000 bda5 	b.w	800c000 <nan>
 800b4b6:	2d00      	cmp	r5, #0
 800b4b8:	da53      	bge.n	800b562 <__ieee754_pow+0x10a>
 800b4ba:	4b6b      	ldr	r3, [pc, #428]	; (800b668 <__ieee754_pow+0x210>)
 800b4bc:	4598      	cmp	r8, r3
 800b4be:	dc4d      	bgt.n	800b55c <__ieee754_pow+0x104>
 800b4c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b4c4:	4598      	cmp	r8, r3
 800b4c6:	dd4c      	ble.n	800b562 <__ieee754_pow+0x10a>
 800b4c8:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b4cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b4d0:	2b14      	cmp	r3, #20
 800b4d2:	dd26      	ble.n	800b522 <__ieee754_pow+0xca>
 800b4d4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b4d8:	fa22 f103 	lsr.w	r1, r2, r3
 800b4dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d13e      	bne.n	800b562 <__ieee754_pow+0x10a>
 800b4e4:	f001 0101 	and.w	r1, r1, #1
 800b4e8:	f1c1 0b02 	rsb	fp, r1, #2
 800b4ec:	2a00      	cmp	r2, #0
 800b4ee:	d15b      	bne.n	800b5a8 <__ieee754_pow+0x150>
 800b4f0:	4b5b      	ldr	r3, [pc, #364]	; (800b660 <__ieee754_pow+0x208>)
 800b4f2:	4598      	cmp	r8, r3
 800b4f4:	d124      	bne.n	800b540 <__ieee754_pow+0xe8>
 800b4f6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b4fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b4fe:	ea53 030a 	orrs.w	r3, r3, sl
 800b502:	f000 8476 	beq.w	800bdf2 <__ieee754_pow+0x99a>
 800b506:	4b59      	ldr	r3, [pc, #356]	; (800b66c <__ieee754_pow+0x214>)
 800b508:	429c      	cmp	r4, r3
 800b50a:	dd2d      	ble.n	800b568 <__ieee754_pow+0x110>
 800b50c:	f1b9 0f00 	cmp.w	r9, #0
 800b510:	f280 8473 	bge.w	800bdfa <__ieee754_pow+0x9a2>
 800b514:	2000      	movs	r0, #0
 800b516:	2100      	movs	r1, #0
 800b518:	ec41 0b10 	vmov	d0, r0, r1
 800b51c:	b011      	add	sp, #68	; 0x44
 800b51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b522:	2a00      	cmp	r2, #0
 800b524:	d13e      	bne.n	800b5a4 <__ieee754_pow+0x14c>
 800b526:	f1c3 0314 	rsb	r3, r3, #20
 800b52a:	fa48 f103 	asr.w	r1, r8, r3
 800b52e:	fa01 f303 	lsl.w	r3, r1, r3
 800b532:	4543      	cmp	r3, r8
 800b534:	f040 8469 	bne.w	800be0a <__ieee754_pow+0x9b2>
 800b538:	f001 0101 	and.w	r1, r1, #1
 800b53c:	f1c1 0b02 	rsb	fp, r1, #2
 800b540:	4b4b      	ldr	r3, [pc, #300]	; (800b670 <__ieee754_pow+0x218>)
 800b542:	4598      	cmp	r8, r3
 800b544:	d118      	bne.n	800b578 <__ieee754_pow+0x120>
 800b546:	f1b9 0f00 	cmp.w	r9, #0
 800b54a:	f280 845a 	bge.w	800be02 <__ieee754_pow+0x9aa>
 800b54e:	4948      	ldr	r1, [pc, #288]	; (800b670 <__ieee754_pow+0x218>)
 800b550:	4632      	mov	r2, r6
 800b552:	463b      	mov	r3, r7
 800b554:	2000      	movs	r0, #0
 800b556:	f7f5 f979 	bl	800084c <__aeabi_ddiv>
 800b55a:	e7dd      	b.n	800b518 <__ieee754_pow+0xc0>
 800b55c:	f04f 0b02 	mov.w	fp, #2
 800b560:	e7c4      	b.n	800b4ec <__ieee754_pow+0x94>
 800b562:	f04f 0b00 	mov.w	fp, #0
 800b566:	e7c1      	b.n	800b4ec <__ieee754_pow+0x94>
 800b568:	f1b9 0f00 	cmp.w	r9, #0
 800b56c:	dad2      	bge.n	800b514 <__ieee754_pow+0xbc>
 800b56e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b572:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b576:	e7cf      	b.n	800b518 <__ieee754_pow+0xc0>
 800b578:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b57c:	d106      	bne.n	800b58c <__ieee754_pow+0x134>
 800b57e:	4632      	mov	r2, r6
 800b580:	463b      	mov	r3, r7
 800b582:	4610      	mov	r0, r2
 800b584:	4619      	mov	r1, r3
 800b586:	f7f5 f837 	bl	80005f8 <__aeabi_dmul>
 800b58a:	e7c5      	b.n	800b518 <__ieee754_pow+0xc0>
 800b58c:	4b39      	ldr	r3, [pc, #228]	; (800b674 <__ieee754_pow+0x21c>)
 800b58e:	4599      	cmp	r9, r3
 800b590:	d10a      	bne.n	800b5a8 <__ieee754_pow+0x150>
 800b592:	2d00      	cmp	r5, #0
 800b594:	db08      	blt.n	800b5a8 <__ieee754_pow+0x150>
 800b596:	ec47 6b10 	vmov	d0, r6, r7
 800b59a:	b011      	add	sp, #68	; 0x44
 800b59c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a0:	f000 bc68 	b.w	800be74 <__ieee754_sqrt>
 800b5a4:	f04f 0b00 	mov.w	fp, #0
 800b5a8:	ec47 6b10 	vmov	d0, r6, r7
 800b5ac:	f000 fd12 	bl	800bfd4 <fabs>
 800b5b0:	ec51 0b10 	vmov	r0, r1, d0
 800b5b4:	f1ba 0f00 	cmp.w	sl, #0
 800b5b8:	d127      	bne.n	800b60a <__ieee754_pow+0x1b2>
 800b5ba:	b124      	cbz	r4, 800b5c6 <__ieee754_pow+0x16e>
 800b5bc:	4b2c      	ldr	r3, [pc, #176]	; (800b670 <__ieee754_pow+0x218>)
 800b5be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d121      	bne.n	800b60a <__ieee754_pow+0x1b2>
 800b5c6:	f1b9 0f00 	cmp.w	r9, #0
 800b5ca:	da05      	bge.n	800b5d8 <__ieee754_pow+0x180>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	4927      	ldr	r1, [pc, #156]	; (800b670 <__ieee754_pow+0x218>)
 800b5d4:	f7f5 f93a 	bl	800084c <__aeabi_ddiv>
 800b5d8:	2d00      	cmp	r5, #0
 800b5da:	da9d      	bge.n	800b518 <__ieee754_pow+0xc0>
 800b5dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b5e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b5e4:	ea54 030b 	orrs.w	r3, r4, fp
 800b5e8:	d108      	bne.n	800b5fc <__ieee754_pow+0x1a4>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4610      	mov	r0, r2
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	f7f4 fe49 	bl	8000288 <__aeabi_dsub>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	e7ac      	b.n	800b556 <__ieee754_pow+0xfe>
 800b5fc:	f1bb 0f01 	cmp.w	fp, #1
 800b600:	d18a      	bne.n	800b518 <__ieee754_pow+0xc0>
 800b602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b606:	4619      	mov	r1, r3
 800b608:	e786      	b.n	800b518 <__ieee754_pow+0xc0>
 800b60a:	0fed      	lsrs	r5, r5, #31
 800b60c:	1e6b      	subs	r3, r5, #1
 800b60e:	930d      	str	r3, [sp, #52]	; 0x34
 800b610:	ea5b 0303 	orrs.w	r3, fp, r3
 800b614:	d102      	bne.n	800b61c <__ieee754_pow+0x1c4>
 800b616:	4632      	mov	r2, r6
 800b618:	463b      	mov	r3, r7
 800b61a:	e7e8      	b.n	800b5ee <__ieee754_pow+0x196>
 800b61c:	4b16      	ldr	r3, [pc, #88]	; (800b678 <__ieee754_pow+0x220>)
 800b61e:	4598      	cmp	r8, r3
 800b620:	f340 80fe 	ble.w	800b820 <__ieee754_pow+0x3c8>
 800b624:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b628:	4598      	cmp	r8, r3
 800b62a:	dd0a      	ble.n	800b642 <__ieee754_pow+0x1ea>
 800b62c:	4b0f      	ldr	r3, [pc, #60]	; (800b66c <__ieee754_pow+0x214>)
 800b62e:	429c      	cmp	r4, r3
 800b630:	dc0d      	bgt.n	800b64e <__ieee754_pow+0x1f6>
 800b632:	f1b9 0f00 	cmp.w	r9, #0
 800b636:	f6bf af6d 	bge.w	800b514 <__ieee754_pow+0xbc>
 800b63a:	a307      	add	r3, pc, #28	; (adr r3, 800b658 <__ieee754_pow+0x200>)
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	e79f      	b.n	800b582 <__ieee754_pow+0x12a>
 800b642:	4b0e      	ldr	r3, [pc, #56]	; (800b67c <__ieee754_pow+0x224>)
 800b644:	429c      	cmp	r4, r3
 800b646:	ddf4      	ble.n	800b632 <__ieee754_pow+0x1da>
 800b648:	4b09      	ldr	r3, [pc, #36]	; (800b670 <__ieee754_pow+0x218>)
 800b64a:	429c      	cmp	r4, r3
 800b64c:	dd18      	ble.n	800b680 <__ieee754_pow+0x228>
 800b64e:	f1b9 0f00 	cmp.w	r9, #0
 800b652:	dcf2      	bgt.n	800b63a <__ieee754_pow+0x1e2>
 800b654:	e75e      	b.n	800b514 <__ieee754_pow+0xbc>
 800b656:	bf00      	nop
 800b658:	8800759c 	.word	0x8800759c
 800b65c:	7e37e43c 	.word	0x7e37e43c
 800b660:	7ff00000 	.word	0x7ff00000
 800b664:	0800cb15 	.word	0x0800cb15
 800b668:	433fffff 	.word	0x433fffff
 800b66c:	3fefffff 	.word	0x3fefffff
 800b670:	3ff00000 	.word	0x3ff00000
 800b674:	3fe00000 	.word	0x3fe00000
 800b678:	41e00000 	.word	0x41e00000
 800b67c:	3feffffe 	.word	0x3feffffe
 800b680:	2200      	movs	r2, #0
 800b682:	4b63      	ldr	r3, [pc, #396]	; (800b810 <__ieee754_pow+0x3b8>)
 800b684:	f7f4 fe00 	bl	8000288 <__aeabi_dsub>
 800b688:	a355      	add	r3, pc, #340	; (adr r3, 800b7e0 <__ieee754_pow+0x388>)
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	4604      	mov	r4, r0
 800b690:	460d      	mov	r5, r1
 800b692:	f7f4 ffb1 	bl	80005f8 <__aeabi_dmul>
 800b696:	a354      	add	r3, pc, #336	; (adr r3, 800b7e8 <__ieee754_pow+0x390>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	4606      	mov	r6, r0
 800b69e:	460f      	mov	r7, r1
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	f7f4 ffa8 	bl	80005f8 <__aeabi_dmul>
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6ae:	4b59      	ldr	r3, [pc, #356]	; (800b814 <__ieee754_pow+0x3bc>)
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	4629      	mov	r1, r5
 800b6b4:	f7f4 ffa0 	bl	80005f8 <__aeabi_dmul>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	a14c      	add	r1, pc, #304	; (adr r1, 800b7f0 <__ieee754_pow+0x398>)
 800b6be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6c2:	f7f4 fde1 	bl	8000288 <__aeabi_dsub>
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	462b      	mov	r3, r5
 800b6ca:	f7f4 ff95 	bl	80005f8 <__aeabi_dmul>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	4950      	ldr	r1, [pc, #320]	; (800b818 <__ieee754_pow+0x3c0>)
 800b6d6:	f7f4 fdd7 	bl	8000288 <__aeabi_dsub>
 800b6da:	4622      	mov	r2, r4
 800b6dc:	462b      	mov	r3, r5
 800b6de:	4680      	mov	r8, r0
 800b6e0:	4689      	mov	r9, r1
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	f7f4 ff87 	bl	80005f8 <__aeabi_dmul>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4640      	mov	r0, r8
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	f7f4 ff81 	bl	80005f8 <__aeabi_dmul>
 800b6f6:	a340      	add	r3, pc, #256	; (adr r3, 800b7f8 <__ieee754_pow+0x3a0>)
 800b6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fc:	f7f4 ff7c 	bl	80005f8 <__aeabi_dmul>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b708:	f7f4 fdbe 	bl	8000288 <__aeabi_dsub>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4604      	mov	r4, r0
 800b712:	460d      	mov	r5, r1
 800b714:	4630      	mov	r0, r6
 800b716:	4639      	mov	r1, r7
 800b718:	f7f4 fdb8 	bl	800028c <__adddf3>
 800b71c:	2000      	movs	r0, #0
 800b71e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b722:	4632      	mov	r2, r6
 800b724:	463b      	mov	r3, r7
 800b726:	f7f4 fdaf 	bl	8000288 <__aeabi_dsub>
 800b72a:	4602      	mov	r2, r0
 800b72c:	460b      	mov	r3, r1
 800b72e:	4620      	mov	r0, r4
 800b730:	4629      	mov	r1, r5
 800b732:	f7f4 fda9 	bl	8000288 <__aeabi_dsub>
 800b736:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b738:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b73c:	4313      	orrs	r3, r2
 800b73e:	4606      	mov	r6, r0
 800b740:	460f      	mov	r7, r1
 800b742:	f040 81eb 	bne.w	800bb1c <__ieee754_pow+0x6c4>
 800b746:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b800 <__ieee754_pow+0x3a8>
 800b74a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b74e:	2400      	movs	r4, #0
 800b750:	4622      	mov	r2, r4
 800b752:	462b      	mov	r3, r5
 800b754:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b758:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b75c:	f7f4 fd94 	bl	8000288 <__aeabi_dsub>
 800b760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b764:	f7f4 ff48 	bl	80005f8 <__aeabi_dmul>
 800b768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b76c:	4680      	mov	r8, r0
 800b76e:	4689      	mov	r9, r1
 800b770:	4630      	mov	r0, r6
 800b772:	4639      	mov	r1, r7
 800b774:	f7f4 ff40 	bl	80005f8 <__aeabi_dmul>
 800b778:	4602      	mov	r2, r0
 800b77a:	460b      	mov	r3, r1
 800b77c:	4640      	mov	r0, r8
 800b77e:	4649      	mov	r1, r9
 800b780:	f7f4 fd84 	bl	800028c <__adddf3>
 800b784:	4622      	mov	r2, r4
 800b786:	462b      	mov	r3, r5
 800b788:	4680      	mov	r8, r0
 800b78a:	4689      	mov	r9, r1
 800b78c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b790:	f7f4 ff32 	bl	80005f8 <__aeabi_dmul>
 800b794:	460b      	mov	r3, r1
 800b796:	4604      	mov	r4, r0
 800b798:	460d      	mov	r5, r1
 800b79a:	4602      	mov	r2, r0
 800b79c:	4649      	mov	r1, r9
 800b79e:	4640      	mov	r0, r8
 800b7a0:	e9cd 4500 	strd	r4, r5, [sp]
 800b7a4:	f7f4 fd72 	bl	800028c <__adddf3>
 800b7a8:	4b1c      	ldr	r3, [pc, #112]	; (800b81c <__ieee754_pow+0x3c4>)
 800b7aa:	4299      	cmp	r1, r3
 800b7ac:	4606      	mov	r6, r0
 800b7ae:	460f      	mov	r7, r1
 800b7b0:	468b      	mov	fp, r1
 800b7b2:	f340 82f7 	ble.w	800bda4 <__ieee754_pow+0x94c>
 800b7b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b7ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b7be:	4303      	orrs	r3, r0
 800b7c0:	f000 81ea 	beq.w	800bb98 <__ieee754_pow+0x740>
 800b7c4:	a310      	add	r3, pc, #64	; (adr r3, 800b808 <__ieee754_pow+0x3b0>)
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7ce:	f7f4 ff13 	bl	80005f8 <__aeabi_dmul>
 800b7d2:	a30d      	add	r3, pc, #52	; (adr r3, 800b808 <__ieee754_pow+0x3b0>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	e6d5      	b.n	800b586 <__ieee754_pow+0x12e>
 800b7da:	bf00      	nop
 800b7dc:	f3af 8000 	nop.w
 800b7e0:	60000000 	.word	0x60000000
 800b7e4:	3ff71547 	.word	0x3ff71547
 800b7e8:	f85ddf44 	.word	0xf85ddf44
 800b7ec:	3e54ae0b 	.word	0x3e54ae0b
 800b7f0:	55555555 	.word	0x55555555
 800b7f4:	3fd55555 	.word	0x3fd55555
 800b7f8:	652b82fe 	.word	0x652b82fe
 800b7fc:	3ff71547 	.word	0x3ff71547
 800b800:	00000000 	.word	0x00000000
 800b804:	bff00000 	.word	0xbff00000
 800b808:	8800759c 	.word	0x8800759c
 800b80c:	7e37e43c 	.word	0x7e37e43c
 800b810:	3ff00000 	.word	0x3ff00000
 800b814:	3fd00000 	.word	0x3fd00000
 800b818:	3fe00000 	.word	0x3fe00000
 800b81c:	408fffff 	.word	0x408fffff
 800b820:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b824:	f04f 0200 	mov.w	r2, #0
 800b828:	da05      	bge.n	800b836 <__ieee754_pow+0x3de>
 800b82a:	4bd3      	ldr	r3, [pc, #844]	; (800bb78 <__ieee754_pow+0x720>)
 800b82c:	f7f4 fee4 	bl	80005f8 <__aeabi_dmul>
 800b830:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b834:	460c      	mov	r4, r1
 800b836:	1523      	asrs	r3, r4, #20
 800b838:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b83c:	4413      	add	r3, r2
 800b83e:	9309      	str	r3, [sp, #36]	; 0x24
 800b840:	4bce      	ldr	r3, [pc, #824]	; (800bb7c <__ieee754_pow+0x724>)
 800b842:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b846:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b84a:	429c      	cmp	r4, r3
 800b84c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b850:	dd08      	ble.n	800b864 <__ieee754_pow+0x40c>
 800b852:	4bcb      	ldr	r3, [pc, #812]	; (800bb80 <__ieee754_pow+0x728>)
 800b854:	429c      	cmp	r4, r3
 800b856:	f340 815e 	ble.w	800bb16 <__ieee754_pow+0x6be>
 800b85a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b85c:	3301      	adds	r3, #1
 800b85e:	9309      	str	r3, [sp, #36]	; 0x24
 800b860:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b864:	f04f 0a00 	mov.w	sl, #0
 800b868:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b86c:	930c      	str	r3, [sp, #48]	; 0x30
 800b86e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b870:	4bc4      	ldr	r3, [pc, #784]	; (800bb84 <__ieee754_pow+0x72c>)
 800b872:	4413      	add	r3, r2
 800b874:	ed93 7b00 	vldr	d7, [r3]
 800b878:	4629      	mov	r1, r5
 800b87a:	ec53 2b17 	vmov	r2, r3, d7
 800b87e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b882:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b886:	f7f4 fcff 	bl	8000288 <__aeabi_dsub>
 800b88a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b88e:	4606      	mov	r6, r0
 800b890:	460f      	mov	r7, r1
 800b892:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b896:	f7f4 fcf9 	bl	800028c <__adddf3>
 800b89a:	4602      	mov	r2, r0
 800b89c:	460b      	mov	r3, r1
 800b89e:	2000      	movs	r0, #0
 800b8a0:	49b9      	ldr	r1, [pc, #740]	; (800bb88 <__ieee754_pow+0x730>)
 800b8a2:	f7f4 ffd3 	bl	800084c <__aeabi_ddiv>
 800b8a6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	4639      	mov	r1, r7
 800b8b2:	f7f4 fea1 	bl	80005f8 <__aeabi_dmul>
 800b8b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8ba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b8be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	9302      	str	r3, [sp, #8]
 800b8c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b8ca:	106d      	asrs	r5, r5, #1
 800b8cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b8d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b8da:	4640      	mov	r0, r8
 800b8dc:	4649      	mov	r1, r9
 800b8de:	4614      	mov	r4, r2
 800b8e0:	461d      	mov	r5, r3
 800b8e2:	f7f4 fe89 	bl	80005f8 <__aeabi_dmul>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	4639      	mov	r1, r7
 800b8ee:	f7f4 fccb 	bl	8000288 <__aeabi_dsub>
 800b8f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	460f      	mov	r7, r1
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	f7f4 fcc3 	bl	8000288 <__aeabi_dsub>
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b90a:	f7f4 fcbd 	bl	8000288 <__aeabi_dsub>
 800b90e:	4642      	mov	r2, r8
 800b910:	464b      	mov	r3, r9
 800b912:	f7f4 fe71 	bl	80005f8 <__aeabi_dmul>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4630      	mov	r0, r6
 800b91c:	4639      	mov	r1, r7
 800b91e:	f7f4 fcb3 	bl	8000288 <__aeabi_dsub>
 800b922:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b926:	f7f4 fe67 	bl	80005f8 <__aeabi_dmul>
 800b92a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b92e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b932:	4610      	mov	r0, r2
 800b934:	4619      	mov	r1, r3
 800b936:	f7f4 fe5f 	bl	80005f8 <__aeabi_dmul>
 800b93a:	a37b      	add	r3, pc, #492	; (adr r3, 800bb28 <__ieee754_pow+0x6d0>)
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	4604      	mov	r4, r0
 800b942:	460d      	mov	r5, r1
 800b944:	f7f4 fe58 	bl	80005f8 <__aeabi_dmul>
 800b948:	a379      	add	r3, pc, #484	; (adr r3, 800bb30 <__ieee754_pow+0x6d8>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	f7f4 fc9d 	bl	800028c <__adddf3>
 800b952:	4622      	mov	r2, r4
 800b954:	462b      	mov	r3, r5
 800b956:	f7f4 fe4f 	bl	80005f8 <__aeabi_dmul>
 800b95a:	a377      	add	r3, pc, #476	; (adr r3, 800bb38 <__ieee754_pow+0x6e0>)
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	f7f4 fc94 	bl	800028c <__adddf3>
 800b964:	4622      	mov	r2, r4
 800b966:	462b      	mov	r3, r5
 800b968:	f7f4 fe46 	bl	80005f8 <__aeabi_dmul>
 800b96c:	a374      	add	r3, pc, #464	; (adr r3, 800bb40 <__ieee754_pow+0x6e8>)
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	f7f4 fc8b 	bl	800028c <__adddf3>
 800b976:	4622      	mov	r2, r4
 800b978:	462b      	mov	r3, r5
 800b97a:	f7f4 fe3d 	bl	80005f8 <__aeabi_dmul>
 800b97e:	a372      	add	r3, pc, #456	; (adr r3, 800bb48 <__ieee754_pow+0x6f0>)
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	f7f4 fc82 	bl	800028c <__adddf3>
 800b988:	4622      	mov	r2, r4
 800b98a:	462b      	mov	r3, r5
 800b98c:	f7f4 fe34 	bl	80005f8 <__aeabi_dmul>
 800b990:	a36f      	add	r3, pc, #444	; (adr r3, 800bb50 <__ieee754_pow+0x6f8>)
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	f7f4 fc79 	bl	800028c <__adddf3>
 800b99a:	4622      	mov	r2, r4
 800b99c:	4606      	mov	r6, r0
 800b99e:	460f      	mov	r7, r1
 800b9a0:	462b      	mov	r3, r5
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	4629      	mov	r1, r5
 800b9a6:	f7f4 fe27 	bl	80005f8 <__aeabi_dmul>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	f7f4 fe21 	bl	80005f8 <__aeabi_dmul>
 800b9b6:	4642      	mov	r2, r8
 800b9b8:	4604      	mov	r4, r0
 800b9ba:	460d      	mov	r5, r1
 800b9bc:	464b      	mov	r3, r9
 800b9be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9c2:	f7f4 fc63 	bl	800028c <__adddf3>
 800b9c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9ca:	f7f4 fe15 	bl	80005f8 <__aeabi_dmul>
 800b9ce:	4622      	mov	r2, r4
 800b9d0:	462b      	mov	r3, r5
 800b9d2:	f7f4 fc5b 	bl	800028c <__adddf3>
 800b9d6:	4642      	mov	r2, r8
 800b9d8:	4606      	mov	r6, r0
 800b9da:	460f      	mov	r7, r1
 800b9dc:	464b      	mov	r3, r9
 800b9de:	4640      	mov	r0, r8
 800b9e0:	4649      	mov	r1, r9
 800b9e2:	f7f4 fe09 	bl	80005f8 <__aeabi_dmul>
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	4b68      	ldr	r3, [pc, #416]	; (800bb8c <__ieee754_pow+0x734>)
 800b9ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b9ee:	f7f4 fc4d 	bl	800028c <__adddf3>
 800b9f2:	4632      	mov	r2, r6
 800b9f4:	463b      	mov	r3, r7
 800b9f6:	f7f4 fc49 	bl	800028c <__adddf3>
 800b9fa:	9802      	ldr	r0, [sp, #8]
 800b9fc:	460d      	mov	r5, r1
 800b9fe:	4604      	mov	r4, r0
 800ba00:	4602      	mov	r2, r0
 800ba02:	460b      	mov	r3, r1
 800ba04:	4640      	mov	r0, r8
 800ba06:	4649      	mov	r1, r9
 800ba08:	f7f4 fdf6 	bl	80005f8 <__aeabi_dmul>
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	4680      	mov	r8, r0
 800ba10:	4689      	mov	r9, r1
 800ba12:	4b5e      	ldr	r3, [pc, #376]	; (800bb8c <__ieee754_pow+0x734>)
 800ba14:	4620      	mov	r0, r4
 800ba16:	4629      	mov	r1, r5
 800ba18:	f7f4 fc36 	bl	8000288 <__aeabi_dsub>
 800ba1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba20:	f7f4 fc32 	bl	8000288 <__aeabi_dsub>
 800ba24:	4602      	mov	r2, r0
 800ba26:	460b      	mov	r3, r1
 800ba28:	4630      	mov	r0, r6
 800ba2a:	4639      	mov	r1, r7
 800ba2c:	f7f4 fc2c 	bl	8000288 <__aeabi_dsub>
 800ba30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba34:	f7f4 fde0 	bl	80005f8 <__aeabi_dmul>
 800ba38:	4622      	mov	r2, r4
 800ba3a:	4606      	mov	r6, r0
 800ba3c:	460f      	mov	r7, r1
 800ba3e:	462b      	mov	r3, r5
 800ba40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba44:	f7f4 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	4639      	mov	r1, r7
 800ba50:	f7f4 fc1c 	bl	800028c <__adddf3>
 800ba54:	4606      	mov	r6, r0
 800ba56:	460f      	mov	r7, r1
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	4649      	mov	r1, r9
 800ba60:	f7f4 fc14 	bl	800028c <__adddf3>
 800ba64:	9802      	ldr	r0, [sp, #8]
 800ba66:	a33c      	add	r3, pc, #240	; (adr r3, 800bb58 <__ieee754_pow+0x700>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	460d      	mov	r5, r1
 800ba70:	f7f4 fdc2 	bl	80005f8 <__aeabi_dmul>
 800ba74:	4642      	mov	r2, r8
 800ba76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ba7a:	464b      	mov	r3, r9
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	4629      	mov	r1, r5
 800ba80:	f7f4 fc02 	bl	8000288 <__aeabi_dsub>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	4630      	mov	r0, r6
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f7f4 fbfc 	bl	8000288 <__aeabi_dsub>
 800ba90:	a333      	add	r3, pc, #204	; (adr r3, 800bb60 <__ieee754_pow+0x708>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	f7f4 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ba9a:	a333      	add	r3, pc, #204	; (adr r3, 800bb68 <__ieee754_pow+0x710>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	4606      	mov	r6, r0
 800baa2:	460f      	mov	r7, r1
 800baa4:	4620      	mov	r0, r4
 800baa6:	4629      	mov	r1, r5
 800baa8:	f7f4 fda6 	bl	80005f8 <__aeabi_dmul>
 800baac:	4602      	mov	r2, r0
 800baae:	460b      	mov	r3, r1
 800bab0:	4630      	mov	r0, r6
 800bab2:	4639      	mov	r1, r7
 800bab4:	f7f4 fbea 	bl	800028c <__adddf3>
 800bab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800baba:	4b35      	ldr	r3, [pc, #212]	; (800bb90 <__ieee754_pow+0x738>)
 800babc:	4413      	add	r3, r2
 800babe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac2:	f7f4 fbe3 	bl	800028c <__adddf3>
 800bac6:	4604      	mov	r4, r0
 800bac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baca:	460d      	mov	r5, r1
 800bacc:	f7f4 fd2a 	bl	8000524 <__aeabi_i2d>
 800bad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bad2:	4b30      	ldr	r3, [pc, #192]	; (800bb94 <__ieee754_pow+0x73c>)
 800bad4:	4413      	add	r3, r2
 800bad6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bada:	4606      	mov	r6, r0
 800badc:	460f      	mov	r7, r1
 800bade:	4622      	mov	r2, r4
 800bae0:	462b      	mov	r3, r5
 800bae2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bae6:	f7f4 fbd1 	bl	800028c <__adddf3>
 800baea:	4642      	mov	r2, r8
 800baec:	464b      	mov	r3, r9
 800baee:	f7f4 fbcd 	bl	800028c <__adddf3>
 800baf2:	4632      	mov	r2, r6
 800baf4:	463b      	mov	r3, r7
 800baf6:	f7f4 fbc9 	bl	800028c <__adddf3>
 800bafa:	9802      	ldr	r0, [sp, #8]
 800bafc:	4632      	mov	r2, r6
 800bafe:	463b      	mov	r3, r7
 800bb00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb04:	f7f4 fbc0 	bl	8000288 <__aeabi_dsub>
 800bb08:	4642      	mov	r2, r8
 800bb0a:	464b      	mov	r3, r9
 800bb0c:	f7f4 fbbc 	bl	8000288 <__aeabi_dsub>
 800bb10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb14:	e607      	b.n	800b726 <__ieee754_pow+0x2ce>
 800bb16:	f04f 0a01 	mov.w	sl, #1
 800bb1a:	e6a5      	b.n	800b868 <__ieee754_pow+0x410>
 800bb1c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bb70 <__ieee754_pow+0x718>
 800bb20:	e613      	b.n	800b74a <__ieee754_pow+0x2f2>
 800bb22:	bf00      	nop
 800bb24:	f3af 8000 	nop.w
 800bb28:	4a454eef 	.word	0x4a454eef
 800bb2c:	3fca7e28 	.word	0x3fca7e28
 800bb30:	93c9db65 	.word	0x93c9db65
 800bb34:	3fcd864a 	.word	0x3fcd864a
 800bb38:	a91d4101 	.word	0xa91d4101
 800bb3c:	3fd17460 	.word	0x3fd17460
 800bb40:	518f264d 	.word	0x518f264d
 800bb44:	3fd55555 	.word	0x3fd55555
 800bb48:	db6fabff 	.word	0xdb6fabff
 800bb4c:	3fdb6db6 	.word	0x3fdb6db6
 800bb50:	33333303 	.word	0x33333303
 800bb54:	3fe33333 	.word	0x3fe33333
 800bb58:	e0000000 	.word	0xe0000000
 800bb5c:	3feec709 	.word	0x3feec709
 800bb60:	dc3a03fd 	.word	0xdc3a03fd
 800bb64:	3feec709 	.word	0x3feec709
 800bb68:	145b01f5 	.word	0x145b01f5
 800bb6c:	be3e2fe0 	.word	0xbe3e2fe0
 800bb70:	00000000 	.word	0x00000000
 800bb74:	3ff00000 	.word	0x3ff00000
 800bb78:	43400000 	.word	0x43400000
 800bb7c:	0003988e 	.word	0x0003988e
 800bb80:	000bb679 	.word	0x000bb679
 800bb84:	0800cb50 	.word	0x0800cb50
 800bb88:	3ff00000 	.word	0x3ff00000
 800bb8c:	40080000 	.word	0x40080000
 800bb90:	0800cb70 	.word	0x0800cb70
 800bb94:	0800cb60 	.word	0x0800cb60
 800bb98:	a3b4      	add	r3, pc, #720	; (adr r3, 800be6c <__ieee754_pow+0xa14>)
 800bb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9e:	4640      	mov	r0, r8
 800bba0:	4649      	mov	r1, r9
 800bba2:	f7f4 fb73 	bl	800028c <__adddf3>
 800bba6:	4622      	mov	r2, r4
 800bba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbac:	462b      	mov	r3, r5
 800bbae:	4630      	mov	r0, r6
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	f7f4 fb69 	bl	8000288 <__aeabi_dsub>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	460b      	mov	r3, r1
 800bbba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbbe:	f7f4 ffab 	bl	8000b18 <__aeabi_dcmpgt>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	f47f adfe 	bne.w	800b7c4 <__ieee754_pow+0x36c>
 800bbc8:	4aa3      	ldr	r2, [pc, #652]	; (800be58 <__ieee754_pow+0xa00>)
 800bbca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	f340 810a 	ble.w	800bde8 <__ieee754_pow+0x990>
 800bbd4:	151b      	asrs	r3, r3, #20
 800bbd6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bbda:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bbde:	fa4a f303 	asr.w	r3, sl, r3
 800bbe2:	445b      	add	r3, fp
 800bbe4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bbe8:	4e9c      	ldr	r6, [pc, #624]	; (800be5c <__ieee754_pow+0xa04>)
 800bbea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bbee:	4116      	asrs	r6, r2
 800bbf0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	ea23 0106 	bic.w	r1, r3, r6
 800bbfa:	f1c2 0214 	rsb	r2, r2, #20
 800bbfe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bc02:	fa4a fa02 	asr.w	sl, sl, r2
 800bc06:	f1bb 0f00 	cmp.w	fp, #0
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4620      	mov	r0, r4
 800bc10:	4629      	mov	r1, r5
 800bc12:	bfb8      	it	lt
 800bc14:	f1ca 0a00 	rsblt	sl, sl, #0
 800bc18:	f7f4 fb36 	bl	8000288 <__aeabi_dsub>
 800bc1c:	e9cd 0100 	strd	r0, r1, [sp]
 800bc20:	4642      	mov	r2, r8
 800bc22:	464b      	mov	r3, r9
 800bc24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc28:	f7f4 fb30 	bl	800028c <__adddf3>
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	a378      	add	r3, pc, #480	; (adr r3, 800be10 <__ieee754_pow+0x9b8>)
 800bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc34:	4604      	mov	r4, r0
 800bc36:	460d      	mov	r5, r1
 800bc38:	f7f4 fcde 	bl	80005f8 <__aeabi_dmul>
 800bc3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc40:	4606      	mov	r6, r0
 800bc42:	460f      	mov	r7, r1
 800bc44:	4620      	mov	r0, r4
 800bc46:	4629      	mov	r1, r5
 800bc48:	f7f4 fb1e 	bl	8000288 <__aeabi_dsub>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4640      	mov	r0, r8
 800bc52:	4649      	mov	r1, r9
 800bc54:	f7f4 fb18 	bl	8000288 <__aeabi_dsub>
 800bc58:	a36f      	add	r3, pc, #444	; (adr r3, 800be18 <__ieee754_pow+0x9c0>)
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f7f4 fccb 	bl	80005f8 <__aeabi_dmul>
 800bc62:	a36f      	add	r3, pc, #444	; (adr r3, 800be20 <__ieee754_pow+0x9c8>)
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	4680      	mov	r8, r0
 800bc6a:	4689      	mov	r9, r1
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	4629      	mov	r1, r5
 800bc70:	f7f4 fcc2 	bl	80005f8 <__aeabi_dmul>
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	4640      	mov	r0, r8
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	f7f4 fb06 	bl	800028c <__adddf3>
 800bc80:	4604      	mov	r4, r0
 800bc82:	460d      	mov	r5, r1
 800bc84:	4602      	mov	r2, r0
 800bc86:	460b      	mov	r3, r1
 800bc88:	4630      	mov	r0, r6
 800bc8a:	4639      	mov	r1, r7
 800bc8c:	f7f4 fafe 	bl	800028c <__adddf3>
 800bc90:	4632      	mov	r2, r6
 800bc92:	463b      	mov	r3, r7
 800bc94:	4680      	mov	r8, r0
 800bc96:	4689      	mov	r9, r1
 800bc98:	f7f4 faf6 	bl	8000288 <__aeabi_dsub>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4620      	mov	r0, r4
 800bca2:	4629      	mov	r1, r5
 800bca4:	f7f4 faf0 	bl	8000288 <__aeabi_dsub>
 800bca8:	4642      	mov	r2, r8
 800bcaa:	4606      	mov	r6, r0
 800bcac:	460f      	mov	r7, r1
 800bcae:	464b      	mov	r3, r9
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	4649      	mov	r1, r9
 800bcb4:	f7f4 fca0 	bl	80005f8 <__aeabi_dmul>
 800bcb8:	a35b      	add	r3, pc, #364	; (adr r3, 800be28 <__ieee754_pow+0x9d0>)
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	460d      	mov	r5, r1
 800bcc2:	f7f4 fc99 	bl	80005f8 <__aeabi_dmul>
 800bcc6:	a35a      	add	r3, pc, #360	; (adr r3, 800be30 <__ieee754_pow+0x9d8>)
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	f7f4 fadc 	bl	8000288 <__aeabi_dsub>
 800bcd0:	4622      	mov	r2, r4
 800bcd2:	462b      	mov	r3, r5
 800bcd4:	f7f4 fc90 	bl	80005f8 <__aeabi_dmul>
 800bcd8:	a357      	add	r3, pc, #348	; (adr r3, 800be38 <__ieee754_pow+0x9e0>)
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	f7f4 fad5 	bl	800028c <__adddf3>
 800bce2:	4622      	mov	r2, r4
 800bce4:	462b      	mov	r3, r5
 800bce6:	f7f4 fc87 	bl	80005f8 <__aeabi_dmul>
 800bcea:	a355      	add	r3, pc, #340	; (adr r3, 800be40 <__ieee754_pow+0x9e8>)
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	f7f4 faca 	bl	8000288 <__aeabi_dsub>
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	f7f4 fc7e 	bl	80005f8 <__aeabi_dmul>
 800bcfc:	a352      	add	r3, pc, #328	; (adr r3, 800be48 <__ieee754_pow+0x9f0>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 fac3 	bl	800028c <__adddf3>
 800bd06:	4622      	mov	r2, r4
 800bd08:	462b      	mov	r3, r5
 800bd0a:	f7f4 fc75 	bl	80005f8 <__aeabi_dmul>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4640      	mov	r0, r8
 800bd14:	4649      	mov	r1, r9
 800bd16:	f7f4 fab7 	bl	8000288 <__aeabi_dsub>
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	460d      	mov	r5, r1
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	4640      	mov	r0, r8
 800bd24:	4649      	mov	r1, r9
 800bd26:	f7f4 fc67 	bl	80005f8 <__aeabi_dmul>
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	e9cd 0100 	strd	r0, r1, [sp]
 800bd30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd34:	4620      	mov	r0, r4
 800bd36:	4629      	mov	r1, r5
 800bd38:	f7f4 faa6 	bl	8000288 <__aeabi_dsub>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd44:	f7f4 fd82 	bl	800084c <__aeabi_ddiv>
 800bd48:	4632      	mov	r2, r6
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	460d      	mov	r5, r1
 800bd4e:	463b      	mov	r3, r7
 800bd50:	4640      	mov	r0, r8
 800bd52:	4649      	mov	r1, r9
 800bd54:	f7f4 fc50 	bl	80005f8 <__aeabi_dmul>
 800bd58:	4632      	mov	r2, r6
 800bd5a:	463b      	mov	r3, r7
 800bd5c:	f7f4 fa96 	bl	800028c <__adddf3>
 800bd60:	4602      	mov	r2, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	4620      	mov	r0, r4
 800bd66:	4629      	mov	r1, r5
 800bd68:	f7f4 fa8e 	bl	8000288 <__aeabi_dsub>
 800bd6c:	4642      	mov	r2, r8
 800bd6e:	464b      	mov	r3, r9
 800bd70:	f7f4 fa8a 	bl	8000288 <__aeabi_dsub>
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	2000      	movs	r0, #0
 800bd7a:	4939      	ldr	r1, [pc, #228]	; (800be60 <__ieee754_pow+0xa08>)
 800bd7c:	f7f4 fa84 	bl	8000288 <__aeabi_dsub>
 800bd80:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bd84:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bd88:	4602      	mov	r2, r0
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	da2f      	bge.n	800bdee <__ieee754_pow+0x996>
 800bd8e:	4650      	mov	r0, sl
 800bd90:	ec43 2b10 	vmov	d0, r2, r3
 800bd94:	f000 f9c0 	bl	800c118 <scalbn>
 800bd98:	ec51 0b10 	vmov	r0, r1, d0
 800bd9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bda0:	f7ff bbf1 	b.w	800b586 <__ieee754_pow+0x12e>
 800bda4:	4b2f      	ldr	r3, [pc, #188]	; (800be64 <__ieee754_pow+0xa0c>)
 800bda6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bdaa:	429e      	cmp	r6, r3
 800bdac:	f77f af0c 	ble.w	800bbc8 <__ieee754_pow+0x770>
 800bdb0:	4b2d      	ldr	r3, [pc, #180]	; (800be68 <__ieee754_pow+0xa10>)
 800bdb2:	440b      	add	r3, r1
 800bdb4:	4303      	orrs	r3, r0
 800bdb6:	d00b      	beq.n	800bdd0 <__ieee754_pow+0x978>
 800bdb8:	a325      	add	r3, pc, #148	; (adr r3, 800be50 <__ieee754_pow+0x9f8>)
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdc2:	f7f4 fc19 	bl	80005f8 <__aeabi_dmul>
 800bdc6:	a322      	add	r3, pc, #136	; (adr r3, 800be50 <__ieee754_pow+0x9f8>)
 800bdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdcc:	f7ff bbdb 	b.w	800b586 <__ieee754_pow+0x12e>
 800bdd0:	4622      	mov	r2, r4
 800bdd2:	462b      	mov	r3, r5
 800bdd4:	f7f4 fa58 	bl	8000288 <__aeabi_dsub>
 800bdd8:	4642      	mov	r2, r8
 800bdda:	464b      	mov	r3, r9
 800bddc:	f7f4 fe92 	bl	8000b04 <__aeabi_dcmpge>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	f43f aef1 	beq.w	800bbc8 <__ieee754_pow+0x770>
 800bde6:	e7e7      	b.n	800bdb8 <__ieee754_pow+0x960>
 800bde8:	f04f 0a00 	mov.w	sl, #0
 800bdec:	e718      	b.n	800bc20 <__ieee754_pow+0x7c8>
 800bdee:	4621      	mov	r1, r4
 800bdf0:	e7d4      	b.n	800bd9c <__ieee754_pow+0x944>
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	491a      	ldr	r1, [pc, #104]	; (800be60 <__ieee754_pow+0xa08>)
 800bdf6:	f7ff bb8f 	b.w	800b518 <__ieee754_pow+0xc0>
 800bdfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdfe:	f7ff bb8b 	b.w	800b518 <__ieee754_pow+0xc0>
 800be02:	4630      	mov	r0, r6
 800be04:	4639      	mov	r1, r7
 800be06:	f7ff bb87 	b.w	800b518 <__ieee754_pow+0xc0>
 800be0a:	4693      	mov	fp, r2
 800be0c:	f7ff bb98 	b.w	800b540 <__ieee754_pow+0xe8>
 800be10:	00000000 	.word	0x00000000
 800be14:	3fe62e43 	.word	0x3fe62e43
 800be18:	fefa39ef 	.word	0xfefa39ef
 800be1c:	3fe62e42 	.word	0x3fe62e42
 800be20:	0ca86c39 	.word	0x0ca86c39
 800be24:	be205c61 	.word	0xbe205c61
 800be28:	72bea4d0 	.word	0x72bea4d0
 800be2c:	3e663769 	.word	0x3e663769
 800be30:	c5d26bf1 	.word	0xc5d26bf1
 800be34:	3ebbbd41 	.word	0x3ebbbd41
 800be38:	af25de2c 	.word	0xaf25de2c
 800be3c:	3f11566a 	.word	0x3f11566a
 800be40:	16bebd93 	.word	0x16bebd93
 800be44:	3f66c16c 	.word	0x3f66c16c
 800be48:	5555553e 	.word	0x5555553e
 800be4c:	3fc55555 	.word	0x3fc55555
 800be50:	c2f8f359 	.word	0xc2f8f359
 800be54:	01a56e1f 	.word	0x01a56e1f
 800be58:	3fe00000 	.word	0x3fe00000
 800be5c:	000fffff 	.word	0x000fffff
 800be60:	3ff00000 	.word	0x3ff00000
 800be64:	4090cbff 	.word	0x4090cbff
 800be68:	3f6f3400 	.word	0x3f6f3400
 800be6c:	652b82fe 	.word	0x652b82fe
 800be70:	3c971547 	.word	0x3c971547

0800be74 <__ieee754_sqrt>:
 800be74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be78:	4955      	ldr	r1, [pc, #340]	; (800bfd0 <__ieee754_sqrt+0x15c>)
 800be7a:	ec55 4b10 	vmov	r4, r5, d0
 800be7e:	43a9      	bics	r1, r5
 800be80:	462b      	mov	r3, r5
 800be82:	462a      	mov	r2, r5
 800be84:	d112      	bne.n	800beac <__ieee754_sqrt+0x38>
 800be86:	ee10 2a10 	vmov	r2, s0
 800be8a:	ee10 0a10 	vmov	r0, s0
 800be8e:	4629      	mov	r1, r5
 800be90:	f7f4 fbb2 	bl	80005f8 <__aeabi_dmul>
 800be94:	4602      	mov	r2, r0
 800be96:	460b      	mov	r3, r1
 800be98:	4620      	mov	r0, r4
 800be9a:	4629      	mov	r1, r5
 800be9c:	f7f4 f9f6 	bl	800028c <__adddf3>
 800bea0:	4604      	mov	r4, r0
 800bea2:	460d      	mov	r5, r1
 800bea4:	ec45 4b10 	vmov	d0, r4, r5
 800bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beac:	2d00      	cmp	r5, #0
 800beae:	ee10 0a10 	vmov	r0, s0
 800beb2:	4621      	mov	r1, r4
 800beb4:	dc0f      	bgt.n	800bed6 <__ieee754_sqrt+0x62>
 800beb6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800beba:	4330      	orrs	r0, r6
 800bebc:	d0f2      	beq.n	800bea4 <__ieee754_sqrt+0x30>
 800bebe:	b155      	cbz	r5, 800bed6 <__ieee754_sqrt+0x62>
 800bec0:	ee10 2a10 	vmov	r2, s0
 800bec4:	4620      	mov	r0, r4
 800bec6:	4629      	mov	r1, r5
 800bec8:	f7f4 f9de 	bl	8000288 <__aeabi_dsub>
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	f7f4 fcbc 	bl	800084c <__aeabi_ddiv>
 800bed4:	e7e4      	b.n	800bea0 <__ieee754_sqrt+0x2c>
 800bed6:	151b      	asrs	r3, r3, #20
 800bed8:	d073      	beq.n	800bfc2 <__ieee754_sqrt+0x14e>
 800beda:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bede:	07dd      	lsls	r5, r3, #31
 800bee0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bee4:	bf48      	it	mi
 800bee6:	0fc8      	lsrmi	r0, r1, #31
 800bee8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800beec:	bf44      	itt	mi
 800beee:	0049      	lslmi	r1, r1, #1
 800bef0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800bef4:	2500      	movs	r5, #0
 800bef6:	1058      	asrs	r0, r3, #1
 800bef8:	0fcb      	lsrs	r3, r1, #31
 800befa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800befe:	0049      	lsls	r1, r1, #1
 800bf00:	2316      	movs	r3, #22
 800bf02:	462c      	mov	r4, r5
 800bf04:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800bf08:	19a7      	adds	r7, r4, r6
 800bf0a:	4297      	cmp	r7, r2
 800bf0c:	bfde      	ittt	le
 800bf0e:	19bc      	addle	r4, r7, r6
 800bf10:	1bd2      	suble	r2, r2, r7
 800bf12:	19ad      	addle	r5, r5, r6
 800bf14:	0fcf      	lsrs	r7, r1, #31
 800bf16:	3b01      	subs	r3, #1
 800bf18:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800bf1c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bf20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bf24:	d1f0      	bne.n	800bf08 <__ieee754_sqrt+0x94>
 800bf26:	f04f 0c20 	mov.w	ip, #32
 800bf2a:	469e      	mov	lr, r3
 800bf2c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bf30:	42a2      	cmp	r2, r4
 800bf32:	eb06 070e 	add.w	r7, r6, lr
 800bf36:	dc02      	bgt.n	800bf3e <__ieee754_sqrt+0xca>
 800bf38:	d112      	bne.n	800bf60 <__ieee754_sqrt+0xec>
 800bf3a:	428f      	cmp	r7, r1
 800bf3c:	d810      	bhi.n	800bf60 <__ieee754_sqrt+0xec>
 800bf3e:	2f00      	cmp	r7, #0
 800bf40:	eb07 0e06 	add.w	lr, r7, r6
 800bf44:	da42      	bge.n	800bfcc <__ieee754_sqrt+0x158>
 800bf46:	f1be 0f00 	cmp.w	lr, #0
 800bf4a:	db3f      	blt.n	800bfcc <__ieee754_sqrt+0x158>
 800bf4c:	f104 0801 	add.w	r8, r4, #1
 800bf50:	1b12      	subs	r2, r2, r4
 800bf52:	428f      	cmp	r7, r1
 800bf54:	bf88      	it	hi
 800bf56:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bf5a:	1bc9      	subs	r1, r1, r7
 800bf5c:	4433      	add	r3, r6
 800bf5e:	4644      	mov	r4, r8
 800bf60:	0052      	lsls	r2, r2, #1
 800bf62:	f1bc 0c01 	subs.w	ip, ip, #1
 800bf66:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800bf6a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bf6e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bf72:	d1dd      	bne.n	800bf30 <__ieee754_sqrt+0xbc>
 800bf74:	430a      	orrs	r2, r1
 800bf76:	d006      	beq.n	800bf86 <__ieee754_sqrt+0x112>
 800bf78:	1c5c      	adds	r4, r3, #1
 800bf7a:	bf13      	iteet	ne
 800bf7c:	3301      	addne	r3, #1
 800bf7e:	3501      	addeq	r5, #1
 800bf80:	4663      	moveq	r3, ip
 800bf82:	f023 0301 	bicne.w	r3, r3, #1
 800bf86:	106a      	asrs	r2, r5, #1
 800bf88:	085b      	lsrs	r3, r3, #1
 800bf8a:	07e9      	lsls	r1, r5, #31
 800bf8c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bf90:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bf94:	bf48      	it	mi
 800bf96:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bf9a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800bf9e:	461c      	mov	r4, r3
 800bfa0:	e780      	b.n	800bea4 <__ieee754_sqrt+0x30>
 800bfa2:	0aca      	lsrs	r2, r1, #11
 800bfa4:	3815      	subs	r0, #21
 800bfa6:	0549      	lsls	r1, r1, #21
 800bfa8:	2a00      	cmp	r2, #0
 800bfaa:	d0fa      	beq.n	800bfa2 <__ieee754_sqrt+0x12e>
 800bfac:	02d6      	lsls	r6, r2, #11
 800bfae:	d50a      	bpl.n	800bfc6 <__ieee754_sqrt+0x152>
 800bfb0:	f1c3 0420 	rsb	r4, r3, #32
 800bfb4:	fa21 f404 	lsr.w	r4, r1, r4
 800bfb8:	1e5d      	subs	r5, r3, #1
 800bfba:	4099      	lsls	r1, r3
 800bfbc:	4322      	orrs	r2, r4
 800bfbe:	1b43      	subs	r3, r0, r5
 800bfc0:	e78b      	b.n	800beda <__ieee754_sqrt+0x66>
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	e7f0      	b.n	800bfa8 <__ieee754_sqrt+0x134>
 800bfc6:	0052      	lsls	r2, r2, #1
 800bfc8:	3301      	adds	r3, #1
 800bfca:	e7ef      	b.n	800bfac <__ieee754_sqrt+0x138>
 800bfcc:	46a0      	mov	r8, r4
 800bfce:	e7bf      	b.n	800bf50 <__ieee754_sqrt+0xdc>
 800bfd0:	7ff00000 	.word	0x7ff00000

0800bfd4 <fabs>:
 800bfd4:	ec51 0b10 	vmov	r0, r1, d0
 800bfd8:	ee10 2a10 	vmov	r2, s0
 800bfdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfe0:	ec43 2b10 	vmov	d0, r2, r3
 800bfe4:	4770      	bx	lr

0800bfe6 <finite>:
 800bfe6:	ee10 3a90 	vmov	r3, s1
 800bfea:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800bfee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bff2:	0fc0      	lsrs	r0, r0, #31
 800bff4:	4770      	bx	lr

0800bff6 <matherr>:
 800bff6:	2000      	movs	r0, #0
 800bff8:	4770      	bx	lr
 800bffa:	0000      	movs	r0, r0
 800bffc:	0000      	movs	r0, r0
	...

0800c000 <nan>:
 800c000:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c008 <nan+0x8>
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	00000000 	.word	0x00000000
 800c00c:	7ff80000 	.word	0x7ff80000

0800c010 <rint>:
 800c010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c012:	ec51 0b10 	vmov	r0, r1, d0
 800c016:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c01a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c01e:	2e13      	cmp	r6, #19
 800c020:	460b      	mov	r3, r1
 800c022:	ee10 4a10 	vmov	r4, s0
 800c026:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c02a:	dc56      	bgt.n	800c0da <rint+0xca>
 800c02c:	2e00      	cmp	r6, #0
 800c02e:	da2b      	bge.n	800c088 <rint+0x78>
 800c030:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c034:	4302      	orrs	r2, r0
 800c036:	d023      	beq.n	800c080 <rint+0x70>
 800c038:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c03c:	4302      	orrs	r2, r0
 800c03e:	4254      	negs	r4, r2
 800c040:	4314      	orrs	r4, r2
 800c042:	0c4b      	lsrs	r3, r1, #17
 800c044:	0b24      	lsrs	r4, r4, #12
 800c046:	045b      	lsls	r3, r3, #17
 800c048:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c04c:	ea44 0103 	orr.w	r1, r4, r3
 800c050:	460b      	mov	r3, r1
 800c052:	492f      	ldr	r1, [pc, #188]	; (800c110 <rint+0x100>)
 800c054:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800c058:	e9d1 6700 	ldrd	r6, r7, [r1]
 800c05c:	4602      	mov	r2, r0
 800c05e:	4639      	mov	r1, r7
 800c060:	4630      	mov	r0, r6
 800c062:	f7f4 f913 	bl	800028c <__adddf3>
 800c066:	e9cd 0100 	strd	r0, r1, [sp]
 800c06a:	463b      	mov	r3, r7
 800c06c:	4632      	mov	r2, r6
 800c06e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c072:	f7f4 f909 	bl	8000288 <__aeabi_dsub>
 800c076:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c07a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c07e:	4639      	mov	r1, r7
 800c080:	ec41 0b10 	vmov	d0, r0, r1
 800c084:	b003      	add	sp, #12
 800c086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c088:	4a22      	ldr	r2, [pc, #136]	; (800c114 <rint+0x104>)
 800c08a:	4132      	asrs	r2, r6
 800c08c:	ea01 0702 	and.w	r7, r1, r2
 800c090:	4307      	orrs	r7, r0
 800c092:	d0f5      	beq.n	800c080 <rint+0x70>
 800c094:	0852      	lsrs	r2, r2, #1
 800c096:	4011      	ands	r1, r2
 800c098:	430c      	orrs	r4, r1
 800c09a:	d00b      	beq.n	800c0b4 <rint+0xa4>
 800c09c:	ea23 0202 	bic.w	r2, r3, r2
 800c0a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c0a4:	2e13      	cmp	r6, #19
 800c0a6:	fa43 f306 	asr.w	r3, r3, r6
 800c0aa:	bf0c      	ite	eq
 800c0ac:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c0b0:	2400      	movne	r4, #0
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	4916      	ldr	r1, [pc, #88]	; (800c110 <rint+0x100>)
 800c0b6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	f7f4 f8e2 	bl	800028c <__adddf3>
 800c0c8:	e9cd 0100 	strd	r0, r1, [sp]
 800c0cc:	4622      	mov	r2, r4
 800c0ce:	462b      	mov	r3, r5
 800c0d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0d4:	f7f4 f8d8 	bl	8000288 <__aeabi_dsub>
 800c0d8:	e7d2      	b.n	800c080 <rint+0x70>
 800c0da:	2e33      	cmp	r6, #51	; 0x33
 800c0dc:	dd07      	ble.n	800c0ee <rint+0xde>
 800c0de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c0e2:	d1cd      	bne.n	800c080 <rint+0x70>
 800c0e4:	ee10 2a10 	vmov	r2, s0
 800c0e8:	f7f4 f8d0 	bl	800028c <__adddf3>
 800c0ec:	e7c8      	b.n	800c080 <rint+0x70>
 800c0ee:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800c0f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f6:	40f2      	lsrs	r2, r6
 800c0f8:	4210      	tst	r0, r2
 800c0fa:	d0c1      	beq.n	800c080 <rint+0x70>
 800c0fc:	0852      	lsrs	r2, r2, #1
 800c0fe:	4210      	tst	r0, r2
 800c100:	bf1f      	itttt	ne
 800c102:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c106:	ea20 0202 	bicne.w	r2, r0, r2
 800c10a:	4134      	asrne	r4, r6
 800c10c:	4314      	orrne	r4, r2
 800c10e:	e7d1      	b.n	800c0b4 <rint+0xa4>
 800c110:	0800cb80 	.word	0x0800cb80
 800c114:	000fffff 	.word	0x000fffff

0800c118 <scalbn>:
 800c118:	b570      	push	{r4, r5, r6, lr}
 800c11a:	ec55 4b10 	vmov	r4, r5, d0
 800c11e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c122:	4606      	mov	r6, r0
 800c124:	462b      	mov	r3, r5
 800c126:	b9aa      	cbnz	r2, 800c154 <scalbn+0x3c>
 800c128:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c12c:	4323      	orrs	r3, r4
 800c12e:	d03b      	beq.n	800c1a8 <scalbn+0x90>
 800c130:	4b31      	ldr	r3, [pc, #196]	; (800c1f8 <scalbn+0xe0>)
 800c132:	4629      	mov	r1, r5
 800c134:	2200      	movs	r2, #0
 800c136:	ee10 0a10 	vmov	r0, s0
 800c13a:	f7f4 fa5d 	bl	80005f8 <__aeabi_dmul>
 800c13e:	4b2f      	ldr	r3, [pc, #188]	; (800c1fc <scalbn+0xe4>)
 800c140:	429e      	cmp	r6, r3
 800c142:	4604      	mov	r4, r0
 800c144:	460d      	mov	r5, r1
 800c146:	da12      	bge.n	800c16e <scalbn+0x56>
 800c148:	a327      	add	r3, pc, #156	; (adr r3, 800c1e8 <scalbn+0xd0>)
 800c14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14e:	f7f4 fa53 	bl	80005f8 <__aeabi_dmul>
 800c152:	e009      	b.n	800c168 <scalbn+0x50>
 800c154:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c158:	428a      	cmp	r2, r1
 800c15a:	d10c      	bne.n	800c176 <scalbn+0x5e>
 800c15c:	ee10 2a10 	vmov	r2, s0
 800c160:	4620      	mov	r0, r4
 800c162:	4629      	mov	r1, r5
 800c164:	f7f4 f892 	bl	800028c <__adddf3>
 800c168:	4604      	mov	r4, r0
 800c16a:	460d      	mov	r5, r1
 800c16c:	e01c      	b.n	800c1a8 <scalbn+0x90>
 800c16e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c172:	460b      	mov	r3, r1
 800c174:	3a36      	subs	r2, #54	; 0x36
 800c176:	4432      	add	r2, r6
 800c178:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c17c:	428a      	cmp	r2, r1
 800c17e:	dd0b      	ble.n	800c198 <scalbn+0x80>
 800c180:	ec45 4b11 	vmov	d1, r4, r5
 800c184:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c1f0 <scalbn+0xd8>
 800c188:	f000 f83c 	bl	800c204 <copysign>
 800c18c:	a318      	add	r3, pc, #96	; (adr r3, 800c1f0 <scalbn+0xd8>)
 800c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c192:	ec51 0b10 	vmov	r0, r1, d0
 800c196:	e7da      	b.n	800c14e <scalbn+0x36>
 800c198:	2a00      	cmp	r2, #0
 800c19a:	dd08      	ble.n	800c1ae <scalbn+0x96>
 800c19c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c1a8:	ec45 4b10 	vmov	d0, r4, r5
 800c1ac:	bd70      	pop	{r4, r5, r6, pc}
 800c1ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c1b2:	da0d      	bge.n	800c1d0 <scalbn+0xb8>
 800c1b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c1b8:	429e      	cmp	r6, r3
 800c1ba:	ec45 4b11 	vmov	d1, r4, r5
 800c1be:	dce1      	bgt.n	800c184 <scalbn+0x6c>
 800c1c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c1e8 <scalbn+0xd0>
 800c1c4:	f000 f81e 	bl	800c204 <copysign>
 800c1c8:	a307      	add	r3, pc, #28	; (adr r3, 800c1e8 <scalbn+0xd0>)
 800c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ce:	e7e0      	b.n	800c192 <scalbn+0x7a>
 800c1d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1d4:	3236      	adds	r2, #54	; 0x36
 800c1d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c1de:	4620      	mov	r0, r4
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	4b06      	ldr	r3, [pc, #24]	; (800c200 <scalbn+0xe8>)
 800c1e6:	e7b2      	b.n	800c14e <scalbn+0x36>
 800c1e8:	c2f8f359 	.word	0xc2f8f359
 800c1ec:	01a56e1f 	.word	0x01a56e1f
 800c1f0:	8800759c 	.word	0x8800759c
 800c1f4:	7e37e43c 	.word	0x7e37e43c
 800c1f8:	43500000 	.word	0x43500000
 800c1fc:	ffff3cb0 	.word	0xffff3cb0
 800c200:	3c900000 	.word	0x3c900000

0800c204 <copysign>:
 800c204:	ec51 0b10 	vmov	r0, r1, d0
 800c208:	ee11 0a90 	vmov	r0, s3
 800c20c:	ee10 2a10 	vmov	r2, s0
 800c210:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c214:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c218:	ea41 0300 	orr.w	r3, r1, r0
 800c21c:	ec43 2b10 	vmov	d0, r2, r3
 800c220:	4770      	bx	lr
	...

0800c224 <_init>:
 800c224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c226:	bf00      	nop
 800c228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c22a:	bc08      	pop	{r3}
 800c22c:	469e      	mov	lr, r3
 800c22e:	4770      	bx	lr

0800c230 <_fini>:
 800c230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c232:	bf00      	nop
 800c234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c236:	bc08      	pop	{r3}
 800c238:	469e      	mov	lr, r3
 800c23a:	4770      	bx	lr

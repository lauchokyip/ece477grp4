
VirtualQueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000639c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006618  08006618  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006618  08006618  00016618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006620  08006620  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006620  08006620  00016620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006624  08006624  00016624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000078  080066a0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080066a0  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001236c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000260b  00000000  00000000  00032414  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea8  00000000  00000000  00034a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d70  00000000  00000000  000358c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000294c6  00000000  00000000  00036638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1ca  00000000  00000000  0005fafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010452f  00000000  00000000  0006dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001721f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004520  00000000  00000000  00172274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006514 	.word	0x08006514

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006514 	.word	0x08006514

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057a:	2003      	movs	r0, #3
 800057c:	f001 f864 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000580:	2000      	movs	r0, #0
 8000582:	f000 f80d 	bl	80005a0 <HAL_InitTick>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	e001      	b.n	8000596 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000592:	f004 fc0d 	bl	8004db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000596:	79fb      	ldrb	r3, [r7, #7]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <HAL_InitTick+0x68>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d022      	beq.n	80005fa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_InitTick+0x6c>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <HAL_InitTick+0x68>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 f872 	bl	80016b2 <HAL_SYSTICK_Config>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d10f      	bne.n	80005f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b0f      	cmp	r3, #15
 80005d8:	d809      	bhi.n	80005ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005da:	2200      	movs	r2, #0
 80005dc:	6879      	ldr	r1, [r7, #4]
 80005de:	f04f 30ff 	mov.w	r0, #4294967295
 80005e2:	f001 f83c 	bl	800165e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <HAL_InitTick+0x70>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	e007      	b.n	80005fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	e004      	b.n	80005fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005f4:	2301      	movs	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	e001      	b.n	80005fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
 80005fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000004 	.word	0x20000004
 800060c:	20000010 	.word	0x20000010
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_IncTick+0x1c>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_IncTick+0x20>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4413      	add	r3, r2
 8000622:	4a03      	ldr	r2, [pc, #12]	; (8000630 <HAL_IncTick+0x1c>)
 8000624:	6013      	str	r3, [r2, #0]
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	200000a0 	.word	0x200000a0
 8000634:	20000004 	.word	0x20000004

08000638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return uwTick;
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <HAL_GetTick+0x14>)
 800063e:	681b      	ldr	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200000a0 	.word	0x200000a0

08000650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000658:	f7ff ffee 	bl	8000638 <HAL_GetTick>
 800065c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000668:	d004      	beq.n	8000674 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_Delay+0x40>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000674:	bf00      	nop
 8000676:	f7ff ffdf 	bl	8000638 <HAL_GetTick>
 800067a:	4602      	mov	r2, r0
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	429a      	cmp	r2, r3
 8000684:	d8f7      	bhi.n	8000676 <HAL_Delay+0x26>
  {
  }
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000004 	.word	0x20000004

08000694 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	431a      	orrs	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	609a      	str	r2, [r3, #8]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	431a      	orrs	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	609a      	str	r2, [r3, #8]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80006fc:	b490      	push	{r4, r7}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
 8000708:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3360      	adds	r3, #96	; 0x60
 800070e:	461a      	mov	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000718:	6822      	ldr	r2, [r4, #0]
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <LL_ADC_SetOffset+0x40>)
 800071c:	4013      	ands	r3, r2
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	430a      	orrs	r2, r1
 8000728:	4313      	orrs	r3, r2
 800072a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800072e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bc90      	pop	{r4, r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	03fff000 	.word	0x03fff000

08000740 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000740:	b490      	push	{r4, r7}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3360      	adds	r3, #96	; 0x60
 800074e:	461a      	mov	r2, r3
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bc90      	pop	{r4, r7}
 8000766:	4770      	bx	lr

08000768 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000768:	b490      	push	{r4, r7}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3360      	adds	r3, #96	; 0x60
 8000778:	461a      	mov	r2, r3
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000782:	6823      	ldr	r3, [r4, #0]
 8000784:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4313      	orrs	r3, r2
 800078c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bc90      	pop	{r4, r7}
 8000796:	4770      	bx	lr

08000798 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000798:	b490      	push	{r4, r7}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3330      	adds	r3, #48	; 0x30
 80007a8:	461a      	mov	r2, r3
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	f003 030c 	and.w	r3, r3, #12
 80007b4:	4413      	add	r3, r2
 80007b6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80007b8:	6822      	ldr	r2, [r4, #0]
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	f003 031f 	and.w	r3, r3, #31
 80007c0:	211f      	movs	r1, #31
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	401a      	ands	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	0e9b      	lsrs	r3, r3, #26
 80007ce:	f003 011f 	and.w	r1, r3, #31
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	f003 031f 	and.w	r3, r3, #31
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	4313      	orrs	r3, r2
 80007de:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc90      	pop	{r4, r7}
 80007e8:	4770      	bx	lr

080007ea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80007ea:	b490      	push	{r4, r7}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	3314      	adds	r3, #20
 80007fa:	461a      	mov	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	0e5b      	lsrs	r3, r3, #25
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	4413      	add	r3, r2
 8000808:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800080a:	6822      	ldr	r2, [r4, #0]
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	0d1b      	lsrs	r3, r3, #20
 8000810:	f003 031f 	and.w	r3, r3, #31
 8000814:	2107      	movs	r1, #7
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	401a      	ands	r2, r3
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	0d1b      	lsrs	r3, r3, #20
 8000822:	f003 031f 	and.w	r3, r3, #31
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	fa01 f303 	lsl.w	r3, r1, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bc90      	pop	{r4, r7}
 8000838:	4770      	bx	lr
	...

0800083c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f003 0318 	and.w	r3, r3, #24
 800085e:	4908      	ldr	r1, [pc, #32]	; (8000880 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000860:	40d9      	lsrs	r1, r3
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	400b      	ands	r3, r1
 8000866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800086a:	431a      	orrs	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	0007ffff 	.word	0x0007ffff

08000884 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000894:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	6093      	str	r3, [r2, #8]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008bc:	d101      	bne.n	80008c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80008be:	2301      	movs	r3, #1
 80008c0:	e000      	b.n	80008c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80008e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800090c:	d101      	bne.n	8000912 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800090e:	2301      	movs	r3, #1
 8000910:	e000      	b.n	8000914 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	2b01      	cmp	r3, #1
 8000932:	d101      	bne.n	8000938 <LL_ADC_IsEnabled+0x18>
 8000934:	2301      	movs	r3, #1
 8000936:	e000      	b.n	800093a <LL_ADC_IsEnabled+0x1a>
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	2b04      	cmp	r3, #4
 8000958:	d101      	bne.n	800095e <LL_ADC_REG_IsConversionOngoing+0x18>
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	f003 0308 	and.w	r3, r3, #8
 800097c:	2b08      	cmp	r3, #8
 800097e:	d101      	bne.n	8000984 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000980:	2301      	movs	r3, #1
 8000982:	e000      	b.n	8000986 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e134      	b.n	8000c18 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	691b      	ldr	r3, [r3, #16]
 80009b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d109      	bne.n	80009d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f004 fa1b 	bl	8004df8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff67 	bl	80008a8 <LL_ADC_IsDeepPowerDownEnabled>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d004      	beq.n	80009ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff4d 	bl	8000884 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ff82 	bl	80008f8 <LL_ADC_IsInternalRegulatorEnabled>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d113      	bne.n	8000a22 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff66 	bl	80008d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000a04:	4b86      	ldr	r3, [pc, #536]	; (8000c20 <HAL_ADC_Init+0x28c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	099b      	lsrs	r3, r3, #6
 8000a0a:	4a86      	ldr	r2, [pc, #536]	; (8000c24 <HAL_ADC_Init+0x290>)
 8000a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a10:	099b      	lsrs	r3, r3, #6
 8000a12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000a14:	e002      	b.n	8000a1c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1f9      	bne.n	8000a16 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff ff66 	bl	80008f8 <LL_ADC_IsInternalRegulatorEnabled>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d10d      	bne.n	8000a4e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a36:	f043 0210 	orr.w	r2, r3, #16
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	f043 0201 	orr.w	r2, r3, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff77 	bl	8000946 <LL_ADC_REG_IsConversionOngoing>
 8000a58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a5e:	f003 0310 	and.w	r3, r3, #16
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f040 80cf 	bne.w	8000c06 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f040 80cb 	bne.w	8000c06 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a78:	f043 0202 	orr.w	r2, r3, #2
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff4b 	bl	8000920 <LL_ADC_IsEnabled>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d115      	bne.n	8000abc <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000a90:	4865      	ldr	r0, [pc, #404]	; (8000c28 <HAL_ADC_Init+0x294>)
 8000a92:	f7ff ff45 	bl	8000920 <LL_ADC_IsEnabled>
 8000a96:	4604      	mov	r4, r0
 8000a98:	4864      	ldr	r0, [pc, #400]	; (8000c2c <HAL_ADC_Init+0x298>)
 8000a9a:	f7ff ff41 	bl	8000920 <LL_ADC_IsEnabled>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	431c      	orrs	r4, r3
 8000aa2:	4863      	ldr	r0, [pc, #396]	; (8000c30 <HAL_ADC_Init+0x29c>)
 8000aa4:	f7ff ff3c 	bl	8000920 <LL_ADC_IsEnabled>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	4323      	orrs	r3, r4
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d105      	bne.n	8000abc <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	485f      	ldr	r0, [pc, #380]	; (8000c34 <HAL_ADC_Init+0x2a0>)
 8000ab8:	f7ff fdec 	bl	8000694 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7e5b      	ldrb	r3, [r3, #25]
 8000ac0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ac6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000acc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000ad2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ada:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d106      	bne.n	8000af8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	3b01      	subs	r3, #1
 8000af0:	045b      	lsls	r3, r3, #17
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d009      	beq.n	8000b14 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	4b47      	ldr	r3, [pc, #284]	; (8000c38 <HAL_ADC_Init+0x2a4>)
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	6812      	ldr	r2, [r2, #0]
 8000b22:	69b9      	ldr	r1, [r7, #24]
 8000b24:	430b      	orrs	r3, r1
 8000b26:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff0a 	bl	8000946 <LL_ADC_REG_IsConversionOngoing>
 8000b32:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff17 	bl	800096c <LL_ADC_INJ_IsConversionOngoing>
 8000b3e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d13d      	bne.n	8000bc2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d13a      	bne.n	8000bc2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000b50:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b58:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b68:	f023 0302 	bic.w	r3, r3, #2
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	6812      	ldr	r2, [r2, #0]
 8000b70:	69b9      	ldr	r1, [r7, #24]
 8000b72:	430b      	orrs	r3, r1
 8000b74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d118      	bne.n	8000bb2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000b8a:	f023 0304 	bic.w	r3, r3, #4
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b96:	4311      	orrs	r1, r2
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000b9c:	4311      	orrs	r1, r2
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f042 0201 	orr.w	r2, r2, #1
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	e007      	b.n	8000bc2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 0201 	bic.w	r2, r2, #1
 8000bc0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d10c      	bne.n	8000be4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f023 010f 	bic.w	r1, r3, #15
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	1e5a      	subs	r2, r3, #1
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	631a      	str	r2, [r3, #48]	; 0x30
 8000be2:	e007      	b.n	8000bf4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f022 020f 	bic.w	r2, r2, #15
 8000bf2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf8:	f023 0303 	bic.w	r3, r3, #3
 8000bfc:	f043 0201 	orr.w	r2, r3, #1
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	655a      	str	r2, [r3, #84]	; 0x54
 8000c04:	e007      	b.n	8000c16 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c0a:	f043 0210 	orr.w	r2, r3, #16
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3724      	adds	r7, #36	; 0x24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	20000010 	.word	0x20000010
 8000c24:	053e2d63 	.word	0x053e2d63
 8000c28:	50040000 	.word	0x50040000
 8000c2c:	50040100 	.word	0x50040100
 8000c30:	50040200 	.word	0x50040200
 8000c34:	50040300 	.word	0x50040300
 8000c38:	fff0c007 	.word	0xfff0c007

08000c3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0a6      	sub	sp, #152	; 0x98
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d101      	bne.n	8000c5e <HAL_ADC_ConfigChannel+0x22>
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	e348      	b.n	80012f0 <HAL_ADC_ConfigChannel+0x6b4>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2201      	movs	r2, #1
 8000c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fe6b 	bl	8000946 <LL_ADC_REG_IsConversionOngoing>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8329 	bne.w	80012ca <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b05      	cmp	r3, #5
 8000c7e:	d824      	bhi.n	8000cca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	3b02      	subs	r3, #2
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d81b      	bhi.n	8000cc2 <HAL_ADC_ConfigChannel+0x86>
 8000c8a:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <HAL_ADC_ConfigChannel+0x54>)
 8000c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c90:	08000ca1 	.word	0x08000ca1
 8000c94:	08000ca9 	.word	0x08000ca9
 8000c98:	08000cb1 	.word	0x08000cb1
 8000c9c:	08000cb9 	.word	0x08000cb9
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	e011      	b.n	8000ccc <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2212      	movs	r2, #18
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	e00d      	b.n	8000ccc <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	2218      	movs	r2, #24
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	e009      	b.n	8000ccc <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	e004      	b.n	8000ccc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	2206      	movs	r2, #6
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	e000      	b.n	8000ccc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000cca:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	6859      	ldr	r1, [r3, #4]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f7ff fd5d 	bl	8000798 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fe2f 	bl	8000946 <LL_ADC_REG_IsConversionOngoing>
 8000ce8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe3b 	bl	800096c <LL_ADC_INJ_IsConversionOngoing>
 8000cf6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000cfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8148 	bne.w	8000f94 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f040 8143 	bne.w	8000f94 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6818      	ldr	r0, [r3, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	6819      	ldr	r1, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f7ff fd65 	bl	80007ea <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	695a      	ldr	r2, [r3, #20]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	08db      	lsrs	r3, r3, #3
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d00a      	beq.n	8000d58 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	6919      	ldr	r1, [r3, #16]
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d52:	f7ff fcd3 	bl	80006fc <LL_ADC_SetOffset>
 8000d56:	e11d      	b.n	8000f94 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fcee 	bl	8000740 <LL_ADC_GetOffsetChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10a      	bne.n	8000d84 <HAL_ADC_ConfigChannel+0x148>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fce3 	bl	8000740 <LL_ADC_GetOffsetChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	0e9b      	lsrs	r3, r3, #26
 8000d7e:	f003 021f 	and.w	r2, r3, #31
 8000d82:	e012      	b.n	8000daa <HAL_ADC_ConfigChannel+0x16e>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fcd8 	bl	8000740 <LL_ADC_GetOffsetChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000da0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000da2:	fab3 f383 	clz	r3, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d105      	bne.n	8000dc2 <HAL_ADC_ConfigChannel+0x186>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	0e9b      	lsrs	r3, r3, #26
 8000dbc:	f003 031f 	and.w	r3, r3, #31
 8000dc0:	e00a      	b.n	8000dd8 <HAL_ADC_ConfigChannel+0x19c>
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dca:	fa93 f3a3 	rbit	r3, r3
 8000dce:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dd2:	fab3 f383 	clz	r3, r3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d106      	bne.n	8000dea <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fcbf 	bl	8000768 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2101      	movs	r1, #1
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fca5 	bl	8000740 <LL_ADC_GetOffsetChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10a      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x1da>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2101      	movs	r1, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fc9a 	bl	8000740 <LL_ADC_GetOffsetChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	0e9b      	lsrs	r3, r3, #26
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	e010      	b.n	8000e38 <HAL_ADC_ConfigChannel+0x1fc>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fc8f 	bl	8000740 <LL_ADC_GetOffsetChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e28:	fa93 f3a3 	rbit	r3, r3
 8000e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e30:	fab3 f383 	clz	r3, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d105      	bne.n	8000e50 <HAL_ADC_ConfigChannel+0x214>
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	0e9b      	lsrs	r3, r3, #26
 8000e4a:	f003 031f 	and.w	r3, r3, #31
 8000e4e:	e00a      	b.n	8000e66 <HAL_ADC_ConfigChannel+0x22a>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e60:	fab3 f383 	clz	r3, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d106      	bne.n	8000e78 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2101      	movs	r1, #1
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc78 	bl	8000768 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fc5e 	bl	8000740 <LL_ADC_GetOffsetChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10a      	bne.n	8000ea4 <HAL_ADC_ConfigChannel+0x268>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2102      	movs	r1, #2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fc53 	bl	8000740 <LL_ADC_GetOffsetChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	0e9b      	lsrs	r3, r3, #26
 8000e9e:	f003 021f 	and.w	r2, r3, #31
 8000ea2:	e010      	b.n	8000ec6 <HAL_ADC_ConfigChannel+0x28a>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fc48 	bl	8000740 <LL_ADC_GetOffsetChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ebe:	fab3 f383 	clz	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d105      	bne.n	8000ede <HAL_ADC_ConfigChannel+0x2a2>
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	0e9b      	lsrs	r3, r3, #26
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	e00a      	b.n	8000ef4 <HAL_ADC_ConfigChannel+0x2b8>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eee:	fab3 f383 	clz	r3, r3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d106      	bne.n	8000f06 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2200      	movs	r2, #0
 8000efe:	2102      	movs	r1, #2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fc31 	bl	8000768 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2103      	movs	r1, #3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fc17 	bl	8000740 <LL_ADC_GetOffsetChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10a      	bne.n	8000f32 <HAL_ADC_ConfigChannel+0x2f6>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2103      	movs	r1, #3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fc0c 	bl	8000740 <LL_ADC_GetOffsetChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	0e9b      	lsrs	r3, r3, #26
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	e010      	b.n	8000f54 <HAL_ADC_ConfigChannel+0x318>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2103      	movs	r1, #3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fc01 	bl	8000740 <LL_ADC_GetOffsetChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f4c:	fab3 f383 	clz	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d105      	bne.n	8000f6c <HAL_ADC_ConfigChannel+0x330>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	0e9b      	lsrs	r3, r3, #26
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	e00a      	b.n	8000f82 <HAL_ADC_ConfigChannel+0x346>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f7c:	fab3 f383 	clz	r3, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d106      	bne.n	8000f94 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fbea 	bl	8000768 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fcc1 	bl	8000920 <LL_ADC_IsEnabled>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f040 810c 	bne.w	80011be <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	6819      	ldr	r1, [r3, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f7ff fc42 	bl	800083c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	4aad      	ldr	r2, [pc, #692]	; (8001274 <HAL_ADC_ConfigChannel+0x638>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	f040 80fd 	bne.w	80011be <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10b      	bne.n	8000fec <HAL_ADC_ConfigChannel+0x3b0>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	0e9b      	lsrs	r3, r3, #26
 8000fda:	3301      	adds	r3, #1
 8000fdc:	f003 031f 	and.w	r3, r3, #31
 8000fe0:	2b09      	cmp	r3, #9
 8000fe2:	bf94      	ite	ls
 8000fe4:	2301      	movls	r3, #1
 8000fe6:	2300      	movhi	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	e012      	b.n	8001012 <HAL_ADC_ConfigChannel+0x3d6>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ff4:	fa93 f3a3 	rbit	r3, r3
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ffc:	fab3 f383 	clz	r3, r3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3301      	adds	r3, #1
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	2b09      	cmp	r3, #9
 800100a:	bf94      	ite	ls
 800100c:	2301      	movls	r3, #1
 800100e:	2300      	movhi	r3, #0
 8001010:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001012:	2b00      	cmp	r3, #0
 8001014:	d064      	beq.n	80010e0 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800101e:	2b00      	cmp	r3, #0
 8001020:	d107      	bne.n	8001032 <HAL_ADC_ConfigChannel+0x3f6>
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	0e9b      	lsrs	r3, r3, #26
 8001028:	3301      	adds	r3, #1
 800102a:	069b      	lsls	r3, r3, #26
 800102c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001030:	e00e      	b.n	8001050 <HAL_ADC_ConfigChannel+0x414>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001042:	fab3 f383 	clz	r3, r3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	3301      	adds	r3, #1
 800104a:	069b      	lsls	r3, r3, #26
 800104c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x434>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0e9b      	lsrs	r3, r3, #26
 8001062:	3301      	adds	r3, #1
 8001064:	f003 031f 	and.w	r3, r3, #31
 8001068:	2101      	movs	r1, #1
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	e010      	b.n	8001092 <HAL_ADC_ConfigChannel+0x456>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	3301      	adds	r3, #1
 8001088:	f003 031f 	and.w	r3, r3, #31
 800108c:	2101      	movs	r1, #1
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	ea42 0103 	orr.w	r1, r2, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10a      	bne.n	80010b8 <HAL_ADC_ConfigChannel+0x47c>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	0e9b      	lsrs	r3, r3, #26
 80010a8:	3301      	adds	r3, #1
 80010aa:	f003 021f 	and.w	r2, r3, #31
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	051b      	lsls	r3, r3, #20
 80010b6:	e011      	b.n	80010dc <HAL_ADC_ConfigChannel+0x4a0>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c0:	fa93 f3a3 	rbit	r3, r3
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	fab3 f383 	clz	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010dc:	430b      	orrs	r3, r1
 80010de:	e069      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d107      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x4c0>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	0e9b      	lsrs	r3, r3, #26
 80010f2:	3301      	adds	r3, #1
 80010f4:	069b      	lsls	r3, r3, #26
 80010f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010fa:	e00e      	b.n	800111a <HAL_ADC_ConfigChannel+0x4de>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	fa93 f3a3 	rbit	r3, r3
 8001108:	61fb      	str	r3, [r7, #28]
  return result;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fab3 f383 	clz	r3, r3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	3301      	adds	r3, #1
 8001114:	069b      	lsls	r3, r3, #26
 8001116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001122:	2b00      	cmp	r3, #0
 8001124:	d109      	bne.n	800113a <HAL_ADC_ConfigChannel+0x4fe>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0e9b      	lsrs	r3, r3, #26
 800112c:	3301      	adds	r3, #1
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	2101      	movs	r1, #1
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	e010      	b.n	800115c <HAL_ADC_ConfigChannel+0x520>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	617b      	str	r3, [r7, #20]
  return result;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	3301      	adds	r3, #1
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	2101      	movs	r1, #1
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	ea42 0103 	orr.w	r1, r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10d      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x54c>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	0e9b      	lsrs	r3, r3, #26
 8001172:	3301      	adds	r3, #1
 8001174:	f003 021f 	and.w	r2, r3, #31
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	3b1e      	subs	r3, #30
 8001180:	051b      	lsls	r3, r3, #20
 8001182:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001186:	e014      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x576>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fa93 f3a3 	rbit	r3, r3
 8001194:	60fb      	str	r3, [r7, #12]
  return result;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	fab3 f383 	clz	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	3301      	adds	r3, #1
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	3b1e      	subs	r3, #30
 80011ac:	051b      	lsls	r3, r3, #20
 80011ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011b2:	430b      	orrs	r3, r1
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	6892      	ldr	r2, [r2, #8]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fb16 	bl	80007ea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <HAL_ADC_ConfigChannel+0x63c>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 808c 	beq.w	80012e4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011cc:	482b      	ldr	r0, [pc, #172]	; (800127c <HAL_ADC_ConfigChannel+0x640>)
 80011ce:	f7ff fa87 	bl	80006e0 <LL_ADC_GetCommonPathInternalCh>
 80011d2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a29      	ldr	r2, [pc, #164]	; (8001280 <HAL_ADC_ConfigChannel+0x644>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d12b      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x5fc>
 80011e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d125      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a24      	ldr	r2, [pc, #144]	; (8001284 <HAL_ADC_ConfigChannel+0x648>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d004      	beq.n	8001200 <HAL_ADC_ConfigChannel+0x5c4>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a23      	ldr	r2, [pc, #140]	; (8001288 <HAL_ADC_ConfigChannel+0x64c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d16e      	bne.n	80012de <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001208:	4619      	mov	r1, r3
 800120a:	481c      	ldr	r0, [pc, #112]	; (800127c <HAL_ADC_ConfigChannel+0x640>)
 800120c:	f7ff fa55 	bl	80006ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001210:	4b1e      	ldr	r3, [pc, #120]	; (800128c <HAL_ADC_ConfigChannel+0x650>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	099b      	lsrs	r3, r3, #6
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <HAL_ADC_ConfigChannel+0x654>)
 8001218:	fba2 2303 	umull	r2, r3, r2, r3
 800121c:	099a      	lsrs	r2, r3, #6
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001228:	e002      	b.n	8001230 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	3b01      	subs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f9      	bne.n	800122a <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001236:	e052      	b.n	80012de <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a15      	ldr	r2, [pc, #84]	; (8001294 <HAL_ADC_ConfigChannel+0x658>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12a      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x65c>
 8001242:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d124      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <HAL_ADC_ConfigChannel+0x648>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d004      	beq.n	8001262 <HAL_ADC_ConfigChannel+0x626>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_ADC_ConfigChannel+0x64c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d13f      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001262:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800126a:	4619      	mov	r1, r3
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <HAL_ADC_ConfigChannel+0x640>)
 800126e:	f7ff fa24 	bl	80006ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001272:	e036      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x6a6>
 8001274:	407f0000 	.word	0x407f0000
 8001278:	80080000 	.word	0x80080000
 800127c:	50040300 	.word	0x50040300
 8001280:	c7520000 	.word	0xc7520000
 8001284:	50040000 	.word	0x50040000
 8001288:	50040200 	.word	0x50040200
 800128c:	20000010 	.word	0x20000010
 8001290:	053e2d63 	.word	0x053e2d63
 8001294:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <HAL_ADC_ConfigChannel+0x6bc>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d120      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80012a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d11a      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <HAL_ADC_ConfigChannel+0x6c0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d115      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80012bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c0:	4619      	mov	r1, r3
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <HAL_ADC_ConfigChannel+0x6c4>)
 80012c4:	f7ff f9f9 	bl	80006ba <LL_ADC_SetCommonPathInternalCh>
 80012c8:	e00c      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ce:	f043 0220 	orr.w	r2, r3, #32
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80012dc:	e002      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80012de:	bf00      	nop
 80012e0:	e000      	b.n	80012e4 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80012e2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80012ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3798      	adds	r7, #152	; 0x98
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	80000001 	.word	0x80000001
 80012fc:	50040000 	.word	0x50040000
 8001300:	50040300 	.word	0x50040300

08001304 <LL_ADC_IsEnabled>:
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <LL_ADC_IsEnabled+0x18>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <LL_ADC_IsEnabled+0x1a>
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <LL_ADC_REG_IsConversionOngoing>:
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	2b04      	cmp	r3, #4
 800133c:	d101      	bne.n	8001342 <LL_ADC_REG_IsConversionOngoing+0x18>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b09f      	sub	sp, #124	; 0x7c
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800136a:	2302      	movs	r3, #2
 800136c:	e08f      	b.n	800148e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a47      	ldr	r2, [pc, #284]	; (8001498 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d102      	bne.n	8001386 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001380:	4b46      	ldr	r3, [pc, #280]	; (800149c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	e001      	b.n	800138a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10b      	bne.n	80013a8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001394:	f043 0220 	orr.w	r2, r3, #32
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e072      	b.n	800148e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ffbd 	bl	800132a <LL_ADC_REG_IsConversionOngoing>
 80013b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ffb7 	bl	800132a <LL_ADC_REG_IsConversionOngoing>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d154      	bne.n	800146c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80013c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d151      	bne.n	800146c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80013c8:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80013ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d02c      	beq.n	800142e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80013d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	6859      	ldr	r1, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013e6:	035b      	lsls	r3, r3, #13
 80013e8:	430b      	orrs	r3, r1
 80013ea:	431a      	orrs	r2, r3
 80013ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013f0:	4829      	ldr	r0, [pc, #164]	; (8001498 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80013f2:	f7ff ff87 	bl	8001304 <LL_ADC_IsEnabled>
 80013f6:	4604      	mov	r4, r0
 80013f8:	4828      	ldr	r0, [pc, #160]	; (800149c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80013fa:	f7ff ff83 	bl	8001304 <LL_ADC_IsEnabled>
 80013fe:	4603      	mov	r3, r0
 8001400:	431c      	orrs	r4, r3
 8001402:	4828      	ldr	r0, [pc, #160]	; (80014a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001404:	f7ff ff7e 	bl	8001304 <LL_ADC_IsEnabled>
 8001408:	4603      	mov	r3, r0
 800140a:	4323      	orrs	r3, r4
 800140c:	2b00      	cmp	r3, #0
 800140e:	d137      	bne.n	8001480 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001418:	f023 030f 	bic.w	r3, r3, #15
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	6811      	ldr	r1, [r2, #0]
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	6892      	ldr	r2, [r2, #8]
 8001424:	430a      	orrs	r2, r1
 8001426:	431a      	orrs	r2, r3
 8001428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800142a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800142c:	e028      	b.n	8001480 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800142e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001438:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800143a:	4817      	ldr	r0, [pc, #92]	; (8001498 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800143c:	f7ff ff62 	bl	8001304 <LL_ADC_IsEnabled>
 8001440:	4604      	mov	r4, r0
 8001442:	4816      	ldr	r0, [pc, #88]	; (800149c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001444:	f7ff ff5e 	bl	8001304 <LL_ADC_IsEnabled>
 8001448:	4603      	mov	r3, r0
 800144a:	431c      	orrs	r4, r3
 800144c:	4815      	ldr	r0, [pc, #84]	; (80014a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800144e:	f7ff ff59 	bl	8001304 <LL_ADC_IsEnabled>
 8001452:	4603      	mov	r3, r0
 8001454:	4323      	orrs	r3, r4
 8001456:	2b00      	cmp	r3, #0
 8001458:	d112      	bne.n	8001480 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800145a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001462:	f023 030f 	bic.w	r3, r3, #15
 8001466:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001468:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800146a:	e009      	b.n	8001480 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001470:	f043 0220 	orr.w	r2, r3, #32
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800147e:	e000      	b.n	8001482 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001480:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800148a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800148e:	4618      	mov	r0, r3
 8001490:	377c      	adds	r7, #124	; 0x7c
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	50040000 	.word	0x50040000
 800149c:	50040100 	.word	0x50040100
 80014a0:	50040300 	.word	0x50040300
 80014a4:	50040200 	.word	0x50040200

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4907      	ldr	r1, [pc, #28]	; (8001544 <__NVIC_EnableIRQ+0x38>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff ff8e 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff29 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff3e 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff8e 	bl	800159c <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff31 	bl	800150c <__NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa2 	bl	8001604 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d005      	beq.n	80016ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2204      	movs	r2, #4
 80016e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e029      	b.n	8001742 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 020e 	bic.w	r2, r2, #14
 80016fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f003 021c 	and.w	r2, r3, #28
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	4798      	blx	r3
    }
  }
  return status;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175a:	e17f      	b.n	8001a5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2101      	movs	r1, #1
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8171 	beq.w	8001a56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x38>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b12      	cmp	r3, #18
 8001782:	d123      	bne.n	80017cc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	08da      	lsrs	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3208      	adds	r2, #8
 800178c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	220f      	movs	r2, #15
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	08da      	lsrs	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3208      	adds	r2, #8
 80017c6:	6939      	ldr	r1, [r7, #16]
 80017c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0203 	and.w	r2, r3, #3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d00b      	beq.n	8001820 <HAL_GPIO_Init+0xd4>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d007      	beq.n	8001820 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001814:	2b11      	cmp	r3, #17
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b12      	cmp	r3, #18
 800181e:	d130      	bne.n	8001882 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001856:	2201      	movs	r2, #1
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	f003 0201 	and.w	r2, r3, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b03      	cmp	r3, #3
 800188c:	d118      	bne.n	80018c0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001894:	2201      	movs	r2, #1
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80ac 	beq.w	8001a56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	4b5e      	ldr	r3, [pc, #376]	; (8001a78 <HAL_GPIO_Init+0x32c>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001902:	4a5d      	ldr	r2, [pc, #372]	; (8001a78 <HAL_GPIO_Init+0x32c>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6613      	str	r3, [r2, #96]	; 0x60
 800190a:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_GPIO_Init+0x32c>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001916:	4a59      	ldr	r2, [pc, #356]	; (8001a7c <HAL_GPIO_Init+0x330>)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001940:	d025      	beq.n	800198e <HAL_GPIO_Init+0x242>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4e      	ldr	r2, [pc, #312]	; (8001a80 <HAL_GPIO_Init+0x334>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d01f      	beq.n	800198a <HAL_GPIO_Init+0x23e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4d      	ldr	r2, [pc, #308]	; (8001a84 <HAL_GPIO_Init+0x338>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d019      	beq.n	8001986 <HAL_GPIO_Init+0x23a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4c      	ldr	r2, [pc, #304]	; (8001a88 <HAL_GPIO_Init+0x33c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0x236>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4b      	ldr	r2, [pc, #300]	; (8001a8c <HAL_GPIO_Init+0x340>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00d      	beq.n	800197e <HAL_GPIO_Init+0x232>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4a      	ldr	r2, [pc, #296]	; (8001a90 <HAL_GPIO_Init+0x344>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d007      	beq.n	800197a <HAL_GPIO_Init+0x22e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a49      	ldr	r2, [pc, #292]	; (8001a94 <HAL_GPIO_Init+0x348>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_GPIO_Init+0x22a>
 8001972:	2306      	movs	r3, #6
 8001974:	e00c      	b.n	8001990 <HAL_GPIO_Init+0x244>
 8001976:	2307      	movs	r3, #7
 8001978:	e00a      	b.n	8001990 <HAL_GPIO_Init+0x244>
 800197a:	2305      	movs	r3, #5
 800197c:	e008      	b.n	8001990 <HAL_GPIO_Init+0x244>
 800197e:	2304      	movs	r3, #4
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x244>
 8001982:	2303      	movs	r3, #3
 8001984:	e004      	b.n	8001990 <HAL_GPIO_Init+0x244>
 8001986:	2302      	movs	r3, #2
 8001988:	e002      	b.n	8001990 <HAL_GPIO_Init+0x244>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <HAL_GPIO_Init+0x244>
 800198e:	2300      	movs	r3, #0
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	f002 0203 	and.w	r2, r2, #3
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	4093      	lsls	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019a0:	4936      	ldr	r1, [pc, #216]	; (8001a7c <HAL_GPIO_Init+0x330>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ae:	4b3a      	ldr	r3, [pc, #232]	; (8001a98 <HAL_GPIO_Init+0x34c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019d2:	4a31      	ldr	r2, [pc, #196]	; (8001a98 <HAL_GPIO_Init+0x34c>)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019d8:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <HAL_GPIO_Init+0x34c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019fc:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <HAL_GPIO_Init+0x34c>)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a02:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <HAL_GPIO_Init+0x34c>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <HAL_GPIO_Init+0x34c>)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_GPIO_Init+0x34c>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a50:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_GPIO_Init+0x34c>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f47f ae78 	bne.w	800175c <HAL_GPIO_Init+0x10>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	48000400 	.word	0x48000400
 8001a84:	48000800 	.word	0x48000800
 8001a88:	48000c00 	.word	0x48000c00
 8001a8c:	48001000 	.word	0x48001000
 8001a90:	48001400 	.word	0x48001400
 8001a94:	48001800 	.word	0x48001800
 8001a98:	40010400 	.word	0x40010400

08001a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aac:	787b      	ldrb	r3, [r7, #1]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ab2:	887a      	ldrh	r2, [r7, #2]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0af      	b.n	8001c3e <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f003 f9be 	bl	8004e74 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0201 	bic.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e00a      	b.n	8001b2c <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	2200      	movs	r2, #0
 8001b24:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	d9f1      	bls.n	8001b16 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0204 	orr.w	r2, r2, #4
 8001b40:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_LCD_Init+0x17c>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6851      	ldr	r1, [r2, #4]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6892      	ldr	r2, [r2, #8]
 8001b54:	4311      	orrs	r1, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b60:	4311      	orrs	r1, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	69d2      	ldr	r2, [r2, #28]
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6a12      	ldr	r2, [r2, #32]
 8001b6c:	4311      	orrs	r1, r2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6992      	ldr	r2, [r2, #24]
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f8f1 	bl	8001d6a <LCD_WaitForSynchro>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8001b8c:	7cfb      	ldrb	r3, [r7, #19]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_LCD_Init+0xca>
  {
    return status;
 8001b92:	7cfb      	ldrb	r3, [r7, #19]
 8001b94:	e053      	b.n	8001c3e <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001bce:	f7fe fd33 	bl	8000638 <HAL_GetTick>
 8001bd2:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8001bd4:	e00c      	b.n	8001bf0 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001bd6:	f7fe fd2f 	bl	8000638 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001be4:	d904      	bls.n	8001bf0 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2208      	movs	r2, #8
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e026      	b.n	8001c3e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d1eb      	bne.n	8001bd6 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001bfe:	f7fe fd1b 	bl	8000638 <HAL_GetTick>
 8001c02:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8001c04:	e00c      	b.n	8001c20 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001c06:	f7fe fd17 	bl	8000638 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c14:	d904      	bls.n	8001c20 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2210      	movs	r2, #16
 8001c1a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e00e      	b.n	8001c3e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d1eb      	bne.n	8001c06 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8001c3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	fc00000e 	.word	0xfc00000e

08001c4c <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5e:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8001c60:	7cbb      	ldrb	r3, [r7, #18]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d002      	beq.n	8001c6c <HAL_LCD_Clear+0x20>
 8001c66:	7cbb      	ldrb	r3, [r7, #18]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d140      	bne.n	8001cee <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_LCD_Clear+0x2e>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e03a      	b.n	8001cf0 <HAL_LCD_Clear+0xa4>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2202      	movs	r2, #2
 8001c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8001c8a:	f7fe fcd5 	bl	8000638 <HAL_GetTick>
 8001c8e:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001c90:	e010      	b.n	8001cb4 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001c92:	f7fe fcd1 	bl	8000638 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ca0:	d908      	bls.n	8001cb4 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e01d      	b.n	8001cf0 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d0e7      	beq.n	8001c92 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e00a      	b.n	8001cde <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d9f1      	bls.n	8001cc8 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f807 	bl	8001cf8 <HAL_LCD_UpdateDisplayRequest>
 8001cea:	4603      	mov	r3, r0
 8001cec:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8001cee:	7cfb      	ldrb	r3, [r7, #19]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2208      	movs	r2, #8
 8001d06:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0204 	orr.w	r2, r2, #4
 8001d16:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001d18:	f7fe fc8e 	bl	8000638 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8001d1e:	e010      	b.n	8001d42 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001d20:	f7fe fc8a 	bl	8000638 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d2e:	d908      	bls.n	8001d42 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2204      	movs	r2, #4
 8001d34:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e00f      	b.n	8001d62 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d1e7      	bne.n	8001d20 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8001d72:	f7fe fc61 	bl	8000638 <HAL_GetTick>
 8001d76:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001d78:	e00c      	b.n	8001d94 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8001d7a:	f7fe fc5d 	bl	8000638 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d88:	d904      	bls.n	8001d94 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e007      	b.n	8001da4 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d1eb      	bne.n	8001d7a <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40007000 	.word	0x40007000

08001dc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd6:	d130      	bne.n	8001e3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de4:	d038      	beq.n	8001e58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2232      	movs	r2, #50	; 0x32
 8001dfc:	fb02 f303 	mul.w	r3, r2, r3
 8001e00:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0c9b      	lsrs	r3, r3, #18
 8001e08:	3301      	adds	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e0c:	e002      	b.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e20:	d102      	bne.n	8001e28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f2      	bne.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e34:	d110      	bne.n	8001e58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e00f      	b.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e46:	d007      	beq.n	8001e58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e50:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	20000010 	.word	0x20000010
 8001e70:	431bde83 	.word	0x431bde83

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e39d      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e86:	4ba4      	ldr	r3, [pc, #656]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e90:	4ba1      	ldr	r3, [pc, #644]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80e1 	beq.w	800206a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_RCC_OscConfig+0x4a>
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b0c      	cmp	r3, #12
 8001eb2:	f040 8088 	bne.w	8001fc6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	f040 8084 	bne.w	8001fc6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ebe:	4b96      	ldr	r3, [pc, #600]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x62>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e375      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	4b8f      	ldr	r3, [pc, #572]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x7c>
 8001ee6:	4b8c      	ldr	r3, [pc, #560]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eee:	e005      	b.n	8001efc <HAL_RCC_OscConfig+0x88>
 8001ef0:	4b89      	ldr	r3, [pc, #548]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d223      	bcs.n	8001f48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 fd09 	bl	800291c <RCC_SetFlashLatencyFromMSIRange>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e356      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f14:	4b80      	ldr	r3, [pc, #512]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a7f      	ldr	r2, [pc, #508]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f1a:	f043 0308 	orr.w	r3, r3, #8
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b7d      	ldr	r3, [pc, #500]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	497a      	ldr	r1, [pc, #488]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f32:	4b79      	ldr	r3, [pc, #484]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	4975      	ldr	r1, [pc, #468]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
 8001f46:	e022      	b.n	8001f8e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f48:	4b73      	ldr	r3, [pc, #460]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a72      	ldr	r2, [pc, #456]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b70      	ldr	r3, [pc, #448]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	496d      	ldr	r1, [pc, #436]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f66:	4b6c      	ldr	r3, [pc, #432]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	4968      	ldr	r1, [pc, #416]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fccc 	bl	800291c <RCC_SetFlashLatencyFromMSIRange>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e319      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f8e:	f000 fc03 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8001f92:	4601      	mov	r1, r0
 8001f94:	4b60      	ldr	r3, [pc, #384]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	4a5f      	ldr	r2, [pc, #380]	; (800211c <HAL_RCC_OscConfig+0x2a8>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	fa21 f303 	lsr.w	r3, r1, r3
 8001faa:	4a5d      	ldr	r2, [pc, #372]	; (8002120 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fae:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <HAL_RCC_OscConfig+0x2b0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe faf4 	bl	80005a0 <HAL_InitTick>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d052      	beq.n	8002068 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	e2fd      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d032      	beq.n	8002034 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fce:	4b52      	ldr	r3, [pc, #328]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a51      	ldr	r2, [pc, #324]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fda:	f7fe fb2d 	bl	8000638 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fe2:	f7fe fb29 	bl	8000638 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e2e6      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ff4:	4b48      	ldr	r3, [pc, #288]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002000:	4b45      	ldr	r3, [pc, #276]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a44      	ldr	r2, [pc, #272]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b42      	ldr	r3, [pc, #264]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	493f      	ldr	r1, [pc, #252]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800201e:	4b3e      	ldr	r3, [pc, #248]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	493a      	ldr	r1, [pc, #232]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
 8002032:	e01a      	b.n	800206a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002034:	4b38      	ldr	r3, [pc, #224]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a37      	ldr	r2, [pc, #220]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002040:	f7fe fafa 	bl	8000638 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002048:	f7fe faf6 	bl	8000638 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e2b3      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800205a:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x1d4>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d074      	beq.n	8002160 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d005      	beq.n	8002088 <HAL_RCC_OscConfig+0x214>
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d10e      	bne.n	80020a0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d10b      	bne.n	80020a0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d064      	beq.n	800215e <HAL_RCC_OscConfig+0x2ea>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d160      	bne.n	800215e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e290      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	d106      	bne.n	80020b8 <HAL_RCC_OscConfig+0x244>
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1a      	ldr	r2, [pc, #104]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e01d      	b.n	80020f4 <HAL_RCC_OscConfig+0x280>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x268>
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 80020c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a11      	ldr	r2, [pc, #68]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0x280>
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0d      	ldr	r2, [pc, #52]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 80020e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <HAL_RCC_OscConfig+0x2a4>)
 80020ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01c      	beq.n	8002136 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe fa9c 	bl	8000638 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002102:	e011      	b.n	8002128 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7fe fa98 	bl	8000638 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d90a      	bls.n	8002128 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e255      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	08006538 	.word	0x08006538
 8002120:	20000010 	.word	0x20000010
 8002124:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002128:	4bae      	ldr	r3, [pc, #696]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0e7      	beq.n	8002104 <HAL_RCC_OscConfig+0x290>
 8002134:	e014      	b.n	8002160 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7fe fa7f 	bl	8000638 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213e:	f7fe fa7b 	bl	8000638 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	; 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e238      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002150:	4ba4      	ldr	r3, [pc, #656]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f0      	bne.n	800213e <HAL_RCC_OscConfig+0x2ca>
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d060      	beq.n	800222e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2b04      	cmp	r3, #4
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x30a>
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b0c      	cmp	r3, #12
 8002176:	d119      	bne.n	80021ac <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d116      	bne.n	80021ac <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217e:	4b99      	ldr	r3, [pc, #612]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_RCC_OscConfig+0x322>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e215      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002196:	4b93      	ldr	r3, [pc, #588]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	061b      	lsls	r3, r3, #24
 80021a4:	498f      	ldr	r1, [pc, #572]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021aa:	e040      	b.n	800222e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d023      	beq.n	80021fc <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b4:	4b8b      	ldr	r3, [pc, #556]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a8a      	ldr	r2, [pc, #552]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80021ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fa3a 	bl	8000638 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c8:	f7fe fa36 	bl	8000638 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1f3      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021da:	4b82      	ldr	r3, [pc, #520]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e6:	4b7f      	ldr	r3, [pc, #508]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	061b      	lsls	r3, r3, #24
 80021f4:	497b      	ldr	r1, [pc, #492]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
 80021fa:	e018      	b.n	800222e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fc:	4b79      	ldr	r3, [pc, #484]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a78      	ldr	r2, [pc, #480]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe fa16 	bl	8000638 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002210:	f7fe fa12 	bl	8000638 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1cf      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002222:	4b70      	ldr	r3, [pc, #448]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03c      	beq.n	80022b4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01c      	beq.n	800227c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002242:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002248:	4a66      	ldr	r2, [pc, #408]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7fe f9f1 	bl	8000638 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225a:	f7fe f9ed 	bl	8000638 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e1aa      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800226c:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 800226e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0ef      	beq.n	800225a <HAL_RCC_OscConfig+0x3e6>
 800227a:	e01b      	b.n	80022b4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227c:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002282:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7fe f9d4 	bl	8000638 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7fe f9d0 	bl	8000638 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e18d      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022a6:	4b4f      	ldr	r3, [pc, #316]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1ef      	bne.n	8002294 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80a5 	beq.w	800240c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022c6:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10d      	bne.n	80022ee <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d2:	4b44      	ldr	r3, [pc, #272]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	4a43      	ldr	r2, [pc, #268]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80022d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6593      	str	r3, [r2, #88]	; 0x58
 80022de:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ea:	2301      	movs	r3, #1
 80022ec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ee:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <HAL_RCC_OscConfig+0x574>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d118      	bne.n	800232c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022fa:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_RCC_OscConfig+0x574>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a3a      	ldr	r2, [pc, #232]	; (80023e8 <HAL_RCC_OscConfig+0x574>)
 8002300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002306:	f7fe f997 	bl	8000638 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7fe f993 	bl	8000638 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e150      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002320:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <HAL_RCC_OscConfig+0x574>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d108      	bne.n	8002346 <HAL_RCC_OscConfig+0x4d2>
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	4a2a      	ldr	r2, [pc, #168]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002344:	e024      	b.n	8002390 <HAL_RCC_OscConfig+0x51c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b05      	cmp	r3, #5
 800234c:	d110      	bne.n	8002370 <HAL_RCC_OscConfig+0x4fc>
 800234e:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002354:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800235e:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002364:	4a1f      	ldr	r2, [pc, #124]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800236e:	e00f      	b.n	8002390 <HAL_RCC_OscConfig+0x51c>
 8002370:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002376:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d016      	beq.n	80023c6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7fe f94e 	bl	8000638 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a0:	f7fe f94a 	bl	8000638 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e105      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_OscConfig+0x570>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0ed      	beq.n	80023a0 <HAL_RCC_OscConfig+0x52c>
 80023c4:	e019      	b.n	80023fa <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c6:	f7fe f937 	bl	8000638 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023cc:	e00e      	b.n	80023ec <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe f933 	bl	8000638 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d905      	bls.n	80023ec <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0ee      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ec:	4b77      	ldr	r3, [pc, #476]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1e9      	bne.n	80023ce <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023fa:	7ffb      	ldrb	r3, [r7, #31]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002400:	4b72      	ldr	r3, [pc, #456]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a71      	ldr	r2, [pc, #452]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 8002406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80d5 	beq.w	80025c0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b0c      	cmp	r3, #12
 800241a:	f000 808e 	beq.w	800253a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	2b02      	cmp	r3, #2
 8002424:	d15b      	bne.n	80024de <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002426:	4b69      	ldr	r3, [pc, #420]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a68      	ldr	r2, [pc, #416]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 800242c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7fe f901 	bl	8000638 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe f8fd 	bl	8000638 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0ba      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244c:	4b5f      	ldr	r3, [pc, #380]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002458:	4b5c      	ldr	r3, [pc, #368]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <HAL_RCC_OscConfig+0x75c>)
 800245e:	4013      	ands	r3, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002468:	3a01      	subs	r2, #1
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	4311      	orrs	r1, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002472:	0212      	lsls	r2, r2, #8
 8002474:	4311      	orrs	r1, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800247a:	0852      	lsrs	r2, r2, #1
 800247c:	3a01      	subs	r2, #1
 800247e:	0552      	lsls	r2, r2, #21
 8002480:	4311      	orrs	r1, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002486:	0852      	lsrs	r2, r2, #1
 8002488:	3a01      	subs	r2, #1
 800248a:	0652      	lsls	r2, r2, #25
 800248c:	4311      	orrs	r1, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002492:	0912      	lsrs	r2, r2, #4
 8002494:	0452      	lsls	r2, r2, #17
 8002496:	430a      	orrs	r2, r1
 8002498:	494c      	ldr	r1, [pc, #304]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 800249a:	4313      	orrs	r3, r2
 800249c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249e:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a4a      	ldr	r2, [pc, #296]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 80024a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024aa:	4b48      	ldr	r3, [pc, #288]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4a47      	ldr	r2, [pc, #284]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 80024b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024b4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7fe f8bf 	bl	8000638 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024be:	f7fe f8bb 	bl	8000638 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e078      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d0:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x64a>
 80024dc:	e070      	b.n	80025c0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a3a      	ldr	r2, [pc, #232]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 80024e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024e8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d105      	bne.n	8002502 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024f6:	4b35      	ldr	r3, [pc, #212]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4a34      	ldr	r2, [pc, #208]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 80024fc:	f023 0303 	bic.w	r3, r3, #3
 8002500:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002502:	4b32      	ldr	r3, [pc, #200]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	4a31      	ldr	r2, [pc, #196]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 8002508:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800250c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002510:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe f891 	bl	8000638 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe f88d 	bl	8000638 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e04a      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f0      	bne.n	800251a <HAL_RCC_OscConfig+0x6a6>
 8002538:	e042      	b.n	80025c0 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e03d      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002546:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_RCC_OscConfig+0x758>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 0203 	and.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	429a      	cmp	r2, r3
 8002558:	d130      	bne.n	80025bc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	3b01      	subs	r3, #1
 8002566:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d127      	bne.n	80025bc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002576:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d11f      	bne.n	80025bc <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002586:	2a07      	cmp	r2, #7
 8002588:	bf14      	ite	ne
 800258a:	2201      	movne	r2, #1
 800258c:	2200      	moveq	r2, #0
 800258e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002590:	4293      	cmp	r3, r2
 8002592:	d113      	bne.n	80025bc <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	085b      	lsrs	r3, r3, #1
 80025a0:	3b01      	subs	r3, #1
 80025a2:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d109      	bne.n	80025bc <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	3b01      	subs	r3, #1
 80025b6:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	f99d808c 	.word	0xf99d808c

080025d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0c8      	b.n	800277a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_RCC_ClockConfig+0x1b0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d910      	bls.n	8002618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b63      	ldr	r3, [pc, #396]	; (8002784 <HAL_RCC_ClockConfig+0x1b0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 0207 	bic.w	r2, r3, #7
 80025fe:	4961      	ldr	r1, [pc, #388]	; (8002784 <HAL_RCC_ClockConfig+0x1b0>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b5f      	ldr	r3, [pc, #380]	; (8002784 <HAL_RCC_ClockConfig+0x1b0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0b0      	b.n	800277a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d04c      	beq.n	80026be <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d107      	bne.n	800263c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262c:	4b56      	ldr	r3, [pc, #344]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d121      	bne.n	800267c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e09e      	b.n	800277a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d107      	bne.n	8002654 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d115      	bne.n	800267c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e092      	b.n	800277a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d107      	bne.n	800266c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265c:	4b4a      	ldr	r3, [pc, #296]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e086      	b.n	800277a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e07e      	b.n	800277a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800267c:	4b42      	ldr	r3, [pc, #264]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 0203 	bic.w	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	493f      	ldr	r1, [pc, #252]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268e:	f7fd ffd3 	bl	8000638 <HAL_GetTick>
 8002692:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002694:	e00a      	b.n	80026ac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002696:	f7fd ffcf 	bl	8000638 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e066      	b.n	800277a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ac:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 020c 	and.w	r2, r3, #12
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d1eb      	bne.n	8002696 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ca:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	492c      	ldr	r1, [pc, #176]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026dc:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCC_ClockConfig+0x1b0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d210      	bcs.n	800270c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b26      	ldr	r3, [pc, #152]	; (8002784 <HAL_RCC_ClockConfig+0x1b0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 0207 	bic.w	r2, r3, #7
 80026f2:	4924      	ldr	r1, [pc, #144]	; (8002784 <HAL_RCC_ClockConfig+0x1b0>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_RCC_ClockConfig+0x1b0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e036      	b.n	800277a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4918      	ldr	r1, [pc, #96]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002736:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4910      	ldr	r1, [pc, #64]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 8002746:	4313      	orrs	r3, r2
 8002748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800274a:	f000 f825 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 800274e:	4601      	mov	r1, r0
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_RCC_ClockConfig+0x1b4>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	5cd3      	ldrb	r3, [r2, r3]
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	fa21 f303 	lsr.w	r3, r1, r3
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd ff16 	bl	80005a0 <HAL_InitTick>
 8002774:	4603      	mov	r3, r0
 8002776:	72fb      	strb	r3, [r7, #11]

  return status;
 8002778:	7afb      	ldrb	r3, [r7, #11]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40022000 	.word	0x40022000
 8002788:	40021000 	.word	0x40021000
 800278c:	08006538 	.word	0x08006538
 8002790:	20000010 	.word	0x20000010
 8002794:	20000000 	.word	0x20000000

08002798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a6:	4b3d      	ldr	r3, [pc, #244]	; (800289c <HAL_RCC_GetSysClockFreq+0x104>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b0:	4b3a      	ldr	r3, [pc, #232]	; (800289c <HAL_RCC_GetSysClockFreq+0x104>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x34>
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d121      	bne.n	800280a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d11e      	bne.n	800280a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027cc:	4b33      	ldr	r3, [pc, #204]	; (800289c <HAL_RCC_GetSysClockFreq+0x104>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027d8:	4b30      	ldr	r3, [pc, #192]	; (800289c <HAL_RCC_GetSysClockFreq+0x104>)
 80027da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	e005      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027e8:	4b2c      	ldr	r3, [pc, #176]	; (800289c <HAL_RCC_GetSysClockFreq+0x104>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027f4:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10d      	bne.n	8002820 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b04      	cmp	r3, #4
 800280e:	d102      	bne.n	8002816 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	e004      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b08      	cmp	r3, #8
 800281a:	d101      	bne.n	8002820 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800281e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d133      	bne.n	800288e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_RCC_GetSysClockFreq+0x104>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d002      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0xa4>
 8002836:	2b03      	cmp	r3, #3
 8002838:	d003      	beq.n	8002842 <HAL_RCC_GetSysClockFreq+0xaa>
 800283a:	e005      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800283e:	617b      	str	r3, [r7, #20]
      break;
 8002840:	e005      	b.n	800284e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002842:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002844:	617b      	str	r3, [r7, #20]
      break;
 8002846:	e002      	b.n	800284e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	617b      	str	r3, [r7, #20]
      break;
 800284c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800284e:	4b13      	ldr	r3, [pc, #76]	; (800289c <HAL_RCC_GetSysClockFreq+0x104>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	3301      	adds	r3, #1
 800285a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <HAL_RCC_GetSysClockFreq+0x104>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	fb02 f203 	mul.w	r2, r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002872:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_RCC_GetSysClockFreq+0x104>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0e5b      	lsrs	r3, r3, #25
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	3301      	adds	r3, #1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800288e:	69bb      	ldr	r3, [r7, #24]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3724      	adds	r7, #36	; 0x24
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	40021000 	.word	0x40021000
 80028a0:	08006550 	.word	0x08006550
 80028a4:	00f42400 	.word	0x00f42400
 80028a8:	007a1200 	.word	0x007a1200

080028ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000010 	.word	0x20000010

080028c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028c8:	f7ff fff0 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028cc:	4601      	mov	r1, r0
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	08006548 	.word	0x08006548

080028f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028f4:	f7ff ffda 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028f8:	4601      	mov	r1, r0
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	0adb      	lsrs	r3, r3, #11
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	08006548 	.word	0x08006548

0800291c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002934:	f7ff fa3a 	bl	8001dac <HAL_PWREx_GetVoltageRange>
 8002938:	6178      	str	r0, [r7, #20]
 800293a:	e014      	b.n	8002966 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002946:	6593      	str	r3, [r2, #88]	; 0x58
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002954:	f7ff fa2a 	bl	8001dac <HAL_PWREx_GetVoltageRange>
 8002958:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800295a:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295e:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002964:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800296c:	d10b      	bne.n	8002986 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b80      	cmp	r3, #128	; 0x80
 8002972:	d919      	bls.n	80029a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2ba0      	cmp	r3, #160	; 0xa0
 8002978:	d902      	bls.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800297a:	2302      	movs	r3, #2
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	e013      	b.n	80029a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002980:	2301      	movs	r3, #1
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	e010      	b.n	80029a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b80      	cmp	r3, #128	; 0x80
 800298a:	d902      	bls.n	8002992 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800298c:	2303      	movs	r3, #3
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	e00a      	b.n	80029a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b80      	cmp	r3, #128	; 0x80
 8002996:	d102      	bne.n	800299e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002998:	2302      	movs	r3, #2
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	e004      	b.n	80029a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b70      	cmp	r3, #112	; 0x70
 80029a2:	d101      	bne.n	80029a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029a4:	2301      	movs	r3, #1
 80029a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 0207 	bic.w	r2, r3, #7
 80029b0:	4909      	ldr	r1, [pc, #36]	; (80029d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d001      	beq.n	80029ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40022000 	.word	0x40022000

080029dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029e4:	2300      	movs	r3, #0
 80029e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029e8:	2300      	movs	r3, #0
 80029ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d03f      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a00:	d01c      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a06:	d802      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00e      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002a0c:	e01f      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002a0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a12:	d003      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002a14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a18:	d01c      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002a1a:	e018      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a1c:	4b85      	ldr	r3, [pc, #532]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a84      	ldr	r2, [pc, #528]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a26:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a28:	e015      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fab9 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002a36:	4603      	mov	r3, r0
 8002a38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a3a:	e00c      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3320      	adds	r3, #32
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fba0 	bl	8003188 <RCCEx_PLLSAI2_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a4c:	e003      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	74fb      	strb	r3, [r7, #19]
      break;
 8002a52:	e000      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a5c:	4b75      	ldr	r3, [pc, #468]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a6a:	4972      	ldr	r1, [pc, #456]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a72:	e001      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d03f      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a8c:	d01c      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a92:	d802      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00e      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002a98:	e01f      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a9e:	d003      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002aa0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002aa4:	d01c      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002aa6:	e018      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aa8:	4b62      	ldr	r3, [pc, #392]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a61      	ldr	r2, [pc, #388]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fa73 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ac6:	e00c      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3320      	adds	r3, #32
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fb5a 	bl	8003188 <RCCEx_PLLSAI2_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ad8:	e003      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ade:	e000      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ae8:	4b52      	ldr	r3, [pc, #328]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af6:	494f      	ldr	r1, [pc, #316]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002afe:	e001      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80a0 	beq.w	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00d      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2c:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	4a40      	ldr	r2, [pc, #256]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6593      	str	r3, [r2, #88]	; 0x58
 8002b38:	4b3e      	ldr	r3, [pc, #248]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b44:	2301      	movs	r3, #1
 8002b46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b48:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a3a      	ldr	r2, [pc, #232]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b54:	f7fd fd70 	bl	8000638 <HAL_GetTick>
 8002b58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b5a:	e009      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5c:	f7fd fd6c 	bl	8000638 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d902      	bls.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b6e:	e005      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b70:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0ef      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d15c      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01f      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d019      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ba0:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002baa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	4a20      	ldr	r2, [pc, #128]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bcc:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d016      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fd fd2b 	bl	8000638 <HAL_GetTick>
 8002be2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be4:	e00b      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7fd fd27 	bl	8000638 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d902      	bls.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	74fb      	strb	r3, [r7, #19]
            break;
 8002bfc:	e006      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ec      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c22:	4904      	ldr	r1, [pc, #16]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c2a:	e009      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	74bb      	strb	r3, [r7, #18]
 8002c30:	e006      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c40:	7c7b      	ldrb	r3, [r7, #17]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d105      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c46:	4b9e      	ldr	r3, [pc, #632]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	4a9d      	ldr	r2, [pc, #628]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c5e:	4b98      	ldr	r3, [pc, #608]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f023 0203 	bic.w	r2, r3, #3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	4994      	ldr	r1, [pc, #592]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c80:	4b8f      	ldr	r3, [pc, #572]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f023 020c 	bic.w	r2, r3, #12
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	498c      	ldr	r1, [pc, #560]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ca2:	4b87      	ldr	r3, [pc, #540]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	4983      	ldr	r1, [pc, #524]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cc4:	4b7e      	ldr	r3, [pc, #504]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	497b      	ldr	r1, [pc, #492]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ce6:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf4:	4972      	ldr	r1, [pc, #456]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d08:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d16:	496a      	ldr	r1, [pc, #424]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d2a:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	4961      	ldr	r1, [pc, #388]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d4c:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5a:	4959      	ldr	r1, [pc, #356]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d6e:	4b54      	ldr	r3, [pc, #336]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7c:	4950      	ldr	r1, [pc, #320]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d90:	4b4b      	ldr	r3, [pc, #300]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	4948      	ldr	r1, [pc, #288]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002db2:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	493f      	ldr	r1, [pc, #252]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d028      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dd4:	4b3a      	ldr	r3, [pc, #232]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002de2:	4937      	ldr	r1, [pc, #220]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002df2:	d106      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df4:	4b32      	ldr	r3, [pc, #200]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a31      	ldr	r2, [pc, #196]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dfe:	60d3      	str	r3, [r2, #12]
 8002e00:	e011      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e0a:	d10c      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	2101      	movs	r1, #1
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 f8c8 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d028      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e32:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	491f      	ldr	r1, [pc, #124]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e50:	d106      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	4a1a      	ldr	r2, [pc, #104]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e5c:	60d3      	str	r3, [r2, #12]
 8002e5e:	e011      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f899 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002e76:	4603      	mov	r3, r0
 8002e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e7a:	7cfb      	ldrb	r3, [r7, #19]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d02b      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9e:	4908      	ldr	r1, [pc, #32]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eae:	d109      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4a02      	ldr	r2, [pc, #8]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eba:	60d3      	str	r3, [r2, #12]
 8002ebc:	e014      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 f867 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ede:	7cfb      	ldrb	r3, [r7, #19]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d02f      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ef4:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f02:	4928      	ldr	r1, [pc, #160]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f12:	d10d      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	2102      	movs	r1, #2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f844 	bl	8002fa8 <RCCEx_PLLSAI1_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d014      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	74bb      	strb	r3, [r7, #18]
 8002f2e:	e011      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3320      	adds	r3, #32
 8002f3e:	2102      	movs	r1, #2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f921 	bl	8003188 <RCCEx_PLLSAI2_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f4a:	7cfb      	ldrb	r3, [r7, #19]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f60:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f6e:	490d      	ldr	r1, [pc, #52]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f92:	4904      	ldr	r1, [pc, #16]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fb6:	4b73      	ldr	r3, [pc, #460]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d018      	beq.n	8002ff4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fc2:	4b70      	ldr	r3, [pc, #448]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0203 	and.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d10d      	bne.n	8002fee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fda:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d044      	beq.n	8003078 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	e041      	b.n	8003078 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d00c      	beq.n	8003016 <RCCEx_PLLSAI1_Config+0x6e>
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d013      	beq.n	8003028 <RCCEx_PLLSAI1_Config+0x80>
 8003000:	2b01      	cmp	r3, #1
 8003002:	d120      	bne.n	8003046 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003004:	4b5f      	ldr	r3, [pc, #380]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d11d      	bne.n	800304c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003014:	e01a      	b.n	800304c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003016:	4b5b      	ldr	r3, [pc, #364]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301e:	2b00      	cmp	r3, #0
 8003020:	d116      	bne.n	8003050 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003026:	e013      	b.n	8003050 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003028:	4b56      	ldr	r3, [pc, #344]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10f      	bne.n	8003054 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003044:	e006      	b.n	8003054 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	73fb      	strb	r3, [r7, #15]
      break;
 800304a:	e004      	b.n	8003056 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800304c:	bf00      	nop
 800304e:	e002      	b.n	8003056 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003050:	bf00      	nop
 8003052:	e000      	b.n	8003056 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003054:	bf00      	nop
    }

    if(status == HAL_OK)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10d      	bne.n	8003078 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800305c:	4b49      	ldr	r3, [pc, #292]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6819      	ldr	r1, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	3b01      	subs	r3, #1
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	430b      	orrs	r3, r1
 8003072:	4944      	ldr	r1, [pc, #272]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003074:	4313      	orrs	r3, r2
 8003076:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d17d      	bne.n	800317a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800307e:	4b41      	ldr	r3, [pc, #260]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a40      	ldr	r2, [pc, #256]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003084:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800308a:	f7fd fad5 	bl	8000638 <HAL_GetTick>
 800308e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003090:	e009      	b.n	80030a6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003092:	f7fd fad1 	bl	8000638 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d902      	bls.n	80030a6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	73fb      	strb	r3, [r7, #15]
        break;
 80030a4:	e005      	b.n	80030b2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ef      	bne.n	8003092 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d160      	bne.n	800317a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d111      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030be:	4b31      	ldr	r3, [pc, #196]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6892      	ldr	r2, [r2, #8]
 80030ce:	0211      	lsls	r1, r2, #8
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68d2      	ldr	r2, [r2, #12]
 80030d4:	0912      	lsrs	r2, r2, #4
 80030d6:	0452      	lsls	r2, r2, #17
 80030d8:	430a      	orrs	r2, r1
 80030da:	492a      	ldr	r1, [pc, #168]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	610b      	str	r3, [r1, #16]
 80030e0:	e027      	b.n	8003132 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d112      	bne.n	800310e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e8:	4b26      	ldr	r3, [pc, #152]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6892      	ldr	r2, [r2, #8]
 80030f8:	0211      	lsls	r1, r2, #8
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6912      	ldr	r2, [r2, #16]
 80030fe:	0852      	lsrs	r2, r2, #1
 8003100:	3a01      	subs	r2, #1
 8003102:	0552      	lsls	r2, r2, #21
 8003104:	430a      	orrs	r2, r1
 8003106:	491f      	ldr	r1, [pc, #124]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003108:	4313      	orrs	r3, r2
 800310a:	610b      	str	r3, [r1, #16]
 800310c:	e011      	b.n	8003132 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800310e:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003116:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6892      	ldr	r2, [r2, #8]
 800311e:	0211      	lsls	r1, r2, #8
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6952      	ldr	r2, [r2, #20]
 8003124:	0852      	lsrs	r2, r2, #1
 8003126:	3a01      	subs	r2, #1
 8003128:	0652      	lsls	r2, r2, #25
 800312a:	430a      	orrs	r2, r1
 800312c:	4915      	ldr	r1, [pc, #84]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a13      	ldr	r2, [pc, #76]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003138:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800313c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313e:	f7fd fa7b 	bl	8000638 <HAL_GetTick>
 8003142:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003144:	e009      	b.n	800315a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003146:	f7fd fa77 	bl	8000638 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d902      	bls.n	800315a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	73fb      	strb	r3, [r7, #15]
          break;
 8003158:	e005      	b.n	8003166 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0ef      	beq.n	8003146 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	4903      	ldr	r1, [pc, #12]	; (8003184 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000

08003188 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003196:	4b68      	ldr	r3, [pc, #416]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d018      	beq.n	80031d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031a2:	4b65      	ldr	r3, [pc, #404]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0203 	and.w	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d10d      	bne.n	80031ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
       ||
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80031ba:	4b5f      	ldr	r3, [pc, #380]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
       ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d044      	beq.n	8003258 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	e041      	b.n	8003258 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d00c      	beq.n	80031f6 <RCCEx_PLLSAI2_Config+0x6e>
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d013      	beq.n	8003208 <RCCEx_PLLSAI2_Config+0x80>
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d120      	bne.n	8003226 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031e4:	4b54      	ldr	r3, [pc, #336]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d11d      	bne.n	800322c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f4:	e01a      	b.n	800322c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031f6:	4b50      	ldr	r3, [pc, #320]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d116      	bne.n	8003230 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003206:	e013      	b.n	8003230 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003208:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10f      	bne.n	8003234 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003214:	4b48      	ldr	r3, [pc, #288]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003224:	e006      	b.n	8003234 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
      break;
 800322a:	e004      	b.n	8003236 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800322c:	bf00      	nop
 800322e:	e002      	b.n	8003236 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003230:	bf00      	nop
 8003232:	e000      	b.n	8003236 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003234:	bf00      	nop
    }

    if(status == HAL_OK)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10d      	bne.n	8003258 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800323c:	4b3e      	ldr	r3, [pc, #248]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	3b01      	subs	r3, #1
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	430b      	orrs	r3, r1
 8003252:	4939      	ldr	r1, [pc, #228]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003254:	4313      	orrs	r3, r2
 8003256:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d167      	bne.n	800332e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800325e:	4b36      	ldr	r3, [pc, #216]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a35      	ldr	r2, [pc, #212]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326a:	f7fd f9e5 	bl	8000638 <HAL_GetTick>
 800326e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003270:	e009      	b.n	8003286 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003272:	f7fd f9e1 	bl	8000638 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d902      	bls.n	8003286 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	73fb      	strb	r3, [r7, #15]
        break;
 8003284:	e005      	b.n	8003292 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003286:	4b2c      	ldr	r3, [pc, #176]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ef      	bne.n	8003272 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d14a      	bne.n	800332e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d111      	bne.n	80032c2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800329e:	4b26      	ldr	r3, [pc, #152]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6892      	ldr	r2, [r2, #8]
 80032ae:	0211      	lsls	r1, r2, #8
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68d2      	ldr	r2, [r2, #12]
 80032b4:	0912      	lsrs	r2, r2, #4
 80032b6:	0452      	lsls	r2, r2, #17
 80032b8:	430a      	orrs	r2, r1
 80032ba:	491f      	ldr	r1, [pc, #124]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	614b      	str	r3, [r1, #20]
 80032c0:	e011      	b.n	80032e6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032c2:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6892      	ldr	r2, [r2, #8]
 80032d2:	0211      	lsls	r1, r2, #8
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6912      	ldr	r2, [r2, #16]
 80032d8:	0852      	lsrs	r2, r2, #1
 80032da:	3a01      	subs	r2, #1
 80032dc:	0652      	lsls	r2, r2, #25
 80032de:	430a      	orrs	r2, r1
 80032e0:	4915      	ldr	r1, [pc, #84]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a13      	ldr	r2, [pc, #76]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f2:	f7fd f9a1 	bl	8000638 <HAL_GetTick>
 80032f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032f8:	e009      	b.n	800330e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032fa:	f7fd f99d 	bl	8000638 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d902      	bls.n	800330e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	73fb      	strb	r3, [r7, #15]
          break;
 800330c:	e005      	b.n	800331a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0ef      	beq.n	80032fa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d106      	bne.n	800332e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	4903      	ldr	r1, [pc, #12]	; (8003338 <RCCEx_PLLSAI2_Config+0x1b0>)
 800332a:	4313      	orrs	r3, r2
 800332c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800332e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000

0800333c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e040      	b.n	80033d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f001 fdea 	bl	8004f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	; 0x24
 8003368:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fb72 	bl	8003a64 <UART_SetConfig>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e022      	b.n	80033d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 feae 	bl	80040f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 ff35 	bl	8004238 <UART_CheckIdleState>
 80033ce:	4603      	mov	r3, r0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	f040 8081 	bne.w	80034f4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_UART_Transmit+0x26>
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e079      	b.n	80034f6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_UART_Transmit+0x38>
 800340c:	2302      	movs	r3, #2
 800340e:	e072      	b.n	80034f6 <HAL_UART_Transmit+0x11e>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2221      	movs	r2, #33	; 0x21
 8003422:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003424:	f7fd f908 	bl	8000638 <HAL_GetTick>
 8003428:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	88fa      	ldrh	r2, [r7, #6]
 8003436:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003442:	d108      	bne.n	8003456 <HAL_UART_Transmit+0x7e>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d104      	bne.n	8003456 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800344c:	2300      	movs	r3, #0
 800344e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	e003      	b.n	800345e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800345e:	e02d      	b.n	80034bc <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2200      	movs	r2, #0
 8003468:	2180      	movs	r1, #128	; 0x80
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 ff29 	bl	80042c2 <UART_WaitOnFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e03d      	b.n	80034f6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	881a      	ldrh	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800348c:	b292      	uxth	r2, r2
 800348e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	3302      	adds	r3, #2
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	e008      	b.n	80034aa <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	781a      	ldrb	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	b292      	uxth	r2, r2
 80034a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	3301      	adds	r3, #1
 80034a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1cb      	bne.n	8003460 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2200      	movs	r2, #0
 80034d0:	2140      	movs	r1, #64	; 0x40
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fef5 	bl	80042c2 <UART_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e009      	b.n	80034f6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
  }
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b08a      	sub	sp, #40	; 0x28
 8003502:	af02      	add	r7, sp, #8
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	603b      	str	r3, [r7, #0]
 800350a:	4613      	mov	r3, r2
 800350c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003512:	2b20      	cmp	r3, #32
 8003514:	f040 80bb 	bne.w	800368e <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_UART_Receive+0x26>
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0b3      	b.n	8003690 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_UART_Receive+0x38>
 8003532:	2302      	movs	r3, #2
 8003534:	e0ac      	b.n	8003690 <HAL_UART_Receive+0x192>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2222      	movs	r2, #34	; 0x22
 8003548:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800354a:	f7fd f875 	bl	8000638 <HAL_GetTick>
 800354e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	88fa      	ldrh	r2, [r7, #6]
 8003554:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003568:	d10e      	bne.n	8003588 <HAL_UART_Receive+0x8a>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d105      	bne.n	800357e <HAL_UART_Receive+0x80>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003578:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800357c:	e02d      	b.n	80035da <HAL_UART_Receive+0xdc>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	22ff      	movs	r2, #255	; 0xff
 8003582:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003586:	e028      	b.n	80035da <HAL_UART_Receive+0xdc>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10d      	bne.n	80035ac <HAL_UART_Receive+0xae>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <HAL_UART_Receive+0xa4>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	22ff      	movs	r2, #255	; 0xff
 800359c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035a0:	e01b      	b.n	80035da <HAL_UART_Receive+0xdc>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	227f      	movs	r2, #127	; 0x7f
 80035a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035aa:	e016      	b.n	80035da <HAL_UART_Receive+0xdc>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035b4:	d10d      	bne.n	80035d2 <HAL_UART_Receive+0xd4>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <HAL_UART_Receive+0xca>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	227f      	movs	r2, #127	; 0x7f
 80035c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035c6:	e008      	b.n	80035da <HAL_UART_Receive+0xdc>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	223f      	movs	r2, #63	; 0x3f
 80035cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035d0:	e003      	b.n	80035da <HAL_UART_Receive+0xdc>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80035e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ea:	d108      	bne.n	80035fe <HAL_UART_Receive+0x100>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d104      	bne.n	80035fe <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	e003      	b.n	8003606 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003606:	e033      	b.n	8003670 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2200      	movs	r2, #0
 8003610:	2120      	movs	r1, #32
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fe55 	bl	80042c2 <UART_WaitOnFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e036      	b.n	8003690 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10c      	bne.n	8003642 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800362e:	b29a      	uxth	r2, r3
 8003630:	8a7b      	ldrh	r3, [r7, #18]
 8003632:	4013      	ands	r3, r2
 8003634:	b29a      	uxth	r2, r3
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	3302      	adds	r3, #2
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	e00d      	b.n	800365e <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003648:	b29b      	uxth	r3, r3
 800364a:	b2da      	uxtb	r2, r3
 800364c:	8a7b      	ldrh	r3, [r7, #18]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	4013      	ands	r3, r2
 8003652:	b2da      	uxtb	r2, r3
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	3301      	adds	r3, #1
 800365c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1c5      	bne.n	8003608 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	f040 808a 	bne.w	80037c4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_UART_Receive_IT+0x24>
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e082      	b.n	80037c6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Receive_IT+0x36>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e07b      	b.n	80037c6 <HAL_UART_Receive_IT+0x12e>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	88fa      	ldrh	r2, [r7, #6]
 80036e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	88fa      	ldrh	r2, [r7, #6]
 80036e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fa:	d10e      	bne.n	800371a <HAL_UART_Receive_IT+0x82>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <HAL_UART_Receive_IT+0x78>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f240 12ff 	movw	r2, #511	; 0x1ff
 800370a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800370e:	e02d      	b.n	800376c <HAL_UART_Receive_IT+0xd4>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	22ff      	movs	r2, #255	; 0xff
 8003714:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003718:	e028      	b.n	800376c <HAL_UART_Receive_IT+0xd4>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <HAL_UART_Receive_IT+0xa6>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <HAL_UART_Receive_IT+0x9c>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	22ff      	movs	r2, #255	; 0xff
 800372e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003732:	e01b      	b.n	800376c <HAL_UART_Receive_IT+0xd4>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	227f      	movs	r2, #127	; 0x7f
 8003738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800373c:	e016      	b.n	800376c <HAL_UART_Receive_IT+0xd4>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003746:	d10d      	bne.n	8003764 <HAL_UART_Receive_IT+0xcc>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <HAL_UART_Receive_IT+0xc2>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	227f      	movs	r2, #127	; 0x7f
 8003754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003758:	e008      	b.n	800376c <HAL_UART_Receive_IT+0xd4>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	223f      	movs	r2, #63	; 0x3f
 800375e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003762:	e003      	b.n	800376c <HAL_UART_Receive_IT+0xd4>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2222      	movs	r2, #34	; 0x22
 8003776:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003790:	d107      	bne.n	80037a2 <HAL_UART_Receive_IT+0x10a>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d103      	bne.n	80037a2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4a0d      	ldr	r2, [pc, #52]	; (80037d4 <HAL_UART_Receive_IT+0x13c>)
 800379e:	661a      	str	r2, [r3, #96]	; 0x60
 80037a0:	e002      	b.n	80037a8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a0c      	ldr	r2, [pc, #48]	; (80037d8 <HAL_UART_Receive_IT+0x140>)
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80037be:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e000      	b.n	80037c6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	0800449b 	.word	0x0800449b
 80037d8:	080043f1 	.word	0x080043f1

080037dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d113      	bne.n	8003832 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00e      	beq.n	8003832 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80ff 	beq.w	8003a26 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
      }
      return;
 8003830:	e0f9      	b.n	8003a26 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80c1 	beq.w	80039bc <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80b6 	beq.w	80039bc <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00e      	beq.n	8003878 <HAL_UART_IRQHandler+0x9c>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d009      	beq.n	8003878 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003870:	f043 0201 	orr.w	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00e      	beq.n	80038a0 <HAL_UART_IRQHandler+0xc4>
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d009      	beq.n	80038a0 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2202      	movs	r2, #2
 8003892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003898:	f043 0204 	orr.w	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00e      	beq.n	80038c8 <HAL_UART_IRQHandler+0xec>
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d009      	beq.n	80038c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2204      	movs	r2, #4
 80038ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c0:	f043 0202 	orr.w	r2, r3, #2
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d013      	beq.n	80038fa <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2208      	movs	r2, #8
 80038ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038f2:	f043 0208 	orr.w	r2, r3, #8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8093 	beq.w	8003a2a <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00c      	beq.n	8003928 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800392c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d004      	beq.n	8003946 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003942:	2b00      	cmp	r3, #0
 8003944:	d031      	beq.n	80039aa <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fd03 	bl	8004352 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d123      	bne.n	80039a2 <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003968:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d013      	beq.n	800399a <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003976:	4a30      	ldr	r2, [pc, #192]	; (8003a38 <HAL_UART_IRQHandler+0x25c>)
 8003978:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd fea3 	bl	80016ca <HAL_DMA_Abort_IT>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d016      	beq.n	80039b8 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003994:	4610      	mov	r0, r2
 8003996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003998:	e00e      	b.n	80039b8 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f858 	bl	8003a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	e00a      	b.n	80039b8 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f854 	bl	8003a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	e006      	b.n	80039b8 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f850 	bl	8003a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80039b6:	e038      	b.n	8003a2a <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	bf00      	nop
    return;
 80039ba:	e036      	b.n	8003a2a <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <HAL_UART_IRQHandler+0x206>
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fdb2 	bl	8004544 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039e0:	e026      	b.n	8003a30 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00d      	beq.n	8003a08 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d017      	beq.n	8003a2e <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
    }
    return;
 8003a06:	e012      	b.n	8003a2e <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00e      	beq.n	8003a30 <HAL_UART_IRQHandler+0x254>
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fcce 	bl	80043be <UART_EndTransmit_IT>
    return;
 8003a22:	bf00      	nop
 8003a24:	e004      	b.n	8003a30 <HAL_UART_IRQHandler+0x254>
      return;
 8003a26:	bf00      	nop
 8003a28:	e002      	b.n	8003a30 <HAL_UART_IRQHandler+0x254>
    return;
 8003a2a:	bf00      	nop
 8003a2c:	e000      	b.n	8003a30 <HAL_UART_IRQHandler+0x254>
    return;
 8003a2e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	08004393 	.word	0x08004393

08003a3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a64:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003a68:	b088      	sub	sp, #32
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4bac      	ldr	r3, [pc, #688]	; (8003d4c <UART_SetConfig+0x2e8>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	69f9      	ldr	r1, [r7, #28]
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4aa2      	ldr	r2, [pc, #648]	; (8003d50 <UART_SetConfig+0x2ec>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a99      	ldr	r2, [pc, #612]	; (8003d54 <UART_SetConfig+0x2f0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d121      	bne.n	8003b38 <UART_SetConfig+0xd4>
 8003af4:	4b98      	ldr	r3, [pc, #608]	; (8003d58 <UART_SetConfig+0x2f4>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d816      	bhi.n	8003b30 <UART_SetConfig+0xcc>
 8003b02:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <UART_SetConfig+0xa4>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b25 	.word	0x08003b25
 8003b10:	08003b1f 	.word	0x08003b1f
 8003b14:	08003b2b 	.word	0x08003b2b
 8003b18:	2301      	movs	r3, #1
 8003b1a:	76fb      	strb	r3, [r7, #27]
 8003b1c:	e0e8      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	76fb      	strb	r3, [r7, #27]
 8003b22:	e0e5      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003b24:	2304      	movs	r3, #4
 8003b26:	76fb      	strb	r3, [r7, #27]
 8003b28:	e0e2      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	76fb      	strb	r3, [r7, #27]
 8003b2e:	e0df      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003b30:	2310      	movs	r3, #16
 8003b32:	76fb      	strb	r3, [r7, #27]
 8003b34:	bf00      	nop
 8003b36:	e0db      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a87      	ldr	r2, [pc, #540]	; (8003d5c <UART_SetConfig+0x2f8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d134      	bne.n	8003bac <UART_SetConfig+0x148>
 8003b42:	4b85      	ldr	r3, [pc, #532]	; (8003d58 <UART_SetConfig+0x2f4>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	d829      	bhi.n	8003ba4 <UART_SetConfig+0x140>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <UART_SetConfig+0xf4>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003b8d 	.word	0x08003b8d
 8003b5c:	08003ba5 	.word	0x08003ba5
 8003b60:	08003ba5 	.word	0x08003ba5
 8003b64:	08003ba5 	.word	0x08003ba5
 8003b68:	08003b99 	.word	0x08003b99
 8003b6c:	08003ba5 	.word	0x08003ba5
 8003b70:	08003ba5 	.word	0x08003ba5
 8003b74:	08003ba5 	.word	0x08003ba5
 8003b78:	08003b93 	.word	0x08003b93
 8003b7c:	08003ba5 	.word	0x08003ba5
 8003b80:	08003ba5 	.word	0x08003ba5
 8003b84:	08003ba5 	.word	0x08003ba5
 8003b88:	08003b9f 	.word	0x08003b9f
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	76fb      	strb	r3, [r7, #27]
 8003b90:	e0ae      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003b92:	2302      	movs	r3, #2
 8003b94:	76fb      	strb	r3, [r7, #27]
 8003b96:	e0ab      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	76fb      	strb	r3, [r7, #27]
 8003b9c:	e0a8      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	76fb      	strb	r3, [r7, #27]
 8003ba2:	e0a5      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	76fb      	strb	r3, [r7, #27]
 8003ba8:	bf00      	nop
 8003baa:	e0a1      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a6b      	ldr	r2, [pc, #428]	; (8003d60 <UART_SetConfig+0x2fc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d120      	bne.n	8003bf8 <UART_SetConfig+0x194>
 8003bb6:	4b68      	ldr	r3, [pc, #416]	; (8003d58 <UART_SetConfig+0x2f4>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d00f      	beq.n	8003be4 <UART_SetConfig+0x180>
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d802      	bhi.n	8003bce <UART_SetConfig+0x16a>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <UART_SetConfig+0x174>
 8003bcc:	e010      	b.n	8003bf0 <UART_SetConfig+0x18c>
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d005      	beq.n	8003bde <UART_SetConfig+0x17a>
 8003bd2:	2b30      	cmp	r3, #48	; 0x30
 8003bd4:	d009      	beq.n	8003bea <UART_SetConfig+0x186>
 8003bd6:	e00b      	b.n	8003bf0 <UART_SetConfig+0x18c>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	76fb      	strb	r3, [r7, #27]
 8003bdc:	e088      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003bde:	2302      	movs	r3, #2
 8003be0:	76fb      	strb	r3, [r7, #27]
 8003be2:	e085      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003be4:	2304      	movs	r3, #4
 8003be6:	76fb      	strb	r3, [r7, #27]
 8003be8:	e082      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003bea:	2308      	movs	r3, #8
 8003bec:	76fb      	strb	r3, [r7, #27]
 8003bee:	e07f      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	76fb      	strb	r3, [r7, #27]
 8003bf4:	bf00      	nop
 8003bf6:	e07b      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a59      	ldr	r2, [pc, #356]	; (8003d64 <UART_SetConfig+0x300>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d120      	bne.n	8003c44 <UART_SetConfig+0x1e0>
 8003c02:	4b55      	ldr	r3, [pc, #340]	; (8003d58 <UART_SetConfig+0x2f4>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d00f      	beq.n	8003c30 <UART_SetConfig+0x1cc>
 8003c10:	2b40      	cmp	r3, #64	; 0x40
 8003c12:	d802      	bhi.n	8003c1a <UART_SetConfig+0x1b6>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <UART_SetConfig+0x1c0>
 8003c18:	e010      	b.n	8003c3c <UART_SetConfig+0x1d8>
 8003c1a:	2b80      	cmp	r3, #128	; 0x80
 8003c1c:	d005      	beq.n	8003c2a <UART_SetConfig+0x1c6>
 8003c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c20:	d009      	beq.n	8003c36 <UART_SetConfig+0x1d2>
 8003c22:	e00b      	b.n	8003c3c <UART_SetConfig+0x1d8>
 8003c24:	2300      	movs	r3, #0
 8003c26:	76fb      	strb	r3, [r7, #27]
 8003c28:	e062      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	76fb      	strb	r3, [r7, #27]
 8003c2e:	e05f      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003c30:	2304      	movs	r3, #4
 8003c32:	76fb      	strb	r3, [r7, #27]
 8003c34:	e05c      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003c36:	2308      	movs	r3, #8
 8003c38:	76fb      	strb	r3, [r7, #27]
 8003c3a:	e059      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003c3c:	2310      	movs	r3, #16
 8003c3e:	76fb      	strb	r3, [r7, #27]
 8003c40:	bf00      	nop
 8003c42:	e055      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a47      	ldr	r2, [pc, #284]	; (8003d68 <UART_SetConfig+0x304>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d124      	bne.n	8003c98 <UART_SetConfig+0x234>
 8003c4e:	4b42      	ldr	r3, [pc, #264]	; (8003d58 <UART_SetConfig+0x2f4>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c5c:	d012      	beq.n	8003c84 <UART_SetConfig+0x220>
 8003c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c62:	d802      	bhi.n	8003c6a <UART_SetConfig+0x206>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <UART_SetConfig+0x214>
 8003c68:	e012      	b.n	8003c90 <UART_SetConfig+0x22c>
 8003c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6e:	d006      	beq.n	8003c7e <UART_SetConfig+0x21a>
 8003c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c74:	d009      	beq.n	8003c8a <UART_SetConfig+0x226>
 8003c76:	e00b      	b.n	8003c90 <UART_SetConfig+0x22c>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	76fb      	strb	r3, [r7, #27]
 8003c7c:	e038      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	76fb      	strb	r3, [r7, #27]
 8003c82:	e035      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003c84:	2304      	movs	r3, #4
 8003c86:	76fb      	strb	r3, [r7, #27]
 8003c88:	e032      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	76fb      	strb	r3, [r7, #27]
 8003c8e:	e02f      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003c90:	2310      	movs	r3, #16
 8003c92:	76fb      	strb	r3, [r7, #27]
 8003c94:	bf00      	nop
 8003c96:	e02b      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2c      	ldr	r2, [pc, #176]	; (8003d50 <UART_SetConfig+0x2ec>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d124      	bne.n	8003cec <UART_SetConfig+0x288>
 8003ca2:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <UART_SetConfig+0x2f4>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb0:	d012      	beq.n	8003cd8 <UART_SetConfig+0x274>
 8003cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb6:	d802      	bhi.n	8003cbe <UART_SetConfig+0x25a>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <UART_SetConfig+0x268>
 8003cbc:	e012      	b.n	8003ce4 <UART_SetConfig+0x280>
 8003cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc2:	d006      	beq.n	8003cd2 <UART_SetConfig+0x26e>
 8003cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc8:	d009      	beq.n	8003cde <UART_SetConfig+0x27a>
 8003cca:	e00b      	b.n	8003ce4 <UART_SetConfig+0x280>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	76fb      	strb	r3, [r7, #27]
 8003cd0:	e00e      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	76fb      	strb	r3, [r7, #27]
 8003cd6:	e00b      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	76fb      	strb	r3, [r7, #27]
 8003cdc:	e008      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003cde:	2308      	movs	r3, #8
 8003ce0:	76fb      	strb	r3, [r7, #27]
 8003ce2:	e005      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	76fb      	strb	r3, [r7, #27]
 8003ce8:	bf00      	nop
 8003cea:	e001      	b.n	8003cf0 <UART_SetConfig+0x28c>
 8003cec:	2310      	movs	r3, #16
 8003cee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a16      	ldr	r2, [pc, #88]	; (8003d50 <UART_SetConfig+0x2ec>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	f040 80fa 	bne.w	8003ef0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cfc:	7efb      	ldrb	r3, [r7, #27]
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d836      	bhi.n	8003d70 <UART_SetConfig+0x30c>
 8003d02:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <UART_SetConfig+0x2a4>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003d35 	.word	0x08003d35
 8003d14:	08003d71 	.word	0x08003d71
 8003d18:	08003d3b 	.word	0x08003d3b
 8003d1c:	08003d71 	.word	0x08003d71
 8003d20:	08003d71 	.word	0x08003d71
 8003d24:	08003d71 	.word	0x08003d71
 8003d28:	08003d43 	.word	0x08003d43
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003d2c:	f7fe fdca 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8003d30:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d32:	e020      	b.n	8003d76 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <UART_SetConfig+0x308>)
 8003d36:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d38:	e01d      	b.n	8003d76 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003d3a:	f7fe fd2d 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8003d3e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d40:	e019      	b.n	8003d76 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d46:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d48:	e015      	b.n	8003d76 <UART_SetConfig+0x312>
 8003d4a:	bf00      	nop
 8003d4c:	efff69f3 	.word	0xefff69f3
 8003d50:	40008000 	.word	0x40008000
 8003d54:	40013800 	.word	0x40013800
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40004400 	.word	0x40004400
 8003d60:	40004800 	.word	0x40004800
 8003d64:	40004c00 	.word	0x40004c00
 8003d68:	40005000 	.word	0x40005000
 8003d6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	74fb      	strb	r3, [r7, #19]
        break;
 8003d74:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 81ac 	beq.w	80040d6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d305      	bcc.n	8003d9a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d902      	bls.n	8003da0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	74fb      	strb	r3, [r7, #19]
 8003d9e:	e19a      	b.n	80040d6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003da0:	7efb      	ldrb	r3, [r7, #27]
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	f200 8091 	bhi.w	8003eca <UART_SetConfig+0x466>
 8003da8:	a201      	add	r2, pc, #4	; (adr r2, 8003db0 <UART_SetConfig+0x34c>)
 8003daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dae:	bf00      	nop
 8003db0:	08003dd5 	.word	0x08003dd5
 8003db4:	08003ecb 	.word	0x08003ecb
 8003db8:	08003e21 	.word	0x08003e21
 8003dbc:	08003ecb 	.word	0x08003ecb
 8003dc0:	08003e55 	.word	0x08003e55
 8003dc4:	08003ecb 	.word	0x08003ecb
 8003dc8:	08003ecb 	.word	0x08003ecb
 8003dcc:	08003ecb 	.word	0x08003ecb
 8003dd0:	08003ea1 	.word	0x08003ea1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003dd4:	f7fe fd76 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	f04f 0400 	mov.w	r4, #0
 8003de8:	0214      	lsls	r4, r2, #8
 8003dea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003dee:	020b      	lsls	r3, r1, #8
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6852      	ldr	r2, [r2, #4]
 8003df4:	0852      	lsrs	r2, r2, #1
 8003df6:	4611      	mov	r1, r2
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	eb13 0b01 	adds.w	fp, r3, r1
 8003e00:	eb44 0c02 	adc.w	ip, r4, r2
 8003e04:	4658      	mov	r0, fp
 8003e06:	4661      	mov	r1, ip
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f04f 0400 	mov.w	r4, #0
 8003e10:	461a      	mov	r2, r3
 8003e12:	4623      	mov	r3, r4
 8003e14:	f7fc fa2c 	bl	8000270 <__aeabi_uldivmod>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003e1e:	e057      	b.n	8003ed0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	085b      	lsrs	r3, r3, #1
 8003e26:	f04f 0400 	mov.w	r4, #0
 8003e2a:	49b1      	ldr	r1, [pc, #708]	; (80040f0 <UART_SetConfig+0x68c>)
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	eb13 0b01 	adds.w	fp, r3, r1
 8003e34:	eb44 0c02 	adc.w	ip, r4, r2
 8003e38:	4658      	mov	r0, fp
 8003e3a:	4661      	mov	r1, ip
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f04f 0400 	mov.w	r4, #0
 8003e44:	461a      	mov	r2, r3
 8003e46:	4623      	mov	r3, r4
 8003e48:	f7fc fa12 	bl	8000270 <__aeabi_uldivmod>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	460c      	mov	r4, r1
 8003e50:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003e52:	e03d      	b.n	8003ed0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e54:	f7fe fca0 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	f04f 0400 	mov.w	r4, #0
 8003e68:	0214      	lsls	r4, r2, #8
 8003e6a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003e6e:	020b      	lsls	r3, r1, #8
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6852      	ldr	r2, [r2, #4]
 8003e74:	0852      	lsrs	r2, r2, #1
 8003e76:	4611      	mov	r1, r2
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	eb13 0b01 	adds.w	fp, r3, r1
 8003e80:	eb44 0c02 	adc.w	ip, r4, r2
 8003e84:	4658      	mov	r0, fp
 8003e86:	4661      	mov	r1, ip
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f04f 0400 	mov.w	r4, #0
 8003e90:	461a      	mov	r2, r3
 8003e92:	4623      	mov	r3, r4
 8003e94:	f7fc f9ec 	bl	8000270 <__aeabi_uldivmod>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003e9e:	e017      	b.n	8003ed0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	085b      	lsrs	r3, r3, #1
 8003ea6:	f04f 0400 	mov.w	r4, #0
 8003eaa:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003eae:	f144 0100 	adc.w	r1, r4, #0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f04f 0400 	mov.w	r4, #0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	f7fc f9d7 	bl	8000270 <__aeabi_uldivmod>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003ec8:	e002      	b.n	8003ed0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	74fb      	strb	r3, [r7, #19]
            break;
 8003ece:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed6:	d308      	bcc.n	8003eea <UART_SetConfig+0x486>
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ede:	d204      	bcs.n	8003eea <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	60da      	str	r2, [r3, #12]
 8003ee8:	e0f5      	b.n	80040d6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	74fb      	strb	r3, [r7, #19]
 8003eee:	e0f2      	b.n	80040d6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef8:	d17f      	bne.n	8003ffa <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8003efa:	7efb      	ldrb	r3, [r7, #27]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d85c      	bhi.n	8003fba <UART_SetConfig+0x556>
 8003f00:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <UART_SetConfig+0x4a4>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f2d 	.word	0x08003f2d
 8003f0c:	08003f4b 	.word	0x08003f4b
 8003f10:	08003f69 	.word	0x08003f69
 8003f14:	08003fbb 	.word	0x08003fbb
 8003f18:	08003f85 	.word	0x08003f85
 8003f1c:	08003fbb 	.word	0x08003fbb
 8003f20:	08003fbb 	.word	0x08003fbb
 8003f24:	08003fbb 	.word	0x08003fbb
 8003f28:	08003fa3 	.word	0x08003fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003f2c:	f7fe fcca 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8003f30:	4603      	mov	r3, r0
 8003f32:	005a      	lsls	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	441a      	add	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f48:	e03a      	b.n	8003fc0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003f4a:	f7fe fcd1 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	005a      	lsls	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f66:	e02b      	b.n	8003fc0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003f72:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6852      	ldr	r2, [r2, #4]
 8003f7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f82:	e01d      	b.n	8003fc0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f84:	f7fe fc08 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	005a      	lsls	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	085b      	lsrs	r3, r3, #1
 8003f92:	441a      	add	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fa0:	e00e      	b.n	8003fc0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fb8:	e002      	b.n	8003fc0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	74fb      	strb	r3, [r7, #19]
        break;
 8003fbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b0f      	cmp	r3, #15
 8003fc4:	d916      	bls.n	8003ff4 <UART_SetConfig+0x590>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d212      	bcs.n	8003ff4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	f023 030f 	bic.w	r3, r3, #15
 8003fd6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	897b      	ldrh	r3, [r7, #10]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	897a      	ldrh	r2, [r7, #10]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	e070      	b.n	80040d6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	74fb      	strb	r3, [r7, #19]
 8003ff8:	e06d      	b.n	80040d6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8003ffa:	7efb      	ldrb	r3, [r7, #27]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d859      	bhi.n	80040b4 <UART_SetConfig+0x650>
 8004000:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <UART_SetConfig+0x5a4>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	0800402d 	.word	0x0800402d
 800400c:	08004049 	.word	0x08004049
 8004010:	08004065 	.word	0x08004065
 8004014:	080040b5 	.word	0x080040b5
 8004018:	08004081 	.word	0x08004081
 800401c:	080040b5 	.word	0x080040b5
 8004020:	080040b5 	.word	0x080040b5
 8004024:	080040b5 	.word	0x080040b5
 8004028:	0800409d 	.word	0x0800409d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800402c:	f7fe fc4a 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8004030:	4602      	mov	r2, r0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	441a      	add	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	b29b      	uxth	r3, r3
 8004044:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004046:	e038      	b.n	80040ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004048:	f7fe fc52 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 800404c:	4602      	mov	r2, r0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	441a      	add	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	b29b      	uxth	r3, r3
 8004060:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004062:	e02a      	b.n	80040ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	085b      	lsrs	r3, r3, #1
 800406a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800406e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6852      	ldr	r2, [r2, #4]
 8004076:	fbb3 f3f2 	udiv	r3, r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800407e:	e01c      	b.n	80040ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004080:	f7fe fb8a 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	441a      	add	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	b29b      	uxth	r3, r3
 8004098:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800409a:	e00e      	b.n	80040ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80040b2:	e002      	b.n	80040ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	74fb      	strb	r3, [r7, #19]
        break;
 80040b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b0f      	cmp	r3, #15
 80040be:	d908      	bls.n	80040d2 <UART_SetConfig+0x66e>
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c6:	d204      	bcs.n	80040d2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	e001      	b.n	80040d6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3720      	adds	r7, #32
 80040e8:	46bd      	mov	sp, r7
 80040ea:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80040ee:	bf00      	nop
 80040f0:	f4240000 	.word	0xf4240000

080040f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01a      	beq.n	800420a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f2:	d10a      	bne.n	800420a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af02      	add	r7, sp, #8
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004246:	f7fc f9f7 	bl	8000638 <HAL_GetTick>
 800424a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b08      	cmp	r3, #8
 8004258:	d10e      	bne.n	8004278 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800425a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f82a 	bl	80042c2 <UART_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e020      	b.n	80042ba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b04      	cmp	r3, #4
 8004284:	d10e      	bne.n	80042a4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004286:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f814 	bl	80042c2 <UART_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e00a      	b.n	80042ba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	4613      	mov	r3, r2
 80042d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d2:	e02a      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d026      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042dc:	f7fc f9ac 	bl	8000638 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d302      	bcc.n	80042f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d11b      	bne.n	800432a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004300:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e00f      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	bf0c      	ite	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	2300      	movne	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	429a      	cmp	r2, r3
 8004346:	d0c5      	beq.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004368:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f7ff fb4d 	bl	8003a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff fb2a 	bl	8003a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043fe:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004404:	2b22      	cmp	r3, #34	; 0x22
 8004406:	d13a      	bne.n	800447e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800440e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004410:	89bb      	ldrh	r3, [r7, #12]
 8004412:	b2d9      	uxtb	r1, r3
 8004414:	89fb      	ldrh	r3, [r7, #14]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	400a      	ands	r2, r1
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d123      	bne.n	8004492 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004458:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 faa4 	bl	80049c4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800447c:	e009      	b.n	8004492 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	8b1b      	ldrh	r3, [r3, #24]
 8004484:	b29a      	uxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0208 	orr.w	r2, r2, #8
 800448e:	b292      	uxth	r2, r2
 8004490:	831a      	strh	r2, [r3, #24]
}
 8004492:	bf00      	nop
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044a8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ae:	2b22      	cmp	r3, #34	; 0x22
 80044b0:	d13a      	bne.n	8004528 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044b8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80044c0:	89ba      	ldrh	r2, [r7, #12]
 80044c2:	89fb      	ldrh	r3, [r7, #14]
 80044c4:	4013      	ands	r3, r2
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	1c9a      	adds	r2, r3, #2
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d123      	bne.n	800453c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004502:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fa4f 	bl	80049c4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004526:	e009      	b.n	800453c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	8b1b      	ldrh	r3, [r3, #24]
 800452e:	b29a      	uxth	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0208 	orr.w	r2, r2, #8
 8004538:	b292      	uxth	r2, r2
 800453a:	831a      	strh	r2, [r3, #24]
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <main>:
uint8_t dataTx[] = "AT\r\n";
uint8_t dataRx;
uint8_t delay_time;
char msg_2[12];
int main(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800455e:	f7fc f807 	bl	8000570 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LCD_GLASS_Init();
 8004562:	f000 fb1b 	bl	8004b9c <BSP_LCD_GLASS_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004566:	f000 f847 	bl	80045f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800456a:	f000 f9d5 	bl	8004918 <MX_GPIO_Init>
  MX_LCD_Init();
 800456e:	f000 f93b 	bl	80047e8 <MX_LCD_Init>
  MX_UART4_Init();
 8004572:	f000 f971 	bl	8004858 <MX_UART4_Init>
  MX_ADC1_Init();
 8004576:	f000 f8c1 	bl	80046fc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800457a:	f000 f99d 	bl	80048b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //BSP_LCD_GLASS_DisplayString("Hello");
  RetargetInit(&huart2);
 800457e:	4817      	ldr	r0, [pc, #92]	; (80045dc <main+0x84>)
 8004580:	f000 fa46 	bl	8004a10 <RetargetInit>

  //HAL_UART_Receive_IT(&huart4, &data, 1); //HAL_UART_Receive_IT(UART handle, data buffer address, amount of data (bytes = 8 bits))
  //HAL_UART_Transmit_IT(&huart4, &data, 1); //HAL_UART_Receive_IT(UART handle, data buffer address, amount of data (bytes = 8 bits))
  uint16_t raw;
  char msg[12];
  int i = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&huart4, dataTx, 4, 100);
 8004588:	2364      	movs	r3, #100	; 0x64
 800458a:	2204      	movs	r2, #4
 800458c:	4914      	ldr	r1, [pc, #80]	; (80045e0 <main+0x88>)
 800458e:	4815      	ldr	r0, [pc, #84]	; (80045e4 <main+0x8c>)
 8004590:	f7fe ff22 	bl	80033d8 <HAL_UART_Transmit>
  //printf("%s", dataTx);
  HAL_UART_Receive_IT(&huart4, dataRx, 6);
 8004594:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <main+0x90>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2206      	movs	r2, #6
 800459a:	4619      	mov	r1, r3
 800459c:	4811      	ldr	r0, [pc, #68]	; (80045e4 <main+0x8c>)
 800459e:	f7ff f87b 	bl	8003698 <HAL_UART_Receive_IT>
			BSP_LCD_GLASS_DisplayString(msg);
		*/


		   //test for uart stuff
	  if(i < 10){
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b09      	cmp	r3, #9
 80045a6:	dcfc      	bgt.n	80045a2 <main+0x4a>
		    sprintf(msg, "%hu\r\n", dataRx);
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <main+0x90>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	463b      	mov	r3, r7
 80045b0:	490e      	ldr	r1, [pc, #56]	; (80045ec <main+0x94>)
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 ffd6 	bl	8005564 <siprintf>
			HAL_Delay(delay_time);
 80045b8:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <main+0x98>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fc f847 	bl	8000650 <HAL_Delay>
			delay_time = 1000;
 80045c2:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <main+0x98>)
 80045c4:	22e8      	movs	r2, #232	; 0xe8
 80045c6:	701a      	strb	r2, [r3, #0]
			printf("%s", msg);
 80045c8:	463b      	mov	r3, r7
 80045ca:	4619      	mov	r1, r3
 80045cc:	4809      	ldr	r0, [pc, #36]	; (80045f4 <main+0x9c>)
 80045ce:	f000 fef3 	bl	80053b8 <iprintf>

			i += 1;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3301      	adds	r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
	  if(i < 10){
 80045d8:	e7e3      	b.n	80045a2 <main+0x4a>
 80045da:	bf00      	nop
 80045dc:	200001d8 	.word	0x200001d8
 80045e0:	20000008 	.word	0x20000008
 80045e4:	20000158 	.word	0x20000158
 80045e8:	200000b0 	.word	0x200000b0
 80045ec:	0800652c 	.word	0x0800652c
 80045f0:	20000118 	.word	0x20000118
 80045f4:	08006534 	.word	0x08006534

080045f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b0b8      	sub	sp, #224	; 0xe0
 80045fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004602:	2244      	movs	r2, #68	; 0x44
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f000 fe26 	bl	8005258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800460c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800461c:	463b      	mov	r3, r7
 800461e:	2288      	movs	r2, #136	; 0x88
 8004620:	2100      	movs	r1, #0
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fe18 	bl	8005258 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8004628:	2318      	movs	r3, #24
 800462a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800462e:	2301      	movs	r3, #1
 8004630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004634:	2301      	movs	r3, #1
 8004636:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004640:	2360      	movs	r3, #96	; 0x60
 8004642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004646:	2300      	movs	r3, #0
 8004648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800464c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004650:	4618      	mov	r0, r3
 8004652:	f7fd fc0f 	bl	8001e74 <HAL_RCC_OscConfig>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800465c:	f000 f9d0 	bl	8004a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004660:	230f      	movs	r3, #15
 8004662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004666:	2300      	movs	r3, #0
 8004668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800466c:	2300      	movs	r3, #0
 800466e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004672:	2300      	movs	r3, #0
 8004674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800467e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f7fd ffa5 	bl	80025d4 <HAL_RCC_ClockConfig>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004690:	f000 f9b6 	bl	8004a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8004694:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <SystemClock_Config+0x100>)
 8004696:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004698:	2300      	movs	r3, #0
 800469a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800469c:	2300      	movs	r3, #0
 800469e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80046a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046a4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80046a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80046ae:	2301      	movs	r3, #1
 80046b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80046b6:	2310      	movs	r3, #16
 80046b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80046ba:	2307      	movs	r3, #7
 80046bc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80046be:	2302      	movs	r3, #2
 80046c0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80046c2:	2302      	movs	r3, #2
 80046c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80046c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046ca:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046cc:	463b      	mov	r3, r7
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe f984 	bl	80029dc <HAL_RCCEx_PeriphCLKConfig>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80046da:	f000 f991 	bl	8004a00 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80046de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80046e2:	f7fd fb71 	bl	8001dc8 <HAL_PWREx_ControlVoltageScaling>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80046ec:	f000 f988 	bl	8004a00 <Error_Handler>
  }
}
 80046f0:	bf00      	nop
 80046f2:	37e0      	adds	r7, #224	; 0xe0
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	0002400a 	.word	0x0002400a

080046fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	; 0x28
 8004700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004702:	f107 031c 	add.w	r3, r7, #28
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800470e:	1d3b      	adds	r3, r7, #4
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]
 800471c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800471e:	4b2f      	ldr	r3, [pc, #188]	; (80047dc <MX_ADC1_Init+0xe0>)
 8004720:	4a2f      	ldr	r2, [pc, #188]	; (80047e0 <MX_ADC1_Init+0xe4>)
 8004722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004724:	4b2d      	ldr	r3, [pc, #180]	; (80047dc <MX_ADC1_Init+0xe0>)
 8004726:	2200      	movs	r2, #0
 8004728:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800472a:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <MX_ADC1_Init+0xe0>)
 800472c:	2200      	movs	r2, #0
 800472e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004730:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <MX_ADC1_Init+0xe0>)
 8004732:	2200      	movs	r2, #0
 8004734:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004736:	4b29      	ldr	r3, [pc, #164]	; (80047dc <MX_ADC1_Init+0xe0>)
 8004738:	2200      	movs	r2, #0
 800473a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <MX_ADC1_Init+0xe0>)
 800473e:	2204      	movs	r2, #4
 8004740:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004742:	4b26      	ldr	r3, [pc, #152]	; (80047dc <MX_ADC1_Init+0xe0>)
 8004744:	2200      	movs	r2, #0
 8004746:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004748:	4b24      	ldr	r3, [pc, #144]	; (80047dc <MX_ADC1_Init+0xe0>)
 800474a:	2200      	movs	r2, #0
 800474c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800474e:	4b23      	ldr	r3, [pc, #140]	; (80047dc <MX_ADC1_Init+0xe0>)
 8004750:	2201      	movs	r2, #1
 8004752:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004754:	4b21      	ldr	r3, [pc, #132]	; (80047dc <MX_ADC1_Init+0xe0>)
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800475c:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <MX_ADC1_Init+0xe0>)
 800475e:	2200      	movs	r2, #0
 8004760:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004762:	4b1e      	ldr	r3, [pc, #120]	; (80047dc <MX_ADC1_Init+0xe0>)
 8004764:	2200      	movs	r2, #0
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004768:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <MX_ADC1_Init+0xe0>)
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004770:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <MX_ADC1_Init+0xe0>)
 8004772:	2200      	movs	r2, #0
 8004774:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004776:	4b19      	ldr	r3, [pc, #100]	; (80047dc <MX_ADC1_Init+0xe0>)
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800477e:	4817      	ldr	r0, [pc, #92]	; (80047dc <MX_ADC1_Init+0xe0>)
 8004780:	f7fc f908 	bl	8000994 <HAL_ADC_Init>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800478a:	f000 f939 	bl	8004a00 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004792:	f107 031c 	add.w	r3, r7, #28
 8004796:	4619      	mov	r1, r3
 8004798:	4810      	ldr	r0, [pc, #64]	; (80047dc <MX_ADC1_Init+0xe0>)
 800479a:	f7fc fdd9 	bl	8001350 <HAL_ADCEx_MultiModeConfigChannel>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80047a4:	f000 f92c 	bl	8004a00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80047a8:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <MX_ADC1_Init+0xe8>)
 80047aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80047ac:	2306      	movs	r3, #6
 80047ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80047b4:	237f      	movs	r3, #127	; 0x7f
 80047b6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80047b8:	2304      	movs	r3, #4
 80047ba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047c0:	1d3b      	adds	r3, r7, #4
 80047c2:	4619      	mov	r1, r3
 80047c4:	4805      	ldr	r0, [pc, #20]	; (80047dc <MX_ADC1_Init+0xe0>)
 80047c6:	f7fc fa39 	bl	8000c3c <HAL_ADC_ConfigChannel>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80047d0:	f000 f916 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80047d4:	bf00      	nop
 80047d6:	3728      	adds	r7, #40	; 0x28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	200000b4 	.word	0x200000b4
 80047e0:	50040000 	.word	0x50040000
 80047e4:	1d500080 	.word	0x1d500080

080047e8 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80047ec:	4b18      	ldr	r3, [pc, #96]	; (8004850 <MX_LCD_Init+0x68>)
 80047ee:	4a19      	ldr	r2, [pc, #100]	; (8004854 <MX_LCD_Init+0x6c>)
 80047f0:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80047f2:	4b17      	ldr	r3, [pc, #92]	; (8004850 <MX_LCD_Init+0x68>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80047f8:	4b15      	ldr	r3, [pc, #84]	; (8004850 <MX_LCD_Init+0x68>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_2;
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <MX_LCD_Init+0x68>)
 8004800:	2204      	movs	r2, #4
 8004802:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8004804:	4b12      	ldr	r3, [pc, #72]	; (8004850 <MX_LCD_Init+0x68>)
 8004806:	2200      	movs	r2, #0
 8004808:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <MX_LCD_Init+0x68>)
 800480c:	2200      	movs	r2, #0
 800480e:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <MX_LCD_Init+0x68>)
 8004812:	2200      	movs	r2, #0
 8004814:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8004816:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <MX_LCD_Init+0x68>)
 8004818:	2200      	movs	r2, #0
 800481a:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <MX_LCD_Init+0x68>)
 800481e:	2200      	movs	r2, #0
 8004820:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8004822:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <MX_LCD_Init+0x68>)
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <MX_LCD_Init+0x68>)
 800482a:	2200      	movs	r2, #0
 800482c:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 800482e:	4b08      	ldr	r3, [pc, #32]	; (8004850 <MX_LCD_Init+0x68>)
 8004830:	2200      	movs	r2, #0
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <MX_LCD_Init+0x68>)
 8004836:	2200      	movs	r2, #0
 8004838:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800483a:	4805      	ldr	r0, [pc, #20]	; (8004850 <MX_LCD_Init+0x68>)
 800483c:	f7fd f946 	bl	8001acc <HAL_LCD_Init>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_LCD_Init+0x62>
  {
    Error_Handler();
 8004846:	f000 f8db 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	2000011c 	.word	0x2000011c
 8004854:	40002400 	.word	0x40002400

08004858 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800485c:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <MX_UART4_Init+0x58>)
 800485e:	4a15      	ldr	r2, [pc, #84]	; (80048b4 <MX_UART4_Init+0x5c>)
 8004860:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <MX_UART4_Init+0x58>)
 8004864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004868:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800486a:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <MX_UART4_Init+0x58>)
 800486c:	2200      	movs	r2, #0
 800486e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <MX_UART4_Init+0x58>)
 8004872:	2200      	movs	r2, #0
 8004874:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004876:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <MX_UART4_Init+0x58>)
 8004878:	2200      	movs	r2, #0
 800487a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800487c:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <MX_UART4_Init+0x58>)
 800487e:	220c      	movs	r2, #12
 8004880:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <MX_UART4_Init+0x58>)
 8004884:	2200      	movs	r2, #0
 8004886:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004888:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <MX_UART4_Init+0x58>)
 800488a:	2200      	movs	r2, #0
 800488c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <MX_UART4_Init+0x58>)
 8004890:	2200      	movs	r2, #0
 8004892:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <MX_UART4_Init+0x58>)
 8004896:	2200      	movs	r2, #0
 8004898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800489a:	4805      	ldr	r0, [pc, #20]	; (80048b0 <MX_UART4_Init+0x58>)
 800489c:	f7fe fd4e 	bl	800333c <HAL_UART_Init>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80048a6:	f000 f8ab 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000158 	.word	0x20000158
 80048b4:	40004c00 	.word	0x40004c00

080048b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048bc:	4b14      	ldr	r3, [pc, #80]	; (8004910 <MX_USART2_UART_Init+0x58>)
 80048be:	4a15      	ldr	r2, [pc, #84]	; (8004914 <MX_USART2_UART_Init+0x5c>)
 80048c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048c2:	4b13      	ldr	r3, [pc, #76]	; (8004910 <MX_USART2_UART_Init+0x58>)
 80048c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048ca:	4b11      	ldr	r3, [pc, #68]	; (8004910 <MX_USART2_UART_Init+0x58>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048d0:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <MX_USART2_UART_Init+0x58>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048d6:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <MX_USART2_UART_Init+0x58>)
 80048d8:	2200      	movs	r2, #0
 80048da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <MX_USART2_UART_Init+0x58>)
 80048de:	220c      	movs	r2, #12
 80048e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <MX_USART2_UART_Init+0x58>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <MX_USART2_UART_Init+0x58>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <MX_USART2_UART_Init+0x58>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048f4:	4b06      	ldr	r3, [pc, #24]	; (8004910 <MX_USART2_UART_Init+0x58>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048fa:	4805      	ldr	r0, [pc, #20]	; (8004910 <MX_USART2_UART_Init+0x58>)
 80048fc:	f7fe fd1e 	bl	800333c <HAL_UART_Init>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004906:	f000 f87b 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800490a:	bf00      	nop
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200001d8 	.word	0x200001d8
 8004914:	40004400 	.word	0x40004400

08004918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	; 0x28
 800491c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800491e:	f107 0314 	add.w	r3, r7, #20
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	605a      	str	r2, [r3, #4]
 8004928:	609a      	str	r2, [r3, #8]
 800492a:	60da      	str	r2, [r3, #12]
 800492c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800492e:	4b23      	ldr	r3, [pc, #140]	; (80049bc <MX_GPIO_Init+0xa4>)
 8004930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004932:	4a22      	ldr	r2, [pc, #136]	; (80049bc <MX_GPIO_Init+0xa4>)
 8004934:	f043 0304 	orr.w	r3, r3, #4
 8004938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800493a:	4b20      	ldr	r3, [pc, #128]	; (80049bc <MX_GPIO_Init+0xa4>)
 800493c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004946:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <MX_GPIO_Init+0xa4>)
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	4a1c      	ldr	r2, [pc, #112]	; (80049bc <MX_GPIO_Init+0xa4>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004952:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <MX_GPIO_Init+0xa4>)
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800495e:	4b17      	ldr	r3, [pc, #92]	; (80049bc <MX_GPIO_Init+0xa4>)
 8004960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004962:	4a16      	ldr	r2, [pc, #88]	; (80049bc <MX_GPIO_Init+0xa4>)
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800496a:	4b14      	ldr	r3, [pc, #80]	; (80049bc <MX_GPIO_Init+0xa4>)
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004976:	4b11      	ldr	r3, [pc, #68]	; (80049bc <MX_GPIO_Init+0xa4>)
 8004978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497a:	4a10      	ldr	r2, [pc, #64]	; (80049bc <MX_GPIO_Init+0xa4>)
 800497c:	f043 0308 	orr.w	r3, r3, #8
 8004980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <MX_GPIO_Init+0xa4>)
 8004984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800498e:	2200      	movs	r2, #0
 8004990:	2104      	movs	r1, #4
 8004992:	480b      	ldr	r0, [pc, #44]	; (80049c0 <MX_GPIO_Init+0xa8>)
 8004994:	f7fd f882 	bl	8001a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004998:	2304      	movs	r3, #4
 800499a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800499c:	2301      	movs	r3, #1
 800499e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a4:	2300      	movs	r3, #0
 80049a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049a8:	f107 0314 	add.w	r3, r7, #20
 80049ac:	4619      	mov	r1, r3
 80049ae:	4804      	ldr	r0, [pc, #16]	; (80049c0 <MX_GPIO_Init+0xa8>)
 80049b0:	f7fc fecc 	bl	800174c <HAL_GPIO_Init>

}
 80049b4:	bf00      	nop
 80049b6:	3728      	adds	r7, #40	; 0x28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40021000 	.word	0x40021000
 80049c0:	48000400 	.word	0x48000400

080049c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
    sprintf(msg_2, "%hu\r\n", dataRx);
 80049cc:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <HAL_UART_RxCpltCallback+0x2c>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	4908      	ldr	r1, [pc, #32]	; (80049f4 <HAL_UART_RxCpltCallback+0x30>)
 80049d4:	4808      	ldr	r0, [pc, #32]	; (80049f8 <HAL_UART_RxCpltCallback+0x34>)
 80049d6:	f000 fdc5 	bl	8005564 <siprintf>
	printf("%s", dataRx);
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_UART_RxCpltCallback+0x2c>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	4619      	mov	r1, r3
 80049e0:	4806      	ldr	r0, [pc, #24]	; (80049fc <HAL_UART_RxCpltCallback+0x38>)
 80049e2:	f000 fce9 	bl	80053b8 <iprintf>
	//HAL_Delay(1000);
	//HAL_UART_Receive_IT(&huart4, dataRx, 2);
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	200000b0 	.word	0x200000b0
 80049f4:	0800652c 	.word	0x0800652c
 80049f8:	200000a4 	.word	0x200000a4
 80049fc:	08006534 	.word	0x08006534

08004a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a04:	bf00      	nop
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
	...

08004a10 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8004a18:	4a07      	ldr	r2, [pc, #28]	; (8004a38 <RetargetInit+0x28>)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8004a1e:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <RetargetInit+0x2c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6898      	ldr	r0, [r3, #8]
 8004a24:	2300      	movs	r3, #0
 8004a26:	2202      	movs	r2, #2
 8004a28:	2100      	movs	r1, #0
 8004a2a:	f000 fced 	bl	8005408 <setvbuf>
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000258 	.word	0x20000258
 8004a3c:	20000014 	.word	0x20000014

08004a40 <_isatty>:

int _isatty(int fd) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	db04      	blt.n	8004a58 <_isatty+0x18>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	dc01      	bgt.n	8004a58 <_isatty+0x18>
    return 1;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e005      	b.n	8004a64 <_isatty+0x24>

  errno = EBADF;
 8004a58:	f000 fbcc 	bl	80051f4 <__errno>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	2309      	movs	r3, #9
 8004a60:	6013      	str	r3, [r2, #0]
  return 0;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <_write>:

int _write(int fd, char* ptr, int len) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d002      	beq.n	8004a84 <_write+0x18>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d111      	bne.n	8004aa8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8004a84:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <_write+0x54>)
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	f7fe fca1 	bl	80033d8 <HAL_UART_Transmit>
 8004a96:	4603      	mov	r3, r0
 8004a98:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <_write+0x38>
      return len;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	e008      	b.n	8004ab6 <_write+0x4a>
    else
      return EIO;
 8004aa4:	2305      	movs	r3, #5
 8004aa6:	e006      	b.n	8004ab6 <_write+0x4a>
  }
  errno = EBADF;
 8004aa8:	f000 fba4 	bl	80051f4 <__errno>
 8004aac:	4602      	mov	r2, r0
 8004aae:	2309      	movs	r3, #9
 8004ab0:	6013      	str	r3, [r2, #0]
  return -1;
 8004ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000258 	.word	0x20000258

08004ac4 <_close>:

int _close(int fd) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	db04      	blt.n	8004adc <_close+0x18>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	dc01      	bgt.n	8004adc <_close+0x18>
    return 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e006      	b.n	8004aea <_close+0x26>

  errno = EBADF;
 8004adc:	f000 fb8a 	bl	80051f4 <__errno>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	2309      	movs	r3, #9
 8004ae4:	6013      	str	r3, [r2, #0]
  return -1;
 8004ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8004afe:	f000 fb79 	bl	80051f4 <__errno>
 8004b02:	4602      	mov	r2, r0
 8004b04:	2309      	movs	r3, #9
 8004b06:	6013      	str	r3, [r2, #0]
  return -1;
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <_read>:

int _read(int fd, char* ptr, int len) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d110      	bne.n	8004b48 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8004b26:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <_read+0x4c>)
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2e:	2201      	movs	r2, #1
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	f7fe fce4 	bl	80034fe <HAL_UART_Receive>
 8004b36:	4603      	mov	r3, r0
 8004b38:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <_read+0x30>
      return 1;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e008      	b.n	8004b56 <_read+0x42>
    else
      return EIO;
 8004b44:	2305      	movs	r3, #5
 8004b46:	e006      	b.n	8004b56 <_read+0x42>
  }
  errno = EBADF;
 8004b48:	f000 fb54 	bl	80051f4 <__errno>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	2309      	movs	r3, #9
 8004b50:	6013      	str	r3, [r2, #0]
  return -1;
 8004b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000258 	.word	0x20000258

08004b64 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	db08      	blt.n	8004b86 <_fstat+0x22>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	dc05      	bgt.n	8004b86 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b80:	605a      	str	r2, [r3, #4]
    return 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e005      	b.n	8004b92 <_fstat+0x2e>
  }

  errno = EBADF;
 8004b86:	f000 fb35 	bl	80051f4 <__errno>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	2309      	movs	r3, #9
 8004b8e:	6013      	str	r3, [r2, #0]
  return 0;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 8004ba0:	4b19      	ldr	r3, [pc, #100]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004ba2:	4a1a      	ldr	r2, [pc, #104]	; (8004c0c <BSP_LCD_GLASS_Init+0x70>)
 8004ba4:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8004bac:	4b16      	ldr	r3, [pc, #88]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004bae:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004bb2:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8004bb4:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004bb6:	220c      	movs	r2, #12
 8004bb8:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8004bba:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004bbc:	2240      	movs	r2, #64	; 0x40
 8004bbe:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8004bc0:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004bc8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8004bcc:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004bd6:	2240      	movs	r2, #64	; 0x40
 8004bd8:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8004bda:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8004be6:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004be8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bec:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8004bf4:	4804      	ldr	r0, [pc, #16]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004bf6:	f000 f815 	bl	8004c24 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 8004bfa:	4803      	ldr	r0, [pc, #12]	; (8004c08 <BSP_LCD_GLASS_Init+0x6c>)
 8004bfc:	f7fc ff66 	bl	8001acc <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 8004c00:	f000 f806 	bl	8004c10 <BSP_LCD_GLASS_Clear>
}
 8004c04:	bf00      	nop
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	2000026c 	.word	0x2000026c
 8004c0c:	40002400 	.word	0x40002400

08004c10 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle); 
 8004c14:	4802      	ldr	r0, [pc, #8]	; (8004c20 <BSP_LCD_GLASS_Clear+0x10>)
 8004c16:	f7fd f819 	bl	8001c4c <HAL_LCD_Clear>
}
 8004c1a:	bf00      	nop
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	2000026c 	.word	0x2000026c

08004c24 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b0c0      	sub	sp, #256	; 0x100
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004c2c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	60da      	str	r2, [r3, #12]
 8004c3a:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8004c3c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004c40:	2244      	movs	r2, #68	; 0x44
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fb07 	bl	8005258 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 8004c4a:	f107 0320 	add.w	r3, r7, #32
 8004c4e:	2288      	movs	r2, #136	; 0x88
 8004c50:	2100      	movs	r1, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fb00 	bl	8005258 <memset>
  
  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c58:	4b51      	ldr	r3, [pc, #324]	; (8004da0 <LCD_MspInit+0x17c>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5c:	4a50      	ldr	r2, [pc, #320]	; (8004da0 <LCD_MspInit+0x17c>)
 8004c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c62:	6593      	str	r3, [r2, #88]	; 0x58
 8004c64:	4b4e      	ldr	r3, [pc, #312]	; (8004da0 <LCD_MspInit+0x17c>)
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	69fb      	ldr	r3, [r7, #28]
  
  /*##-2- Configure LSE as RTC clock soucre ###################################*/ 
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8004c70:	2304      	movs	r3, #4
 8004c72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8004c82:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fd f8f4 	bl	8001e74 <HAL_RCC_OscConfig>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d000      	beq.n	8004c94 <LCD_MspInit+0x70>
  { 
    while(1);
 8004c92:	e7fe      	b.n	8004c92 <LCD_MspInit+0x6e>
  }
  
  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c98:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8004ca2:	f107 0320 	add.w	r3, r7, #32
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd fe98 	bl	80029dc <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cac:	4b3c      	ldr	r3, [pc, #240]	; (8004da0 <LCD_MspInit+0x17c>)
 8004cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb0:	4a3b      	ldr	r2, [pc, #236]	; (8004da0 <LCD_MspInit+0x17c>)
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cb8:	4b39      	ldr	r3, [pc, #228]	; (8004da0 <LCD_MspInit+0x17c>)
 8004cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	61bb      	str	r3, [r7, #24]
 8004cc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cc4:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <LCD_MspInit+0x17c>)
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc8:	4a35      	ldr	r2, [pc, #212]	; (8004da0 <LCD_MspInit+0x17c>)
 8004cca:	f043 0302 	orr.w	r3, r3, #2
 8004cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cd0:	4b33      	ldr	r3, [pc, #204]	; (8004da0 <LCD_MspInit+0x17c>)
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cdc:	4b30      	ldr	r3, [pc, #192]	; (8004da0 <LCD_MspInit+0x17c>)
 8004cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce0:	4a2f      	ldr	r2, [pc, #188]	; (8004da0 <LCD_MspInit+0x17c>)
 8004ce2:	f043 0304 	orr.w	r3, r3, #4
 8004ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ce8:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <LCD_MspInit+0x17c>)
 8004cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cf4:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <LCD_MspInit+0x17c>)
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf8:	4a29      	ldr	r2, [pc, #164]	; (8004da0 <LCD_MspInit+0x17c>)
 8004cfa:	f043 0308 	orr.w	r3, r3, #8
 8004cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d00:	4b27      	ldr	r3, [pc, #156]	; (8004da0 <LCD_MspInit+0x17c>)
 8004d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]

  
  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8004d0c:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8004d10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8004d14:	2302      	movs	r3, #2
 8004d16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_HIGH;
 8004d20:	2303      	movs	r3, #3
 8004d22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8004d26:	230b      	movs	r3, #11
 8004d28:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8004d2c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004d30:	4619      	mov	r1, r3
 8004d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d36:	f7fc fd09 	bl	800174c <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8004d3a:	f24f 2333 	movw	r3, #62003	; 0xf233
 8004d3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8004d42:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004d46:	4619      	mov	r1, r3
 8004d48:	4816      	ldr	r0, [pc, #88]	; (8004da4 <LCD_MspInit+0x180>)
 8004d4a:	f7fc fcff 	bl	800174c <HAL_GPIO_Init>
  
  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8004d4e:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8004d52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8004d56:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4812      	ldr	r0, [pc, #72]	; (8004da8 <LCD_MspInit+0x184>)
 8004d5e:	f7fc fcf5 	bl	800174c <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8004d62:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004d66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8004d6a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004d6e:	4619      	mov	r1, r3
 8004d70:	480e      	ldr	r0, [pc, #56]	; (8004dac <LCD_MspInit+0x188>)
 8004d72:	f7fc fceb 	bl	800174c <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 8004d76:	2002      	movs	r0, #2
 8004d78:	f7fb fc6a 	bl	8000650 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 8004d7c:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <LCD_MspInit+0x17c>)
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d80:	4a07      	ldr	r2, [pc, #28]	; (8004da0 <LCD_MspInit+0x17c>)
 8004d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d86:	6593      	str	r3, [r2, #88]	; 0x58
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <LCD_MspInit+0x17c>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]
}
 8004d94:	bf00      	nop
 8004d96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40021000 	.word	0x40021000
 8004da4:	48000400 	.word	0x48000400
 8004da8:	48000800 	.word	0x48000800
 8004dac:	48000c00 	.word	0x48000c00

08004db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db6:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <HAL_MspInit+0x44>)
 8004db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dba:	4a0e      	ldr	r2, [pc, #56]	; (8004df4 <HAL_MspInit+0x44>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8004dc2:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <HAL_MspInit+0x44>)
 8004dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_MspInit+0x44>)
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd2:	4a08      	ldr	r2, [pc, #32]	; (8004df4 <HAL_MspInit+0x44>)
 8004dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <HAL_MspInit+0x44>)
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000

08004df8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	605a      	str	r2, [r3, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
 8004e0c:	60da      	str	r2, [r3, #12]
 8004e0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <HAL_ADC_MspInit+0x74>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d124      	bne.n	8004e64 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004e1a:	4b15      	ldr	r3, [pc, #84]	; (8004e70 <HAL_ADC_MspInit+0x78>)
 8004e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1e:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <HAL_ADC_MspInit+0x78>)
 8004e20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e26:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <HAL_ADC_MspInit+0x78>)
 8004e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e32:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <HAL_ADC_MspInit+0x78>)
 8004e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e36:	4a0e      	ldr	r2, [pc, #56]	; (8004e70 <HAL_ADC_MspInit+0x78>)
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <HAL_ADC_MspInit+0x78>)
 8004e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004e4e:	230b      	movs	r3, #11
 8004e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e56:	f107 0314 	add.w	r3, r7, #20
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e60:	f7fc fc74 	bl	800174c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004e64:	bf00      	nop
 8004e66:	3728      	adds	r7, #40	; 0x28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	50040000 	.word	0x50040000
 8004e70:	40021000 	.word	0x40021000

08004e74 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7c:	f107 0314 	add.w	r3, r7, #20
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	605a      	str	r2, [r3, #4]
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a26      	ldr	r2, [pc, #152]	; (8004f2c <HAL_LCD_MspInit+0xb8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d145      	bne.n	8004f22 <HAL_LCD_MspInit+0xae>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8004e96:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <HAL_LCD_MspInit+0xbc>)
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	4a25      	ldr	r2, [pc, #148]	; (8004f30 <HAL_LCD_MspInit+0xbc>)
 8004e9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ea2:	4b23      	ldr	r3, [pc, #140]	; (8004f30 <HAL_LCD_MspInit+0xbc>)
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <HAL_LCD_MspInit+0xbc>)
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb2:	4a1f      	ldr	r2, [pc, #124]	; (8004f30 <HAL_LCD_MspInit+0xbc>)
 8004eb4:	f043 0304 	orr.w	r3, r3, #4
 8004eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004eba:	4b1d      	ldr	r3, [pc, #116]	; (8004f30 <HAL_LCD_MspInit+0xbc>)
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec6:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <HAL_LCD_MspInit+0xbc>)
 8004ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eca:	4a19      	ldr	r2, [pc, #100]	; (8004f30 <HAL_LCD_MspInit+0xbc>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ed2:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <HAL_LCD_MspInit+0xbc>)
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	68bb      	ldr	r3, [r7, #8]
    /**LCD GPIO Configuration
    PC3     ------> LCD_VLCD
    PA8     ------> LCD_COM0
    PA9     ------> LCD_COM1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004ede:	2308      	movs	r3, #8
 8004ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eea:	2300      	movs	r3, #0
 8004eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8004eee:	230b      	movs	r3, #11
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ef2:	f107 0314 	add.w	r3, r7, #20
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	480e      	ldr	r0, [pc, #56]	; (8004f34 <HAL_LCD_MspInit+0xc0>)
 8004efa:	f7fc fc27 	bl	800174c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004efe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f04:	2302      	movs	r3, #2
 8004f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8004f10:	230b      	movs	r3, #11
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f14:	f107 0314 	add.w	r3, r7, #20
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f1e:	f7fc fc15 	bl	800174c <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8004f22:	bf00      	nop
 8004f24:	3728      	adds	r7, #40	; 0x28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40002400 	.word	0x40002400
 8004f30:	40021000 	.word	0x40021000
 8004f34:	48000800 	.word	0x48000800

08004f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08c      	sub	sp, #48	; 0x30
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f40:	f107 031c 	add.w	r3, r7, #28
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	60da      	str	r2, [r3, #12]
 8004f4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a41      	ldr	r2, [pc, #260]	; (800505c <HAL_UART_MspInit+0x124>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d131      	bne.n	8004fbe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5e:	4a40      	ldr	r2, [pc, #256]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f64:	6593      	str	r3, [r2, #88]	; 0x58
 8004f66:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f6e:	61bb      	str	r3, [r7, #24]
 8004f70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f72:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f76:	4a3a      	ldr	r2, [pc, #232]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f7e:	4b38      	ldr	r3, [pc, #224]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f8e:	2302      	movs	r3, #2
 8004f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f96:	2303      	movs	r3, #3
 8004f98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f9e:	f107 031c 	add.w	r3, r7, #28
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fa8:	f7fc fbd0 	bl	800174c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004fac:	2200      	movs	r2, #0
 8004fae:	2100      	movs	r1, #0
 8004fb0:	2034      	movs	r0, #52	; 0x34
 8004fb2:	f7fc fb54 	bl	800165e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004fb6:	2034      	movs	r0, #52	; 0x34
 8004fb8:	f7fc fb6d 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004fbc:	e049      	b.n	8005052 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a28      	ldr	r2, [pc, #160]	; (8005064 <HAL_UART_MspInit+0x12c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d144      	bne.n	8005052 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004fc8:	4b25      	ldr	r3, [pc, #148]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fcc:	4a24      	ldr	r2, [pc, #144]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fd4:	4b22      	ldr	r3, [pc, #136]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe0:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe4:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fec:	4b1c      	ldr	r3, [pc, #112]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffc:	4a18      	ldr	r2, [pc, #96]	; (8005060 <HAL_UART_MspInit+0x128>)
 8004ffe:	f043 0308 	orr.w	r3, r3, #8
 8005002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005004:	4b16      	ldr	r3, [pc, #88]	; (8005060 <HAL_UART_MspInit+0x128>)
 8005006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005010:	2308      	movs	r3, #8
 8005012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005014:	2302      	movs	r3, #2
 8005016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005018:	2300      	movs	r3, #0
 800501a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800501c:	2303      	movs	r3, #3
 800501e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005020:	2307      	movs	r3, #7
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005024:	f107 031c 	add.w	r3, r7, #28
 8005028:	4619      	mov	r1, r3
 800502a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800502e:	f7fc fb8d 	bl	800174c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005032:	2320      	movs	r3, #32
 8005034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005036:	2302      	movs	r3, #2
 8005038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503a:	2300      	movs	r3, #0
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800503e:	2303      	movs	r3, #3
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005042:	2307      	movs	r3, #7
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005046:	f107 031c 	add.w	r3, r7, #28
 800504a:	4619      	mov	r1, r3
 800504c:	4806      	ldr	r0, [pc, #24]	; (8005068 <HAL_UART_MspInit+0x130>)
 800504e:	f7fc fb7d 	bl	800174c <HAL_GPIO_Init>
}
 8005052:	bf00      	nop
 8005054:	3730      	adds	r7, #48	; 0x30
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40004c00 	.word	0x40004c00
 8005060:	40021000 	.word	0x40021000
 8005064:	40004400 	.word	0x40004400
 8005068:	48000c00 	.word	0x48000c00

0800506c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005070:	bf00      	nop
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800507a:	b480      	push	{r7}
 800507c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800507e:	e7fe      	b.n	800507e <HardFault_Handler+0x4>

08005080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005084:	e7fe      	b.n	8005084 <MemManage_Handler+0x4>

08005086 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005086:	b480      	push	{r7}
 8005088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800508a:	e7fe      	b.n	800508a <BusFault_Handler+0x4>

0800508c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005090:	e7fe      	b.n	8005090 <UsageFault_Handler+0x4>

08005092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005092:	b480      	push	{r7}
 8005094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005096:	bf00      	nop
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050a4:	bf00      	nop
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050ae:	b480      	push	{r7}
 80050b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050b2:	bf00      	nop
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050c0:	f7fb faa8 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050c4:	bf00      	nop
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80050cc:	4802      	ldr	r0, [pc, #8]	; (80050d8 <UART4_IRQHandler+0x10>)
 80050ce:	f7fe fb85 	bl	80037dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80050d2:	bf00      	nop
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000158 	.word	0x20000158

080050dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80050e4:	4b11      	ldr	r3, [pc, #68]	; (800512c <_sbrk+0x50>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <_sbrk+0x16>
		heap_end = &end;
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <_sbrk+0x50>)
 80050ee:	4a10      	ldr	r2, [pc, #64]	; (8005130 <_sbrk+0x54>)
 80050f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80050f2:	4b0e      	ldr	r3, [pc, #56]	; (800512c <_sbrk+0x50>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <_sbrk+0x50>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4413      	add	r3, r2
 8005100:	466a      	mov	r2, sp
 8005102:	4293      	cmp	r3, r2
 8005104:	d907      	bls.n	8005116 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005106:	f000 f875 	bl	80051f4 <__errno>
 800510a:	4602      	mov	r2, r0
 800510c:	230c      	movs	r3, #12
 800510e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005110:	f04f 33ff 	mov.w	r3, #4294967295
 8005114:	e006      	b.n	8005124 <_sbrk+0x48>
	}

	heap_end += incr;
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <_sbrk+0x50>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	4a03      	ldr	r2, [pc, #12]	; (800512c <_sbrk+0x50>)
 8005120:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005122:	68fb      	ldr	r3, [r7, #12]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000094 	.word	0x20000094
 8005130:	200002b0 	.word	0x200002b0

08005134 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005138:	4b17      	ldr	r3, [pc, #92]	; (8005198 <SystemInit+0x64>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513e:	4a16      	ldr	r2, [pc, #88]	; (8005198 <SystemInit+0x64>)
 8005140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005148:	4b14      	ldr	r3, [pc, #80]	; (800519c <SystemInit+0x68>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a13      	ldr	r2, [pc, #76]	; (800519c <SystemInit+0x68>)
 800514e:	f043 0301 	orr.w	r3, r3, #1
 8005152:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005154:	4b11      	ldr	r3, [pc, #68]	; (800519c <SystemInit+0x68>)
 8005156:	2200      	movs	r2, #0
 8005158:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <SystemInit+0x68>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a0f      	ldr	r2, [pc, #60]	; (800519c <SystemInit+0x68>)
 8005160:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005164:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005168:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800516a:	4b0c      	ldr	r3, [pc, #48]	; (800519c <SystemInit+0x68>)
 800516c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005170:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <SystemInit+0x68>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a09      	ldr	r2, [pc, #36]	; (800519c <SystemInit+0x68>)
 8005178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800517c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800517e:	4b07      	ldr	r3, [pc, #28]	; (800519c <SystemInit+0x68>)
 8005180:	2200      	movs	r2, #0
 8005182:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <SystemInit+0x64>)
 8005186:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800518a:	609a      	str	r2, [r3, #8]
#endif
}
 800518c:	bf00      	nop
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	e000ed00 	.word	0xe000ed00
 800519c:	40021000 	.word	0x40021000

080051a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80051a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80051a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80051a6:	e003      	b.n	80051b0 <LoopCopyDataInit>

080051a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80051a8:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80051aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80051ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80051ae:	3104      	adds	r1, #4

080051b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80051b0:	480b      	ldr	r0, [pc, #44]	; (80051e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80051b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80051b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80051b8:	d3f6      	bcc.n	80051a8 <CopyDataInit>
	ldr	r2, =_sbss
 80051ba:	4a0b      	ldr	r2, [pc, #44]	; (80051e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80051bc:	e002      	b.n	80051c4 <LoopFillZerobss>

080051be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80051be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80051c0:	f842 3b04 	str.w	r3, [r2], #4

080051c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80051c4:	4b09      	ldr	r3, [pc, #36]	; (80051ec <LoopForever+0x16>)
	cmp	r2, r3
 80051c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80051c8:	d3f9      	bcc.n	80051be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80051ca:	f7ff ffb3 	bl	8005134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051ce:	f000 f817 	bl	8005200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80051d2:	f7ff f9c1 	bl	8004558 <main>

080051d6 <LoopForever>:

LoopForever:
    b LoopForever
 80051d6:	e7fe      	b.n	80051d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80051d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80051dc:	08006628 	.word	0x08006628
	ldr	r0, =_sdata
 80051e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80051e4:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80051e8:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80051ec:	200002ac 	.word	0x200002ac

080051f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80051f0:	e7fe      	b.n	80051f0 <ADC1_2_IRQHandler>
	...

080051f4 <__errno>:
 80051f4:	4b01      	ldr	r3, [pc, #4]	; (80051fc <__errno+0x8>)
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000014 	.word	0x20000014

08005200 <__libc_init_array>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4e0d      	ldr	r6, [pc, #52]	; (8005238 <__libc_init_array+0x38>)
 8005204:	4c0d      	ldr	r4, [pc, #52]	; (800523c <__libc_init_array+0x3c>)
 8005206:	1ba4      	subs	r4, r4, r6
 8005208:	10a4      	asrs	r4, r4, #2
 800520a:	2500      	movs	r5, #0
 800520c:	42a5      	cmp	r5, r4
 800520e:	d109      	bne.n	8005224 <__libc_init_array+0x24>
 8005210:	4e0b      	ldr	r6, [pc, #44]	; (8005240 <__libc_init_array+0x40>)
 8005212:	4c0c      	ldr	r4, [pc, #48]	; (8005244 <__libc_init_array+0x44>)
 8005214:	f001 f97e 	bl	8006514 <_init>
 8005218:	1ba4      	subs	r4, r4, r6
 800521a:	10a4      	asrs	r4, r4, #2
 800521c:	2500      	movs	r5, #0
 800521e:	42a5      	cmp	r5, r4
 8005220:	d105      	bne.n	800522e <__libc_init_array+0x2e>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005228:	4798      	blx	r3
 800522a:	3501      	adds	r5, #1
 800522c:	e7ee      	b.n	800520c <__libc_init_array+0xc>
 800522e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005232:	4798      	blx	r3
 8005234:	3501      	adds	r5, #1
 8005236:	e7f2      	b.n	800521e <__libc_init_array+0x1e>
 8005238:	08006620 	.word	0x08006620
 800523c:	08006620 	.word	0x08006620
 8005240:	08006620 	.word	0x08006620
 8005244:	08006624 	.word	0x08006624

08005248 <malloc>:
 8005248:	4b02      	ldr	r3, [pc, #8]	; (8005254 <malloc+0xc>)
 800524a:	4601      	mov	r1, r0
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	f000 b859 	b.w	8005304 <_malloc_r>
 8005252:	bf00      	nop
 8005254:	20000014 	.word	0x20000014

08005258 <memset>:
 8005258:	4402      	add	r2, r0
 800525a:	4603      	mov	r3, r0
 800525c:	4293      	cmp	r3, r2
 800525e:	d100      	bne.n	8005262 <memset+0xa>
 8005260:	4770      	bx	lr
 8005262:	f803 1b01 	strb.w	r1, [r3], #1
 8005266:	e7f9      	b.n	800525c <memset+0x4>

08005268 <_free_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4605      	mov	r5, r0
 800526c:	2900      	cmp	r1, #0
 800526e:	d045      	beq.n	80052fc <_free_r+0x94>
 8005270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005274:	1f0c      	subs	r4, r1, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	bfb8      	it	lt
 800527a:	18e4      	addlt	r4, r4, r3
 800527c:	f000 fc30 	bl	8005ae0 <__malloc_lock>
 8005280:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <_free_r+0x98>)
 8005282:	6813      	ldr	r3, [r2, #0]
 8005284:	4610      	mov	r0, r2
 8005286:	b933      	cbnz	r3, 8005296 <_free_r+0x2e>
 8005288:	6063      	str	r3, [r4, #4]
 800528a:	6014      	str	r4, [r2, #0]
 800528c:	4628      	mov	r0, r5
 800528e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005292:	f000 bc26 	b.w	8005ae2 <__malloc_unlock>
 8005296:	42a3      	cmp	r3, r4
 8005298:	d90c      	bls.n	80052b4 <_free_r+0x4c>
 800529a:	6821      	ldr	r1, [r4, #0]
 800529c:	1862      	adds	r2, r4, r1
 800529e:	4293      	cmp	r3, r2
 80052a0:	bf04      	itt	eq
 80052a2:	681a      	ldreq	r2, [r3, #0]
 80052a4:	685b      	ldreq	r3, [r3, #4]
 80052a6:	6063      	str	r3, [r4, #4]
 80052a8:	bf04      	itt	eq
 80052aa:	1852      	addeq	r2, r2, r1
 80052ac:	6022      	streq	r2, [r4, #0]
 80052ae:	6004      	str	r4, [r0, #0]
 80052b0:	e7ec      	b.n	800528c <_free_r+0x24>
 80052b2:	4613      	mov	r3, r2
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	b10a      	cbz	r2, 80052bc <_free_r+0x54>
 80052b8:	42a2      	cmp	r2, r4
 80052ba:	d9fa      	bls.n	80052b2 <_free_r+0x4a>
 80052bc:	6819      	ldr	r1, [r3, #0]
 80052be:	1858      	adds	r0, r3, r1
 80052c0:	42a0      	cmp	r0, r4
 80052c2:	d10b      	bne.n	80052dc <_free_r+0x74>
 80052c4:	6820      	ldr	r0, [r4, #0]
 80052c6:	4401      	add	r1, r0
 80052c8:	1858      	adds	r0, r3, r1
 80052ca:	4282      	cmp	r2, r0
 80052cc:	6019      	str	r1, [r3, #0]
 80052ce:	d1dd      	bne.n	800528c <_free_r+0x24>
 80052d0:	6810      	ldr	r0, [r2, #0]
 80052d2:	6852      	ldr	r2, [r2, #4]
 80052d4:	605a      	str	r2, [r3, #4]
 80052d6:	4401      	add	r1, r0
 80052d8:	6019      	str	r1, [r3, #0]
 80052da:	e7d7      	b.n	800528c <_free_r+0x24>
 80052dc:	d902      	bls.n	80052e4 <_free_r+0x7c>
 80052de:	230c      	movs	r3, #12
 80052e0:	602b      	str	r3, [r5, #0]
 80052e2:	e7d3      	b.n	800528c <_free_r+0x24>
 80052e4:	6820      	ldr	r0, [r4, #0]
 80052e6:	1821      	adds	r1, r4, r0
 80052e8:	428a      	cmp	r2, r1
 80052ea:	bf04      	itt	eq
 80052ec:	6811      	ldreq	r1, [r2, #0]
 80052ee:	6852      	ldreq	r2, [r2, #4]
 80052f0:	6062      	str	r2, [r4, #4]
 80052f2:	bf04      	itt	eq
 80052f4:	1809      	addeq	r1, r1, r0
 80052f6:	6021      	streq	r1, [r4, #0]
 80052f8:	605c      	str	r4, [r3, #4]
 80052fa:	e7c7      	b.n	800528c <_free_r+0x24>
 80052fc:	bd38      	pop	{r3, r4, r5, pc}
 80052fe:	bf00      	nop
 8005300:	20000098 	.word	0x20000098

08005304 <_malloc_r>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	1ccd      	adds	r5, r1, #3
 8005308:	f025 0503 	bic.w	r5, r5, #3
 800530c:	3508      	adds	r5, #8
 800530e:	2d0c      	cmp	r5, #12
 8005310:	bf38      	it	cc
 8005312:	250c      	movcc	r5, #12
 8005314:	2d00      	cmp	r5, #0
 8005316:	4606      	mov	r6, r0
 8005318:	db01      	blt.n	800531e <_malloc_r+0x1a>
 800531a:	42a9      	cmp	r1, r5
 800531c:	d903      	bls.n	8005326 <_malloc_r+0x22>
 800531e:	230c      	movs	r3, #12
 8005320:	6033      	str	r3, [r6, #0]
 8005322:	2000      	movs	r0, #0
 8005324:	bd70      	pop	{r4, r5, r6, pc}
 8005326:	f000 fbdb 	bl	8005ae0 <__malloc_lock>
 800532a:	4a21      	ldr	r2, [pc, #132]	; (80053b0 <_malloc_r+0xac>)
 800532c:	6814      	ldr	r4, [r2, #0]
 800532e:	4621      	mov	r1, r4
 8005330:	b991      	cbnz	r1, 8005358 <_malloc_r+0x54>
 8005332:	4c20      	ldr	r4, [pc, #128]	; (80053b4 <_malloc_r+0xb0>)
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	b91b      	cbnz	r3, 8005340 <_malloc_r+0x3c>
 8005338:	4630      	mov	r0, r6
 800533a:	f000 f855 	bl	80053e8 <_sbrk_r>
 800533e:	6020      	str	r0, [r4, #0]
 8005340:	4629      	mov	r1, r5
 8005342:	4630      	mov	r0, r6
 8005344:	f000 f850 	bl	80053e8 <_sbrk_r>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d124      	bne.n	8005396 <_malloc_r+0x92>
 800534c:	230c      	movs	r3, #12
 800534e:	6033      	str	r3, [r6, #0]
 8005350:	4630      	mov	r0, r6
 8005352:	f000 fbc6 	bl	8005ae2 <__malloc_unlock>
 8005356:	e7e4      	b.n	8005322 <_malloc_r+0x1e>
 8005358:	680b      	ldr	r3, [r1, #0]
 800535a:	1b5b      	subs	r3, r3, r5
 800535c:	d418      	bmi.n	8005390 <_malloc_r+0x8c>
 800535e:	2b0b      	cmp	r3, #11
 8005360:	d90f      	bls.n	8005382 <_malloc_r+0x7e>
 8005362:	600b      	str	r3, [r1, #0]
 8005364:	50cd      	str	r5, [r1, r3]
 8005366:	18cc      	adds	r4, r1, r3
 8005368:	4630      	mov	r0, r6
 800536a:	f000 fbba 	bl	8005ae2 <__malloc_unlock>
 800536e:	f104 000b 	add.w	r0, r4, #11
 8005372:	1d23      	adds	r3, r4, #4
 8005374:	f020 0007 	bic.w	r0, r0, #7
 8005378:	1ac3      	subs	r3, r0, r3
 800537a:	d0d3      	beq.n	8005324 <_malloc_r+0x20>
 800537c:	425a      	negs	r2, r3
 800537e:	50e2      	str	r2, [r4, r3]
 8005380:	e7d0      	b.n	8005324 <_malloc_r+0x20>
 8005382:	428c      	cmp	r4, r1
 8005384:	684b      	ldr	r3, [r1, #4]
 8005386:	bf16      	itet	ne
 8005388:	6063      	strne	r3, [r4, #4]
 800538a:	6013      	streq	r3, [r2, #0]
 800538c:	460c      	movne	r4, r1
 800538e:	e7eb      	b.n	8005368 <_malloc_r+0x64>
 8005390:	460c      	mov	r4, r1
 8005392:	6849      	ldr	r1, [r1, #4]
 8005394:	e7cc      	b.n	8005330 <_malloc_r+0x2c>
 8005396:	1cc4      	adds	r4, r0, #3
 8005398:	f024 0403 	bic.w	r4, r4, #3
 800539c:	42a0      	cmp	r0, r4
 800539e:	d005      	beq.n	80053ac <_malloc_r+0xa8>
 80053a0:	1a21      	subs	r1, r4, r0
 80053a2:	4630      	mov	r0, r6
 80053a4:	f000 f820 	bl	80053e8 <_sbrk_r>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d0cf      	beq.n	800534c <_malloc_r+0x48>
 80053ac:	6025      	str	r5, [r4, #0]
 80053ae:	e7db      	b.n	8005368 <_malloc_r+0x64>
 80053b0:	20000098 	.word	0x20000098
 80053b4:	2000009c 	.word	0x2000009c

080053b8 <iprintf>:
 80053b8:	b40f      	push	{r0, r1, r2, r3}
 80053ba:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <iprintf+0x2c>)
 80053bc:	b513      	push	{r0, r1, r4, lr}
 80053be:	681c      	ldr	r4, [r3, #0]
 80053c0:	b124      	cbz	r4, 80053cc <iprintf+0x14>
 80053c2:	69a3      	ldr	r3, [r4, #24]
 80053c4:	b913      	cbnz	r3, 80053cc <iprintf+0x14>
 80053c6:	4620      	mov	r0, r4
 80053c8:	f000 fa9c 	bl	8005904 <__sinit>
 80053cc:	ab05      	add	r3, sp, #20
 80053ce:	9a04      	ldr	r2, [sp, #16]
 80053d0:	68a1      	ldr	r1, [r4, #8]
 80053d2:	9301      	str	r3, [sp, #4]
 80053d4:	4620      	mov	r0, r4
 80053d6:	f000 fd01 	bl	8005ddc <_vfiprintf_r>
 80053da:	b002      	add	sp, #8
 80053dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e0:	b004      	add	sp, #16
 80053e2:	4770      	bx	lr
 80053e4:	20000014 	.word	0x20000014

080053e8 <_sbrk_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4c06      	ldr	r4, [pc, #24]	; (8005404 <_sbrk_r+0x1c>)
 80053ec:	2300      	movs	r3, #0
 80053ee:	4605      	mov	r5, r0
 80053f0:	4608      	mov	r0, r1
 80053f2:	6023      	str	r3, [r4, #0]
 80053f4:	f7ff fe72 	bl	80050dc <_sbrk>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_sbrk_r+0x1a>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_sbrk_r+0x1a>
 8005400:	602b      	str	r3, [r5, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	200002a8 	.word	0x200002a8

08005408 <setvbuf>:
 8005408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800540c:	461d      	mov	r5, r3
 800540e:	4b51      	ldr	r3, [pc, #324]	; (8005554 <setvbuf+0x14c>)
 8005410:	681e      	ldr	r6, [r3, #0]
 8005412:	4604      	mov	r4, r0
 8005414:	460f      	mov	r7, r1
 8005416:	4690      	mov	r8, r2
 8005418:	b126      	cbz	r6, 8005424 <setvbuf+0x1c>
 800541a:	69b3      	ldr	r3, [r6, #24]
 800541c:	b913      	cbnz	r3, 8005424 <setvbuf+0x1c>
 800541e:	4630      	mov	r0, r6
 8005420:	f000 fa70 	bl	8005904 <__sinit>
 8005424:	4b4c      	ldr	r3, [pc, #304]	; (8005558 <setvbuf+0x150>)
 8005426:	429c      	cmp	r4, r3
 8005428:	d152      	bne.n	80054d0 <setvbuf+0xc8>
 800542a:	6874      	ldr	r4, [r6, #4]
 800542c:	f1b8 0f02 	cmp.w	r8, #2
 8005430:	d006      	beq.n	8005440 <setvbuf+0x38>
 8005432:	f1b8 0f01 	cmp.w	r8, #1
 8005436:	f200 8089 	bhi.w	800554c <setvbuf+0x144>
 800543a:	2d00      	cmp	r5, #0
 800543c:	f2c0 8086 	blt.w	800554c <setvbuf+0x144>
 8005440:	4621      	mov	r1, r4
 8005442:	4630      	mov	r0, r6
 8005444:	f000 f9f4 	bl	8005830 <_fflush_r>
 8005448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800544a:	b141      	cbz	r1, 800545e <setvbuf+0x56>
 800544c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005450:	4299      	cmp	r1, r3
 8005452:	d002      	beq.n	800545a <setvbuf+0x52>
 8005454:	4630      	mov	r0, r6
 8005456:	f7ff ff07 	bl	8005268 <_free_r>
 800545a:	2300      	movs	r3, #0
 800545c:	6363      	str	r3, [r4, #52]	; 0x34
 800545e:	2300      	movs	r3, #0
 8005460:	61a3      	str	r3, [r4, #24]
 8005462:	6063      	str	r3, [r4, #4]
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	061b      	lsls	r3, r3, #24
 8005468:	d503      	bpl.n	8005472 <setvbuf+0x6a>
 800546a:	6921      	ldr	r1, [r4, #16]
 800546c:	4630      	mov	r0, r6
 800546e:	f7ff fefb 	bl	8005268 <_free_r>
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005478:	f023 0303 	bic.w	r3, r3, #3
 800547c:	f1b8 0f02 	cmp.w	r8, #2
 8005480:	81a3      	strh	r3, [r4, #12]
 8005482:	d05d      	beq.n	8005540 <setvbuf+0x138>
 8005484:	ab01      	add	r3, sp, #4
 8005486:	466a      	mov	r2, sp
 8005488:	4621      	mov	r1, r4
 800548a:	4630      	mov	r0, r6
 800548c:	f000 fac4 	bl	8005a18 <__swhatbuf_r>
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	4318      	orrs	r0, r3
 8005494:	81a0      	strh	r0, [r4, #12]
 8005496:	bb2d      	cbnz	r5, 80054e4 <setvbuf+0xdc>
 8005498:	9d00      	ldr	r5, [sp, #0]
 800549a:	4628      	mov	r0, r5
 800549c:	f7ff fed4 	bl	8005248 <malloc>
 80054a0:	4607      	mov	r7, r0
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d14e      	bne.n	8005544 <setvbuf+0x13c>
 80054a6:	f8dd 9000 	ldr.w	r9, [sp]
 80054aa:	45a9      	cmp	r9, r5
 80054ac:	d13c      	bne.n	8005528 <setvbuf+0x120>
 80054ae:	f04f 30ff 	mov.w	r0, #4294967295
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	81a3      	strh	r3, [r4, #12]
 80054ba:	2300      	movs	r3, #0
 80054bc:	60a3      	str	r3, [r4, #8]
 80054be:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054c2:	6023      	str	r3, [r4, #0]
 80054c4:	6123      	str	r3, [r4, #16]
 80054c6:	2301      	movs	r3, #1
 80054c8:	6163      	str	r3, [r4, #20]
 80054ca:	b003      	add	sp, #12
 80054cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054d0:	4b22      	ldr	r3, [pc, #136]	; (800555c <setvbuf+0x154>)
 80054d2:	429c      	cmp	r4, r3
 80054d4:	d101      	bne.n	80054da <setvbuf+0xd2>
 80054d6:	68b4      	ldr	r4, [r6, #8]
 80054d8:	e7a8      	b.n	800542c <setvbuf+0x24>
 80054da:	4b21      	ldr	r3, [pc, #132]	; (8005560 <setvbuf+0x158>)
 80054dc:	429c      	cmp	r4, r3
 80054de:	bf08      	it	eq
 80054e0:	68f4      	ldreq	r4, [r6, #12]
 80054e2:	e7a3      	b.n	800542c <setvbuf+0x24>
 80054e4:	2f00      	cmp	r7, #0
 80054e6:	d0d8      	beq.n	800549a <setvbuf+0x92>
 80054e8:	69b3      	ldr	r3, [r6, #24]
 80054ea:	b913      	cbnz	r3, 80054f2 <setvbuf+0xea>
 80054ec:	4630      	mov	r0, r6
 80054ee:	f000 fa09 	bl	8005904 <__sinit>
 80054f2:	f1b8 0f01 	cmp.w	r8, #1
 80054f6:	bf08      	it	eq
 80054f8:	89a3      	ldrheq	r3, [r4, #12]
 80054fa:	6027      	str	r7, [r4, #0]
 80054fc:	bf04      	itt	eq
 80054fe:	f043 0301 	orreq.w	r3, r3, #1
 8005502:	81a3      	strheq	r3, [r4, #12]
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	f013 0008 	ands.w	r0, r3, #8
 800550a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800550e:	d01b      	beq.n	8005548 <setvbuf+0x140>
 8005510:	f013 0001 	ands.w	r0, r3, #1
 8005514:	bf18      	it	ne
 8005516:	426d      	negne	r5, r5
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	bf1d      	ittte	ne
 800551e:	60a3      	strne	r3, [r4, #8]
 8005520:	61a5      	strne	r5, [r4, #24]
 8005522:	4618      	movne	r0, r3
 8005524:	60a5      	streq	r5, [r4, #8]
 8005526:	e7d0      	b.n	80054ca <setvbuf+0xc2>
 8005528:	4648      	mov	r0, r9
 800552a:	f7ff fe8d 	bl	8005248 <malloc>
 800552e:	4607      	mov	r7, r0
 8005530:	2800      	cmp	r0, #0
 8005532:	d0bc      	beq.n	80054ae <setvbuf+0xa6>
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553a:	81a3      	strh	r3, [r4, #12]
 800553c:	464d      	mov	r5, r9
 800553e:	e7d3      	b.n	80054e8 <setvbuf+0xe0>
 8005540:	2000      	movs	r0, #0
 8005542:	e7b6      	b.n	80054b2 <setvbuf+0xaa>
 8005544:	46a9      	mov	r9, r5
 8005546:	e7f5      	b.n	8005534 <setvbuf+0x12c>
 8005548:	60a0      	str	r0, [r4, #8]
 800554a:	e7be      	b.n	80054ca <setvbuf+0xc2>
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	e7bb      	b.n	80054ca <setvbuf+0xc2>
 8005552:	bf00      	nop
 8005554:	20000014 	.word	0x20000014
 8005558:	080065a4 	.word	0x080065a4
 800555c:	080065c4 	.word	0x080065c4
 8005560:	08006584 	.word	0x08006584

08005564 <siprintf>:
 8005564:	b40e      	push	{r1, r2, r3}
 8005566:	b500      	push	{lr}
 8005568:	b09c      	sub	sp, #112	; 0x70
 800556a:	ab1d      	add	r3, sp, #116	; 0x74
 800556c:	9002      	str	r0, [sp, #8]
 800556e:	9006      	str	r0, [sp, #24]
 8005570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005574:	4809      	ldr	r0, [pc, #36]	; (800559c <siprintf+0x38>)
 8005576:	9107      	str	r1, [sp, #28]
 8005578:	9104      	str	r1, [sp, #16]
 800557a:	4909      	ldr	r1, [pc, #36]	; (80055a0 <siprintf+0x3c>)
 800557c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005580:	9105      	str	r1, [sp, #20]
 8005582:	6800      	ldr	r0, [r0, #0]
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	a902      	add	r1, sp, #8
 8005588:	f000 fb06 	bl	8005b98 <_svfiprintf_r>
 800558c:	9b02      	ldr	r3, [sp, #8]
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	b01c      	add	sp, #112	; 0x70
 8005594:	f85d eb04 	ldr.w	lr, [sp], #4
 8005598:	b003      	add	sp, #12
 800559a:	4770      	bx	lr
 800559c:	20000014 	.word	0x20000014
 80055a0:	ffff0208 	.word	0xffff0208

080055a4 <__swbuf_r>:
 80055a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a6:	460e      	mov	r6, r1
 80055a8:	4614      	mov	r4, r2
 80055aa:	4605      	mov	r5, r0
 80055ac:	b118      	cbz	r0, 80055b6 <__swbuf_r+0x12>
 80055ae:	6983      	ldr	r3, [r0, #24]
 80055b0:	b90b      	cbnz	r3, 80055b6 <__swbuf_r+0x12>
 80055b2:	f000 f9a7 	bl	8005904 <__sinit>
 80055b6:	4b21      	ldr	r3, [pc, #132]	; (800563c <__swbuf_r+0x98>)
 80055b8:	429c      	cmp	r4, r3
 80055ba:	d12a      	bne.n	8005612 <__swbuf_r+0x6e>
 80055bc:	686c      	ldr	r4, [r5, #4]
 80055be:	69a3      	ldr	r3, [r4, #24]
 80055c0:	60a3      	str	r3, [r4, #8]
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	071a      	lsls	r2, r3, #28
 80055c6:	d52e      	bpl.n	8005626 <__swbuf_r+0x82>
 80055c8:	6923      	ldr	r3, [r4, #16]
 80055ca:	b363      	cbz	r3, 8005626 <__swbuf_r+0x82>
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	1ac0      	subs	r0, r0, r3
 80055d2:	6963      	ldr	r3, [r4, #20]
 80055d4:	b2f6      	uxtb	r6, r6
 80055d6:	4283      	cmp	r3, r0
 80055d8:	4637      	mov	r7, r6
 80055da:	dc04      	bgt.n	80055e6 <__swbuf_r+0x42>
 80055dc:	4621      	mov	r1, r4
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 f926 	bl	8005830 <_fflush_r>
 80055e4:	bb28      	cbnz	r0, 8005632 <__swbuf_r+0x8e>
 80055e6:	68a3      	ldr	r3, [r4, #8]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	60a3      	str	r3, [r4, #8]
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	6022      	str	r2, [r4, #0]
 80055f2:	701e      	strb	r6, [r3, #0]
 80055f4:	6963      	ldr	r3, [r4, #20]
 80055f6:	3001      	adds	r0, #1
 80055f8:	4283      	cmp	r3, r0
 80055fa:	d004      	beq.n	8005606 <__swbuf_r+0x62>
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	07db      	lsls	r3, r3, #31
 8005600:	d519      	bpl.n	8005636 <__swbuf_r+0x92>
 8005602:	2e0a      	cmp	r6, #10
 8005604:	d117      	bne.n	8005636 <__swbuf_r+0x92>
 8005606:	4621      	mov	r1, r4
 8005608:	4628      	mov	r0, r5
 800560a:	f000 f911 	bl	8005830 <_fflush_r>
 800560e:	b190      	cbz	r0, 8005636 <__swbuf_r+0x92>
 8005610:	e00f      	b.n	8005632 <__swbuf_r+0x8e>
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <__swbuf_r+0x9c>)
 8005614:	429c      	cmp	r4, r3
 8005616:	d101      	bne.n	800561c <__swbuf_r+0x78>
 8005618:	68ac      	ldr	r4, [r5, #8]
 800561a:	e7d0      	b.n	80055be <__swbuf_r+0x1a>
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <__swbuf_r+0xa0>)
 800561e:	429c      	cmp	r4, r3
 8005620:	bf08      	it	eq
 8005622:	68ec      	ldreq	r4, [r5, #12]
 8005624:	e7cb      	b.n	80055be <__swbuf_r+0x1a>
 8005626:	4621      	mov	r1, r4
 8005628:	4628      	mov	r0, r5
 800562a:	f000 f80d 	bl	8005648 <__swsetup_r>
 800562e:	2800      	cmp	r0, #0
 8005630:	d0cc      	beq.n	80055cc <__swbuf_r+0x28>
 8005632:	f04f 37ff 	mov.w	r7, #4294967295
 8005636:	4638      	mov	r0, r7
 8005638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800563a:	bf00      	nop
 800563c:	080065a4 	.word	0x080065a4
 8005640:	080065c4 	.word	0x080065c4
 8005644:	08006584 	.word	0x08006584

08005648 <__swsetup_r>:
 8005648:	4b32      	ldr	r3, [pc, #200]	; (8005714 <__swsetup_r+0xcc>)
 800564a:	b570      	push	{r4, r5, r6, lr}
 800564c:	681d      	ldr	r5, [r3, #0]
 800564e:	4606      	mov	r6, r0
 8005650:	460c      	mov	r4, r1
 8005652:	b125      	cbz	r5, 800565e <__swsetup_r+0x16>
 8005654:	69ab      	ldr	r3, [r5, #24]
 8005656:	b913      	cbnz	r3, 800565e <__swsetup_r+0x16>
 8005658:	4628      	mov	r0, r5
 800565a:	f000 f953 	bl	8005904 <__sinit>
 800565e:	4b2e      	ldr	r3, [pc, #184]	; (8005718 <__swsetup_r+0xd0>)
 8005660:	429c      	cmp	r4, r3
 8005662:	d10f      	bne.n	8005684 <__swsetup_r+0x3c>
 8005664:	686c      	ldr	r4, [r5, #4]
 8005666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800566a:	b29a      	uxth	r2, r3
 800566c:	0715      	lsls	r5, r2, #28
 800566e:	d42c      	bmi.n	80056ca <__swsetup_r+0x82>
 8005670:	06d0      	lsls	r0, r2, #27
 8005672:	d411      	bmi.n	8005698 <__swsetup_r+0x50>
 8005674:	2209      	movs	r2, #9
 8005676:	6032      	str	r2, [r6, #0]
 8005678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800567c:	81a3      	strh	r3, [r4, #12]
 800567e:	f04f 30ff 	mov.w	r0, #4294967295
 8005682:	e03e      	b.n	8005702 <__swsetup_r+0xba>
 8005684:	4b25      	ldr	r3, [pc, #148]	; (800571c <__swsetup_r+0xd4>)
 8005686:	429c      	cmp	r4, r3
 8005688:	d101      	bne.n	800568e <__swsetup_r+0x46>
 800568a:	68ac      	ldr	r4, [r5, #8]
 800568c:	e7eb      	b.n	8005666 <__swsetup_r+0x1e>
 800568e:	4b24      	ldr	r3, [pc, #144]	; (8005720 <__swsetup_r+0xd8>)
 8005690:	429c      	cmp	r4, r3
 8005692:	bf08      	it	eq
 8005694:	68ec      	ldreq	r4, [r5, #12]
 8005696:	e7e6      	b.n	8005666 <__swsetup_r+0x1e>
 8005698:	0751      	lsls	r1, r2, #29
 800569a:	d512      	bpl.n	80056c2 <__swsetup_r+0x7a>
 800569c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800569e:	b141      	cbz	r1, 80056b2 <__swsetup_r+0x6a>
 80056a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a4:	4299      	cmp	r1, r3
 80056a6:	d002      	beq.n	80056ae <__swsetup_r+0x66>
 80056a8:	4630      	mov	r0, r6
 80056aa:	f7ff fddd 	bl	8005268 <_free_r>
 80056ae:	2300      	movs	r3, #0
 80056b0:	6363      	str	r3, [r4, #52]	; 0x34
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056b8:	81a3      	strh	r3, [r4, #12]
 80056ba:	2300      	movs	r3, #0
 80056bc:	6063      	str	r3, [r4, #4]
 80056be:	6923      	ldr	r3, [r4, #16]
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	89a3      	ldrh	r3, [r4, #12]
 80056c4:	f043 0308 	orr.w	r3, r3, #8
 80056c8:	81a3      	strh	r3, [r4, #12]
 80056ca:	6923      	ldr	r3, [r4, #16]
 80056cc:	b94b      	cbnz	r3, 80056e2 <__swsetup_r+0x9a>
 80056ce:	89a3      	ldrh	r3, [r4, #12]
 80056d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d8:	d003      	beq.n	80056e2 <__swsetup_r+0x9a>
 80056da:	4621      	mov	r1, r4
 80056dc:	4630      	mov	r0, r6
 80056de:	f000 f9bf 	bl	8005a60 <__smakebuf_r>
 80056e2:	89a2      	ldrh	r2, [r4, #12]
 80056e4:	f012 0301 	ands.w	r3, r2, #1
 80056e8:	d00c      	beq.n	8005704 <__swsetup_r+0xbc>
 80056ea:	2300      	movs	r3, #0
 80056ec:	60a3      	str	r3, [r4, #8]
 80056ee:	6963      	ldr	r3, [r4, #20]
 80056f0:	425b      	negs	r3, r3
 80056f2:	61a3      	str	r3, [r4, #24]
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	b953      	cbnz	r3, 800570e <__swsetup_r+0xc6>
 80056f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005700:	d1ba      	bne.n	8005678 <__swsetup_r+0x30>
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	0792      	lsls	r2, r2, #30
 8005706:	bf58      	it	pl
 8005708:	6963      	ldrpl	r3, [r4, #20]
 800570a:	60a3      	str	r3, [r4, #8]
 800570c:	e7f2      	b.n	80056f4 <__swsetup_r+0xac>
 800570e:	2000      	movs	r0, #0
 8005710:	e7f7      	b.n	8005702 <__swsetup_r+0xba>
 8005712:	bf00      	nop
 8005714:	20000014 	.word	0x20000014
 8005718:	080065a4 	.word	0x080065a4
 800571c:	080065c4 	.word	0x080065c4
 8005720:	08006584 	.word	0x08006584

08005724 <__sflush_r>:
 8005724:	898a      	ldrh	r2, [r1, #12]
 8005726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800572a:	4605      	mov	r5, r0
 800572c:	0710      	lsls	r0, r2, #28
 800572e:	460c      	mov	r4, r1
 8005730:	d458      	bmi.n	80057e4 <__sflush_r+0xc0>
 8005732:	684b      	ldr	r3, [r1, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	dc05      	bgt.n	8005744 <__sflush_r+0x20>
 8005738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	dc02      	bgt.n	8005744 <__sflush_r+0x20>
 800573e:	2000      	movs	r0, #0
 8005740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005746:	2e00      	cmp	r6, #0
 8005748:	d0f9      	beq.n	800573e <__sflush_r+0x1a>
 800574a:	2300      	movs	r3, #0
 800574c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005750:	682f      	ldr	r7, [r5, #0]
 8005752:	6a21      	ldr	r1, [r4, #32]
 8005754:	602b      	str	r3, [r5, #0]
 8005756:	d032      	beq.n	80057be <__sflush_r+0x9a>
 8005758:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	075a      	lsls	r2, r3, #29
 800575e:	d505      	bpl.n	800576c <__sflush_r+0x48>
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	1ac0      	subs	r0, r0, r3
 8005764:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005766:	b10b      	cbz	r3, 800576c <__sflush_r+0x48>
 8005768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800576a:	1ac0      	subs	r0, r0, r3
 800576c:	2300      	movs	r3, #0
 800576e:	4602      	mov	r2, r0
 8005770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005772:	6a21      	ldr	r1, [r4, #32]
 8005774:	4628      	mov	r0, r5
 8005776:	47b0      	blx	r6
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	d106      	bne.n	800578c <__sflush_r+0x68>
 800577e:	6829      	ldr	r1, [r5, #0]
 8005780:	291d      	cmp	r1, #29
 8005782:	d848      	bhi.n	8005816 <__sflush_r+0xf2>
 8005784:	4a29      	ldr	r2, [pc, #164]	; (800582c <__sflush_r+0x108>)
 8005786:	40ca      	lsrs	r2, r1
 8005788:	07d6      	lsls	r6, r2, #31
 800578a:	d544      	bpl.n	8005816 <__sflush_r+0xf2>
 800578c:	2200      	movs	r2, #0
 800578e:	6062      	str	r2, [r4, #4]
 8005790:	04d9      	lsls	r1, r3, #19
 8005792:	6922      	ldr	r2, [r4, #16]
 8005794:	6022      	str	r2, [r4, #0]
 8005796:	d504      	bpl.n	80057a2 <__sflush_r+0x7e>
 8005798:	1c42      	adds	r2, r0, #1
 800579a:	d101      	bne.n	80057a0 <__sflush_r+0x7c>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	b903      	cbnz	r3, 80057a2 <__sflush_r+0x7e>
 80057a0:	6560      	str	r0, [r4, #84]	; 0x54
 80057a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057a4:	602f      	str	r7, [r5, #0]
 80057a6:	2900      	cmp	r1, #0
 80057a8:	d0c9      	beq.n	800573e <__sflush_r+0x1a>
 80057aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057ae:	4299      	cmp	r1, r3
 80057b0:	d002      	beq.n	80057b8 <__sflush_r+0x94>
 80057b2:	4628      	mov	r0, r5
 80057b4:	f7ff fd58 	bl	8005268 <_free_r>
 80057b8:	2000      	movs	r0, #0
 80057ba:	6360      	str	r0, [r4, #52]	; 0x34
 80057bc:	e7c0      	b.n	8005740 <__sflush_r+0x1c>
 80057be:	2301      	movs	r3, #1
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b0      	blx	r6
 80057c4:	1c41      	adds	r1, r0, #1
 80057c6:	d1c8      	bne.n	800575a <__sflush_r+0x36>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0c5      	beq.n	800575a <__sflush_r+0x36>
 80057ce:	2b1d      	cmp	r3, #29
 80057d0:	d001      	beq.n	80057d6 <__sflush_r+0xb2>
 80057d2:	2b16      	cmp	r3, #22
 80057d4:	d101      	bne.n	80057da <__sflush_r+0xb6>
 80057d6:	602f      	str	r7, [r5, #0]
 80057d8:	e7b1      	b.n	800573e <__sflush_r+0x1a>
 80057da:	89a3      	ldrh	r3, [r4, #12]
 80057dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057e0:	81a3      	strh	r3, [r4, #12]
 80057e2:	e7ad      	b.n	8005740 <__sflush_r+0x1c>
 80057e4:	690f      	ldr	r7, [r1, #16]
 80057e6:	2f00      	cmp	r7, #0
 80057e8:	d0a9      	beq.n	800573e <__sflush_r+0x1a>
 80057ea:	0793      	lsls	r3, r2, #30
 80057ec:	680e      	ldr	r6, [r1, #0]
 80057ee:	bf08      	it	eq
 80057f0:	694b      	ldreq	r3, [r1, #20]
 80057f2:	600f      	str	r7, [r1, #0]
 80057f4:	bf18      	it	ne
 80057f6:	2300      	movne	r3, #0
 80057f8:	eba6 0807 	sub.w	r8, r6, r7
 80057fc:	608b      	str	r3, [r1, #8]
 80057fe:	f1b8 0f00 	cmp.w	r8, #0
 8005802:	dd9c      	ble.n	800573e <__sflush_r+0x1a>
 8005804:	4643      	mov	r3, r8
 8005806:	463a      	mov	r2, r7
 8005808:	6a21      	ldr	r1, [r4, #32]
 800580a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800580c:	4628      	mov	r0, r5
 800580e:	47b0      	blx	r6
 8005810:	2800      	cmp	r0, #0
 8005812:	dc06      	bgt.n	8005822 <__sflush_r+0xfe>
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	e78e      	b.n	8005740 <__sflush_r+0x1c>
 8005822:	4407      	add	r7, r0
 8005824:	eba8 0800 	sub.w	r8, r8, r0
 8005828:	e7e9      	b.n	80057fe <__sflush_r+0xda>
 800582a:	bf00      	nop
 800582c:	20400001 	.word	0x20400001

08005830 <_fflush_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	690b      	ldr	r3, [r1, #16]
 8005834:	4605      	mov	r5, r0
 8005836:	460c      	mov	r4, r1
 8005838:	b1db      	cbz	r3, 8005872 <_fflush_r+0x42>
 800583a:	b118      	cbz	r0, 8005844 <_fflush_r+0x14>
 800583c:	6983      	ldr	r3, [r0, #24]
 800583e:	b90b      	cbnz	r3, 8005844 <_fflush_r+0x14>
 8005840:	f000 f860 	bl	8005904 <__sinit>
 8005844:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <_fflush_r+0x48>)
 8005846:	429c      	cmp	r4, r3
 8005848:	d109      	bne.n	800585e <_fflush_r+0x2e>
 800584a:	686c      	ldr	r4, [r5, #4]
 800584c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005850:	b17b      	cbz	r3, 8005872 <_fflush_r+0x42>
 8005852:	4621      	mov	r1, r4
 8005854:	4628      	mov	r0, r5
 8005856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800585a:	f7ff bf63 	b.w	8005724 <__sflush_r>
 800585e:	4b07      	ldr	r3, [pc, #28]	; (800587c <_fflush_r+0x4c>)
 8005860:	429c      	cmp	r4, r3
 8005862:	d101      	bne.n	8005868 <_fflush_r+0x38>
 8005864:	68ac      	ldr	r4, [r5, #8]
 8005866:	e7f1      	b.n	800584c <_fflush_r+0x1c>
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <_fflush_r+0x50>)
 800586a:	429c      	cmp	r4, r3
 800586c:	bf08      	it	eq
 800586e:	68ec      	ldreq	r4, [r5, #12]
 8005870:	e7ec      	b.n	800584c <_fflush_r+0x1c>
 8005872:	2000      	movs	r0, #0
 8005874:	bd38      	pop	{r3, r4, r5, pc}
 8005876:	bf00      	nop
 8005878:	080065a4 	.word	0x080065a4
 800587c:	080065c4 	.word	0x080065c4
 8005880:	08006584 	.word	0x08006584

08005884 <std>:
 8005884:	2300      	movs	r3, #0
 8005886:	b510      	push	{r4, lr}
 8005888:	4604      	mov	r4, r0
 800588a:	e9c0 3300 	strd	r3, r3, [r0]
 800588e:	6083      	str	r3, [r0, #8]
 8005890:	8181      	strh	r1, [r0, #12]
 8005892:	6643      	str	r3, [r0, #100]	; 0x64
 8005894:	81c2      	strh	r2, [r0, #14]
 8005896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800589a:	6183      	str	r3, [r0, #24]
 800589c:	4619      	mov	r1, r3
 800589e:	2208      	movs	r2, #8
 80058a0:	305c      	adds	r0, #92	; 0x5c
 80058a2:	f7ff fcd9 	bl	8005258 <memset>
 80058a6:	4b05      	ldr	r3, [pc, #20]	; (80058bc <std+0x38>)
 80058a8:	6263      	str	r3, [r4, #36]	; 0x24
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <std+0x3c>)
 80058ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <std+0x40>)
 80058b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058b2:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <std+0x44>)
 80058b4:	6224      	str	r4, [r4, #32]
 80058b6:	6323      	str	r3, [r4, #48]	; 0x30
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	bf00      	nop
 80058bc:	08006319 	.word	0x08006319
 80058c0:	0800633b 	.word	0x0800633b
 80058c4:	08006373 	.word	0x08006373
 80058c8:	08006397 	.word	0x08006397

080058cc <_cleanup_r>:
 80058cc:	4901      	ldr	r1, [pc, #4]	; (80058d4 <_cleanup_r+0x8>)
 80058ce:	f000 b885 	b.w	80059dc <_fwalk_reent>
 80058d2:	bf00      	nop
 80058d4:	08005831 	.word	0x08005831

080058d8 <__sfmoreglue>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	1e4a      	subs	r2, r1, #1
 80058dc:	2568      	movs	r5, #104	; 0x68
 80058de:	4355      	muls	r5, r2
 80058e0:	460e      	mov	r6, r1
 80058e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058e6:	f7ff fd0d 	bl	8005304 <_malloc_r>
 80058ea:	4604      	mov	r4, r0
 80058ec:	b140      	cbz	r0, 8005900 <__sfmoreglue+0x28>
 80058ee:	2100      	movs	r1, #0
 80058f0:	e9c0 1600 	strd	r1, r6, [r0]
 80058f4:	300c      	adds	r0, #12
 80058f6:	60a0      	str	r0, [r4, #8]
 80058f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058fc:	f7ff fcac 	bl	8005258 <memset>
 8005900:	4620      	mov	r0, r4
 8005902:	bd70      	pop	{r4, r5, r6, pc}

08005904 <__sinit>:
 8005904:	6983      	ldr	r3, [r0, #24]
 8005906:	b510      	push	{r4, lr}
 8005908:	4604      	mov	r4, r0
 800590a:	bb33      	cbnz	r3, 800595a <__sinit+0x56>
 800590c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005910:	6503      	str	r3, [r0, #80]	; 0x50
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <__sinit+0x58>)
 8005914:	4a12      	ldr	r2, [pc, #72]	; (8005960 <__sinit+0x5c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6282      	str	r2, [r0, #40]	; 0x28
 800591a:	4298      	cmp	r0, r3
 800591c:	bf04      	itt	eq
 800591e:	2301      	moveq	r3, #1
 8005920:	6183      	streq	r3, [r0, #24]
 8005922:	f000 f81f 	bl	8005964 <__sfp>
 8005926:	6060      	str	r0, [r4, #4]
 8005928:	4620      	mov	r0, r4
 800592a:	f000 f81b 	bl	8005964 <__sfp>
 800592e:	60a0      	str	r0, [r4, #8]
 8005930:	4620      	mov	r0, r4
 8005932:	f000 f817 	bl	8005964 <__sfp>
 8005936:	2200      	movs	r2, #0
 8005938:	60e0      	str	r0, [r4, #12]
 800593a:	2104      	movs	r1, #4
 800593c:	6860      	ldr	r0, [r4, #4]
 800593e:	f7ff ffa1 	bl	8005884 <std>
 8005942:	2201      	movs	r2, #1
 8005944:	2109      	movs	r1, #9
 8005946:	68a0      	ldr	r0, [r4, #8]
 8005948:	f7ff ff9c 	bl	8005884 <std>
 800594c:	2202      	movs	r2, #2
 800594e:	2112      	movs	r1, #18
 8005950:	68e0      	ldr	r0, [r4, #12]
 8005952:	f7ff ff97 	bl	8005884 <std>
 8005956:	2301      	movs	r3, #1
 8005958:	61a3      	str	r3, [r4, #24]
 800595a:	bd10      	pop	{r4, pc}
 800595c:	08006580 	.word	0x08006580
 8005960:	080058cd 	.word	0x080058cd

08005964 <__sfp>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	4b1b      	ldr	r3, [pc, #108]	; (80059d4 <__sfp+0x70>)
 8005968:	681e      	ldr	r6, [r3, #0]
 800596a:	69b3      	ldr	r3, [r6, #24]
 800596c:	4607      	mov	r7, r0
 800596e:	b913      	cbnz	r3, 8005976 <__sfp+0x12>
 8005970:	4630      	mov	r0, r6
 8005972:	f7ff ffc7 	bl	8005904 <__sinit>
 8005976:	3648      	adds	r6, #72	; 0x48
 8005978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800597c:	3b01      	subs	r3, #1
 800597e:	d503      	bpl.n	8005988 <__sfp+0x24>
 8005980:	6833      	ldr	r3, [r6, #0]
 8005982:	b133      	cbz	r3, 8005992 <__sfp+0x2e>
 8005984:	6836      	ldr	r6, [r6, #0]
 8005986:	e7f7      	b.n	8005978 <__sfp+0x14>
 8005988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800598c:	b16d      	cbz	r5, 80059aa <__sfp+0x46>
 800598e:	3468      	adds	r4, #104	; 0x68
 8005990:	e7f4      	b.n	800597c <__sfp+0x18>
 8005992:	2104      	movs	r1, #4
 8005994:	4638      	mov	r0, r7
 8005996:	f7ff ff9f 	bl	80058d8 <__sfmoreglue>
 800599a:	6030      	str	r0, [r6, #0]
 800599c:	2800      	cmp	r0, #0
 800599e:	d1f1      	bne.n	8005984 <__sfp+0x20>
 80059a0:	230c      	movs	r3, #12
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4604      	mov	r4, r0
 80059a6:	4620      	mov	r0, r4
 80059a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <__sfp+0x74>)
 80059ac:	6665      	str	r5, [r4, #100]	; 0x64
 80059ae:	e9c4 5500 	strd	r5, r5, [r4]
 80059b2:	60a5      	str	r5, [r4, #8]
 80059b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80059b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80059bc:	2208      	movs	r2, #8
 80059be:	4629      	mov	r1, r5
 80059c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059c4:	f7ff fc48 	bl	8005258 <memset>
 80059c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059d0:	e7e9      	b.n	80059a6 <__sfp+0x42>
 80059d2:	bf00      	nop
 80059d4:	08006580 	.word	0x08006580
 80059d8:	ffff0001 	.word	0xffff0001

080059dc <_fwalk_reent>:
 80059dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e0:	4680      	mov	r8, r0
 80059e2:	4689      	mov	r9, r1
 80059e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059e8:	2600      	movs	r6, #0
 80059ea:	b914      	cbnz	r4, 80059f2 <_fwalk_reent+0x16>
 80059ec:	4630      	mov	r0, r6
 80059ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80059f6:	3f01      	subs	r7, #1
 80059f8:	d501      	bpl.n	80059fe <_fwalk_reent+0x22>
 80059fa:	6824      	ldr	r4, [r4, #0]
 80059fc:	e7f5      	b.n	80059ea <_fwalk_reent+0xe>
 80059fe:	89ab      	ldrh	r3, [r5, #12]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d907      	bls.n	8005a14 <_fwalk_reent+0x38>
 8005a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	d003      	beq.n	8005a14 <_fwalk_reent+0x38>
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	4640      	mov	r0, r8
 8005a10:	47c8      	blx	r9
 8005a12:	4306      	orrs	r6, r0
 8005a14:	3568      	adds	r5, #104	; 0x68
 8005a16:	e7ee      	b.n	80059f6 <_fwalk_reent+0x1a>

08005a18 <__swhatbuf_r>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	460e      	mov	r6, r1
 8005a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a20:	2900      	cmp	r1, #0
 8005a22:	b096      	sub	sp, #88	; 0x58
 8005a24:	4614      	mov	r4, r2
 8005a26:	461d      	mov	r5, r3
 8005a28:	da07      	bge.n	8005a3a <__swhatbuf_r+0x22>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	602b      	str	r3, [r5, #0]
 8005a2e:	89b3      	ldrh	r3, [r6, #12]
 8005a30:	061a      	lsls	r2, r3, #24
 8005a32:	d410      	bmi.n	8005a56 <__swhatbuf_r+0x3e>
 8005a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a38:	e00e      	b.n	8005a58 <__swhatbuf_r+0x40>
 8005a3a:	466a      	mov	r2, sp
 8005a3c:	f000 fcd2 	bl	80063e4 <_fstat_r>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	dbf2      	blt.n	8005a2a <__swhatbuf_r+0x12>
 8005a44:	9a01      	ldr	r2, [sp, #4]
 8005a46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a4e:	425a      	negs	r2, r3
 8005a50:	415a      	adcs	r2, r3
 8005a52:	602a      	str	r2, [r5, #0]
 8005a54:	e7ee      	b.n	8005a34 <__swhatbuf_r+0x1c>
 8005a56:	2340      	movs	r3, #64	; 0x40
 8005a58:	2000      	movs	r0, #0
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	b016      	add	sp, #88	; 0x58
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}

08005a60 <__smakebuf_r>:
 8005a60:	898b      	ldrh	r3, [r1, #12]
 8005a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a64:	079d      	lsls	r5, r3, #30
 8005a66:	4606      	mov	r6, r0
 8005a68:	460c      	mov	r4, r1
 8005a6a:	d507      	bpl.n	8005a7c <__smakebuf_r+0x1c>
 8005a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	6123      	str	r3, [r4, #16]
 8005a74:	2301      	movs	r3, #1
 8005a76:	6163      	str	r3, [r4, #20]
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	ab01      	add	r3, sp, #4
 8005a7e:	466a      	mov	r2, sp
 8005a80:	f7ff ffca 	bl	8005a18 <__swhatbuf_r>
 8005a84:	9900      	ldr	r1, [sp, #0]
 8005a86:	4605      	mov	r5, r0
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f7ff fc3b 	bl	8005304 <_malloc_r>
 8005a8e:	b948      	cbnz	r0, 8005aa4 <__smakebuf_r+0x44>
 8005a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a94:	059a      	lsls	r2, r3, #22
 8005a96:	d4ef      	bmi.n	8005a78 <__smakebuf_r+0x18>
 8005a98:	f023 0303 	bic.w	r3, r3, #3
 8005a9c:	f043 0302 	orr.w	r3, r3, #2
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	e7e3      	b.n	8005a6c <__smakebuf_r+0xc>
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <__smakebuf_r+0x7c>)
 8005aa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	6020      	str	r0, [r4, #0]
 8005aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	9b00      	ldr	r3, [sp, #0]
 8005ab4:	6163      	str	r3, [r4, #20]
 8005ab6:	9b01      	ldr	r3, [sp, #4]
 8005ab8:	6120      	str	r0, [r4, #16]
 8005aba:	b15b      	cbz	r3, 8005ad4 <__smakebuf_r+0x74>
 8005abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f000 fca1 	bl	8006408 <_isatty_r>
 8005ac6:	b128      	cbz	r0, 8005ad4 <__smakebuf_r+0x74>
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	81a3      	strh	r3, [r4, #12]
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	431d      	orrs	r5, r3
 8005ad8:	81a5      	strh	r5, [r4, #12]
 8005ada:	e7cd      	b.n	8005a78 <__smakebuf_r+0x18>
 8005adc:	080058cd 	.word	0x080058cd

08005ae0 <__malloc_lock>:
 8005ae0:	4770      	bx	lr

08005ae2 <__malloc_unlock>:
 8005ae2:	4770      	bx	lr

08005ae4 <__ssputs_r>:
 8005ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	688e      	ldr	r6, [r1, #8]
 8005aea:	429e      	cmp	r6, r3
 8005aec:	4682      	mov	sl, r0
 8005aee:	460c      	mov	r4, r1
 8005af0:	4690      	mov	r8, r2
 8005af2:	4699      	mov	r9, r3
 8005af4:	d837      	bhi.n	8005b66 <__ssputs_r+0x82>
 8005af6:	898a      	ldrh	r2, [r1, #12]
 8005af8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005afc:	d031      	beq.n	8005b62 <__ssputs_r+0x7e>
 8005afe:	6825      	ldr	r5, [r4, #0]
 8005b00:	6909      	ldr	r1, [r1, #16]
 8005b02:	1a6f      	subs	r7, r5, r1
 8005b04:	6965      	ldr	r5, [r4, #20]
 8005b06:	2302      	movs	r3, #2
 8005b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005b10:	f109 0301 	add.w	r3, r9, #1
 8005b14:	443b      	add	r3, r7
 8005b16:	429d      	cmp	r5, r3
 8005b18:	bf38      	it	cc
 8005b1a:	461d      	movcc	r5, r3
 8005b1c:	0553      	lsls	r3, r2, #21
 8005b1e:	d530      	bpl.n	8005b82 <__ssputs_r+0x9e>
 8005b20:	4629      	mov	r1, r5
 8005b22:	f7ff fbef 	bl	8005304 <_malloc_r>
 8005b26:	4606      	mov	r6, r0
 8005b28:	b950      	cbnz	r0, 8005b40 <__ssputs_r+0x5c>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	f8ca 3000 	str.w	r3, [sl]
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b40:	463a      	mov	r2, r7
 8005b42:	6921      	ldr	r1, [r4, #16]
 8005b44:	f000 fc82 	bl	800644c <memcpy>
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b52:	81a3      	strh	r3, [r4, #12]
 8005b54:	6126      	str	r6, [r4, #16]
 8005b56:	6165      	str	r5, [r4, #20]
 8005b58:	443e      	add	r6, r7
 8005b5a:	1bed      	subs	r5, r5, r7
 8005b5c:	6026      	str	r6, [r4, #0]
 8005b5e:	60a5      	str	r5, [r4, #8]
 8005b60:	464e      	mov	r6, r9
 8005b62:	454e      	cmp	r6, r9
 8005b64:	d900      	bls.n	8005b68 <__ssputs_r+0x84>
 8005b66:	464e      	mov	r6, r9
 8005b68:	4632      	mov	r2, r6
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	6820      	ldr	r0, [r4, #0]
 8005b6e:	f000 fc78 	bl	8006462 <memmove>
 8005b72:	68a3      	ldr	r3, [r4, #8]
 8005b74:	1b9b      	subs	r3, r3, r6
 8005b76:	60a3      	str	r3, [r4, #8]
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	441e      	add	r6, r3
 8005b7c:	6026      	str	r6, [r4, #0]
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e7dc      	b.n	8005b3c <__ssputs_r+0x58>
 8005b82:	462a      	mov	r2, r5
 8005b84:	f000 fc86 	bl	8006494 <_realloc_r>
 8005b88:	4606      	mov	r6, r0
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d1e2      	bne.n	8005b54 <__ssputs_r+0x70>
 8005b8e:	6921      	ldr	r1, [r4, #16]
 8005b90:	4650      	mov	r0, sl
 8005b92:	f7ff fb69 	bl	8005268 <_free_r>
 8005b96:	e7c8      	b.n	8005b2a <__ssputs_r+0x46>

08005b98 <_svfiprintf_r>:
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	461d      	mov	r5, r3
 8005b9e:	898b      	ldrh	r3, [r1, #12]
 8005ba0:	061f      	lsls	r7, r3, #24
 8005ba2:	b09d      	sub	sp, #116	; 0x74
 8005ba4:	4680      	mov	r8, r0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	4616      	mov	r6, r2
 8005baa:	d50f      	bpl.n	8005bcc <_svfiprintf_r+0x34>
 8005bac:	690b      	ldr	r3, [r1, #16]
 8005bae:	b96b      	cbnz	r3, 8005bcc <_svfiprintf_r+0x34>
 8005bb0:	2140      	movs	r1, #64	; 0x40
 8005bb2:	f7ff fba7 	bl	8005304 <_malloc_r>
 8005bb6:	6020      	str	r0, [r4, #0]
 8005bb8:	6120      	str	r0, [r4, #16]
 8005bba:	b928      	cbnz	r0, 8005bc8 <_svfiprintf_r+0x30>
 8005bbc:	230c      	movs	r3, #12
 8005bbe:	f8c8 3000 	str.w	r3, [r8]
 8005bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc6:	e0c8      	b.n	8005d5a <_svfiprintf_r+0x1c2>
 8005bc8:	2340      	movs	r3, #64	; 0x40
 8005bca:	6163      	str	r3, [r4, #20]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd0:	2320      	movs	r3, #32
 8005bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bd6:	2330      	movs	r3, #48	; 0x30
 8005bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bdc:	9503      	str	r5, [sp, #12]
 8005bde:	f04f 0b01 	mov.w	fp, #1
 8005be2:	4637      	mov	r7, r6
 8005be4:	463d      	mov	r5, r7
 8005be6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005bea:	b10b      	cbz	r3, 8005bf0 <_svfiprintf_r+0x58>
 8005bec:	2b25      	cmp	r3, #37	; 0x25
 8005bee:	d13e      	bne.n	8005c6e <_svfiprintf_r+0xd6>
 8005bf0:	ebb7 0a06 	subs.w	sl, r7, r6
 8005bf4:	d00b      	beq.n	8005c0e <_svfiprintf_r+0x76>
 8005bf6:	4653      	mov	r3, sl
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	f7ff ff71 	bl	8005ae4 <__ssputs_r>
 8005c02:	3001      	adds	r0, #1
 8005c04:	f000 80a4 	beq.w	8005d50 <_svfiprintf_r+0x1b8>
 8005c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c0a:	4453      	add	r3, sl
 8005c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c0e:	783b      	ldrb	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 809d 	beq.w	8005d50 <_svfiprintf_r+0x1b8>
 8005c16:	2300      	movs	r3, #0
 8005c18:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c20:	9304      	str	r3, [sp, #16]
 8005c22:	9307      	str	r3, [sp, #28]
 8005c24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c28:	931a      	str	r3, [sp, #104]	; 0x68
 8005c2a:	462f      	mov	r7, r5
 8005c2c:	2205      	movs	r2, #5
 8005c2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005c32:	4850      	ldr	r0, [pc, #320]	; (8005d74 <_svfiprintf_r+0x1dc>)
 8005c34:	f7fa facc 	bl	80001d0 <memchr>
 8005c38:	9b04      	ldr	r3, [sp, #16]
 8005c3a:	b9d0      	cbnz	r0, 8005c72 <_svfiprintf_r+0xda>
 8005c3c:	06d9      	lsls	r1, r3, #27
 8005c3e:	bf44      	itt	mi
 8005c40:	2220      	movmi	r2, #32
 8005c42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c46:	071a      	lsls	r2, r3, #28
 8005c48:	bf44      	itt	mi
 8005c4a:	222b      	movmi	r2, #43	; 0x2b
 8005c4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c50:	782a      	ldrb	r2, [r5, #0]
 8005c52:	2a2a      	cmp	r2, #42	; 0x2a
 8005c54:	d015      	beq.n	8005c82 <_svfiprintf_r+0xea>
 8005c56:	9a07      	ldr	r2, [sp, #28]
 8005c58:	462f      	mov	r7, r5
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	250a      	movs	r5, #10
 8005c5e:	4639      	mov	r1, r7
 8005c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c64:	3b30      	subs	r3, #48	; 0x30
 8005c66:	2b09      	cmp	r3, #9
 8005c68:	d94d      	bls.n	8005d06 <_svfiprintf_r+0x16e>
 8005c6a:	b1b8      	cbz	r0, 8005c9c <_svfiprintf_r+0x104>
 8005c6c:	e00f      	b.n	8005c8e <_svfiprintf_r+0xf6>
 8005c6e:	462f      	mov	r7, r5
 8005c70:	e7b8      	b.n	8005be4 <_svfiprintf_r+0x4c>
 8005c72:	4a40      	ldr	r2, [pc, #256]	; (8005d74 <_svfiprintf_r+0x1dc>)
 8005c74:	1a80      	subs	r0, r0, r2
 8005c76:	fa0b f000 	lsl.w	r0, fp, r0
 8005c7a:	4318      	orrs	r0, r3
 8005c7c:	9004      	str	r0, [sp, #16]
 8005c7e:	463d      	mov	r5, r7
 8005c80:	e7d3      	b.n	8005c2a <_svfiprintf_r+0x92>
 8005c82:	9a03      	ldr	r2, [sp, #12]
 8005c84:	1d11      	adds	r1, r2, #4
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	9103      	str	r1, [sp, #12]
 8005c8a:	2a00      	cmp	r2, #0
 8005c8c:	db01      	blt.n	8005c92 <_svfiprintf_r+0xfa>
 8005c8e:	9207      	str	r2, [sp, #28]
 8005c90:	e004      	b.n	8005c9c <_svfiprintf_r+0x104>
 8005c92:	4252      	negs	r2, r2
 8005c94:	f043 0302 	orr.w	r3, r3, #2
 8005c98:	9207      	str	r2, [sp, #28]
 8005c9a:	9304      	str	r3, [sp, #16]
 8005c9c:	783b      	ldrb	r3, [r7, #0]
 8005c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8005ca0:	d10c      	bne.n	8005cbc <_svfiprintf_r+0x124>
 8005ca2:	787b      	ldrb	r3, [r7, #1]
 8005ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca6:	d133      	bne.n	8005d10 <_svfiprintf_r+0x178>
 8005ca8:	9b03      	ldr	r3, [sp, #12]
 8005caa:	1d1a      	adds	r2, r3, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	9203      	str	r2, [sp, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	bfb8      	it	lt
 8005cb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cb8:	3702      	adds	r7, #2
 8005cba:	9305      	str	r3, [sp, #20]
 8005cbc:	4d2e      	ldr	r5, [pc, #184]	; (8005d78 <_svfiprintf_r+0x1e0>)
 8005cbe:	7839      	ldrb	r1, [r7, #0]
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f7fa fa84 	bl	80001d0 <memchr>
 8005cc8:	b138      	cbz	r0, 8005cda <_svfiprintf_r+0x142>
 8005cca:	2340      	movs	r3, #64	; 0x40
 8005ccc:	1b40      	subs	r0, r0, r5
 8005cce:	fa03 f000 	lsl.w	r0, r3, r0
 8005cd2:	9b04      	ldr	r3, [sp, #16]
 8005cd4:	4303      	orrs	r3, r0
 8005cd6:	3701      	adds	r7, #1
 8005cd8:	9304      	str	r3, [sp, #16]
 8005cda:	7839      	ldrb	r1, [r7, #0]
 8005cdc:	4827      	ldr	r0, [pc, #156]	; (8005d7c <_svfiprintf_r+0x1e4>)
 8005cde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ce2:	2206      	movs	r2, #6
 8005ce4:	1c7e      	adds	r6, r7, #1
 8005ce6:	f7fa fa73 	bl	80001d0 <memchr>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d038      	beq.n	8005d60 <_svfiprintf_r+0x1c8>
 8005cee:	4b24      	ldr	r3, [pc, #144]	; (8005d80 <_svfiprintf_r+0x1e8>)
 8005cf0:	bb13      	cbnz	r3, 8005d38 <_svfiprintf_r+0x1a0>
 8005cf2:	9b03      	ldr	r3, [sp, #12]
 8005cf4:	3307      	adds	r3, #7
 8005cf6:	f023 0307 	bic.w	r3, r3, #7
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	9303      	str	r3, [sp, #12]
 8005cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d00:	444b      	add	r3, r9
 8005d02:	9309      	str	r3, [sp, #36]	; 0x24
 8005d04:	e76d      	b.n	8005be2 <_svfiprintf_r+0x4a>
 8005d06:	fb05 3202 	mla	r2, r5, r2, r3
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	460f      	mov	r7, r1
 8005d0e:	e7a6      	b.n	8005c5e <_svfiprintf_r+0xc6>
 8005d10:	2300      	movs	r3, #0
 8005d12:	3701      	adds	r7, #1
 8005d14:	9305      	str	r3, [sp, #20]
 8005d16:	4619      	mov	r1, r3
 8005d18:	250a      	movs	r5, #10
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d20:	3a30      	subs	r2, #48	; 0x30
 8005d22:	2a09      	cmp	r2, #9
 8005d24:	d903      	bls.n	8005d2e <_svfiprintf_r+0x196>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0c8      	beq.n	8005cbc <_svfiprintf_r+0x124>
 8005d2a:	9105      	str	r1, [sp, #20]
 8005d2c:	e7c6      	b.n	8005cbc <_svfiprintf_r+0x124>
 8005d2e:	fb05 2101 	mla	r1, r5, r1, r2
 8005d32:	2301      	movs	r3, #1
 8005d34:	4607      	mov	r7, r0
 8005d36:	e7f0      	b.n	8005d1a <_svfiprintf_r+0x182>
 8005d38:	ab03      	add	r3, sp, #12
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <_svfiprintf_r+0x1ec>)
 8005d40:	a904      	add	r1, sp, #16
 8005d42:	4640      	mov	r0, r8
 8005d44:	f3af 8000 	nop.w
 8005d48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d4c:	4681      	mov	r9, r0
 8005d4e:	d1d6      	bne.n	8005cfe <_svfiprintf_r+0x166>
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	065b      	lsls	r3, r3, #25
 8005d54:	f53f af35 	bmi.w	8005bc2 <_svfiprintf_r+0x2a>
 8005d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d5a:	b01d      	add	sp, #116	; 0x74
 8005d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d60:	ab03      	add	r3, sp, #12
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	4622      	mov	r2, r4
 8005d66:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <_svfiprintf_r+0x1ec>)
 8005d68:	a904      	add	r1, sp, #16
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	f000 f9c2 	bl	80060f4 <_printf_i>
 8005d70:	e7ea      	b.n	8005d48 <_svfiprintf_r+0x1b0>
 8005d72:	bf00      	nop
 8005d74:	080065e4 	.word	0x080065e4
 8005d78:	080065ea 	.word	0x080065ea
 8005d7c:	080065ee 	.word	0x080065ee
 8005d80:	00000000 	.word	0x00000000
 8005d84:	08005ae5 	.word	0x08005ae5

08005d88 <__sfputc_r>:
 8005d88:	6893      	ldr	r3, [r2, #8]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	b410      	push	{r4}
 8005d90:	6093      	str	r3, [r2, #8]
 8005d92:	da08      	bge.n	8005da6 <__sfputc_r+0x1e>
 8005d94:	6994      	ldr	r4, [r2, #24]
 8005d96:	42a3      	cmp	r3, r4
 8005d98:	db01      	blt.n	8005d9e <__sfputc_r+0x16>
 8005d9a:	290a      	cmp	r1, #10
 8005d9c:	d103      	bne.n	8005da6 <__sfputc_r+0x1e>
 8005d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005da2:	f7ff bbff 	b.w	80055a4 <__swbuf_r>
 8005da6:	6813      	ldr	r3, [r2, #0]
 8005da8:	1c58      	adds	r0, r3, #1
 8005daa:	6010      	str	r0, [r2, #0]
 8005dac:	7019      	strb	r1, [r3, #0]
 8005dae:	4608      	mov	r0, r1
 8005db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <__sfputs_r>:
 8005db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db8:	4606      	mov	r6, r0
 8005dba:	460f      	mov	r7, r1
 8005dbc:	4614      	mov	r4, r2
 8005dbe:	18d5      	adds	r5, r2, r3
 8005dc0:	42ac      	cmp	r4, r5
 8005dc2:	d101      	bne.n	8005dc8 <__sfputs_r+0x12>
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	e007      	b.n	8005dd8 <__sfputs_r+0x22>
 8005dc8:	463a      	mov	r2, r7
 8005dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f7ff ffda 	bl	8005d88 <__sfputc_r>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d1f3      	bne.n	8005dc0 <__sfputs_r+0xa>
 8005dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ddc <_vfiprintf_r>:
 8005ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de0:	460c      	mov	r4, r1
 8005de2:	b09d      	sub	sp, #116	; 0x74
 8005de4:	4617      	mov	r7, r2
 8005de6:	461d      	mov	r5, r3
 8005de8:	4606      	mov	r6, r0
 8005dea:	b118      	cbz	r0, 8005df4 <_vfiprintf_r+0x18>
 8005dec:	6983      	ldr	r3, [r0, #24]
 8005dee:	b90b      	cbnz	r3, 8005df4 <_vfiprintf_r+0x18>
 8005df0:	f7ff fd88 	bl	8005904 <__sinit>
 8005df4:	4b7c      	ldr	r3, [pc, #496]	; (8005fe8 <_vfiprintf_r+0x20c>)
 8005df6:	429c      	cmp	r4, r3
 8005df8:	d158      	bne.n	8005eac <_vfiprintf_r+0xd0>
 8005dfa:	6874      	ldr	r4, [r6, #4]
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	0718      	lsls	r0, r3, #28
 8005e00:	d55e      	bpl.n	8005ec0 <_vfiprintf_r+0xe4>
 8005e02:	6923      	ldr	r3, [r4, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d05b      	beq.n	8005ec0 <_vfiprintf_r+0xe4>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e0c:	2320      	movs	r3, #32
 8005e0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e12:	2330      	movs	r3, #48	; 0x30
 8005e14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e18:	9503      	str	r5, [sp, #12]
 8005e1a:	f04f 0b01 	mov.w	fp, #1
 8005e1e:	46b8      	mov	r8, r7
 8005e20:	4645      	mov	r5, r8
 8005e22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e26:	b10b      	cbz	r3, 8005e2c <_vfiprintf_r+0x50>
 8005e28:	2b25      	cmp	r3, #37	; 0x25
 8005e2a:	d154      	bne.n	8005ed6 <_vfiprintf_r+0xfa>
 8005e2c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005e30:	d00b      	beq.n	8005e4a <_vfiprintf_r+0x6e>
 8005e32:	4653      	mov	r3, sl
 8005e34:	463a      	mov	r2, r7
 8005e36:	4621      	mov	r1, r4
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f7ff ffbc 	bl	8005db6 <__sfputs_r>
 8005e3e:	3001      	adds	r0, #1
 8005e40:	f000 80c2 	beq.w	8005fc8 <_vfiprintf_r+0x1ec>
 8005e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e46:	4453      	add	r3, sl
 8005e48:	9309      	str	r3, [sp, #36]	; 0x24
 8005e4a:	f898 3000 	ldrb.w	r3, [r8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 80ba 	beq.w	8005fc8 <_vfiprintf_r+0x1ec>
 8005e54:	2300      	movs	r3, #0
 8005e56:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e5e:	9304      	str	r3, [sp, #16]
 8005e60:	9307      	str	r3, [sp, #28]
 8005e62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e66:	931a      	str	r3, [sp, #104]	; 0x68
 8005e68:	46a8      	mov	r8, r5
 8005e6a:	2205      	movs	r2, #5
 8005e6c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005e70:	485e      	ldr	r0, [pc, #376]	; (8005fec <_vfiprintf_r+0x210>)
 8005e72:	f7fa f9ad 	bl	80001d0 <memchr>
 8005e76:	9b04      	ldr	r3, [sp, #16]
 8005e78:	bb78      	cbnz	r0, 8005eda <_vfiprintf_r+0xfe>
 8005e7a:	06d9      	lsls	r1, r3, #27
 8005e7c:	bf44      	itt	mi
 8005e7e:	2220      	movmi	r2, #32
 8005e80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e84:	071a      	lsls	r2, r3, #28
 8005e86:	bf44      	itt	mi
 8005e88:	222b      	movmi	r2, #43	; 0x2b
 8005e8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e8e:	782a      	ldrb	r2, [r5, #0]
 8005e90:	2a2a      	cmp	r2, #42	; 0x2a
 8005e92:	d02a      	beq.n	8005eea <_vfiprintf_r+0x10e>
 8005e94:	9a07      	ldr	r2, [sp, #28]
 8005e96:	46a8      	mov	r8, r5
 8005e98:	2000      	movs	r0, #0
 8005e9a:	250a      	movs	r5, #10
 8005e9c:	4641      	mov	r1, r8
 8005e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ea2:	3b30      	subs	r3, #48	; 0x30
 8005ea4:	2b09      	cmp	r3, #9
 8005ea6:	d969      	bls.n	8005f7c <_vfiprintf_r+0x1a0>
 8005ea8:	b360      	cbz	r0, 8005f04 <_vfiprintf_r+0x128>
 8005eaa:	e024      	b.n	8005ef6 <_vfiprintf_r+0x11a>
 8005eac:	4b50      	ldr	r3, [pc, #320]	; (8005ff0 <_vfiprintf_r+0x214>)
 8005eae:	429c      	cmp	r4, r3
 8005eb0:	d101      	bne.n	8005eb6 <_vfiprintf_r+0xda>
 8005eb2:	68b4      	ldr	r4, [r6, #8]
 8005eb4:	e7a2      	b.n	8005dfc <_vfiprintf_r+0x20>
 8005eb6:	4b4f      	ldr	r3, [pc, #316]	; (8005ff4 <_vfiprintf_r+0x218>)
 8005eb8:	429c      	cmp	r4, r3
 8005eba:	bf08      	it	eq
 8005ebc:	68f4      	ldreq	r4, [r6, #12]
 8005ebe:	e79d      	b.n	8005dfc <_vfiprintf_r+0x20>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f7ff fbc0 	bl	8005648 <__swsetup_r>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d09d      	beq.n	8005e08 <_vfiprintf_r+0x2c>
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed0:	b01d      	add	sp, #116	; 0x74
 8005ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed6:	46a8      	mov	r8, r5
 8005ed8:	e7a2      	b.n	8005e20 <_vfiprintf_r+0x44>
 8005eda:	4a44      	ldr	r2, [pc, #272]	; (8005fec <_vfiprintf_r+0x210>)
 8005edc:	1a80      	subs	r0, r0, r2
 8005ede:	fa0b f000 	lsl.w	r0, fp, r0
 8005ee2:	4318      	orrs	r0, r3
 8005ee4:	9004      	str	r0, [sp, #16]
 8005ee6:	4645      	mov	r5, r8
 8005ee8:	e7be      	b.n	8005e68 <_vfiprintf_r+0x8c>
 8005eea:	9a03      	ldr	r2, [sp, #12]
 8005eec:	1d11      	adds	r1, r2, #4
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	9103      	str	r1, [sp, #12]
 8005ef2:	2a00      	cmp	r2, #0
 8005ef4:	db01      	blt.n	8005efa <_vfiprintf_r+0x11e>
 8005ef6:	9207      	str	r2, [sp, #28]
 8005ef8:	e004      	b.n	8005f04 <_vfiprintf_r+0x128>
 8005efa:	4252      	negs	r2, r2
 8005efc:	f043 0302 	orr.w	r3, r3, #2
 8005f00:	9207      	str	r2, [sp, #28]
 8005f02:	9304      	str	r3, [sp, #16]
 8005f04:	f898 3000 	ldrb.w	r3, [r8]
 8005f08:	2b2e      	cmp	r3, #46	; 0x2e
 8005f0a:	d10e      	bne.n	8005f2a <_vfiprintf_r+0x14e>
 8005f0c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005f10:	2b2a      	cmp	r3, #42	; 0x2a
 8005f12:	d138      	bne.n	8005f86 <_vfiprintf_r+0x1aa>
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	1d1a      	adds	r2, r3, #4
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	9203      	str	r2, [sp, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bfb8      	it	lt
 8005f20:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f24:	f108 0802 	add.w	r8, r8, #2
 8005f28:	9305      	str	r3, [sp, #20]
 8005f2a:	4d33      	ldr	r5, [pc, #204]	; (8005ff8 <_vfiprintf_r+0x21c>)
 8005f2c:	f898 1000 	ldrb.w	r1, [r8]
 8005f30:	2203      	movs	r2, #3
 8005f32:	4628      	mov	r0, r5
 8005f34:	f7fa f94c 	bl	80001d0 <memchr>
 8005f38:	b140      	cbz	r0, 8005f4c <_vfiprintf_r+0x170>
 8005f3a:	2340      	movs	r3, #64	; 0x40
 8005f3c:	1b40      	subs	r0, r0, r5
 8005f3e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f42:	9b04      	ldr	r3, [sp, #16]
 8005f44:	4303      	orrs	r3, r0
 8005f46:	f108 0801 	add.w	r8, r8, #1
 8005f4a:	9304      	str	r3, [sp, #16]
 8005f4c:	f898 1000 	ldrb.w	r1, [r8]
 8005f50:	482a      	ldr	r0, [pc, #168]	; (8005ffc <_vfiprintf_r+0x220>)
 8005f52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f56:	2206      	movs	r2, #6
 8005f58:	f108 0701 	add.w	r7, r8, #1
 8005f5c:	f7fa f938 	bl	80001d0 <memchr>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d037      	beq.n	8005fd4 <_vfiprintf_r+0x1f8>
 8005f64:	4b26      	ldr	r3, [pc, #152]	; (8006000 <_vfiprintf_r+0x224>)
 8005f66:	bb1b      	cbnz	r3, 8005fb0 <_vfiprintf_r+0x1d4>
 8005f68:	9b03      	ldr	r3, [sp, #12]
 8005f6a:	3307      	adds	r3, #7
 8005f6c:	f023 0307 	bic.w	r3, r3, #7
 8005f70:	3308      	adds	r3, #8
 8005f72:	9303      	str	r3, [sp, #12]
 8005f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f76:	444b      	add	r3, r9
 8005f78:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7a:	e750      	b.n	8005e1e <_vfiprintf_r+0x42>
 8005f7c:	fb05 3202 	mla	r2, r5, r2, r3
 8005f80:	2001      	movs	r0, #1
 8005f82:	4688      	mov	r8, r1
 8005f84:	e78a      	b.n	8005e9c <_vfiprintf_r+0xc0>
 8005f86:	2300      	movs	r3, #0
 8005f88:	f108 0801 	add.w	r8, r8, #1
 8005f8c:	9305      	str	r3, [sp, #20]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	250a      	movs	r5, #10
 8005f92:	4640      	mov	r0, r8
 8005f94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f98:	3a30      	subs	r2, #48	; 0x30
 8005f9a:	2a09      	cmp	r2, #9
 8005f9c:	d903      	bls.n	8005fa6 <_vfiprintf_r+0x1ca>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0c3      	beq.n	8005f2a <_vfiprintf_r+0x14e>
 8005fa2:	9105      	str	r1, [sp, #20]
 8005fa4:	e7c1      	b.n	8005f2a <_vfiprintf_r+0x14e>
 8005fa6:	fb05 2101 	mla	r1, r5, r1, r2
 8005faa:	2301      	movs	r3, #1
 8005fac:	4680      	mov	r8, r0
 8005fae:	e7f0      	b.n	8005f92 <_vfiprintf_r+0x1b6>
 8005fb0:	ab03      	add	r3, sp, #12
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <_vfiprintf_r+0x228>)
 8005fb8:	a904      	add	r1, sp, #16
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f3af 8000 	nop.w
 8005fc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005fc4:	4681      	mov	r9, r0
 8005fc6:	d1d5      	bne.n	8005f74 <_vfiprintf_r+0x198>
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	065b      	lsls	r3, r3, #25
 8005fcc:	f53f af7e 	bmi.w	8005ecc <_vfiprintf_r+0xf0>
 8005fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fd2:	e77d      	b.n	8005ed0 <_vfiprintf_r+0xf4>
 8005fd4:	ab03      	add	r3, sp, #12
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	4622      	mov	r2, r4
 8005fda:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <_vfiprintf_r+0x228>)
 8005fdc:	a904      	add	r1, sp, #16
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f000 f888 	bl	80060f4 <_printf_i>
 8005fe4:	e7ec      	b.n	8005fc0 <_vfiprintf_r+0x1e4>
 8005fe6:	bf00      	nop
 8005fe8:	080065a4 	.word	0x080065a4
 8005fec:	080065e4 	.word	0x080065e4
 8005ff0:	080065c4 	.word	0x080065c4
 8005ff4:	08006584 	.word	0x08006584
 8005ff8:	080065ea 	.word	0x080065ea
 8005ffc:	080065ee 	.word	0x080065ee
 8006000:	00000000 	.word	0x00000000
 8006004:	08005db7 	.word	0x08005db7

08006008 <_printf_common>:
 8006008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800600c:	4691      	mov	r9, r2
 800600e:	461f      	mov	r7, r3
 8006010:	688a      	ldr	r2, [r1, #8]
 8006012:	690b      	ldr	r3, [r1, #16]
 8006014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006018:	4293      	cmp	r3, r2
 800601a:	bfb8      	it	lt
 800601c:	4613      	movlt	r3, r2
 800601e:	f8c9 3000 	str.w	r3, [r9]
 8006022:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006026:	4606      	mov	r6, r0
 8006028:	460c      	mov	r4, r1
 800602a:	b112      	cbz	r2, 8006032 <_printf_common+0x2a>
 800602c:	3301      	adds	r3, #1
 800602e:	f8c9 3000 	str.w	r3, [r9]
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	0699      	lsls	r1, r3, #26
 8006036:	bf42      	ittt	mi
 8006038:	f8d9 3000 	ldrmi.w	r3, [r9]
 800603c:	3302      	addmi	r3, #2
 800603e:	f8c9 3000 	strmi.w	r3, [r9]
 8006042:	6825      	ldr	r5, [r4, #0]
 8006044:	f015 0506 	ands.w	r5, r5, #6
 8006048:	d107      	bne.n	800605a <_printf_common+0x52>
 800604a:	f104 0a19 	add.w	sl, r4, #25
 800604e:	68e3      	ldr	r3, [r4, #12]
 8006050:	f8d9 2000 	ldr.w	r2, [r9]
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	42ab      	cmp	r3, r5
 8006058:	dc28      	bgt.n	80060ac <_printf_common+0xa4>
 800605a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	3300      	adds	r3, #0
 8006062:	bf18      	it	ne
 8006064:	2301      	movne	r3, #1
 8006066:	0692      	lsls	r2, r2, #26
 8006068:	d42d      	bmi.n	80060c6 <_printf_common+0xbe>
 800606a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800606e:	4639      	mov	r1, r7
 8006070:	4630      	mov	r0, r6
 8006072:	47c0      	blx	r8
 8006074:	3001      	adds	r0, #1
 8006076:	d020      	beq.n	80060ba <_printf_common+0xb2>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	68e5      	ldr	r5, [r4, #12]
 800607c:	f8d9 2000 	ldr.w	r2, [r9]
 8006080:	f003 0306 	and.w	r3, r3, #6
 8006084:	2b04      	cmp	r3, #4
 8006086:	bf08      	it	eq
 8006088:	1aad      	subeq	r5, r5, r2
 800608a:	68a3      	ldr	r3, [r4, #8]
 800608c:	6922      	ldr	r2, [r4, #16]
 800608e:	bf0c      	ite	eq
 8006090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006094:	2500      	movne	r5, #0
 8006096:	4293      	cmp	r3, r2
 8006098:	bfc4      	itt	gt
 800609a:	1a9b      	subgt	r3, r3, r2
 800609c:	18ed      	addgt	r5, r5, r3
 800609e:	f04f 0900 	mov.w	r9, #0
 80060a2:	341a      	adds	r4, #26
 80060a4:	454d      	cmp	r5, r9
 80060a6:	d11a      	bne.n	80060de <_printf_common+0xd6>
 80060a8:	2000      	movs	r0, #0
 80060aa:	e008      	b.n	80060be <_printf_common+0xb6>
 80060ac:	2301      	movs	r3, #1
 80060ae:	4652      	mov	r2, sl
 80060b0:	4639      	mov	r1, r7
 80060b2:	4630      	mov	r0, r6
 80060b4:	47c0      	blx	r8
 80060b6:	3001      	adds	r0, #1
 80060b8:	d103      	bne.n	80060c2 <_printf_common+0xba>
 80060ba:	f04f 30ff 	mov.w	r0, #4294967295
 80060be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c2:	3501      	adds	r5, #1
 80060c4:	e7c3      	b.n	800604e <_printf_common+0x46>
 80060c6:	18e1      	adds	r1, r4, r3
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	2030      	movs	r0, #48	; 0x30
 80060cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060d0:	4422      	add	r2, r4
 80060d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060da:	3302      	adds	r3, #2
 80060dc:	e7c5      	b.n	800606a <_printf_common+0x62>
 80060de:	2301      	movs	r3, #1
 80060e0:	4622      	mov	r2, r4
 80060e2:	4639      	mov	r1, r7
 80060e4:	4630      	mov	r0, r6
 80060e6:	47c0      	blx	r8
 80060e8:	3001      	adds	r0, #1
 80060ea:	d0e6      	beq.n	80060ba <_printf_common+0xb2>
 80060ec:	f109 0901 	add.w	r9, r9, #1
 80060f0:	e7d8      	b.n	80060a4 <_printf_common+0x9c>
	...

080060f4 <_printf_i>:
 80060f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80060fc:	460c      	mov	r4, r1
 80060fe:	7e09      	ldrb	r1, [r1, #24]
 8006100:	b085      	sub	sp, #20
 8006102:	296e      	cmp	r1, #110	; 0x6e
 8006104:	4617      	mov	r7, r2
 8006106:	4606      	mov	r6, r0
 8006108:	4698      	mov	r8, r3
 800610a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800610c:	f000 80b3 	beq.w	8006276 <_printf_i+0x182>
 8006110:	d822      	bhi.n	8006158 <_printf_i+0x64>
 8006112:	2963      	cmp	r1, #99	; 0x63
 8006114:	d036      	beq.n	8006184 <_printf_i+0x90>
 8006116:	d80a      	bhi.n	800612e <_printf_i+0x3a>
 8006118:	2900      	cmp	r1, #0
 800611a:	f000 80b9 	beq.w	8006290 <_printf_i+0x19c>
 800611e:	2958      	cmp	r1, #88	; 0x58
 8006120:	f000 8083 	beq.w	800622a <_printf_i+0x136>
 8006124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006128:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800612c:	e032      	b.n	8006194 <_printf_i+0xa0>
 800612e:	2964      	cmp	r1, #100	; 0x64
 8006130:	d001      	beq.n	8006136 <_printf_i+0x42>
 8006132:	2969      	cmp	r1, #105	; 0x69
 8006134:	d1f6      	bne.n	8006124 <_printf_i+0x30>
 8006136:	6820      	ldr	r0, [r4, #0]
 8006138:	6813      	ldr	r3, [r2, #0]
 800613a:	0605      	lsls	r5, r0, #24
 800613c:	f103 0104 	add.w	r1, r3, #4
 8006140:	d52a      	bpl.n	8006198 <_printf_i+0xa4>
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6011      	str	r1, [r2, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da03      	bge.n	8006152 <_printf_i+0x5e>
 800614a:	222d      	movs	r2, #45	; 0x2d
 800614c:	425b      	negs	r3, r3
 800614e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006152:	486f      	ldr	r0, [pc, #444]	; (8006310 <_printf_i+0x21c>)
 8006154:	220a      	movs	r2, #10
 8006156:	e039      	b.n	80061cc <_printf_i+0xd8>
 8006158:	2973      	cmp	r1, #115	; 0x73
 800615a:	f000 809d 	beq.w	8006298 <_printf_i+0x1a4>
 800615e:	d808      	bhi.n	8006172 <_printf_i+0x7e>
 8006160:	296f      	cmp	r1, #111	; 0x6f
 8006162:	d020      	beq.n	80061a6 <_printf_i+0xb2>
 8006164:	2970      	cmp	r1, #112	; 0x70
 8006166:	d1dd      	bne.n	8006124 <_printf_i+0x30>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	f043 0320 	orr.w	r3, r3, #32
 800616e:	6023      	str	r3, [r4, #0]
 8006170:	e003      	b.n	800617a <_printf_i+0x86>
 8006172:	2975      	cmp	r1, #117	; 0x75
 8006174:	d017      	beq.n	80061a6 <_printf_i+0xb2>
 8006176:	2978      	cmp	r1, #120	; 0x78
 8006178:	d1d4      	bne.n	8006124 <_printf_i+0x30>
 800617a:	2378      	movs	r3, #120	; 0x78
 800617c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006180:	4864      	ldr	r0, [pc, #400]	; (8006314 <_printf_i+0x220>)
 8006182:	e055      	b.n	8006230 <_printf_i+0x13c>
 8006184:	6813      	ldr	r3, [r2, #0]
 8006186:	1d19      	adds	r1, r3, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6011      	str	r1, [r2, #0]
 800618c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006194:	2301      	movs	r3, #1
 8006196:	e08c      	b.n	80062b2 <_printf_i+0x1be>
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6011      	str	r1, [r2, #0]
 800619c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061a0:	bf18      	it	ne
 80061a2:	b21b      	sxthne	r3, r3
 80061a4:	e7cf      	b.n	8006146 <_printf_i+0x52>
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	6825      	ldr	r5, [r4, #0]
 80061aa:	1d18      	adds	r0, r3, #4
 80061ac:	6010      	str	r0, [r2, #0]
 80061ae:	0628      	lsls	r0, r5, #24
 80061b0:	d501      	bpl.n	80061b6 <_printf_i+0xc2>
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	e002      	b.n	80061bc <_printf_i+0xc8>
 80061b6:	0668      	lsls	r0, r5, #25
 80061b8:	d5fb      	bpl.n	80061b2 <_printf_i+0xbe>
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	4854      	ldr	r0, [pc, #336]	; (8006310 <_printf_i+0x21c>)
 80061be:	296f      	cmp	r1, #111	; 0x6f
 80061c0:	bf14      	ite	ne
 80061c2:	220a      	movne	r2, #10
 80061c4:	2208      	moveq	r2, #8
 80061c6:	2100      	movs	r1, #0
 80061c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061cc:	6865      	ldr	r5, [r4, #4]
 80061ce:	60a5      	str	r5, [r4, #8]
 80061d0:	2d00      	cmp	r5, #0
 80061d2:	f2c0 8095 	blt.w	8006300 <_printf_i+0x20c>
 80061d6:	6821      	ldr	r1, [r4, #0]
 80061d8:	f021 0104 	bic.w	r1, r1, #4
 80061dc:	6021      	str	r1, [r4, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d13d      	bne.n	800625e <_printf_i+0x16a>
 80061e2:	2d00      	cmp	r5, #0
 80061e4:	f040 808e 	bne.w	8006304 <_printf_i+0x210>
 80061e8:	4665      	mov	r5, ip
 80061ea:	2a08      	cmp	r2, #8
 80061ec:	d10b      	bne.n	8006206 <_printf_i+0x112>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	07db      	lsls	r3, r3, #31
 80061f2:	d508      	bpl.n	8006206 <_printf_i+0x112>
 80061f4:	6923      	ldr	r3, [r4, #16]
 80061f6:	6862      	ldr	r2, [r4, #4]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	bfde      	ittt	le
 80061fc:	2330      	movle	r3, #48	; 0x30
 80061fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006202:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006206:	ebac 0305 	sub.w	r3, ip, r5
 800620a:	6123      	str	r3, [r4, #16]
 800620c:	f8cd 8000 	str.w	r8, [sp]
 8006210:	463b      	mov	r3, r7
 8006212:	aa03      	add	r2, sp, #12
 8006214:	4621      	mov	r1, r4
 8006216:	4630      	mov	r0, r6
 8006218:	f7ff fef6 	bl	8006008 <_printf_common>
 800621c:	3001      	adds	r0, #1
 800621e:	d14d      	bne.n	80062bc <_printf_i+0x1c8>
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	b005      	add	sp, #20
 8006226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800622a:	4839      	ldr	r0, [pc, #228]	; (8006310 <_printf_i+0x21c>)
 800622c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006230:	6813      	ldr	r3, [r2, #0]
 8006232:	6821      	ldr	r1, [r4, #0]
 8006234:	1d1d      	adds	r5, r3, #4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6015      	str	r5, [r2, #0]
 800623a:	060a      	lsls	r2, r1, #24
 800623c:	d50b      	bpl.n	8006256 <_printf_i+0x162>
 800623e:	07ca      	lsls	r2, r1, #31
 8006240:	bf44      	itt	mi
 8006242:	f041 0120 	orrmi.w	r1, r1, #32
 8006246:	6021      	strmi	r1, [r4, #0]
 8006248:	b91b      	cbnz	r3, 8006252 <_printf_i+0x15e>
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	f022 0220 	bic.w	r2, r2, #32
 8006250:	6022      	str	r2, [r4, #0]
 8006252:	2210      	movs	r2, #16
 8006254:	e7b7      	b.n	80061c6 <_printf_i+0xd2>
 8006256:	064d      	lsls	r5, r1, #25
 8006258:	bf48      	it	mi
 800625a:	b29b      	uxthmi	r3, r3
 800625c:	e7ef      	b.n	800623e <_printf_i+0x14a>
 800625e:	4665      	mov	r5, ip
 8006260:	fbb3 f1f2 	udiv	r1, r3, r2
 8006264:	fb02 3311 	mls	r3, r2, r1, r3
 8006268:	5cc3      	ldrb	r3, [r0, r3]
 800626a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800626e:	460b      	mov	r3, r1
 8006270:	2900      	cmp	r1, #0
 8006272:	d1f5      	bne.n	8006260 <_printf_i+0x16c>
 8006274:	e7b9      	b.n	80061ea <_printf_i+0xf6>
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	6825      	ldr	r5, [r4, #0]
 800627a:	6961      	ldr	r1, [r4, #20]
 800627c:	1d18      	adds	r0, r3, #4
 800627e:	6010      	str	r0, [r2, #0]
 8006280:	0628      	lsls	r0, r5, #24
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	d501      	bpl.n	800628a <_printf_i+0x196>
 8006286:	6019      	str	r1, [r3, #0]
 8006288:	e002      	b.n	8006290 <_printf_i+0x19c>
 800628a:	066a      	lsls	r2, r5, #25
 800628c:	d5fb      	bpl.n	8006286 <_printf_i+0x192>
 800628e:	8019      	strh	r1, [r3, #0]
 8006290:	2300      	movs	r3, #0
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	4665      	mov	r5, ip
 8006296:	e7b9      	b.n	800620c <_printf_i+0x118>
 8006298:	6813      	ldr	r3, [r2, #0]
 800629a:	1d19      	adds	r1, r3, #4
 800629c:	6011      	str	r1, [r2, #0]
 800629e:	681d      	ldr	r5, [r3, #0]
 80062a0:	6862      	ldr	r2, [r4, #4]
 80062a2:	2100      	movs	r1, #0
 80062a4:	4628      	mov	r0, r5
 80062a6:	f7f9 ff93 	bl	80001d0 <memchr>
 80062aa:	b108      	cbz	r0, 80062b0 <_printf_i+0x1bc>
 80062ac:	1b40      	subs	r0, r0, r5
 80062ae:	6060      	str	r0, [r4, #4]
 80062b0:	6863      	ldr	r3, [r4, #4]
 80062b2:	6123      	str	r3, [r4, #16]
 80062b4:	2300      	movs	r3, #0
 80062b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ba:	e7a7      	b.n	800620c <_printf_i+0x118>
 80062bc:	6923      	ldr	r3, [r4, #16]
 80062be:	462a      	mov	r2, r5
 80062c0:	4639      	mov	r1, r7
 80062c2:	4630      	mov	r0, r6
 80062c4:	47c0      	blx	r8
 80062c6:	3001      	adds	r0, #1
 80062c8:	d0aa      	beq.n	8006220 <_printf_i+0x12c>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	079b      	lsls	r3, r3, #30
 80062ce:	d413      	bmi.n	80062f8 <_printf_i+0x204>
 80062d0:	68e0      	ldr	r0, [r4, #12]
 80062d2:	9b03      	ldr	r3, [sp, #12]
 80062d4:	4298      	cmp	r0, r3
 80062d6:	bfb8      	it	lt
 80062d8:	4618      	movlt	r0, r3
 80062da:	e7a3      	b.n	8006224 <_printf_i+0x130>
 80062dc:	2301      	movs	r3, #1
 80062de:	464a      	mov	r2, r9
 80062e0:	4639      	mov	r1, r7
 80062e2:	4630      	mov	r0, r6
 80062e4:	47c0      	blx	r8
 80062e6:	3001      	adds	r0, #1
 80062e8:	d09a      	beq.n	8006220 <_printf_i+0x12c>
 80062ea:	3501      	adds	r5, #1
 80062ec:	68e3      	ldr	r3, [r4, #12]
 80062ee:	9a03      	ldr	r2, [sp, #12]
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	42ab      	cmp	r3, r5
 80062f4:	dcf2      	bgt.n	80062dc <_printf_i+0x1e8>
 80062f6:	e7eb      	b.n	80062d0 <_printf_i+0x1dc>
 80062f8:	2500      	movs	r5, #0
 80062fa:	f104 0919 	add.w	r9, r4, #25
 80062fe:	e7f5      	b.n	80062ec <_printf_i+0x1f8>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1ac      	bne.n	800625e <_printf_i+0x16a>
 8006304:	7803      	ldrb	r3, [r0, #0]
 8006306:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800630a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800630e:	e76c      	b.n	80061ea <_printf_i+0xf6>
 8006310:	080065f5 	.word	0x080065f5
 8006314:	08006606 	.word	0x08006606

08006318 <__sread>:
 8006318:	b510      	push	{r4, lr}
 800631a:	460c      	mov	r4, r1
 800631c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006320:	f000 f8de 	bl	80064e0 <_read_r>
 8006324:	2800      	cmp	r0, #0
 8006326:	bfab      	itete	ge
 8006328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800632a:	89a3      	ldrhlt	r3, [r4, #12]
 800632c:	181b      	addge	r3, r3, r0
 800632e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006332:	bfac      	ite	ge
 8006334:	6563      	strge	r3, [r4, #84]	; 0x54
 8006336:	81a3      	strhlt	r3, [r4, #12]
 8006338:	bd10      	pop	{r4, pc}

0800633a <__swrite>:
 800633a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633e:	461f      	mov	r7, r3
 8006340:	898b      	ldrh	r3, [r1, #12]
 8006342:	05db      	lsls	r3, r3, #23
 8006344:	4605      	mov	r5, r0
 8006346:	460c      	mov	r4, r1
 8006348:	4616      	mov	r6, r2
 800634a:	d505      	bpl.n	8006358 <__swrite+0x1e>
 800634c:	2302      	movs	r3, #2
 800634e:	2200      	movs	r2, #0
 8006350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006354:	f000 f868 	bl	8006428 <_lseek_r>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800635e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006362:	81a3      	strh	r3, [r4, #12]
 8006364:	4632      	mov	r2, r6
 8006366:	463b      	mov	r3, r7
 8006368:	4628      	mov	r0, r5
 800636a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800636e:	f000 b817 	b.w	80063a0 <_write_r>

08006372 <__sseek>:
 8006372:	b510      	push	{r4, lr}
 8006374:	460c      	mov	r4, r1
 8006376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637a:	f000 f855 	bl	8006428 <_lseek_r>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	bf15      	itete	ne
 8006384:	6560      	strne	r0, [r4, #84]	; 0x54
 8006386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800638a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800638e:	81a3      	strheq	r3, [r4, #12]
 8006390:	bf18      	it	ne
 8006392:	81a3      	strhne	r3, [r4, #12]
 8006394:	bd10      	pop	{r4, pc}

08006396 <__sclose>:
 8006396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639a:	f000 b813 	b.w	80063c4 <_close_r>
	...

080063a0 <_write_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4c07      	ldr	r4, [pc, #28]	; (80063c0 <_write_r+0x20>)
 80063a4:	4605      	mov	r5, r0
 80063a6:	4608      	mov	r0, r1
 80063a8:	4611      	mov	r1, r2
 80063aa:	2200      	movs	r2, #0
 80063ac:	6022      	str	r2, [r4, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f7fe fb5c 	bl	8004a6c <_write>
 80063b4:	1c43      	adds	r3, r0, #1
 80063b6:	d102      	bne.n	80063be <_write_r+0x1e>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	b103      	cbz	r3, 80063be <_write_r+0x1e>
 80063bc:	602b      	str	r3, [r5, #0]
 80063be:	bd38      	pop	{r3, r4, r5, pc}
 80063c0:	200002a8 	.word	0x200002a8

080063c4 <_close_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	4c06      	ldr	r4, [pc, #24]	; (80063e0 <_close_r+0x1c>)
 80063c8:	2300      	movs	r3, #0
 80063ca:	4605      	mov	r5, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	f7fe fb78 	bl	8004ac4 <_close>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_close_r+0x1a>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	b103      	cbz	r3, 80063de <_close_r+0x1a>
 80063dc:	602b      	str	r3, [r5, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	200002a8 	.word	0x200002a8

080063e4 <_fstat_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4c07      	ldr	r4, [pc, #28]	; (8006404 <_fstat_r+0x20>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4605      	mov	r5, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	6023      	str	r3, [r4, #0]
 80063f2:	f7fe fbb7 	bl	8004b64 <_fstat>
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	d102      	bne.n	8006400 <_fstat_r+0x1c>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	b103      	cbz	r3, 8006400 <_fstat_r+0x1c>
 80063fe:	602b      	str	r3, [r5, #0]
 8006400:	bd38      	pop	{r3, r4, r5, pc}
 8006402:	bf00      	nop
 8006404:	200002a8 	.word	0x200002a8

08006408 <_isatty_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	4c06      	ldr	r4, [pc, #24]	; (8006424 <_isatty_r+0x1c>)
 800640c:	2300      	movs	r3, #0
 800640e:	4605      	mov	r5, r0
 8006410:	4608      	mov	r0, r1
 8006412:	6023      	str	r3, [r4, #0]
 8006414:	f7fe fb14 	bl	8004a40 <_isatty>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d102      	bne.n	8006422 <_isatty_r+0x1a>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	b103      	cbz	r3, 8006422 <_isatty_r+0x1a>
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	200002a8 	.word	0x200002a8

08006428 <_lseek_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4c07      	ldr	r4, [pc, #28]	; (8006448 <_lseek_r+0x20>)
 800642c:	4605      	mov	r5, r0
 800642e:	4608      	mov	r0, r1
 8006430:	4611      	mov	r1, r2
 8006432:	2200      	movs	r2, #0
 8006434:	6022      	str	r2, [r4, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	f7fe fb5b 	bl	8004af2 <_lseek>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_lseek_r+0x1e>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	b103      	cbz	r3, 8006446 <_lseek_r+0x1e>
 8006444:	602b      	str	r3, [r5, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	200002a8 	.word	0x200002a8

0800644c <memcpy>:
 800644c:	b510      	push	{r4, lr}
 800644e:	1e43      	subs	r3, r0, #1
 8006450:	440a      	add	r2, r1
 8006452:	4291      	cmp	r1, r2
 8006454:	d100      	bne.n	8006458 <memcpy+0xc>
 8006456:	bd10      	pop	{r4, pc}
 8006458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800645c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006460:	e7f7      	b.n	8006452 <memcpy+0x6>

08006462 <memmove>:
 8006462:	4288      	cmp	r0, r1
 8006464:	b510      	push	{r4, lr}
 8006466:	eb01 0302 	add.w	r3, r1, r2
 800646a:	d807      	bhi.n	800647c <memmove+0x1a>
 800646c:	1e42      	subs	r2, r0, #1
 800646e:	4299      	cmp	r1, r3
 8006470:	d00a      	beq.n	8006488 <memmove+0x26>
 8006472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006476:	f802 4f01 	strb.w	r4, [r2, #1]!
 800647a:	e7f8      	b.n	800646e <memmove+0xc>
 800647c:	4283      	cmp	r3, r0
 800647e:	d9f5      	bls.n	800646c <memmove+0xa>
 8006480:	1881      	adds	r1, r0, r2
 8006482:	1ad2      	subs	r2, r2, r3
 8006484:	42d3      	cmn	r3, r2
 8006486:	d100      	bne.n	800648a <memmove+0x28>
 8006488:	bd10      	pop	{r4, pc}
 800648a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800648e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006492:	e7f7      	b.n	8006484 <memmove+0x22>

08006494 <_realloc_r>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	4607      	mov	r7, r0
 8006498:	4614      	mov	r4, r2
 800649a:	460e      	mov	r6, r1
 800649c:	b921      	cbnz	r1, 80064a8 <_realloc_r+0x14>
 800649e:	4611      	mov	r1, r2
 80064a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80064a4:	f7fe bf2e 	b.w	8005304 <_malloc_r>
 80064a8:	b922      	cbnz	r2, 80064b4 <_realloc_r+0x20>
 80064aa:	f7fe fedd 	bl	8005268 <_free_r>
 80064ae:	4625      	mov	r5, r4
 80064b0:	4628      	mov	r0, r5
 80064b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b4:	f000 f826 	bl	8006504 <_malloc_usable_size_r>
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d20f      	bcs.n	80064dc <_realloc_r+0x48>
 80064bc:	4621      	mov	r1, r4
 80064be:	4638      	mov	r0, r7
 80064c0:	f7fe ff20 	bl	8005304 <_malloc_r>
 80064c4:	4605      	mov	r5, r0
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d0f2      	beq.n	80064b0 <_realloc_r+0x1c>
 80064ca:	4631      	mov	r1, r6
 80064cc:	4622      	mov	r2, r4
 80064ce:	f7ff ffbd 	bl	800644c <memcpy>
 80064d2:	4631      	mov	r1, r6
 80064d4:	4638      	mov	r0, r7
 80064d6:	f7fe fec7 	bl	8005268 <_free_r>
 80064da:	e7e9      	b.n	80064b0 <_realloc_r+0x1c>
 80064dc:	4635      	mov	r5, r6
 80064de:	e7e7      	b.n	80064b0 <_realloc_r+0x1c>

080064e0 <_read_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4c07      	ldr	r4, [pc, #28]	; (8006500 <_read_r+0x20>)
 80064e4:	4605      	mov	r5, r0
 80064e6:	4608      	mov	r0, r1
 80064e8:	4611      	mov	r1, r2
 80064ea:	2200      	movs	r2, #0
 80064ec:	6022      	str	r2, [r4, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	f7fe fb10 	bl	8004b14 <_read>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	d102      	bne.n	80064fe <_read_r+0x1e>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	b103      	cbz	r3, 80064fe <_read_r+0x1e>
 80064fc:	602b      	str	r3, [r5, #0]
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
 8006500:	200002a8 	.word	0x200002a8

08006504 <_malloc_usable_size_r>:
 8006504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006508:	1f18      	subs	r0, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	bfbc      	itt	lt
 800650e:	580b      	ldrlt	r3, [r1, r0]
 8006510:	18c0      	addlt	r0, r0, r3
 8006512:	4770      	bx	lr

08006514 <_init>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	bf00      	nop
 8006518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651a:	bc08      	pop	{r3}
 800651c:	469e      	mov	lr, r3
 800651e:	4770      	bx	lr

08006520 <_fini>:
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	bf00      	nop
 8006524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006526:	bc08      	pop	{r3}
 8006528:	469e      	mov	lr, r3
 800652a:	4770      	bx	lr

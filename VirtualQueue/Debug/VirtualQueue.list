
VirtualQueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080050ec  080050ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005298  08005298  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005298  08005298  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005298  08005298  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000070  08005310  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08005310  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa98  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002108  00000000  00000000  0002fb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  00031c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  00032978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027ca8  00000000  00000000  00033598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b034  00000000  00000000  0005b240  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f05b7  00000000  00000000  00066274  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015682b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a0  00000000  00000000  001568a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080050d4 	.word	0x080050d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080050d4 	.word	0x080050d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000286:	2300      	movs	r3, #0
 8000288:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800028a:	2003      	movs	r0, #3
 800028c:	f000 f940 	bl	8000510 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000290:	2000      	movs	r0, #0
 8000292:	f000 f80d 	bl	80002b0 <HAL_InitTick>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d002      	beq.n	80002a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	e001      	b.n	80002a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80002a2:	f004 f917 	bl	80044d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80002a6:	79fb      	ldrb	r3, [r7, #7]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80002b8:	2300      	movs	r3, #0
 80002ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80002bc:	4b17      	ldr	r3, [pc, #92]	; (800031c <HAL_InitTick+0x6c>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d023      	beq.n	800030c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <HAL_InitTick+0x70>)
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	4b14      	ldr	r3, [pc, #80]	; (800031c <HAL_InitTick+0x6c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4619      	mov	r1, r3
 80002ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f93f 	bl	800055e <HAL_SYSTICK_Config>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d10f      	bne.n	8000306 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2b0f      	cmp	r3, #15
 80002ea:	d809      	bhi.n	8000300 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002ec:	2200      	movs	r2, #0
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 f917 	bl	8000526 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002f8:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <HAL_InitTick+0x74>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	6013      	str	r3, [r2, #0]
 80002fe:	e007      	b.n	8000310 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e004      	b.n	8000310 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000306:	2301      	movs	r3, #1
 8000308:	73fb      	strb	r3, [r7, #15]
 800030a:	e001      	b.n	8000310 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800030c:	2301      	movs	r3, #1
 800030e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000310:	7bfb      	ldrb	r3, [r7, #15]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	20000008 	.word	0x20000008
 8000324:	20000000 	.word	0x20000000

08000328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_IncTick+0x20>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	461a      	mov	r2, r3
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <HAL_IncTick+0x24>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4413      	add	r3, r2
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <HAL_IncTick+0x24>)
 800033a:	6013      	str	r3, [r2, #0]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000004 	.word	0x20000004
 800034c:	2000009c 	.word	0x2000009c

08000350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  return uwTick;
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <HAL_GetTick+0x14>)
 8000356:	681b      	ldr	r3, [r3, #0]
}
 8000358:	4618      	mov	r0, r3
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	2000009c 	.word	0x2000009c

08000368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000370:	f7ff ffee 	bl	8000350 <HAL_GetTick>
 8000374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000380:	d005      	beq.n	800038e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <HAL_Delay+0x40>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	461a      	mov	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4413      	add	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800038e:	bf00      	nop
 8000390:	f7ff ffde 	bl	8000350 <HAL_GetTick>
 8000394:	4602      	mov	r2, r0
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	1ad3      	subs	r3, r2, r3
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	429a      	cmp	r2, r3
 800039e:	d8f7      	bhi.n	8000390 <HAL_Delay+0x28>
  {
  }
}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000004 	.word	0x20000004

080003ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f003 0307 	and.w	r3, r3, #7
 80003ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <__NVIC_SetPriorityGrouping+0x44>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003c2:	68ba      	ldr	r2, [r7, #8]
 80003c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003c8:	4013      	ands	r3, r2
 80003ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003de:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <__NVIC_SetPriorityGrouping+0x44>)
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	60d3      	str	r3, [r2, #12]
}
 80003e4:	bf00      	nop
 80003e6:	3714      	adds	r7, #20
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <__NVIC_GetPriorityGrouping+0x18>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	0a1b      	lsrs	r3, r3, #8
 80003fe:	f003 0307 	and.w	r3, r3, #7
}
 8000402:	4618      	mov	r0, r3
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	e000ed00 	.word	0xe000ed00

08000410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	6039      	str	r1, [r7, #0]
 800041a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800041c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000420:	2b00      	cmp	r3, #0
 8000422:	db0a      	blt.n	800043a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	b2da      	uxtb	r2, r3
 8000428:	490c      	ldr	r1, [pc, #48]	; (800045c <__NVIC_SetPriority+0x4c>)
 800042a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042e:	0112      	lsls	r2, r2, #4
 8000430:	b2d2      	uxtb	r2, r2
 8000432:	440b      	add	r3, r1
 8000434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000438:	e00a      	b.n	8000450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4908      	ldr	r1, [pc, #32]	; (8000460 <__NVIC_SetPriority+0x50>)
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	f003 030f 	and.w	r3, r3, #15
 8000446:	3b04      	subs	r3, #4
 8000448:	0112      	lsls	r2, r2, #4
 800044a:	b2d2      	uxtb	r2, r2
 800044c:	440b      	add	r3, r1
 800044e:	761a      	strb	r2, [r3, #24]
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	e000e100 	.word	0xe000e100
 8000460:	e000ed00 	.word	0xe000ed00

08000464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000464:	b480      	push	{r7}
 8000466:	b089      	sub	sp, #36	; 0x24
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f003 0307 	and.w	r3, r3, #7
 8000476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	f1c3 0307 	rsb	r3, r3, #7
 800047e:	2b04      	cmp	r3, #4
 8000480:	bf28      	it	cs
 8000482:	2304      	movcs	r3, #4
 8000484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000486:	69fb      	ldr	r3, [r7, #28]
 8000488:	3304      	adds	r3, #4
 800048a:	2b06      	cmp	r3, #6
 800048c:	d902      	bls.n	8000494 <NVIC_EncodePriority+0x30>
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	3b03      	subs	r3, #3
 8000492:	e000      	b.n	8000496 <NVIC_EncodePriority+0x32>
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	fa02 f303 	lsl.w	r3, r2, r3
 80004a2:	43da      	mvns	r2, r3
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	401a      	ands	r2, r3
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	43d9      	mvns	r1, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004bc:	4313      	orrs	r3, r2
         );
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3724      	adds	r7, #36	; 0x24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
	...

080004cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004dc:	d301      	bcc.n	80004e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004de:	2301      	movs	r3, #1
 80004e0:	e00f      	b.n	8000502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <SysTick_Config+0x40>)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ea:	210f      	movs	r1, #15
 80004ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004f0:	f7ff ff8e 	bl	8000410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <SysTick_Config+0x40>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004fa:	4b04      	ldr	r3, [pc, #16]	; (800050c <SysTick_Config+0x40>)
 80004fc:	2207      	movs	r2, #7
 80004fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	e000e010 	.word	0xe000e010

08000510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f7ff ff47 	bl	80003ac <__NVIC_SetPriorityGrouping>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b086      	sub	sp, #24
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	60b9      	str	r1, [r7, #8]
 8000530:	607a      	str	r2, [r7, #4]
 8000532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000538:	f7ff ff5c 	bl	80003f4 <__NVIC_GetPriorityGrouping>
 800053c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	68b9      	ldr	r1, [r7, #8]
 8000542:	6978      	ldr	r0, [r7, #20]
 8000544:	f7ff ff8e 	bl	8000464 <NVIC_EncodePriority>
 8000548:	4602      	mov	r2, r0
 800054a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800054e:	4611      	mov	r1, r2
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ff5d 	bl	8000410 <__NVIC_SetPriority>
}
 8000556:	bf00      	nop
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b082      	sub	sp, #8
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f7ff ffb0 	bl	80004cc <SysTick_Config>
 800056c:	4603      	mov	r3, r0
}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000578:	b480      	push	{r7}
 800057a:	b087      	sub	sp, #28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000586:	e17f      	b.n	8000888 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	2101      	movs	r1, #1
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	4013      	ands	r3, r2
 8000596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2b00      	cmp	r3, #0
 800059c:	f000 8171 	beq.w	8000882 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d00b      	beq.n	80005c0 <HAL_GPIO_Init+0x48>
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d007      	beq.n	80005c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005b4:	2b11      	cmp	r3, #17
 80005b6:	d003      	beq.n	80005c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	2b12      	cmp	r3, #18
 80005be:	d130      	bne.n	8000622 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	2203      	movs	r2, #3
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	43db      	mvns	r3, r3
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	4013      	ands	r3, r2
 80005d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	68da      	ldr	r2, [r3, #12]
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	693a      	ldr	r2, [r7, #16]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	693a      	ldr	r2, [r7, #16]
 80005ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80005f6:	2201      	movs	r2, #1
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	43db      	mvns	r3, r3
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	4013      	ands	r3, r2
 8000604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	091b      	lsrs	r3, r3, #4
 800060c:	f003 0201 	and.w	r2, r3, #1
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	4313      	orrs	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f003 0303 	and.w	r3, r3, #3
 800062a:	2b03      	cmp	r3, #3
 800062c:	d118      	bne.n	8000660 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000634:	2201      	movs	r2, #1
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	43db      	mvns	r3, r3
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	4013      	ands	r3, r2
 8000642:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	08db      	lsrs	r3, r3, #3
 800064a:	f003 0201 	and.w	r2, r3, #1
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	4313      	orrs	r3, r2
 8000658:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	2203      	movs	r2, #3
 800066c:	fa02 f303 	lsl.w	r3, r2, r3
 8000670:	43db      	mvns	r3, r3
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	4013      	ands	r3, r2
 8000676:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	689a      	ldr	r2, [r3, #8]
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	fa02 f303 	lsl.w	r3, r2, r3
 8000684:	693a      	ldr	r2, [r7, #16]
 8000686:	4313      	orrs	r3, r2
 8000688:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	693a      	ldr	r2, [r7, #16]
 800068e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d003      	beq.n	80006a0 <HAL_GPIO_Init+0x128>
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	2b12      	cmp	r3, #18
 800069e:	d123      	bne.n	80006e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	08da      	lsrs	r2, r3, #3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3208      	adds	r2, #8
 80006a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	f003 0307 	and.w	r3, r3, #7
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	220f      	movs	r2, #15
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	4013      	ands	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	691a      	ldr	r2, [r3, #16]
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	08da      	lsrs	r2, r3, #3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3208      	adds	r2, #8
 80006e2:	6939      	ldr	r1, [r7, #16]
 80006e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	2203      	movs	r2, #3
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	43db      	mvns	r3, r3
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	4013      	ands	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	f003 0203 	and.w	r2, r3, #3
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	4313      	orrs	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	2b00      	cmp	r3, #0
 8000726:	f000 80ac 	beq.w	8000882 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b5e      	ldr	r3, [pc, #376]	; (80008a4 <HAL_GPIO_Init+0x32c>)
 800072c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072e:	4a5d      	ldr	r2, [pc, #372]	; (80008a4 <HAL_GPIO_Init+0x32c>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6613      	str	r3, [r2, #96]	; 0x60
 8000736:	4b5b      	ldr	r3, [pc, #364]	; (80008a4 <HAL_GPIO_Init+0x32c>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000742:	4a59      	ldr	r2, [pc, #356]	; (80008a8 <HAL_GPIO_Init+0x330>)
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	089b      	lsrs	r3, r3, #2
 8000748:	3302      	adds	r3, #2
 800074a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	f003 0303 	and.w	r3, r3, #3
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	220f      	movs	r2, #15
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43db      	mvns	r3, r3
 8000760:	693a      	ldr	r2, [r7, #16]
 8000762:	4013      	ands	r3, r2
 8000764:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800076c:	d025      	beq.n	80007ba <HAL_GPIO_Init+0x242>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a4e      	ldr	r2, [pc, #312]	; (80008ac <HAL_GPIO_Init+0x334>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d01f      	beq.n	80007b6 <HAL_GPIO_Init+0x23e>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a4d      	ldr	r2, [pc, #308]	; (80008b0 <HAL_GPIO_Init+0x338>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d019      	beq.n	80007b2 <HAL_GPIO_Init+0x23a>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a4c      	ldr	r2, [pc, #304]	; (80008b4 <HAL_GPIO_Init+0x33c>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d013      	beq.n	80007ae <HAL_GPIO_Init+0x236>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a4b      	ldr	r2, [pc, #300]	; (80008b8 <HAL_GPIO_Init+0x340>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d00d      	beq.n	80007aa <HAL_GPIO_Init+0x232>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a4a      	ldr	r2, [pc, #296]	; (80008bc <HAL_GPIO_Init+0x344>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d007      	beq.n	80007a6 <HAL_GPIO_Init+0x22e>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a49      	ldr	r2, [pc, #292]	; (80008c0 <HAL_GPIO_Init+0x348>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d101      	bne.n	80007a2 <HAL_GPIO_Init+0x22a>
 800079e:	2306      	movs	r3, #6
 80007a0:	e00c      	b.n	80007bc <HAL_GPIO_Init+0x244>
 80007a2:	2307      	movs	r3, #7
 80007a4:	e00a      	b.n	80007bc <HAL_GPIO_Init+0x244>
 80007a6:	2305      	movs	r3, #5
 80007a8:	e008      	b.n	80007bc <HAL_GPIO_Init+0x244>
 80007aa:	2304      	movs	r3, #4
 80007ac:	e006      	b.n	80007bc <HAL_GPIO_Init+0x244>
 80007ae:	2303      	movs	r3, #3
 80007b0:	e004      	b.n	80007bc <HAL_GPIO_Init+0x244>
 80007b2:	2302      	movs	r3, #2
 80007b4:	e002      	b.n	80007bc <HAL_GPIO_Init+0x244>
 80007b6:	2301      	movs	r3, #1
 80007b8:	e000      	b.n	80007bc <HAL_GPIO_Init+0x244>
 80007ba:	2300      	movs	r3, #0
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	f002 0203 	and.w	r2, r2, #3
 80007c2:	0092      	lsls	r2, r2, #2
 80007c4:	4093      	lsls	r3, r2
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007cc:	4936      	ldr	r1, [pc, #216]	; (80008a8 <HAL_GPIO_Init+0x330>)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	089b      	lsrs	r3, r3, #2
 80007d2:	3302      	adds	r3, #2
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80007da:	4b3a      	ldr	r3, [pc, #232]	; (80008c4 <HAL_GPIO_Init+0x34c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	43db      	mvns	r3, r3
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	4013      	ands	r3, r2
 80007e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d003      	beq.n	80007fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80007fe:	4a31      	ldr	r2, [pc, #196]	; (80008c4 <HAL_GPIO_Init+0x34c>)
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000804:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <HAL_GPIO_Init+0x34c>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	43db      	mvns	r3, r3
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	4013      	ands	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081c:	2b00      	cmp	r3, #0
 800081e:	d003      	beq.n	8000828 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	4313      	orrs	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000828:	4a26      	ldr	r2, [pc, #152]	; (80008c4 <HAL_GPIO_Init+0x34c>)
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800082e:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <HAL_GPIO_Init+0x34c>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	43db      	mvns	r3, r3
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	4013      	ands	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d003      	beq.n	8000852 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4313      	orrs	r3, r2
 8000850:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <HAL_GPIO_Init+0x34c>)
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <HAL_GPIO_Init+0x34c>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	43db      	mvns	r3, r3
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000870:	2b00      	cmp	r3, #0
 8000872:	d003      	beq.n	800087c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4313      	orrs	r3, r2
 800087a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800087c:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <HAL_GPIO_Init+0x34c>)
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	3301      	adds	r3, #1
 8000886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	fa22 f303 	lsr.w	r3, r2, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	f47f ae78 	bne.w	8000588 <HAL_GPIO_Init+0x10>
  }
}
 8000898:	bf00      	nop
 800089a:	371c      	adds	r7, #28
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010000 	.word	0x40010000
 80008ac:	48000400 	.word	0x48000400
 80008b0:	48000800 	.word	0x48000800
 80008b4:	48000c00 	.word	0x48000c00
 80008b8:	48001000 	.word	0x48001000
 80008bc:	48001400 	.word	0x48001400
 80008c0:	48001800 	.word	0x48001800
 80008c4:	40010400 	.word	0x40010400

080008c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	807b      	strh	r3, [r7, #2]
 80008d4:	4613      	mov	r3, r2
 80008d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d003      	beq.n	80008e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008de:	887a      	ldrh	r2, [r7, #2]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008e4:	e002      	b.n	80008ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008e6:	887a      	ldrh	r2, [r7, #2]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d101      	bne.n	800090a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e081      	b.n	8000a0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d106      	bne.n	8000924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f003 fdfc 	bl	800451c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2224      	movs	r2, #36	; 0x24
 8000928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f022 0201 	bic.w	r2, r2, #1
 800093a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000948:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000958:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d107      	bne.n	8000972 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	e006      	b.n	8000980 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	689a      	ldr	r2, [r3, #8]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800097e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d104      	bne.n	8000992 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000990:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	6812      	ldr	r2, [r2, #0]
 800099c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	68da      	ldr	r2, [r3, #12]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80009b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	691a      	ldr	r2, [r3, #16]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	ea42 0103 	orr.w	r1, r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	021a      	lsls	r2, r3, #8
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69d9      	ldr	r1, [r3, #28]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a1a      	ldr	r2, [r3, #32]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	430a      	orrs	r2, r1
 80009de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f042 0201 	orr.w	r2, r2, #1
 80009ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2220      	movs	r2, #32
 80009fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b20      	cmp	r3, #32
 8000a2a:	d138      	bne.n	8000a9e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d101      	bne.n	8000a3a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000a36:	2302      	movs	r3, #2
 8000a38:	e032      	b.n	8000aa0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2224      	movs	r2, #36	; 0x24
 8000a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f022 0201 	bic.w	r2, r2, #1
 8000a58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a68:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6819      	ldr	r1, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	430a      	orrs	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f042 0201 	orr.w	r2, r2, #1
 8000a88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2220      	movs	r2, #32
 8000a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000a9e:	2302      	movs	r3, #2
  }
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b20      	cmp	r3, #32
 8000ac0:	d139      	bne.n	8000b36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d101      	bne.n	8000ad0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000acc:	2302      	movs	r3, #2
 8000ace:	e033      	b.n	8000b38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2224      	movs	r2, #36	; 0x24
 8000adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f022 0201 	bic.w	r2, r2, #1
 8000aee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000afe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	021b      	lsls	r3, r3, #8
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f042 0201 	orr.w	r2, r2, #1
 8000b20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2220      	movs	r2, #32
 8000b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000b36:	2302      	movs	r3, #2
  }
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e0af      	b.n	8000cb6 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d106      	bne.n	8000b70 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f003 fd1a 	bl	80045a4 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2202      	movs	r2, #2
 8000b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 0201 	bic.w	r2, r2, #1
 8000b86:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e00a      	b.n	8000ba4 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3304      	adds	r3, #4
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d9f1      	bls.n	8000b8e <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f042 0204 	orr.w	r2, r2, #4
 8000bb8:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	4b3f      	ldr	r3, [pc, #252]	; (8000cc0 <HAL_LCD_Init+0x17c>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	6851      	ldr	r1, [r2, #4]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	6892      	ldr	r2, [r2, #8]
 8000bcc:	4311      	orrs	r1, r2
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000bd2:	4311      	orrs	r1, r2
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000bd8:	4311      	orrs	r1, r2
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	69d2      	ldr	r2, [r2, #28]
 8000bde:	4311      	orrs	r1, r2
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	6a12      	ldr	r2, [r2, #32]
 8000be4:	4311      	orrs	r1, r2
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	6992      	ldr	r2, [r2, #24]
 8000bea:	4311      	orrs	r1, r2
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000bf0:	4311      	orrs	r1, r2
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f8f1 	bl	8000de2 <LCD_WaitForSynchro>
 8000c00:	4603      	mov	r3, r0
 8000c02:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8000c04:	7cfb      	ldrb	r3, [r7, #19]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_LCD_Init+0xca>
  {
    return status;
 8000c0a:	7cfb      	ldrb	r3, [r7, #19]
 8000c0c:	e053      	b.n	8000cb6 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	431a      	orrs	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	431a      	orrs	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	430a      	orrs	r2, r1
 8000c34:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f042 0201 	orr.w	r2, r2, #1
 8000c44:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000c46:	f7ff fb83 	bl	8000350 <HAL_GetTick>
 8000c4a:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000c4c:	e00c      	b.n	8000c68 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000c4e:	f7ff fb7f 	bl	8000350 <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c5c:	d904      	bls.n	8000c68 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2208      	movs	r2, #8
 8000c62:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000c64:	2303      	movs	r3, #3
 8000c66:	e026      	b.n	8000cb6 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d1eb      	bne.n	8000c4e <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000c76:	f7ff fb6b 	bl	8000350 <HAL_GetTick>
 8000c7a:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000c7c:	e00c      	b.n	8000c98 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000c7e:	f7ff fb67 	bl	8000350 <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c8c:	d904      	bls.n	8000c98 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2210      	movs	r2, #16
 8000c92:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000c94:	2303      	movs	r3, #3
 8000c96:	e00e      	b.n	8000cb6 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	2b10      	cmp	r3, #16
 8000ca4:	d1eb      	bne.n	8000c7e <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8000cb4:	7cfb      	ldrb	r3, [r7, #19]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	fc00000e 	.word	0xfc00000e

08000cc4 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cd6:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8000cd8:	7cbb      	ldrb	r3, [r7, #18]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d002      	beq.n	8000ce4 <HAL_LCD_Clear+0x20>
 8000cde:	7cbb      	ldrb	r3, [r7, #18]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d140      	bne.n	8000d66 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <HAL_LCD_Clear+0x2e>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e03a      	b.n	8000d68 <HAL_LCD_Clear+0xa4>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8000d02:	f7ff fb25 	bl	8000350 <HAL_GetTick>
 8000d06:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000d08:	e010      	b.n	8000d2c <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000d0a:	f7ff fb21 	bl	8000350 <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d18:	d908      	bls.n	8000d2c <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e01d      	b.n	8000d68 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d0e7      	beq.n	8000d0a <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e00a      	b.n	8000d56 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3304      	adds	r3, #4
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d9f1      	bls.n	8000d40 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f807 	bl	8000d70 <HAL_LCD_UpdateDisplayRequest>
 8000d62:	4603      	mov	r3, r0
 8000d64:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8000d66:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f042 0204 	orr.w	r2, r2, #4
 8000d8e:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000d90:	f7ff fade 	bl	8000350 <HAL_GetTick>
 8000d94:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000d96:	e010      	b.n	8000dba <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000d98:	f7ff fada 	bl	8000350 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000da6:	d908      	bls.n	8000dba <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2204      	movs	r2, #4
 8000dac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e00f      	b.n	8000dda <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d1e7      	bne.n	8000d98 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b084      	sub	sp, #16
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000dea:	f7ff fab1 	bl	8000350 <HAL_GetTick>
 8000dee:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000df0:	e00c      	b.n	8000e0c <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000df2:	f7ff faad 	bl	8000350 <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e00:	d904      	bls.n	8000e0c <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e007      	b.n	8000e1c <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 0320 	and.w	r3, r3, #32
 8000e16:	2b20      	cmp	r3, #32
 8000e18:	d1eb      	bne.n	8000df2 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40007000 	.word	0x40007000

08000e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e4e:	d130      	bne.n	8000eb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e5c:	d038      	beq.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e66:	4a1e      	ldr	r2, [pc, #120]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2232      	movs	r2, #50	; 0x32
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7e:	0c9b      	lsrs	r3, r3, #18
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e84:	e002      	b.n	8000e8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e98:	d102      	bne.n	8000ea0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f2      	bne.n	8000e86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eac:	d110      	bne.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e00f      	b.n	8000ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ebe:	d007      	beq.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ec8:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ece:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40007000 	.word	0x40007000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	431bde83 	.word	0x431bde83

08000eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e3d4      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000efe:	4ba1      	ldr	r3, [pc, #644]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f08:	4b9e      	ldr	r3, [pc, #632]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0310 	and.w	r3, r3, #16
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 80e4 	beq.w	80010e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <HAL_RCC_OscConfig+0x4a>
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	2b0c      	cmp	r3, #12
 8000f2a:	f040 808b 	bne.w	8001044 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	f040 8087 	bne.w	8001044 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f36:	4b93      	ldr	r3, [pc, #588]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <HAL_RCC_OscConfig+0x62>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e3ac      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a1a      	ldr	r2, [r3, #32]
 8000f52:	4b8c      	ldr	r3, [pc, #560]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <HAL_RCC_OscConfig+0x7c>
 8000f5e:	4b89      	ldr	r3, [pc, #548]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f66:	e005      	b.n	8000f74 <HAL_RCC_OscConfig+0x88>
 8000f68:	4b86      	ldr	r3, [pc, #536]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d223      	bcs.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fd07 	bl	8001990 <RCC_SetFlashLatencyFromMSIRange>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e38d      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f8c:	4b7d      	ldr	r3, [pc, #500]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a7c      	ldr	r2, [pc, #496]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b7a      	ldr	r3, [pc, #488]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4977      	ldr	r1, [pc, #476]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000faa:	4b76      	ldr	r3, [pc, #472]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	4972      	ldr	r1, [pc, #456]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	604b      	str	r3, [r1, #4]
 8000fbe:	e025      	b.n	800100c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fc0:	4b70      	ldr	r3, [pc, #448]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a6f      	ldr	r2, [pc, #444]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b6d      	ldr	r3, [pc, #436]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	496a      	ldr	r1, [pc, #424]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fde:	4b69      	ldr	r3, [pc, #420]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	4965      	ldr	r1, [pc, #404]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d109      	bne.n	800100c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fcc7 	bl	8001990 <RCC_SetFlashLatencyFromMSIRange>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e34d      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800100c:	f000 fc36 	bl	800187c <HAL_RCC_GetSysClockFreq>
 8001010:	4601      	mov	r1, r0
 8001012:	4b5c      	ldr	r3, [pc, #368]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	091b      	lsrs	r3, r3, #4
 8001018:	f003 030f 	and.w	r3, r3, #15
 800101c:	4a5a      	ldr	r2, [pc, #360]	; (8001188 <HAL_RCC_OscConfig+0x29c>)
 800101e:	5cd3      	ldrb	r3, [r2, r3]
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	fa21 f303 	lsr.w	r3, r1, r3
 8001028:	4a58      	ldr	r2, [pc, #352]	; (800118c <HAL_RCC_OscConfig+0x2a0>)
 800102a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800102c:	4b58      	ldr	r3, [pc, #352]	; (8001190 <HAL_RCC_OscConfig+0x2a4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f93d 	bl	80002b0 <HAL_InitTick>
 8001036:	4603      	mov	r3, r0
 8001038:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d052      	beq.n	80010e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	e331      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d032      	beq.n	80010b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800104c:	4b4d      	ldr	r3, [pc, #308]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a4c      	ldr	r2, [pc, #304]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001058:	f7ff f97a 	bl	8000350 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001060:	f7ff f976 	bl	8000350 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e31a      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001072:	4b44      	ldr	r3, [pc, #272]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800107e:	4b41      	ldr	r3, [pc, #260]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a40      	ldr	r2, [pc, #256]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	493b      	ldr	r1, [pc, #236]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8001098:	4313      	orrs	r3, r2
 800109a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800109c:	4b39      	ldr	r3, [pc, #228]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	4936      	ldr	r1, [pc, #216]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
 80010b0:	e01a      	b.n	80010e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010b2:	4b34      	ldr	r3, [pc, #208]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a33      	ldr	r2, [pc, #204]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010be:	f7ff f947 	bl	8000350 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010c6:	f7ff f943 	bl	8000350 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e2e7      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010d8:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f0      	bne.n	80010c6 <HAL_RCC_OscConfig+0x1da>
 80010e4:	e000      	b.n	80010e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d074      	beq.n	80011de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d005      	beq.n	8001106 <HAL_RCC_OscConfig+0x21a>
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	2b0c      	cmp	r3, #12
 80010fe:	d10e      	bne.n	800111e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d10b      	bne.n	800111e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d064      	beq.n	80011dc <HAL_RCC_OscConfig+0x2f0>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d160      	bne.n	80011dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e2c4      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001126:	d106      	bne.n	8001136 <HAL_RCC_OscConfig+0x24a>
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a15      	ldr	r2, [pc, #84]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 800112e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	e01d      	b.n	8001172 <HAL_RCC_OscConfig+0x286>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800113e:	d10c      	bne.n	800115a <HAL_RCC_OscConfig+0x26e>
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8001146:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8001152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e00b      	b.n	8001172 <HAL_RCC_OscConfig+0x286>
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8001160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_RCC_OscConfig+0x298>)
 800116c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d01c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117a:	f7ff f8e9 	bl	8000350 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001180:	e011      	b.n	80011a6 <HAL_RCC_OscConfig+0x2ba>
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	080051c4 	.word	0x080051c4
 800118c:	20000008 	.word	0x20000008
 8001190:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff f8dc 	bl	8000350 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e280      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011a6:	4baf      	ldr	r3, [pc, #700]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x2a8>
 80011b2:	e014      	b.n	80011de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b4:	f7ff f8cc 	bl	8000350 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff f8c8 	bl	8000350 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e26c      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ce:	4ba5      	ldr	r3, [pc, #660]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x2d0>
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d060      	beq.n	80012ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_OscConfig+0x310>
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	2b0c      	cmp	r3, #12
 80011f4:	d119      	bne.n	800122a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d116      	bne.n	800122a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011fc:	4b99      	ldr	r3, [pc, #612]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_RCC_OscConfig+0x328>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e249      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001214:	4b93      	ldr	r3, [pc, #588]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	061b      	lsls	r3, r3, #24
 8001222:	4990      	ldr	r1, [pc, #576]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001228:	e040      	b.n	80012ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d023      	beq.n	800127a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001232:	4b8c      	ldr	r3, [pc, #560]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a8b      	ldr	r2, [pc, #556]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff f887 	bl	8000350 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff f883 	bl	8000350 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e227      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001258:	4b82      	ldr	r3, [pc, #520]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4b7f      	ldr	r3, [pc, #508]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	061b      	lsls	r3, r3, #24
 8001272:	497c      	ldr	r1, [pc, #496]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
 8001278:	e018      	b.n	80012ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127a:	4b7a      	ldr	r3, [pc, #488]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a79      	ldr	r2, [pc, #484]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001286:	f7ff f863 	bl	8000350 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128e:	f7ff f85f 	bl	8000350 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e203      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012a0:	4b70      	ldr	r3, [pc, #448]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f0      	bne.n	800128e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d03c      	beq.n	8001332 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d01c      	beq.n	80012fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c0:	4b68      	ldr	r3, [pc, #416]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80012c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c6:	4a67      	ldr	r2, [pc, #412]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff f83e 	bl	8000350 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d8:	f7ff f83a 	bl	8000350 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1de      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012ea:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80012ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ef      	beq.n	80012d8 <HAL_RCC_OscConfig+0x3ec>
 80012f8:	e01b      	b.n	8001332 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012fa:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80012fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001300:	4a58      	ldr	r2, [pc, #352]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001302:	f023 0301 	bic.w	r3, r3, #1
 8001306:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130a:	f7ff f821 	bl	8000350 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001312:	f7ff f81d 	bl	8000350 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1c1      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001324:	4b4f      	ldr	r3, [pc, #316]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1ef      	bne.n	8001312 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 80a6 	beq.w	800148c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001344:	4b47      	ldr	r3, [pc, #284]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10d      	bne.n	800136c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001350:	4b44      	ldr	r3, [pc, #272]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001354:	4a43      	ldr	r2, [pc, #268]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135a:	6593      	str	r3, [r2, #88]	; 0x58
 800135c:	4b41      	ldr	r3, [pc, #260]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001368:	2301      	movs	r3, #1
 800136a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800136c:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <HAL_RCC_OscConfig+0x57c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d118      	bne.n	80013aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001378:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <HAL_RCC_OscConfig+0x57c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a3a      	ldr	r2, [pc, #232]	; (8001468 <HAL_RCC_OscConfig+0x57c>)
 800137e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001384:	f7fe ffe4 	bl	8000350 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138c:	f7fe ffe0 	bl	8000350 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e184      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800139e:	4b32      	ldr	r3, [pc, #200]	; (8001468 <HAL_RCC_OscConfig+0x57c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d108      	bne.n	80013c4 <HAL_RCC_OscConfig+0x4d8>
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80013b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b8:	4a2a      	ldr	r2, [pc, #168]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013c2:	e024      	b.n	800140e <HAL_RCC_OscConfig+0x522>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d110      	bne.n	80013ee <HAL_RCC_OscConfig+0x502>
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80013ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80013de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e2:	4a20      	ldr	r2, [pc, #128]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013ec:	e00f      	b.n	800140e <HAL_RCC_OscConfig+0x522>
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80013f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f4:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 80013f6:	f023 0301 	bic.w	r3, r3, #1
 80013fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001406:	f023 0304 	bic.w	r3, r3, #4
 800140a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d016      	beq.n	8001444 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001416:	f7fe ff9b 	bl	8000350 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141e:	f7fe ff97 	bl	8000350 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f241 3288 	movw	r2, #5000	; 0x1388
 800142c:	4293      	cmp	r3, r2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e139      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_RCC_OscConfig+0x578>)
 8001436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0ed      	beq.n	800141e <HAL_RCC_OscConfig+0x532>
 8001442:	e01a      	b.n	800147a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7fe ff84 	bl	8000350 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800144a:	e00f      	b.n	800146c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7fe ff80 	bl	8000350 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	; 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d906      	bls.n	800146c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e122      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800146c:	4b90      	ldr	r3, [pc, #576]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 800146e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1e8      	bne.n	800144c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800147a:	7ffb      	ldrb	r3, [r7, #31]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001480:	4b8b      	ldr	r3, [pc, #556]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001484:	4a8a      	ldr	r2, [pc, #552]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 8108 	beq.w	80016a6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	2b02      	cmp	r3, #2
 800149c:	f040 80d0 	bne.w	8001640 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014a0:	4b83      	ldr	r3, [pc, #524]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d130      	bne.n	8001516 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	3b01      	subs	r3, #1
 80014c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d127      	bne.n	8001516 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d11f      	bne.n	8001516 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014e0:	2a07      	cmp	r2, #7
 80014e2:	bf14      	ite	ne
 80014e4:	2201      	movne	r2, #1
 80014e6:	2200      	moveq	r2, #0
 80014e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d113      	bne.n	8001516 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f8:	085b      	lsrs	r3, r3, #1
 80014fa:	3b01      	subs	r3, #1
 80014fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d109      	bne.n	8001516 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	3b01      	subs	r3, #1
 8001510:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d06e      	beq.n	80015f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b0c      	cmp	r3, #12
 800151a:	d069      	beq.n	80015f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800151c:	4b64      	ldr	r3, [pc, #400]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d105      	bne.n	8001534 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001528:	4b61      	ldr	r3, [pc, #388]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0b7      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001538:	4b5d      	ldr	r3, [pc, #372]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a5c      	ldr	r2, [pc, #368]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 800153e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001542:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001544:	f7fe ff04 	bl	8000350 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154c:	f7fe ff00 	bl	8000350 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e0a4      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800155e:	4b54      	ldr	r3, [pc, #336]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800156a:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	4b51      	ldr	r3, [pc, #324]	; (80016b4 <HAL_RCC_OscConfig+0x7c8>)
 8001570:	4013      	ands	r3, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800157a:	3a01      	subs	r2, #1
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	4311      	orrs	r1, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001584:	0212      	lsls	r2, r2, #8
 8001586:	4311      	orrs	r1, r2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800158c:	0852      	lsrs	r2, r2, #1
 800158e:	3a01      	subs	r2, #1
 8001590:	0552      	lsls	r2, r2, #21
 8001592:	4311      	orrs	r1, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001598:	0852      	lsrs	r2, r2, #1
 800159a:	3a01      	subs	r2, #1
 800159c:	0652      	lsls	r2, r2, #25
 800159e:	4311      	orrs	r1, r2
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015a4:	0912      	lsrs	r2, r2, #4
 80015a6:	0452      	lsls	r2, r2, #17
 80015a8:	430a      	orrs	r2, r1
 80015aa:	4941      	ldr	r1, [pc, #260]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015b0:	4b3f      	ldr	r3, [pc, #252]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a3e      	ldr	r2, [pc, #248]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 80015b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015bc:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4a3b      	ldr	r2, [pc, #236]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 80015c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015c8:	f7fe fec2 	bl	8000350 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d0:	f7fe febe 	bl	8000350 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e062      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ee:	e05a      	b.n	80016a6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e059      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f4:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d152      	bne.n	80016a6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001616:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001618:	f7fe fe9a 	bl	8000350 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001620:	f7fe fe96 	bl	8000350 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e03a      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x734>
 800163e:	e032      	b.n	80016a6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d02d      	beq.n	80016a2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 800164c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001650:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001664:	f023 0303 	bic.w	r3, r3, #3
 8001668:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001670:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001678:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7fe fe69 	bl	8000350 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001682:	f7fe fe65 	bl	8000350 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e009      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_RCC_OscConfig+0x7c4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f0      	bne.n	8001682 <HAL_RCC_OscConfig+0x796>
 80016a0:	e001      	b.n	80016a6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	f99d808c 	.word	0xf99d808c

080016b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0c8      	b.n	800185e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016cc:	4b66      	ldr	r3, [pc, #408]	; (8001868 <HAL_RCC_ClockConfig+0x1b0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d910      	bls.n	80016fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b63      	ldr	r3, [pc, #396]	; (8001868 <HAL_RCC_ClockConfig+0x1b0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 0207 	bic.w	r2, r3, #7
 80016e2:	4961      	ldr	r1, [pc, #388]	; (8001868 <HAL_RCC_ClockConfig+0x1b0>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <HAL_RCC_ClockConfig+0x1b0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b0      	b.n	800185e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d04c      	beq.n	80017a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d107      	bne.n	8001720 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001710:	4b56      	ldr	r3, [pc, #344]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d121      	bne.n	8001760 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e09e      	b.n	800185e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d107      	bne.n	8001738 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d115      	bne.n	8001760 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e092      	b.n	800185e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001740:	4b4a      	ldr	r3, [pc, #296]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e086      	b.n	800185e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001750:	4b46      	ldr	r3, [pc, #280]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e07e      	b.n	800185e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001760:	4b42      	ldr	r3, [pc, #264]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f023 0203 	bic.w	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	493f      	ldr	r1, [pc, #252]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001772:	f7fe fded 	bl	8000350 <HAL_GetTick>
 8001776:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001778:	e00a      	b.n	8001790 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177a:	f7fe fde9 	bl	8000350 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e066      	b.n	800185e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001790:	4b36      	ldr	r3, [pc, #216]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 020c 	and.w	r2, r3, #12
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	429a      	cmp	r2, r3
 80017a0:	d1eb      	bne.n	800177a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d008      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ae:	4b2f      	ldr	r3, [pc, #188]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	492c      	ldr	r1, [pc, #176]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <HAL_RCC_ClockConfig+0x1b0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d210      	bcs.n	80017f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_RCC_ClockConfig+0x1b0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 0207 	bic.w	r2, r3, #7
 80017d6:	4924      	ldr	r1, [pc, #144]	; (8001868 <HAL_RCC_ClockConfig+0x1b0>)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_RCC_ClockConfig+0x1b0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e036      	b.n	800185e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4918      	ldr	r1, [pc, #96]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4910      	ldr	r1, [pc, #64]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800182e:	f000 f825 	bl	800187c <HAL_RCC_GetSysClockFreq>
 8001832:	4601      	mov	r1, r0
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_RCC_ClockConfig+0x1b4>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	5cd3      	ldrb	r3, [r2, r3]
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	fa21 f303 	lsr.w	r3, r1, r3
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fd2c 	bl	80002b0 <HAL_InitTick>
 8001858:	4603      	mov	r3, r0
 800185a:	72fb      	strb	r3, [r7, #11]

  return status;
 800185c:	7afb      	ldrb	r3, [r7, #11]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40022000 	.word	0x40022000
 800186c:	40021000 	.word	0x40021000
 8001870:	080051c4 	.word	0x080051c4
 8001874:	20000008 	.word	0x20000008
 8001878:	20000000 	.word	0x20000000

0800187c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800188a:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x34>
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d121      	bne.n	80018ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d11e      	bne.n	80018ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018b0:	4b33      	ldr	r3, [pc, #204]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 80018be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e005      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018cc:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018d8:	4a2a      	ldr	r2, [pc, #168]	; (8001984 <HAL_RCC_GetSysClockFreq+0x108>)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10d      	bne.n	8001904 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d102      	bne.n	80018fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_RCC_GetSysClockFreq+0x10c>)
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	e004      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_RCC_GetSysClockFreq+0x110>)
 8001902:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d133      	bne.n	8001972 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0xa4>
 800191a:	2b03      	cmp	r3, #3
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0xaa>
 800191e:	e005      	b.n	800192c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001922:	617b      	str	r3, [r7, #20]
      break;
 8001924:	e005      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_RCC_GetSysClockFreq+0x110>)
 8001928:	617b      	str	r3, [r7, #20]
      break;
 800192a:	e002      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	617b      	str	r3, [r7, #20]
      break;
 8001930:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	3301      	adds	r3, #1
 800193e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	fb02 f203 	mul.w	r2, r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_GetSysClockFreq+0x104>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0e5b      	lsrs	r3, r3, #25
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	3301      	adds	r3, #1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001972:	69bb      	ldr	r3, [r7, #24]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3724      	adds	r7, #36	; 0x24
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000
 8001984:	080051d4 	.word	0x080051d4
 8001988:	00f42400 	.word	0x00f42400
 800198c:	007a1200 	.word	0x007a1200

08001990 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019a8:	f7ff fa3c 	bl	8000e24 <HAL_PWREx_GetVoltageRange>
 80019ac:	6178      	str	r0, [r7, #20]
 80019ae:	e014      	b.n	80019da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6593      	str	r3, [r2, #88]	; 0x58
 80019bc:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019c8:	f7ff fa2c 	bl	8000e24 <HAL_PWREx_GetVoltageRange>
 80019cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019ce:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e0:	d10b      	bne.n	80019fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b80      	cmp	r3, #128	; 0x80
 80019e6:	d919      	bls.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2ba0      	cmp	r3, #160	; 0xa0
 80019ec:	d902      	bls.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019ee:	2302      	movs	r3, #2
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	e013      	b.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019f4:	2301      	movs	r3, #1
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	e010      	b.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b80      	cmp	r3, #128	; 0x80
 80019fe:	d902      	bls.n	8001a06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a00:	2303      	movs	r3, #3
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	e00a      	b.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b80      	cmp	r3, #128	; 0x80
 8001a0a:	d102      	bne.n	8001a12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	e004      	b.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b70      	cmp	r3, #112	; 0x70
 8001a16:	d101      	bne.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a18:	2301      	movs	r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 0207 	bic.w	r2, r3, #7
 8001a24:	4909      	ldr	r1, [pc, #36]	; (8001a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d001      	beq.n	8001a3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40022000 	.word	0x40022000

08001a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d03f      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a74:	d01c      	beq.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a7a:	d802      	bhi.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00e      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001a80:	e01f      	b.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001a82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a86:	d003      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001a88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001a8c:	d01c      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001a8e:	e018      	b.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001a90:	4b85      	ldr	r3, [pc, #532]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4a84      	ldr	r2, [pc, #528]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a9c:	e015      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fab9 	bl	800201c <RCCEx_PLLSAI1_Config>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001aae:	e00c      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3320      	adds	r3, #32
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fba0 	bl	80021fc <RCCEx_PLLSAI2_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ac0:	e003      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ac6:	e000      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001aca:	7cfb      	ldrb	r3, [r7, #19]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10b      	bne.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ad0:	4b75      	ldr	r3, [pc, #468]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ade:	4972      	ldr	r1, [pc, #456]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ae6:	e001      	b.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ae8:	7cfb      	ldrb	r3, [r7, #19]
 8001aea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d03f      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b00:	d01c      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001b02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b06:	d802      	bhi.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00e      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001b0c:	e01f      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b12:	d003      	beq.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001b14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001b18:	d01c      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001b1a:	e018      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b1c:	4b62      	ldr	r3, [pc, #392]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4a61      	ldr	r2, [pc, #388]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b28:	e015      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fa73 	bl	800201c <RCCEx_PLLSAI1_Config>
 8001b36:	4603      	mov	r3, r0
 8001b38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b3a:	e00c      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3320      	adds	r3, #32
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fb5a 	bl	80021fc <RCCEx_PLLSAI2_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b4c:	e003      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	74fb      	strb	r3, [r7, #19]
      break;
 8001b52:	e000      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b56:	7cfb      	ldrb	r3, [r7, #19]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10b      	bne.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b5c:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b6a:	494f      	ldr	r1, [pc, #316]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001b72:	e001      	b.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b74:	7cfb      	ldrb	r3, [r7, #19]
 8001b76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80a0 	beq.w	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00d      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	4a40      	ldr	r2, [pc, #256]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6593      	str	r3, [r2, #88]	; 0x58
 8001bac:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a3a      	ldr	r2, [pc, #232]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bc8:	f7fe fbc2 	bl	8000350 <HAL_GetTick>
 8001bcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001bce:	e009      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd0:	f7fe fbbe 	bl	8000350 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d902      	bls.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	74fb      	strb	r3, [r7, #19]
        break;
 8001be2:	e005      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001be4:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ef      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001bf0:	7cfb      	ldrb	r3, [r7, #19]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d15c      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01f      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d019      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d016      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7fe fb7d 	bl	8000350 <HAL_GetTick>
 8001c56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c58:	e00b      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe fb79 	bl	8000350 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d902      	bls.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	74fb      	strb	r3, [r7, #19]
            break;
 8001c70:	e006      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ec      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001c80:	7cfb      	ldrb	r3, [r7, #19]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c96:	4904      	ldr	r1, [pc, #16]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c9e:	e009      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ca0:	7cfb      	ldrb	r3, [r7, #19]
 8001ca2:	74bb      	strb	r3, [r7, #18]
 8001ca4:	e006      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cb0:	7cfb      	ldrb	r3, [r7, #19]
 8001cb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cb4:	7c7b      	ldrb	r3, [r7, #17]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d105      	bne.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cba:	4b9e      	ldr	r3, [pc, #632]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	4a9d      	ldr	r2, [pc, #628]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cd2:	4b98      	ldr	r3, [pc, #608]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd8:	f023 0203 	bic.w	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce0:	4994      	ldr	r1, [pc, #592]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00a      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cf4:	4b8f      	ldr	r3, [pc, #572]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	f023 020c 	bic.w	r2, r3, #12
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d02:	498c      	ldr	r1, [pc, #560]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d16:	4b87      	ldr	r3, [pc, #540]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	4983      	ldr	r1, [pc, #524]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00a      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d38:	4b7e      	ldr	r3, [pc, #504]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	497b      	ldr	r1, [pc, #492]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d5a:	4b76      	ldr	r3, [pc, #472]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d68:	4972      	ldr	r1, [pc, #456]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d7c:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	496a      	ldr	r1, [pc, #424]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d9e:	4b65      	ldr	r3, [pc, #404]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	4961      	ldr	r1, [pc, #388]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001dc0:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	4959      	ldr	r1, [pc, #356]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001de2:	4b54      	ldr	r3, [pc, #336]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df0:	4950      	ldr	r1, [pc, #320]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e04:	4b4b      	ldr	r3, [pc, #300]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	4948      	ldr	r1, [pc, #288]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e26:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	493f      	ldr	r1, [pc, #252]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d028      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e48:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e56:	4937      	ldr	r1, [pc, #220]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e66:	d106      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e68:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a31      	ldr	r2, [pc, #196]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e72:	60d3      	str	r3, [r2, #12]
 8001e74:	e011      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e7e:	d10c      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3304      	adds	r3, #4
 8001e84:	2101      	movs	r1, #1
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f8c8 	bl	800201c <RCCEx_PLLSAI1_Config>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001e90:	7cfb      	ldrb	r3, [r7, #19]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001e96:	7cfb      	ldrb	r3, [r7, #19]
 8001e98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d028      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb4:	491f      	ldr	r1, [pc, #124]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ec4:	d106      	bne.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ed0:	60d3      	str	r3, [r2, #12]
 8001ed2:	e011      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 f899 	bl	800201c <RCCEx_PLLSAI1_Config>
 8001eea:	4603      	mov	r3, r0
 8001eec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001eee:	7cfb      	ldrb	r3, [r7, #19]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001ef4:	7cfb      	ldrb	r3, [r7, #19]
 8001ef6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d02b      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f22:	d109      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4a02      	ldr	r2, [pc, #8]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f2e:	60d3      	str	r3, [r2, #12]
 8001f30:	e014      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2101      	movs	r1, #1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 f867 	bl	800201c <RCCEx_PLLSAI1_Config>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f52:	7cfb      	ldrb	r3, [r7, #19]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d02f      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f68:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f76:	4928      	ldr	r1, [pc, #160]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f86:	d10d      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f844 	bl	800201c <RCCEx_PLLSAI1_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f98:	7cfb      	ldrb	r3, [r7, #19]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d014      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001f9e:	7cfb      	ldrb	r3, [r7, #19]
 8001fa0:	74bb      	strb	r3, [r7, #18]
 8001fa2:	e011      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3320      	adds	r3, #32
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 f921 	bl	80021fc <RCCEx_PLLSAI2_Config>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fe2:	490d      	ldr	r1, [pc, #52]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002006:	4904      	ldr	r1, [pc, #16]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002008:	4313      	orrs	r3, r2
 800200a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800200e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000

0800201c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d018      	beq.n	8002068 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002036:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f003 0203 	and.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d10d      	bne.n	8002062 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
       ||
 800204a:	2b00      	cmp	r3, #0
 800204c:	d009      	beq.n	8002062 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800204e:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
       ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d044      	beq.n	80020ec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e041      	b.n	80020ec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d00c      	beq.n	800208a <RCCEx_PLLSAI1_Config+0x6e>
 8002070:	2b03      	cmp	r3, #3
 8002072:	d013      	beq.n	800209c <RCCEx_PLLSAI1_Config+0x80>
 8002074:	2b01      	cmp	r3, #1
 8002076:	d120      	bne.n	80020ba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002078:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d11d      	bne.n	80020c0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002088:	e01a      	b.n	80020c0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002092:	2b00      	cmp	r3, #0
 8002094:	d116      	bne.n	80020c4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800209a:	e013      	b.n	80020c4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800209c:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10f      	bne.n	80020c8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80020b8:	e006      	b.n	80020c8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
      break;
 80020be:	e004      	b.n	80020ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80020c0:	bf00      	nop
 80020c2:	e002      	b.n	80020ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80020c4:	bf00      	nop
 80020c6:	e000      	b.n	80020ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 80020c8:	bf00      	nop
    }

    if(status == HAL_OK)
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10d      	bne.n	80020ec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80020d0:	4b49      	ldr	r3, [pc, #292]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6819      	ldr	r1, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	430b      	orrs	r3, r1
 80020e6:	4944      	ldr	r1, [pc, #272]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d17d      	bne.n	80021ee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80020f2:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a40      	ldr	r2, [pc, #256]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020fe:	f7fe f927 	bl	8000350 <HAL_GetTick>
 8002102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002104:	e009      	b.n	800211a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002106:	f7fe f923 	bl	8000350 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d902      	bls.n	800211a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	73fb      	strb	r3, [r7, #15]
        break;
 8002118:	e005      	b.n	8002126 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800211a:	4b37      	ldr	r3, [pc, #220]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ef      	bne.n	8002106 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d160      	bne.n	80021ee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d111      	bne.n	8002156 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002132:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800213a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6892      	ldr	r2, [r2, #8]
 8002142:	0211      	lsls	r1, r2, #8
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68d2      	ldr	r2, [r2, #12]
 8002148:	0912      	lsrs	r2, r2, #4
 800214a:	0452      	lsls	r2, r2, #17
 800214c:	430a      	orrs	r2, r1
 800214e:	492a      	ldr	r1, [pc, #168]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002150:	4313      	orrs	r3, r2
 8002152:	610b      	str	r3, [r1, #16]
 8002154:	e027      	b.n	80021a6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d112      	bne.n	8002182 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800215c:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002164:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6892      	ldr	r2, [r2, #8]
 800216c:	0211      	lsls	r1, r2, #8
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6912      	ldr	r2, [r2, #16]
 8002172:	0852      	lsrs	r2, r2, #1
 8002174:	3a01      	subs	r2, #1
 8002176:	0552      	lsls	r2, r2, #21
 8002178:	430a      	orrs	r2, r1
 800217a:	491f      	ldr	r1, [pc, #124]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	610b      	str	r3, [r1, #16]
 8002180:	e011      	b.n	80021a6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800218a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6892      	ldr	r2, [r2, #8]
 8002192:	0211      	lsls	r1, r2, #8
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6952      	ldr	r2, [r2, #20]
 8002198:	0852      	lsrs	r2, r2, #1
 800219a:	3a01      	subs	r2, #1
 800219c:	0652      	lsls	r2, r2, #25
 800219e:	430a      	orrs	r2, r1
 80021a0:	4915      	ldr	r1, [pc, #84]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b2:	f7fe f8cd 	bl	8000350 <HAL_GetTick>
 80021b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021b8:	e009      	b.n	80021ce <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021ba:	f7fe f8c9 	bl	8000350 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d902      	bls.n	80021ce <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	73fb      	strb	r3, [r7, #15]
          break;
 80021cc:	e005      	b.n	80021da <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0ef      	beq.n	80021ba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4903      	ldr	r1, [pc, #12]	; (80021f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000

080021fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800220a:	4b68      	ldr	r3, [pc, #416]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d018      	beq.n	8002248 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002216:	4b65      	ldr	r3, [pc, #404]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0203 	and.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d10d      	bne.n	8002242 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
       ||
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800222e:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
       ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d044      	beq.n	80022cc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	e041      	b.n	80022cc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d00c      	beq.n	800226a <RCCEx_PLLSAI2_Config+0x6e>
 8002250:	2b03      	cmp	r3, #3
 8002252:	d013      	beq.n	800227c <RCCEx_PLLSAI2_Config+0x80>
 8002254:	2b01      	cmp	r3, #1
 8002256:	d120      	bne.n	800229a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002258:	4b54      	ldr	r3, [pc, #336]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d11d      	bne.n	80022a0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002268:	e01a      	b.n	80022a0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800226a:	4b50      	ldr	r3, [pc, #320]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800227a:	e013      	b.n	80022a4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800227c:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10f      	bne.n	80022a8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002288:	4b48      	ldr	r3, [pc, #288]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002298:	e006      	b.n	80022a8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
      break;
 800229e:	e004      	b.n	80022aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80022a0:	bf00      	nop
 80022a2:	e002      	b.n	80022aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80022a4:	bf00      	nop
 80022a6:	e000      	b.n	80022aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80022a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10d      	bne.n	80022cc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022b0:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	430b      	orrs	r3, r1
 80022c6:	4939      	ldr	r1, [pc, #228]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d167      	bne.n	80023a2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80022d2:	4b36      	ldr	r3, [pc, #216]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a35      	ldr	r2, [pc, #212]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80022d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022de:	f7fe f837 	bl	8000350 <HAL_GetTick>
 80022e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80022e4:	e009      	b.n	80022fa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80022e6:	f7fe f833 	bl	8000350 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d902      	bls.n	80022fa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	73fb      	strb	r3, [r7, #15]
        break;
 80022f8:	e005      	b.n	8002306 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80022fa:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ef      	bne.n	80022e6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d14a      	bne.n	80023a2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d111      	bne.n	8002336 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800231a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6892      	ldr	r2, [r2, #8]
 8002322:	0211      	lsls	r1, r2, #8
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68d2      	ldr	r2, [r2, #12]
 8002328:	0912      	lsrs	r2, r2, #4
 800232a:	0452      	lsls	r2, r2, #17
 800232c:	430a      	orrs	r2, r1
 800232e:	491f      	ldr	r1, [pc, #124]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002330:	4313      	orrs	r3, r2
 8002332:	614b      	str	r3, [r1, #20]
 8002334:	e011      	b.n	800235a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800233e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6892      	ldr	r2, [r2, #8]
 8002346:	0211      	lsls	r1, r2, #8
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6912      	ldr	r2, [r2, #16]
 800234c:	0852      	lsrs	r2, r2, #1
 800234e:	3a01      	subs	r2, #1
 8002350:	0652      	lsls	r2, r2, #25
 8002352:	430a      	orrs	r2, r1
 8002354:	4915      	ldr	r1, [pc, #84]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002356:	4313      	orrs	r3, r2
 8002358:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a13      	ldr	r2, [pc, #76]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002366:	f7fd fff3 	bl	8000350 <HAL_GetTick>
 800236a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800236c:	e009      	b.n	8002382 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800236e:	f7fd ffef 	bl	8000350 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d902      	bls.n	8002382 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	73fb      	strb	r3, [r7, #15]
          break;
 8002380:	e005      	b.n	800238e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ef      	beq.n	800236e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d106      	bne.n	80023a2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	4903      	ldr	r1, [pc, #12]	; (80023ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000

080023b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e095      	b.n	80024ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d108      	bne.n	80023dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023d2:	d009      	beq.n	80023e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
 80023da:	e005      	b.n	80023e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f002 f930 	bl	8004668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002428:	d902      	bls.n	8002430 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	e002      	b.n	8002436 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002434:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800243e:	d007      	beq.n	8002450 <HAL_SPI_Init+0xa0>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002448:	d002      	beq.n	8002450 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	ea42 0103 	orr.w	r1, r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	0c1b      	lsrs	r3, r3, #16
 80024ac:	f003 0204 	and.w	r2, r3, #4
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024cc:	ea42 0103 	orr.w	r1, r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b088      	sub	sp, #32
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	4613      	mov	r3, r2
 8002504:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_SPI_Transmit+0x22>
 8002514:	2302      	movs	r3, #2
 8002516:	e158      	b.n	80027ca <HAL_SPI_Transmit+0x2d4>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002520:	f7fd ff16 	bl	8000350 <HAL_GetTick>
 8002524:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d002      	beq.n	800253c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002536:	2302      	movs	r3, #2
 8002538:	77fb      	strb	r3, [r7, #31]
    goto error;
 800253a:	e13d      	b.n	80027b8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_SPI_Transmit+0x52>
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800254c:	e134      	b.n	80027b8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2203      	movs	r2, #3
 8002552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	88fa      	ldrh	r2, [r7, #6]
 8002566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	88fa      	ldrh	r2, [r7, #6]
 800256c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002598:	d10f      	bne.n	80025ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c4:	2b40      	cmp	r3, #64	; 0x40
 80025c6:	d007      	beq.n	80025d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025e0:	d94b      	bls.n	800267a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_SPI_Transmit+0xfa>
 80025ea:	8afb      	ldrh	r3, [r7, #22]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d13e      	bne.n	800266e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	1c9a      	adds	r2, r3, #2
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002614:	e02b      	b.n	800266e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b02      	cmp	r3, #2
 8002622:	d112      	bne.n	800264a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	881a      	ldrh	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	1c9a      	adds	r2, r3, #2
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002648:	e011      	b.n	800266e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800264a:	f7fd fe81 	bl	8000350 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d803      	bhi.n	8002662 <HAL_SPI_Transmit+0x16c>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002660:	d102      	bne.n	8002668 <HAL_SPI_Transmit+0x172>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d102      	bne.n	800266e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800266c:	e0a4      	b.n	80027b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ce      	bne.n	8002616 <HAL_SPI_Transmit+0x120>
 8002678:	e07c      	b.n	8002774 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_SPI_Transmit+0x192>
 8002682:	8afb      	ldrh	r3, [r7, #22]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d170      	bne.n	800276a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d912      	bls.n	80026b8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	881a      	ldrh	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	1c9a      	adds	r2, r3, #2
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b02      	subs	r3, #2
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026b6:	e058      	b.n	800276a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	330c      	adds	r3, #12
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80026de:	e044      	b.n	800276a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d12b      	bne.n	8002746 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d912      	bls.n	800271e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	881a      	ldrh	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	1c9a      	adds	r2, r3, #2
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b02      	subs	r3, #2
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800271c:	e025      	b.n	800276a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	330c      	adds	r3, #12
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002744:	e011      	b.n	800276a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002746:	f7fd fe03 	bl	8000350 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d803      	bhi.n	800275e <HAL_SPI_Transmit+0x268>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800275c:	d102      	bne.n	8002764 <HAL_SPI_Transmit+0x26e>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002768:	e026      	b.n	80027b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1b5      	bne.n	80026e0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	6839      	ldr	r1, [r7, #0]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fcdb 	bl	8003134 <SPI_EndRxTxTransaction>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	77fb      	strb	r3, [r7, #31]
 80027b4:	e000      	b.n	80027b8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80027b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80027c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b088      	sub	sp, #32
 80027d6:	af02      	add	r7, sp, #8
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ee:	d112      	bne.n	8002816 <HAL_SPI_Receive+0x44>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10e      	bne.n	8002816 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2204      	movs	r2, #4
 80027fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4613      	mov	r3, r2
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f910 	bl	8002a32 <HAL_SPI_TransmitReceive>
 8002812:	4603      	mov	r3, r0
 8002814:	e109      	b.n	8002a2a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_SPI_Receive+0x52>
 8002820:	2302      	movs	r3, #2
 8002822:	e102      	b.n	8002a2a <HAL_SPI_Receive+0x258>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800282c:	f7fd fd90 	bl	8000350 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d002      	beq.n	8002844 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800283e:	2302      	movs	r3, #2
 8002840:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002842:	e0e9      	b.n	8002a18 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_SPI_Receive+0x7e>
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002854:	e0e0      	b.n	8002a18 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2204      	movs	r2, #4
 800285a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	88fa      	ldrh	r2, [r7, #6]
 800286e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	88fa      	ldrh	r2, [r7, #6]
 8002876:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028a0:	d908      	bls.n	80028b4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	e007      	b.n	80028c4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028cc:	d10f      	bne.n	80028ee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d007      	beq.n	800290c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800290a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002914:	d867      	bhi.n	80029e6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002916:	e030      	b.n	800297a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d117      	bne.n	8002956 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f103 020c 	add.w	r2, r3, #12
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	7812      	ldrb	r2, [r2, #0]
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002954:	e011      	b.n	800297a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002956:	f7fd fcfb 	bl	8000350 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d803      	bhi.n	800296e <HAL_SPI_Receive+0x19c>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800296c:	d102      	bne.n	8002974 <HAL_SPI_Receive+0x1a2>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d102      	bne.n	800297a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002978:	e04e      	b.n	8002a18 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1c8      	bne.n	8002918 <HAL_SPI_Receive+0x146>
 8002986:	e034      	b.n	80029f2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b01      	cmp	r3, #1
 8002994:	d115      	bne.n	80029c2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	b292      	uxth	r2, r2
 80029a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	1c9a      	adds	r2, r3, #2
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80029c0:	e011      	b.n	80029e6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029c2:	f7fd fcc5 	bl	8000350 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d803      	bhi.n	80029da <HAL_SPI_Receive+0x208>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029d8:	d102      	bne.n	80029e0 <HAL_SPI_Receive+0x20e>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80029e4:	e018      	b.n	8002a18 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1ca      	bne.n	8002988 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	6839      	ldr	r1, [r7, #0]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fb44 	bl	8003084 <SPI_EndRxTransaction>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	75fb      	strb	r3, [r7, #23]
 8002a14:	e000      	b.n	8002a18 <HAL_SPI_Receive+0x246>
  }

error :
 8002a16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b08a      	sub	sp, #40	; 0x28
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a40:	2301      	movs	r3, #1
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_SPI_TransmitReceive+0x26>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e1fb      	b.n	8002e50 <HAL_SPI_TransmitReceive+0x41e>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a60:	f7fd fc76 	bl	8000350 <HAL_GetTick>
 8002a64:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a6c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002a74:	887b      	ldrh	r3, [r7, #2]
 8002a76:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a7c:	7efb      	ldrb	r3, [r7, #27]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d00e      	beq.n	8002aa0 <HAL_SPI_TransmitReceive+0x6e>
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a88:	d106      	bne.n	8002a98 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d102      	bne.n	8002a98 <HAL_SPI_TransmitReceive+0x66>
 8002a92:	7efb      	ldrb	r3, [r7, #27]
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d003      	beq.n	8002aa0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a9e:	e1cd      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_SPI_TransmitReceive+0x80>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_SPI_TransmitReceive+0x80>
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d103      	bne.n	8002aba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ab8:	e1c0      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d003      	beq.n	8002ace <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2205      	movs	r2, #5
 8002aca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	887a      	ldrh	r2, [r7, #2]
 8002ade:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	887a      	ldrh	r2, [r7, #2]
 8002ae6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	887a      	ldrh	r2, [r7, #2]
 8002afa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b10:	d802      	bhi.n	8002b18 <HAL_SPI_TransmitReceive+0xe6>
 8002b12:	8a3b      	ldrh	r3, [r7, #16]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d908      	bls.n	8002b2a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	e007      	b.n	8002b3a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b38:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d007      	beq.n	8002b58 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b60:	d97c      	bls.n	8002c5c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_SPI_TransmitReceive+0x13e>
 8002b6a:	8a7b      	ldrh	r3, [r7, #18]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d169      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	881a      	ldrh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b80:	1c9a      	adds	r2, r3, #2
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b94:	e056      	b.n	8002c44 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d11b      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x1aa>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d016      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x1aa>
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d113      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	881a      	ldrh	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	1c9a      	adds	r2, r3, #2
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d11c      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x1f2>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	b292      	uxth	r2, r2
 8002c02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	1c9a      	adds	r2, r3, #2
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c20:	2301      	movs	r3, #1
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c24:	f7fd fb94 	bl	8000350 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d807      	bhi.n	8002c44 <HAL_SPI_TransmitReceive+0x212>
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c3a:	d003      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c42:	e0fb      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1a3      	bne.n	8002b96 <HAL_SPI_TransmitReceive+0x164>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d19d      	bne.n	8002b96 <HAL_SPI_TransmitReceive+0x164>
 8002c5a:	e0df      	b.n	8002e1c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x23a>
 8002c64:	8a7b      	ldrh	r3, [r7, #18]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	f040 80cb 	bne.w	8002e02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d912      	bls.n	8002c9c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	1c9a      	adds	r2, r3, #2
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b02      	subs	r3, #2
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c9a:	e0b2      	b.n	8002e02 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	7812      	ldrb	r2, [r2, #0]
 8002ca8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cc2:	e09e      	b.n	8002e02 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d134      	bne.n	8002d3c <HAL_SPI_TransmitReceive+0x30a>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d02f      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0x30a>
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d12c      	bne.n	8002d3c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d912      	bls.n	8002d12 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	881a      	ldrh	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	1c9a      	adds	r2, r3, #2
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b02      	subs	r3, #2
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d10:	e012      	b.n	8002d38 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d148      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x3aa>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d042      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d923      	bls.n	8002daa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	1c9a      	adds	r2, r3, #2
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b02      	subs	r3, #2
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d81f      	bhi.n	8002dd8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	e016      	b.n	8002dd8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f103 020c 	add.w	r2, r3, #12
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ddc:	f7fd fab8 	bl	8000350 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d803      	bhi.n	8002df4 <HAL_SPI_TransmitReceive+0x3c2>
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df2:	d102      	bne.n	8002dfa <HAL_SPI_TransmitReceive+0x3c8>
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002e00:	e01c      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f47f af5b 	bne.w	8002cc4 <HAL_SPI_TransmitReceive+0x292>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f47f af54 	bne.w	8002cc4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f987 	bl	8003134 <SPI_EndRxTxTransaction>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d006      	beq.n	8002e3a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	661a      	str	r2, [r3, #96]	; 0x60
 8002e38:	e000      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002e3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3728      	adds	r7, #40	; 0x28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e68:	f7fd fa72 	bl	8000350 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4413      	add	r3, r2
 8002e76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e78:	f7fd fa6a 	bl	8000350 <HAL_GetTick>
 8002e7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e7e:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	015b      	lsls	r3, r3, #5
 8002e84:	0d1b      	lsrs	r3, r3, #20
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e8e:	e054      	b.n	8002f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e96:	d050      	beq.n	8002f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e98:	f7fd fa5a 	bl	8000350 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d902      	bls.n	8002eae <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d13d      	bne.n	8002f2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ebc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec6:	d111      	bne.n	8002eec <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ed0:	d004      	beq.n	8002edc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eda:	d107      	bne.n	8002eec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef4:	d10f      	bne.n	8002f16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e017      	b.n	8002f5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	bf0c      	ite	eq
 8002f4a:	2301      	moveq	r3, #1
 8002f4c:	2300      	movne	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d19b      	bne.n	8002e90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000008 	.word	0x20000008

08002f68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f76:	f7fd f9eb 	bl	8000350 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f86:	f7fd f9e3 	bl	8000350 <HAL_GetTick>
 8002f8a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f8c:	4b3c      	ldr	r3, [pc, #240]	; (8003080 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00da      	lsls	r2, r3, #3
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	0d1b      	lsrs	r3, r3, #20
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002fa4:	e05f      	b.n	8003066 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002fac:	d106      	bne.n	8002fbc <SPI_WaitFifoStateUntilTimeout+0x54>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d103      	bne.n	8002fbc <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc2:	d050      	beq.n	8003066 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fc4:	f7fd f9c4 	bl	8000350 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d902      	bls.n	8002fda <SPI_WaitFifoStateUntilTimeout+0x72>
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d13d      	bne.n	8003056 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff2:	d111      	bne.n	8003018 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ffc:	d004      	beq.n	8003008 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003006:	d107      	bne.n	8003018 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003020:	d10f      	bne.n	8003042 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003040:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e010      	b.n	8003078 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	3b01      	subs	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4013      	ands	r3, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d197      	bne.n	8002fa6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000008 	.word	0x20000008

08003084 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003098:	d111      	bne.n	80030be <SPI_EndRxTransaction+0x3a>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a2:	d004      	beq.n	80030ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ac:	d107      	bne.n	80030be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030bc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2200      	movs	r2, #0
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f7ff fec5 	bl	8002e58 <SPI_WaitFlagStateUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e023      	b.n	800312c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ec:	d11d      	bne.n	800312a <SPI_EndRxTransaction+0xa6>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f6:	d004      	beq.n	8003102 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003100:	d113      	bne.n	800312a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2200      	movs	r2, #0
 800310a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f7ff ff2a 	bl	8002f68 <SPI_WaitFifoStateUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311e:	f043 0220 	orr.w	r2, r3, #32
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e000      	b.n	800312c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2200      	movs	r2, #0
 8003148:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f7ff ff0b 	bl	8002f68 <SPI_WaitFifoStateUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e027      	b.n	80031b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2200      	movs	r2, #0
 8003170:	2180      	movs	r1, #128	; 0x80
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff fe70 	bl	8002e58 <SPI_WaitFlagStateUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003182:	f043 0220 	orr.w	r2, r3, #32
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e014      	b.n	80031b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2200      	movs	r2, #0
 8003196:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f7ff fee4 	bl	8002f68 <SPI_WaitFifoStateUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031aa:	f043 0220 	orr.w	r2, r3, #32
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e000      	b.n	80031b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <SPI_write_command>:

/**
 * Select the register to read or write
 *
 */
uint8_t SPI_write_command(SPI_HandleTypeDef* hspi, uint8_t reg_to_sel) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;

	// toggle CS to low
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 80031cc:	2200      	movs	r2, #0
 80031ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031d2:	4815      	ldr	r0, [pc, #84]	; (8003228 <SPI_write_command+0x68>)
 80031d4:	f7fd fb78 	bl	80008c8 <HAL_GPIO_WritePin>

	uint8_t reg = RA8875_CMDWRITE;
 80031d8:	2380      	movs	r3, #128	; 0x80
 80031da:	73bb      	strb	r3, [r7, #14]
	status  = HAL_SPI_Transmit(hspi, &reg, 1, 10);
 80031dc:	f107 010e 	add.w	r1, r7, #14
 80031e0:	230a      	movs	r3, #10
 80031e2:	2201      	movs	r2, #1
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff f986 	bl	80024f6 <HAL_SPI_Transmit>
 80031ea:	4603      	mov	r3, r0
 80031ec:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <SPI_write_command+0x38>
		return DISPLAY_ERROR;
 80031f4:	23ff      	movs	r3, #255	; 0xff
 80031f6:	e013      	b.n	8003220 <SPI_write_command+0x60>

	status = HAL_SPI_Transmit(hspi, &reg_to_sel, 1, 10);
 80031f8:	1cf9      	adds	r1, r7, #3
 80031fa:	230a      	movs	r3, #10
 80031fc:	2201      	movs	r2, #1
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff f979 	bl	80024f6 <HAL_SPI_Transmit>
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <SPI_write_command+0x52>
		return DISPLAY_ERROR;
 800320e:	23ff      	movs	r3, #255	; 0xff
 8003210:	e006      	b.n	8003220 <SPI_write_command+0x60>

	// finish transfer, toggle CS to high
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8003212:	2201      	movs	r2, #1
 8003214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003218:	4803      	ldr	r0, [pc, #12]	; (8003228 <SPI_write_command+0x68>)
 800321a:	f7fd fb55 	bl	80008c8 <HAL_GPIO_WritePin>

	return DISPLAY_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	48001000 	.word	0x48001000

0800322c <SPI_read_data>:

/**
 * Read the data from the current register
 *
 */
uint8_t SPI_read_data(SPI_HandleTypeDef* hspi, uint8_t* Rxdata) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint8_t reg = RA8875_DATAREAD;
 8003236:	2340      	movs	r3, #64	; 0x40
 8003238:	73bb      	strb	r3, [r7, #14]

	// toggle CS to low
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 800323a:	2200      	movs	r2, #0
 800323c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003240:	4814      	ldr	r0, [pc, #80]	; (8003294 <SPI_read_data+0x68>)
 8003242:	f7fd fb41 	bl	80008c8 <HAL_GPIO_WritePin>

	// write READ command to slave and read the data
	status  = HAL_SPI_Transmit(hspi, &reg, 1, 10);
 8003246:	f107 010e 	add.w	r1, r7, #14
 800324a:	230a      	movs	r3, #10
 800324c:	2201      	movs	r2, #1
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff f951 	bl	80024f6 <HAL_SPI_Transmit>
 8003254:	4603      	mov	r3, r0
 8003256:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <SPI_read_data+0x36>
		return DISPLAY_ERROR;
 800325e:	23ff      	movs	r3, #255	; 0xff
 8003260:	e013      	b.n	800328a <SPI_read_data+0x5e>

	status = HAL_SPI_Receive(hspi, Rxdata, 1, 10);
 8003262:	230a      	movs	r3, #10
 8003264:	2201      	movs	r2, #1
 8003266:	6839      	ldr	r1, [r7, #0]
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff fab2 	bl	80027d2 <HAL_SPI_Receive>
 800326e:	4603      	mov	r3, r0
 8003270:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <SPI_read_data+0x50>
		return DISPLAY_ERROR;
 8003278:	23ff      	movs	r3, #255	; 0xff
 800327a:	e006      	b.n	800328a <SPI_read_data+0x5e>

	// finish transfer, toggle CS to high
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 800327c:	2201      	movs	r2, #1
 800327e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003282:	4804      	ldr	r0, [pc, #16]	; (8003294 <SPI_read_data+0x68>)
 8003284:	f7fd fb20 	bl	80008c8 <HAL_GPIO_WritePin>

	return DISPLAY_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	48001000 	.word	0x48001000

08003298 <SPI_write_data>:

/**
 * Write the data to the current register
 *
 */
uint8_t SPI_write_data(SPI_HandleTypeDef* hspi, uint8_t* TxData) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint8_t reg = RA8875_DATAWRITE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73bb      	strb	r3, [r7, #14]

	// toggle CS to low
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 80032a6:	2200      	movs	r2, #0
 80032a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032ac:	4814      	ldr	r0, [pc, #80]	; (8003300 <SPI_write_data+0x68>)
 80032ae:	f7fd fb0b 	bl	80008c8 <HAL_GPIO_WritePin>

	// write WRITE command to slave and write the data
	status  = HAL_SPI_Transmit(hspi, &reg, 1, 10);
 80032b2:	f107 010e 	add.w	r1, r7, #14
 80032b6:	230a      	movs	r3, #10
 80032b8:	2201      	movs	r2, #1
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff f91b 	bl	80024f6 <HAL_SPI_Transmit>
 80032c0:	4603      	mov	r3, r0
 80032c2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <SPI_write_data+0x36>
		return DISPLAY_ERROR;
 80032ca:	23ff      	movs	r3, #255	; 0xff
 80032cc:	e013      	b.n	80032f6 <SPI_write_data+0x5e>

	status = HAL_SPI_Transmit(hspi, TxData, 1, 10);
 80032ce:	230a      	movs	r3, #10
 80032d0:	2201      	movs	r2, #1
 80032d2:	6839      	ldr	r1, [r7, #0]
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff f90e 	bl	80024f6 <HAL_SPI_Transmit>
 80032da:	4603      	mov	r3, r0
 80032dc:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 80032de:	7bfb      	ldrb	r3, [r7, #15]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <SPI_write_data+0x50>
		return DISPLAY_ERROR;
 80032e4:	23ff      	movs	r3, #255	; 0xff
 80032e6:	e006      	b.n	80032f6 <SPI_write_data+0x5e>

	// finish transfer, toggle CS to high
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 80032e8:	2201      	movs	r2, #1
 80032ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032ee:	4804      	ldr	r0, [pc, #16]	; (8003300 <SPI_write_data+0x68>)
 80032f0:	f7fd faea 	bl	80008c8 <HAL_GPIO_WritePin>

	return DISPLAY_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	48001000 	.word	0x48001000

08003304 <SPI_read_register>:
/**
 *  Select the register to read from and transmit the data using TxData
 *  Rxdata will be the returned data
 *
 */
uint8_t SPI_read_register(SPI_HandleTypeDef* hspi, uint8_t reg_to_sel, uint8_t* Rxdata) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	460b      	mov	r3, r1
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	72fb      	strb	r3, [r7, #11]
	uint8_t ret;
	// issue a read coomand and read data
	ret = SPI_write_command(hspi, reg_to_sel);
 8003312:	7afb      	ldrb	r3, [r7, #11]
 8003314:	4619      	mov	r1, r3
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f7ff ff52 	bl	80031c0 <SPI_write_command>
 800331c:	4603      	mov	r3, r0
 800331e:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <SPI_read_register+0x26>
		return DISPLAY_ERROR;
 8003326:	23ff      	movs	r3, #255	; 0xff
 8003328:	e00b      	b.n	8003342 <SPI_read_register+0x3e>

	ret = SPI_read_data(hspi, Rxdata);
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff ff7d 	bl	800322c <SPI_read_data>
 8003332:	4603      	mov	r3, r0
 8003334:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <SPI_read_register+0x3c>
		return DISPLAY_ERROR;
 800333c:	23ff      	movs	r3, #255	; 0xff
 800333e:	e000      	b.n	8003342 <SPI_read_register+0x3e>

	return DISPLAY_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <SPI_write_register>:

/**
 *  Select the register to write to and transmit the data using TxData
 *
 */
uint8_t SPI_write_register(SPI_HandleTypeDef* hspi, uint8_t reg_to_sel, uint8_t* TxData) {
 800334a:	b580      	push	{r7, lr}
 800334c:	b086      	sub	sp, #24
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	460b      	mov	r3, r1
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	72fb      	strb	r3, [r7, #11]
	uint8_t ret;
	ret = SPI_write_command(hspi, reg_to_sel);
 8003358:	7afb      	ldrb	r3, [r7, #11]
 800335a:	4619      	mov	r1, r3
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7ff ff2f 	bl	80031c0 <SPI_write_command>
 8003362:	4603      	mov	r3, r0
 8003364:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 8003366:	7dfb      	ldrb	r3, [r7, #23]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <SPI_write_register+0x26>
		return DISPLAY_ERROR;
 800336c:	23ff      	movs	r3, #255	; 0xff
 800336e:	e00b      	b.n	8003388 <SPI_write_register+0x3e>

	ret = SPI_write_data(hspi, TxData);
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff ff90 	bl	8003298 <SPI_write_data>
 8003378:	4603      	mov	r3, r0
 800337a:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <SPI_write_register+0x3c>
		return DISPLAY_ERROR;
 8003382:	23ff      	movs	r3, #255	; 0xff
 8003384:	e000      	b.n	8003388 <SPI_write_register+0x3e>

	return DISPLAY_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <wait_poll>:
/**
 *  Select the register to write to and transmit the data using TxData
 *	return true if expected status has been reached
 *  return false if SPI_read has errors 
 */
bool wait_poll(SPI_HandleTypeDef* hspi,uint8_t reg_to_sel, uint8_t wait_flag) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
 800339c:	4613      	mov	r3, r2
 800339e:	70bb      	strb	r3, [r7, #2]
	uint8_t RxData;
	uint8_t ret;
	// wait for the command to finish
	while(1) {
		RxData = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	73bb      	strb	r3, [r7, #14]
		ret = SPI_read_register(hspi, reg_to_sel, &RxData);
 80033a4:	f107 020e 	add.w	r2, r7, #14
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ffa9 	bl	8003304 <SPI_read_register>
 80033b2:	4603      	mov	r3, r0
 80033b4:	73fb      	strb	r3, [r7, #15]
		if(ret != DISPLAY_OK)
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <wait_poll+0x30>
			return false;
 80033bc:	2300      	movs	r3, #0
 80033be:	e006      	b.n	80033ce <wait_poll+0x3e>
		if(!(RxData & wait_flag))
 80033c0:	7bba      	ldrb	r2, [r7, #14]
 80033c2:	78bb      	ldrb	r3, [r7, #2]
 80033c4:	4013      	ands	r3, r2
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e9      	bne.n	80033a0 <wait_poll+0x10>
			return true;
 80033cc:	2301      	movs	r3, #1
	}
	// unreach but return to avoid compiler yelling
	return false;
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <rect_helper>:
 *	|					   |
 *	|					   |
 *	|					   |
 *	Y  X----------------X1 Y
 */
void rect_helper(SPI_HandleTypeDef* hspi, int16_t x, int16_t y, int16_t x1, int16_t y1, uint16_t color, bool filled){
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b086      	sub	sp, #24
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	4608      	mov	r0, r1
 80033e0:	4611      	mov	r1, r2
 80033e2:	461a      	mov	r2, r3
 80033e4:	4603      	mov	r3, r0
 80033e6:	817b      	strh	r3, [r7, #10]
 80033e8:	460b      	mov	r3, r1
 80033ea:	813b      	strh	r3, [r7, #8]
 80033ec:	4613      	mov	r3, r2
 80033ee:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	75fb      	strb	r3, [r7, #23]

	// Set X
	SPI_write_command(hspi, 0x91);
 80033f4:	2191      	movs	r1, #145	; 0x91
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff fee2 	bl	80031c0 <SPI_write_command>
	TxData = x;
 80033fc:	897b      	ldrh	r3, [r7, #10]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8003402:	f107 0317 	add.w	r3, r7, #23
 8003406:	4619      	mov	r1, r3
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff ff45 	bl	8003298 <SPI_write_data>
	SPI_write_command(hspi, 0x92);
 800340e:	2192      	movs	r1, #146	; 0x92
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff fed5 	bl	80031c0 <SPI_write_command>
	TxData = x >> 8;
 8003416:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800341a:	121b      	asrs	r3, r3, #8
 800341c:	b21b      	sxth	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8003422:	f107 0317 	add.w	r3, r7, #23
 8003426:	4619      	mov	r1, r3
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7ff ff35 	bl	8003298 <SPI_write_data>

	// Set Y
	SPI_write_command(hspi, 0x93);
 800342e:	2193      	movs	r1, #147	; 0x93
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fec5 	bl	80031c0 <SPI_write_command>
	TxData = y;
 8003436:	893b      	ldrh	r3, [r7, #8]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 800343c:	f107 0317 	add.w	r3, r7, #23
 8003440:	4619      	mov	r1, r3
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff ff28 	bl	8003298 <SPI_write_data>
	SPI_write_command(hspi, 0x94);
 8003448:	2194      	movs	r1, #148	; 0x94
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7ff feb8 	bl	80031c0 <SPI_write_command>
	TxData = y >> 8;
 8003450:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003454:	121b      	asrs	r3, r3, #8
 8003456:	b21b      	sxth	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 800345c:	f107 0317 	add.w	r3, r7, #23
 8003460:	4619      	mov	r1, r3
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff ff18 	bl	8003298 <SPI_write_data>

	// set X1
	SPI_write_command(hspi, 0x95);
 8003468:	2195      	movs	r1, #149	; 0x95
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7ff fea8 	bl	80031c0 <SPI_write_command>
	TxData = x1;
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8003476:	f107 0317 	add.w	r3, r7, #23
 800347a:	4619      	mov	r1, r3
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff ff0b 	bl	8003298 <SPI_write_data>
	SPI_write_command(hspi, 0x96);
 8003482:	2196      	movs	r1, #150	; 0x96
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff fe9b 	bl	80031c0 <SPI_write_command>
	TxData = x1 >> 8;
 800348a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348e:	121b      	asrs	r3, r3, #8
 8003490:	b21b      	sxth	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8003496:	f107 0317 	add.w	r3, r7, #23
 800349a:	4619      	mov	r1, r3
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff fefb 	bl	8003298 <SPI_write_data>

	// set Y1
	SPI_write_command(hspi, 0x97);
 80034a2:	2197      	movs	r1, #151	; 0x97
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f7ff fe8b 	bl	80031c0 <SPI_write_command>
	TxData = y1;
 80034aa:	8c3b      	ldrh	r3, [r7, #32]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 80034b0:	f107 0317 	add.w	r3, r7, #23
 80034b4:	4619      	mov	r1, r3
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7ff feee 	bl	8003298 <SPI_write_data>
	SPI_write_command(hspi, 0x98);
 80034bc:	2198      	movs	r1, #152	; 0x98
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff fe7e 	bl	80031c0 <SPI_write_command>
	TxData = y1 >> 8;
 80034c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80034c8:	121b      	asrs	r3, r3, #8
 80034ca:	b21b      	sxth	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 80034d0:	f107 0317 	add.w	r3, r7, #23
 80034d4:	4619      	mov	r1, r3
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff fede 	bl	8003298 <SPI_write_data>

	// set Color
	SPI_write_command(hspi, 0x63);
 80034dc:	2163      	movs	r1, #99	; 0x63
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff fe6e 	bl	80031c0 <SPI_write_command>
	TxData = (color & 0xf800) >> 11;
 80034e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034e6:	0adb      	lsrs	r3, r3, #11
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 80034ee:	f107 0317 	add.w	r3, r7, #23
 80034f2:	4619      	mov	r1, r3
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff fecf 	bl	8003298 <SPI_write_data>
	SPI_write_command(hspi, 0x64);
 80034fa:	2164      	movs	r1, #100	; 0x64
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff fe5f 	bl	80031c0 <SPI_write_command>
	TxData = (color & 0x07e0) >> 5;
 8003502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003504:	115b      	asrs	r3, r3, #5
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800350c:	b2db      	uxtb	r3, r3
 800350e:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8003510:	f107 0317 	add.w	r3, r7, #23
 8003514:	4619      	mov	r1, r3
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff febe 	bl	8003298 <SPI_write_data>
	SPI_write_command(hspi, 0x65);
 800351c:	2165      	movs	r1, #101	; 0x65
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7ff fe4e 	bl	80031c0 <SPI_write_command>
	TxData = color & 0x001f;
 8003524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	b2db      	uxtb	r3, r3
 800352e:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8003530:	f107 0317 	add.w	r3, r7, #23
 8003534:	4619      	mov	r1, r3
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff feae 	bl	8003298 <SPI_write_data>

	// Draw
	SPI_write_command(hspi, RA8875_DCR);
 800353c:	2190      	movs	r1, #144	; 0x90
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff fe3e 	bl	80031c0 <SPI_write_command>
	if(filled == true) {
 8003544:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003548:	2b01      	cmp	r3, #1
 800354a:	d108      	bne.n	800355e <rect_helper+0x188>
		TxData = 0xB0;
 800354c:	23b0      	movs	r3, #176	; 0xb0
 800354e:	75fb      	strb	r3, [r7, #23]
		SPI_write_data(hspi, &TxData);
 8003550:	f107 0317 	add.w	r3, r7, #23
 8003554:	4619      	mov	r1, r3
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff fe9e 	bl	8003298 <SPI_write_data>
 800355c:	e007      	b.n	800356e <rect_helper+0x198>
	} else {
		TxData = 0x90;
 800355e:	2390      	movs	r3, #144	; 0x90
 8003560:	75fb      	strb	r3, [r7, #23]
		SPI_write_data(hspi, &TxData);
 8003562:	f107 0317 	add.w	r3, r7, #23
 8003566:	4619      	mov	r1, r3
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff fe95 	bl	8003298 <SPI_write_data>
	}

	wait_poll(hspi, RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 800356e:	2280      	movs	r2, #128	; 0x80
 8003570:	2190      	movs	r1, #144	; 0x90
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff ff0c 	bl	8003390 <wait_poll>
}
 8003578:	bf00      	nop
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <initialize_PLL>:

/**
 * Initialize the PLL
 *
 */
uint8_t initialize_PLL(SPI_HandleTypeDef* hspi){
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	73fb      	strb	r3, [r7, #15]
	uint8_t TxData = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	73bb      	strb	r3, [r7, #14]

	TxData = RA8875_PLLC1_PLLDIV1 + 11;
 8003590:	230b      	movs	r3, #11
 8003592:	73bb      	strb	r3, [r7, #14]
	ret = SPI_write_register(hspi, RA8875_PLLC1, &TxData);
 8003594:	f107 030e 	add.w	r3, r7, #14
 8003598:	461a      	mov	r2, r3
 800359a:	2188      	movs	r1, #136	; 0x88
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fed4 	bl	800334a <SPI_write_register>
 80035a2:	4603      	mov	r3, r0
 80035a4:	73fb      	strb	r3, [r7, #15]
	if (ret != DISPLAY_OK)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <initialize_PLL+0x30>
		return DISPLAY_ERROR;
 80035ac:	23ff      	movs	r3, #255	; 0xff
 80035ae:	e016      	b.n	80035de <initialize_PLL+0x5e>
	HAL_Delay(1);
 80035b0:	2001      	movs	r0, #1
 80035b2:	f7fc fed9 	bl	8000368 <HAL_Delay>

	TxData = RA8875_PLLC2_DIV4;
 80035b6:	2302      	movs	r3, #2
 80035b8:	73bb      	strb	r3, [r7, #14]
	ret = SPI_write_register(hspi,  RA8875_PLLC2, &TxData);
 80035ba:	f107 030e 	add.w	r3, r7, #14
 80035be:	461a      	mov	r2, r3
 80035c0:	2189      	movs	r1, #137	; 0x89
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fec1 	bl	800334a <SPI_write_register>
 80035c8:	4603      	mov	r3, r0
 80035ca:	73fb      	strb	r3, [r7, #15]
	if (ret != DISPLAY_OK)
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <initialize_PLL+0x56>
		return DISPLAY_ERROR;
 80035d2:	23ff      	movs	r3, #255	; 0xff
 80035d4:	e003      	b.n	80035de <initialize_PLL+0x5e>
	HAL_Delay(1);
 80035d6:	2001      	movs	r0, #1
 80035d8:	f7fc fec6 	bl	8000368 <HAL_Delay>

	return DISPLAY_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <initialize_driverIC>:

/**
 *  Initialize the driver IC (clock setup, etc etc)
 */
uint8_t initialize_driverIC(SPI_HandleTypeDef* hspi){
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	75fb      	strb	r3, [r7, #23]
	uint8_t TxData = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	733b      	strb	r3, [r7, #12]

	// Timing value
	uint8_t   pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_2CLK;
 80035f8:	2381      	movs	r3, #129	; 0x81
 80035fa:	75bb      	strb	r3, [r7, #22]
	uint8_t   hsync_nondisp = 26;
 80035fc:	231a      	movs	r3, #26
 80035fe:	757b      	strb	r3, [r7, #21]
	uint8_t   hsync_start = 32;
 8003600:	2320      	movs	r3, #32
 8003602:	753b      	strb	r3, [r7, #20]
	uint8_t   hsync_pw = 96;
 8003604:	2360      	movs	r3, #96	; 0x60
 8003606:	74fb      	strb	r3, [r7, #19]
	uint8_t   hsync_finetune = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	74bb      	strb	r3, [r7, #18]
	uint16_t  vsync_nondisp = 32;
 800360c:	2320      	movs	r3, #32
 800360e:	823b      	strh	r3, [r7, #16]
	uint16_t  vsync_start = 23;
 8003610:	2317      	movs	r3, #23
 8003612:	81fb      	strh	r3, [r7, #14]
	uint8_t   vsync_pw = 2;
 8003614:	2302      	movs	r3, #2
 8003616:	737b      	strb	r3, [r7, #13]
	display_voffset = 0; // vertical offset can be changed over here
 8003618:	4bd0      	ldr	r3, [pc, #832]	; (800395c <initialize_driverIC+0x374>)
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]

	initialize_PLL(hspi);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ffae 	bl	8003580 <initialize_PLL>

	TxData = RA8875_SYSR_16BPP | RA8875_SYSR_MCU8;
 8003624:	230c      	movs	r3, #12
 8003626:	733b      	strb	r3, [r7, #12]
	ret = SPI_write_register(hspi, RA8875_SYSR , &TxData);
 8003628:	f107 030c 	add.w	r3, r7, #12
 800362c:	461a      	mov	r2, r3
 800362e:	2110      	movs	r1, #16
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff fe8a 	bl	800334a <SPI_write_register>
 8003636:	4603      	mov	r3, r0
 8003638:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <initialize_driverIC+0x5c>
		return DISPLAY_ERROR;
 8003640:	23ff      	movs	r3, #255	; 0xff
 8003642:	e1a2      	b.n	800398a <initialize_driverIC+0x3a2>

	TxData = pixclk;
 8003644:	7dbb      	ldrb	r3, [r7, #22]
 8003646:	733b      	strb	r3, [r7, #12]
	ret = SPI_write_register(hspi, RA8875_PCSR , &TxData);
 8003648:	f107 030c 	add.w	r3, r7, #12
 800364c:	461a      	mov	r2, r3
 800364e:	2104      	movs	r1, #4
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fe7a 	bl	800334a <SPI_write_register>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <initialize_driverIC+0x7c>
		return DISPLAY_ERROR;
 8003660:	23ff      	movs	r3, #255	; 0xff
 8003662:	e192      	b.n	800398a <initialize_driverIC+0x3a2>
	HAL_Delay(1);
 8003664:	2001      	movs	r0, #1
 8003666:	f7fc fe7f 	bl	8000368 <HAL_Delay>

	// Starting to set all the registers
	// return if errors occur in each segment (easier to debug)

	/* Horizontal settings registers */
	TxData = (display_width / 8) - 1;
 800366a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800366e:	08db      	lsrs	r3, r3, #3
 8003670:	b29b      	uxth	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HDWR , &TxData);
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	461a      	mov	r2, r3
 8003680:	2114      	movs	r1, #20
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff fe61 	bl	800334a <SPI_write_register>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	4313      	orrs	r3, r2
 8003690:	75fb      	strb	r3, [r7, #23]
	TxData = RA8875_HNDFTR_DE_HIGH + hsync_finetune;
 8003692:	7cbb      	ldrb	r3, [r7, #18]
 8003694:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HNDFTR , &TxData);
 8003696:	f107 030c 	add.w	r3, r7, #12
 800369a:	461a      	mov	r2, r3
 800369c:	2115      	movs	r1, #21
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff fe53 	bl	800334a <SPI_write_register>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	75fb      	strb	r3, [r7, #23]
	TxData =  (hsync_nondisp - hsync_finetune - 2) / 8;
 80036ae:	7d7a      	ldrb	r2, [r7, #21]
 80036b0:	7cbb      	ldrb	r3, [r7, #18]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	3b02      	subs	r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	da00      	bge.n	80036bc <initialize_driverIC+0xd4>
 80036ba:	3307      	adds	r3, #7
 80036bc:	10db      	asrs	r3, r3, #3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HNDR , &TxData);
 80036c2:	f107 030c 	add.w	r3, r7, #12
 80036c6:	461a      	mov	r2, r3
 80036c8:	2116      	movs	r1, #22
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff fe3d 	bl	800334a <SPI_write_register>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	75fb      	strb	r3, [r7, #23]
	TxData = hsync_start / 8 - 1;
 80036da:	7d3b      	ldrb	r3, [r7, #20]
 80036dc:	08db      	lsrs	r3, r3, #3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HSTR , &TxData);
 80036e6:	f107 030c 	add.w	r3, r7, #12
 80036ea:	461a      	mov	r2, r3
 80036ec:	2117      	movs	r1, #23
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fe2b 	bl	800334a <SPI_write_register>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	75fb      	strb	r3, [r7, #23]
	TxData = RA8875_HPWR_LOW + (hsync_pw / 8 - 1);
 80036fe:	7cfb      	ldrb	r3, [r7, #19]
 8003700:	08db      	lsrs	r3, r3, #3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b2db      	uxtb	r3, r3
 8003708:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HPWR , &TxData);
 800370a:	f107 030c 	add.w	r3, r7, #12
 800370e:	461a      	mov	r2, r3
 8003710:	2118      	movs	r1, #24
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff fe19 	bl	800334a <SPI_write_register>
 8003718:	4603      	mov	r3, r0
 800371a:	461a      	mov	r2, r3
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	4313      	orrs	r3, r2
 8003720:	75fb      	strb	r3, [r7, #23]

	if (ret != DISPLAY_OK)
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <initialize_driverIC+0x144>
		return DISPLAY_ERROR;
 8003728:	23ff      	movs	r3, #255	; 0xff
 800372a:	e12e      	b.n	800398a <initialize_driverIC+0x3a2>

	/* Vertical settings registers */
	TxData = (display_height - 1 + display_voffset) & 0xFF;
 800372c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b8a      	ldr	r3, [pc, #552]	; (800395c <initialize_driverIC+0x374>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	4413      	add	r3, r2
 8003738:	b2db      	uxtb	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VDHR0 , &TxData);
 8003740:	f107 030c 	add.w	r3, r7, #12
 8003744:	461a      	mov	r2, r3
 8003746:	2119      	movs	r1, #25
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff fdfe 	bl	800334a <SPI_write_register>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	4313      	orrs	r3, r2
 8003756:	75fb      	strb	r3, [r7, #23]
	TxData = (display_height - 1 + display_voffset) >> 8;
 8003758:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800375c:	3b01      	subs	r3, #1
 800375e:	4a7f      	ldr	r2, [pc, #508]	; (800395c <initialize_driverIC+0x374>)
 8003760:	7812      	ldrb	r2, [r2, #0]
 8003762:	4413      	add	r3, r2
 8003764:	121b      	asrs	r3, r3, #8
 8003766:	b2db      	uxtb	r3, r3
 8003768:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VDHR1 , &TxData);
 800376a:	f107 030c 	add.w	r3, r7, #12
 800376e:	461a      	mov	r2, r3
 8003770:	211a      	movs	r1, #26
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff fde9 	bl	800334a <SPI_write_register>
 8003778:	4603      	mov	r3, r0
 800377a:	461a      	mov	r2, r3
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	4313      	orrs	r3, r2
 8003780:	75fb      	strb	r3, [r7, #23]
	TxData =  vsync_nondisp - 1;
 8003782:	8a3b      	ldrh	r3, [r7, #16]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b2db      	uxtb	r3, r3
 800378a:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VNDR0 , &TxData);
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	461a      	mov	r2, r3
 8003792:	211b      	movs	r1, #27
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff fdd8 	bl	800334a <SPI_write_register>
 800379a:	4603      	mov	r3, r0
 800379c:	461a      	mov	r2, r3
 800379e:	7dfb      	ldrb	r3, [r7, #23]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	75fb      	strb	r3, [r7, #23]
	TxData =  vsync_nondisp >> 8;
 80037a4:	8a3b      	ldrh	r3, [r7, #16]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VNDR1 , &TxData);
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	461a      	mov	r2, r3
 80037b4:	211c      	movs	r1, #28
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fdc7 	bl	800334a <SPI_write_register>
 80037bc:	4603      	mov	r3, r0
 80037be:	461a      	mov	r2, r3
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	75fb      	strb	r3, [r7, #23]
	TxData = vsync_start - 1;
 80037c6:	89fb      	ldrh	r3, [r7, #14]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VSTR0 , &TxData);
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	461a      	mov	r2, r3
 80037d6:	211d      	movs	r1, #29
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fdb6 	bl	800334a <SPI_write_register>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	75fb      	strb	r3, [r7, #23]
	TxData = vsync_start >> 8;
 80037e8:	89fb      	ldrh	r3, [r7, #14]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VSTR1 , &TxData);
 80037f2:	f107 030c 	add.w	r3, r7, #12
 80037f6:	461a      	mov	r2, r3
 80037f8:	211e      	movs	r1, #30
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fda5 	bl	800334a <SPI_write_register>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	4313      	orrs	r3, r2
 8003808:	75fb      	strb	r3, [r7, #23]
	TxData = RA8875_VPWR_LOW + vsync_pw - 1;
 800380a:	7b7b      	ldrb	r3, [r7, #13]
 800380c:	3b01      	subs	r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VPWR , &TxData);
 8003812:	f107 030c 	add.w	r3, r7, #12
 8003816:	461a      	mov	r2, r3
 8003818:	211f      	movs	r1, #31
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff fd95 	bl	800334a <SPI_write_register>
 8003820:	4603      	mov	r3, r0
 8003822:	461a      	mov	r2, r3
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	4313      	orrs	r3, r2
 8003828:	75fb      	strb	r3, [r7, #23]

	if (ret != DISPLAY_OK)
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <initialize_driverIC+0x24c>
		return DISPLAY_ERROR;
 8003830:	23ff      	movs	r3, #255	; 0xff
 8003832:	e0aa      	b.n	800398a <initialize_driverIC+0x3a2>

	/* Set active window X */
	TxData = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HSAW0 , &TxData);
 8003838:	f107 030c 	add.w	r3, r7, #12
 800383c:	461a      	mov	r2, r3
 800383e:	2130      	movs	r1, #48	; 0x30
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fd82 	bl	800334a <SPI_write_register>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	4313      	orrs	r3, r2
 800384e:	75fb      	strb	r3, [r7, #23]
	TxData = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HSAW1 , &TxData);
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	461a      	mov	r2, r3
 800385a:	2131      	movs	r1, #49	; 0x31
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fd74 	bl	800334a <SPI_write_register>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	4313      	orrs	r3, r2
 800386a:	75fb      	strb	r3, [r7, #23]
	TxData =  (display_width - 1) & 0xFF;
 800386c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003870:	b2db      	uxtb	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b2db      	uxtb	r3, r3
 8003876:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HEAW0 , &TxData);
 8003878:	f107 030c 	add.w	r3, r7, #12
 800387c:	461a      	mov	r2, r3
 800387e:	2134      	movs	r1, #52	; 0x34
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fd62 	bl	800334a <SPI_write_register>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	4313      	orrs	r3, r2
 800388e:	75fb      	strb	r3, [r7, #23]
	TxData = (display_width - 1) >> 8;
 8003890:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003894:	3b01      	subs	r3, #1
 8003896:	121b      	asrs	r3, r3, #8
 8003898:	b2db      	uxtb	r3, r3
 800389a:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HEAW1 , &TxData);
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	461a      	mov	r2, r3
 80038a2:	2135      	movs	r1, #53	; 0x35
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fd50 	bl	800334a <SPI_write_register>
 80038aa:	4603      	mov	r3, r0
 80038ac:	461a      	mov	r2, r3
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	75fb      	strb	r3, [r7, #23]

	if (ret != DISPLAY_OK)
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <initialize_driverIC+0x2d6>
		return DISPLAY_ERROR;
 80038ba:	23ff      	movs	r3, #255	; 0xff
 80038bc:	e065      	b.n	800398a <initialize_driverIC+0x3a2>

	/* Set active window Y */
	TxData = 0 + display_voffset;
 80038be:	4b27      	ldr	r3, [pc, #156]	; (800395c <initialize_driverIC+0x374>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VSAW0 , &TxData);
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	461a      	mov	r2, r3
 80038ca:	2132      	movs	r1, #50	; 0x32
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff fd3c 	bl	800334a <SPI_write_register>
 80038d2:	4603      	mov	r3, r0
 80038d4:	461a      	mov	r2, r3
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	4313      	orrs	r3, r2
 80038da:	75fb      	strb	r3, [r7, #23]
	TxData = 0 + display_voffset;
 80038dc:	4b1f      	ldr	r3, [pc, #124]	; (800395c <initialize_driverIC+0x374>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VSAW1 , &TxData);
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	461a      	mov	r2, r3
 80038e8:	2133      	movs	r1, #51	; 0x33
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fd2d 	bl	800334a <SPI_write_register>
 80038f0:	4603      	mov	r3, r0
 80038f2:	461a      	mov	r2, r3
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	75fb      	strb	r3, [r7, #23]
	TxData =  (display_height - 1 + display_voffset) & 0xFF;
 80038fa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	4b16      	ldr	r3, [pc, #88]	; (800395c <initialize_driverIC+0x374>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4413      	add	r3, r2
 8003906:	b2db      	uxtb	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VEAW0 , &TxData);
 800390e:	f107 030c 	add.w	r3, r7, #12
 8003912:	461a      	mov	r2, r3
 8003914:	2136      	movs	r1, #54	; 0x36
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff fd17 	bl	800334a <SPI_write_register>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	4313      	orrs	r3, r2
 8003924:	75fb      	strb	r3, [r7, #23]
	TxData = (display_height - 1 + display_voffset) >> 8;
 8003926:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800392a:	3b01      	subs	r3, #1
 800392c:	4a0b      	ldr	r2, [pc, #44]	; (800395c <initialize_driverIC+0x374>)
 800392e:	7812      	ldrb	r2, [r2, #0]
 8003930:	4413      	add	r3, r2
 8003932:	121b      	asrs	r3, r3, #8
 8003934:	b2db      	uxtb	r3, r3
 8003936:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VEAW1 , &TxData);
 8003938:	f107 030c 	add.w	r3, r7, #12
 800393c:	461a      	mov	r2, r3
 800393e:	2137      	movs	r1, #55	; 0x37
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fd02 	bl	800334a <SPI_write_register>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	4313      	orrs	r3, r2
 800394e:	75fb      	strb	r3, [r7, #23]

	if (ret != DISPLAY_OK)
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <initialize_driverIC+0x378>
		return DISPLAY_ERROR;
 8003956:	23ff      	movs	r3, #255	; 0xff
 8003958:	e017      	b.n	800398a <initialize_driverIC+0x3a2>
 800395a:	bf00      	nop
 800395c:	2000008c 	.word	0x2000008c

	/* Clear the entire window */
	TxData = RA8875_MCLR_START | RA8875_MCLR_FULL;
 8003960:	2380      	movs	r3, #128	; 0x80
 8003962:	733b      	strb	r3, [r7, #12]
	ret = SPI_write_register(hspi, RA8875_MCLR, &TxData);
 8003964:	f107 030c 	add.w	r3, r7, #12
 8003968:	461a      	mov	r2, r3
 800396a:	218e      	movs	r1, #142	; 0x8e
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff fcec 	bl	800334a <SPI_write_register>
 8003972:	4603      	mov	r3, r0
 8003974:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <initialize_driverIC+0x398>
		return DISPLAY_ERROR;
 800397c:	23ff      	movs	r3, #255	; 0xff
 800397e:	e004      	b.n	800398a <initialize_driverIC+0x3a2>

	HAL_Delay(500);
 8003980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003984:	f7fc fcf0 	bl	8000368 <HAL_Delay>

	return DISPLAY_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop

08003994 <initialize_display>:

/**
 *  initialize the LCD driver and any HW required by the display.
 *  Returns true if display is successfully been initialized
 */
bool initialize_display(SPI_HandleTypeDef *hspi) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint8_t ret;
  uint8_t reg;
  uint8_t RxData = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	737b      	strb	r3, [r7, #13]

  // CS pin to High before we start writing
  HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 80039a0:	2201      	movs	r2, #1
 80039a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039a6:	481b      	ldr	r0, [pc, #108]	; (8003a14 <initialize_display+0x80>)
 80039a8:	f7fc ff8e 	bl	80008c8 <HAL_GPIO_WritePin>

  // CS pin to LOW and to HIGH to reset
  HAL_GPIO_WritePin(GPIOE, RST_PIN, GPIO_PIN_RESET);
 80039ac:	2200      	movs	r2, #0
 80039ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039b2:	4818      	ldr	r0, [pc, #96]	; (8003a14 <initialize_display+0x80>)
 80039b4:	f7fc ff88 	bl	80008c8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80039b8:	2064      	movs	r0, #100	; 0x64
 80039ba:	f7fc fcd5 	bl	8000368 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, RST_PIN, GPIO_PIN_SET);
 80039be:	2201      	movs	r2, #1
 80039c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039c4:	4813      	ldr	r0, [pc, #76]	; (8003a14 <initialize_display+0x80>)
 80039c6:	f7fc ff7f 	bl	80008c8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80039ca:	2064      	movs	r0, #100	; 0x64
 80039cc:	f7fc fccc 	bl	8000368 <HAL_Delay>

  // read Register 0 to check the model
  reg = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	73fb      	strb	r3, [r7, #15]
  ret = SPI_read_register(hspi, reg, &RxData);
 80039d4:	f107 020d 	add.w	r2, r7, #13
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff fc91 	bl	8003304 <SPI_read_register>
 80039e2:	4603      	mov	r3, r0
 80039e4:	73bb      	strb	r3, [r7, #14]
  if(ret != DISPLAY_OK || RxData != 0x75)
 80039e6:	7bbb      	ldrb	r3, [r7, #14]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <initialize_display+0x5e>
 80039ec:	7b7b      	ldrb	r3, [r7, #13]
 80039ee:	2b75      	cmp	r3, #117	; 0x75
 80039f0:	d001      	beq.n	80039f6 <initialize_display+0x62>
	  return false;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e00a      	b.n	8003a0c <initialize_display+0x78>

  ret = initialize_driverIC(hspi);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fdf6 	bl	80035e8 <initialize_driverIC>
 80039fc:	4603      	mov	r3, r0
 80039fe:	73bb      	strb	r3, [r7, #14]
  if(ret != DISPLAY_OK)
 8003a00:	7bbb      	ldrb	r3, [r7, #14]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <initialize_display+0x76>
	  return false;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <initialize_display+0x78>

  return true;
 8003a0a:	2301      	movs	r3, #1
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	48001000 	.word	0x48001000

08003a18 <display_on>:

/**
 *  Power on the display
 */
void display_on(SPI_HandleTypeDef *hspi, bool on){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
	uint8_t TxData = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]

	if(on == true)
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d109      	bne.n	8003a42 <display_on+0x2a>
	{
		TxData = RA8875_PWRR_NORMAL | RA8875_PWRR_DISPON;
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_PWRR, &TxData);
 8003a32:	f107 030f 	add.w	r3, r7, #15
 8003a36:	461a      	mov	r2, r3
 8003a38:	2101      	movs	r1, #1
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fc85 	bl	800334a <SPI_write_register>
	else
	{
		TxData = RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF;
		SPI_write_register(hspi, RA8875_PWRR, &TxData);
	}
	return;
 8003a40:	e009      	b.n	8003a56 <display_on+0x3e>
		TxData = RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_PWRR, &TxData);
 8003a46:	f107 030f 	add.w	r3, r7, #15
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff fc7b 	bl	800334a <SPI_write_register>
	return;
 8003a54:	bf00      	nop
}
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <GPIOX_on>:

/**
 *  Set the Extra General Purpose IO Register
 *
 */
void GPIOX_on(SPI_HandleTypeDef *hspi, bool on){
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	70fb      	strb	r3, [r7, #3]
	uint8_t TxData = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73fb      	strb	r3, [r7, #15]

	if(on == true)
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d109      	bne.n	8003a86 <GPIOX_on+0x2a>
	{
		TxData = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_GPIOX, &TxData);
 8003a76:	f107 030f 	add.w	r3, r7, #15
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	21c7      	movs	r1, #199	; 0xc7
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fc63 	bl	800334a <SPI_write_register>
	else
	{
		TxData = 0;
		SPI_write_register(hspi, RA8875_GPIOX, &TxData);
	}
	return;
 8003a84:	e009      	b.n	8003a9a <GPIOX_on+0x3e>
		TxData = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_GPIOX, &TxData);
 8003a8a:	f107 030f 	add.w	r3, r7, #15
 8003a8e:	461a      	mov	r2, r3
 8003a90:	21c7      	movs	r1, #199	; 0xc7
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff fc59 	bl	800334a <SPI_write_register>
	return;
 8003a98:	bf00      	nop
}
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <PWM1_config>:

/**
 *  Configure the PWM1 clock
 */
void PWM1_config(SPI_HandleTypeDef *hspi, bool on, uint8_t clock){
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
 8003aac:	4613      	mov	r3, r2
 8003aae:	70bb      	strb	r3, [r7, #2]
	uint8_t TxData = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	73fb      	strb	r3, [r7, #15]

	if(on == true)
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d111      	bne.n	8003ade <PWM1_config+0x3e>
	{
		TxData = RA8875_P1CR_ENABLE | (clock & 0xF);
 8003aba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	b25b      	sxtb	r3, r3
 8003ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ac8:	b25b      	sxtb	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_P1CR, &TxData);
 8003ace:	f107 030f 	add.w	r3, r7, #15
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	218a      	movs	r1, #138	; 0x8a
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fc37 	bl	800334a <SPI_write_register>
	else
	{
		TxData = RA8875_P1CR_DISABLE | (clock & 0xF);
		SPI_write_register(hspi, RA8875_P1CR, &TxData);
	}
	return;
 8003adc:	e00c      	b.n	8003af8 <PWM1_config+0x58>
		TxData = RA8875_P1CR_DISABLE | (clock & 0xF);
 8003ade:	78bb      	ldrb	r3, [r7, #2]
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_P1CR, &TxData);
 8003ae8:	f107 030f 	add.w	r3, r7, #15
 8003aec:	461a      	mov	r2, r3
 8003aee:	218a      	movs	r1, #138	; 0x8a
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff fc2a 	bl	800334a <SPI_write_register>
	return;
 8003af6:	bf00      	nop
}
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <PWM1_out>:

/**
 * Configure the duty cycle of the PWM
 *
 */
void PWM1_out(SPI_HandleTypeDef *hspi, uint8_t duty_cycle){
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	70fb      	strb	r3, [r7, #3]
	uint8_t TxData = duty_cycle;
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, RA8875_P1DCR, &TxData);
 8003b0e:	f107 030f 	add.w	r3, r7, #15
 8003b12:	461a      	mov	r2, r3
 8003b14:	218b      	movs	r1, #139	; 0x8b
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fc17 	bl	800334a <SPI_write_register>
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <fill_screen>:

/**
 *  Fill the screen with color
 *
 */
void fill_screen(SPI_HandleTypeDef *hspi, uint16_t color) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af04      	add	r7, sp, #16
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	807b      	strh	r3, [r7, #2]
	rect_helper(hspi, 0, 0, display_width - 1, display_height - 1, color, true);
 8003b30:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	b219      	sxth	r1, r3
 8003b3a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	b21b      	sxth	r3, r3
 8003b44:	2201      	movs	r2, #1
 8003b46:	9202      	str	r2, [sp, #8]
 8003b48:	887a      	ldrh	r2, [r7, #2]
 8003b4a:	9201      	str	r2, [sp, #4]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	2200      	movs	r2, #0
 8003b52:	2100      	movs	r1, #0
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff fc3e 	bl	80033d6 <rect_helper>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <text_mode>:

/**
 *  Sets the display in text mode
 *
 */
void text_mode(SPI_HandleTypeDef *hspi) {
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
	uint8_t RxData = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
	// Set text mode
	SPI_read_register(hspi, RA8875_MWCR0, &RxData);
 8003b6e:	f107 030f 	add.w	r3, r7, #15
 8003b72:	461a      	mov	r2, r3
 8003b74:	2140      	movs	r1, #64	; 0x40
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fbc4 	bl	8003304 <SPI_read_register>
	RxData |= RA8875_MWCR0_TXTMODE;
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	73fb      	strb	r3, [r7, #15]
	SPI_write_data(hspi, &RxData);
 8003b86:	f107 030f 	add.w	r3, r7, #15
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff fb83 	bl	8003298 <SPI_write_data>

	// Select internal (ROM) font
	SPI_read_register(hspi, 0x21, &RxData);
 8003b92:	f107 030f 	add.w	r3, r7, #15
 8003b96:	461a      	mov	r2, r3
 8003b98:	2121      	movs	r1, #33	; 0x21
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff fbb2 	bl	8003304 <SPI_read_register>
	RxData &= ~((1 << 7) | (1 << 5)); // clear bits 7 and 5
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	73fb      	strb	r3, [r7, #15]
	SPI_write_data(hspi, &RxData);
 8003baa:	f107 030f 	add.w	r3, r7, #15
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff fb71 	bl	8003298 <SPI_write_data>
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <set_cursor>:

/**
 *  Set the location of the cursor
 *
 */
void set_cursor(SPI_HandleTypeDef *hspi, uint16_t x, uint16_t y){
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	807b      	strh	r3, [r7, #2]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	803b      	strh	r3, [r7, #0]
	uint8_t TxData = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]

	TxData = x & 0xFF;
 8003bd2:	887b      	ldrh	r3, [r7, #2]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x2A, &TxData);
 8003bd8:	f107 030f 	add.w	r3, r7, #15
 8003bdc:	461a      	mov	r2, r3
 8003bde:	212a      	movs	r1, #42	; 0x2a
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fbb2 	bl	800334a <SPI_write_register>

	TxData = x >> 8;
 8003be6:	887b      	ldrh	r3, [r7, #2]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x2B, &TxData);
 8003bf0:	f107 030f 	add.w	r3, r7, #15
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	212b      	movs	r1, #43	; 0x2b
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fba6 	bl	800334a <SPI_write_register>

	TxData = y & 0xFF;
 8003bfe:	883b      	ldrh	r3, [r7, #0]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x2C, &TxData);
 8003c04:	f107 030f 	add.w	r3, r7, #15
 8003c08:	461a      	mov	r2, r3
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff fb9c 	bl	800334a <SPI_write_register>

	TxData = y >> 8;
 8003c12:	883b      	ldrh	r3, [r7, #0]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x2D, &TxData);
 8003c1c:	f107 030f 	add.w	r3, r7, #15
 8003c20:	461a      	mov	r2, r3
 8003c22:	212d      	movs	r1, #45	; 0x2d
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff fb90 	bl	800334a <SPI_write_register>
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <text_write>:

/**
 *  Write the string to the screen
 */
void text_write(SPI_HandleTypeDef *hspi, char* buffer, uint16_t len) {
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	80fb      	strh	r3, [r7, #6]
	SPI_write_command(hspi, RA8875_MRWC);
 8003c40:	2102      	movs	r1, #2
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff fabc 	bl	80031c0 <SPI_write_command>

	for(uint16_t i = 0; i < len; i++) {
 8003c48:	2300      	movs	r3, #0
 8003c4a:	82fb      	strh	r3, [r7, #22]
 8003c4c:	e00d      	b.n	8003c6a <text_write+0x38>
		uint8_t each_char = buffer[i];
 8003c4e:	8afb      	ldrh	r3, [r7, #22]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	4413      	add	r3, r2
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	757b      	strb	r3, [r7, #21]
		SPI_write_data(hspi, &each_char);
 8003c58:	f107 0315 	add.w	r3, r7, #21
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f7ff fb1a 	bl	8003298 <SPI_write_data>
	for(uint16_t i = 0; i < len; i++) {
 8003c64:	8afb      	ldrh	r3, [r7, #22]
 8003c66:	3301      	adds	r3, #1
 8003c68:	82fb      	strh	r3, [r7, #22]
 8003c6a:	8afa      	ldrh	r2, [r7, #22]
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d3ed      	bcc.n	8003c4e <text_write+0x1c>
	}
	HAL_Delay(1);
 8003c72:	2001      	movs	r0, #1
 8003c74:	f7fc fb78 	bl	8000368 <HAL_Delay>
}
 8003c78:	bf00      	nop
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <clear_screen>:

void clear_screen(SPI_HandleTypeDef *hspi) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	uint8_t TxData = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73fb      	strb	r3, [r7, #15]

	TxData = RA8875_MCLR_START | RA8875_MCLR_FULL;
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, RA8875_MCLR, &TxData);
 8003c90:	f107 030f 	add.w	r3, r7, #15
 8003c94:	461a      	mov	r2, r3
 8003c96:	218e      	movs	r1, #142	; 0x8e
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff fb56 	bl	800334a <SPI_write_register>
}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <set_text_color>:

/**
 *  Set the color of the text
 *
 */
void set_text_color(SPI_HandleTypeDef *hspi, uint16_t text_color) {
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	807b      	strh	r3, [r7, #2]
	uint8_t TxData = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]
	uint8_t RxData = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	73bb      	strb	r3, [r7, #14]

	// Set Fore Color
	TxData = ((text_color & 0xf800) >> 11);
 8003cba:	887b      	ldrh	r3, [r7, #2]
 8003cbc:	0adb      	lsrs	r3, r3, #11
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x63, &TxData);
 8003cc4:	f107 030f 	add.w	r3, r7, #15
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2163      	movs	r1, #99	; 0x63
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff fb3c 	bl	800334a <SPI_write_register>

	TxData = ((text_color & 0x07e0) >> 5);
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	115b      	asrs	r3, r3, #5
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x64, &TxData);
 8003ce0:	f107 030f 	add.w	r3, r7, #15
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2164      	movs	r1, #100	; 0x64
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff fb2e 	bl	800334a <SPI_write_register>

	TxData = text_color & 0x001f;
 8003cee:	887b      	ldrh	r3, [r7, #2]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x65, &TxData);
 8003cfa:	f107 030f 	add.w	r3, r7, #15
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2165      	movs	r1, #101	; 0x65
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff fb21 	bl	800334a <SPI_write_register>

	// Set transparency flag
	TxData = text_color & 0x001f;
 8003d08:	887b      	ldrh	r3, [r7, #2]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	73fb      	strb	r3, [r7, #15]
	SPI_read_register(hspi, 0x22, &RxData);
 8003d14:	f107 030e 	add.w	r3, r7, #14
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2122      	movs	r1, #34	; 0x22
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff faf1 	bl	8003304 <SPI_read_register>
	RxData |= (1 << 6);
 8003d22:	7bbb      	ldrb	r3, [r7, #14]
 8003d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	73bb      	strb	r3, [r7, #14]
	SPI_write_data(hspi, &RxData);
 8003d2c:	f107 030e 	add.w	r3, r7, #14
 8003d30:	4619      	mov	r1, r3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fab0 	bl	8003298 <SPI_write_data>
}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <enlarge_text>:

/**
 *  Enlarge the text, 4x zoom is the max
 *
 */
void enlarge_text(SPI_HandleTypeDef *hspi, uint8_t zoom) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	70fb      	strb	r3, [r7, #3]
	uint8_t actual_zoom = zoom - 1;
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
	uint8_t RxData = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73bb      	strb	r3, [r7, #14]

	if(actual_zoom > 3)
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d901      	bls.n	8003d60 <enlarge_text+0x20>
		actual_zoom = 3;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	73fb      	strb	r3, [r7, #15]

	SPI_read_register(hspi, 0x22 , &RxData);
 8003d60:	f107 030e 	add.w	r3, r7, #14
 8003d64:	461a      	mov	r2, r3
 8003d66:	2122      	movs	r1, #34	; 0x22
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff facb 	bl	8003304 <SPI_read_register>
	RxData &= ~(0xF);
 8003d6e:	7bbb      	ldrb	r3, [r7, #14]
 8003d70:	f023 030f 	bic.w	r3, r3, #15
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	73bb      	strb	r3, [r7, #14]
	RxData |= actual_zoom << 2;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	b25a      	sxtb	r2, r3
 8003d7e:	7bbb      	ldrb	r3, [r7, #14]
 8003d80:	b25b      	sxtb	r3, r3
 8003d82:	4313      	orrs	r3, r2
 8003d84:	b25b      	sxtb	r3, r3
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	73bb      	strb	r3, [r7, #14]
	RxData |= actual_zoom;
 8003d8a:	7bba      	ldrb	r2, [r7, #14]
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	73bb      	strb	r3, [r7, #14]
	SPI_write_data(hspi, &RxData);
 8003d94:	f107 030e 	add.w	r3, r7, #14
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fa7c 	bl	8003298 <SPI_write_data>

}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <main_display_init>:

/**
 * Initialize the display to our settings
 *
 */
void main_display_init(SPI_HandleTypeDef *hspi) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	 initialize_display(hspi); // initialize display
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fdef 	bl	8003994 <initialize_display>
	 display_on(hspi, true); // turn on display
 8003db6:	2101      	movs	r1, #1
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fe2d 	bl	8003a18 <display_on>
	 GPIOX_on(hspi, true);  // Enable TFT - display enable tied to GPIOX
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fe4b 	bl	8003a5c <GPIOX_on>
	 PWM1_config(hspi, true, RA8875_PWM_CLK_DIV1024); // turn on the backlight using PWM
 8003dc6:	220a      	movs	r2, #10
 8003dc8:	2101      	movs	r1, #1
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fe68 	bl	8003aa0 <PWM1_config>
	 PWM1_out(hspi, 255); // set blacklight to the highest
 8003dd0:	21ff      	movs	r1, #255	; 0xff
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff fe93 	bl	8003afe <PWM1_out>
	 fill_screen(hspi, RA8875_BLACK);
 8003dd8:	2100      	movs	r1, #0
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff fea2 	bl	8003b24 <fill_screen>
	 text_mode(hspi); // Switch from graphics mode to text mode
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff febe 	bl	8003b62 <text_mode>

}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <print_message>:

void print_message(SPI_HandleTypeDef *hspi, char *msg, int height) {
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
	if(msg != NULL) {
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d017      	beq.n	8003e30 <print_message+0x42>
		set_cursor(hspi, 15, 235 + height * next_line_height);
 8003e00:	2323      	movs	r3, #35	; 0x23
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	fb12 f303 	smulbb	r3, r2, r3
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	33eb      	adds	r3, #235	; 0xeb
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	210f      	movs	r1, #15
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7ff fed1 	bl	8003bbe <set_cursor>
		text_write(hspi, msg, strlen(msg)); // Write the string to the display
 8003e1c:	68b8      	ldr	r0, [r7, #8]
 8003e1e:	f7fc f9d7 	bl	80001d0 <strlen>
 8003e22:	4603      	mov	r3, r0
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff ff01 	bl	8003c32 <text_write>
	}
}
 8003e30:	bf00      	nop
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <main_display_info>:

/**
 * Display number of people in store, number of people in Queue and output Messages:
 * using height 35 as next line
 */
void main_display_info(SPI_HandleTypeDef *hspi, int num_people_in_store, int num_people_in_queue, int max_capacity, char *msg1, char* msg2, char* msg3, char* msg4) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b098      	sub	sp, #96	; 0x60
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
	char buffer[64];
	char msg_header[] = "Messages:";
 8003e46:	4a43      	ldr	r2, [pc, #268]	; (8003f54 <main_display_info+0x11c>)
 8003e48:	f107 0314 	add.w	r3, r7, #20
 8003e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e4e:	c303      	stmia	r3!, {r0, r1}
 8003e50:	801a      	strh	r2, [r3, #0]

	// Basic setup, clear screen, set color and set text size
	clear_screen(hspi);
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7ff ff14 	bl	8003c80 <clear_screen>
	set_text_color(hspi, RA8875_WHITE);
 8003e58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f7ff ff22 	bl	8003ca6 <set_text_color>
	enlarge_text(hspi, 2);
 8003e62:	2102      	movs	r1, #2
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff ff6b 	bl	8003d40 <enlarge_text>

	sprintf(buffer, "Number of people in store: %d", num_people_in_store);
 8003e6a:	f107 0320 	add.w	r3, r7, #32
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4939      	ldr	r1, [pc, #228]	; (8003f58 <main_display_info+0x120>)
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fd28 	bl	80048c8 <siprintf>
	set_cursor(hspi, 15, 20);
 8003e78:	2214      	movs	r2, #20
 8003e7a:	210f      	movs	r1, #15
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff fe9e 	bl	8003bbe <set_cursor>
	text_write(hspi, buffer, strlen(buffer)); // Write the string to the display
 8003e82:	f107 0320 	add.w	r3, r7, #32
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc f9a2 	bl	80001d0 <strlen>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	f107 0320 	add.w	r3, r7, #32
 8003e94:	4619      	mov	r1, r3
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7ff fecb 	bl	8003c32 <text_write>

	sprintf(buffer, "Number of people on queue: %d", num_people_in_queue);
 8003e9c:	f107 0320 	add.w	r3, r7, #32
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	492e      	ldr	r1, [pc, #184]	; (8003f5c <main_display_info+0x124>)
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fd0f 	bl	80048c8 <siprintf>
	set_cursor(hspi, 15, 55);
 8003eaa:	2237      	movs	r2, #55	; 0x37
 8003eac:	210f      	movs	r1, #15
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7ff fe85 	bl	8003bbe <set_cursor>
	text_write(hspi, buffer, strlen(buffer)); // Write the string to the display
 8003eb4:	f107 0320 	add.w	r3, r7, #32
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fc f989 	bl	80001d0 <strlen>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	f107 0320 	add.w	r3, r7, #32
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff feb2 	bl	8003c32 <text_write>

	sprintf(buffer, "Max Capacity allowed: %d", max_capacity);
 8003ece:	f107 0320 	add.w	r3, r7, #32
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	4922      	ldr	r1, [pc, #136]	; (8003f60 <main_display_info+0x128>)
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fcf6 	bl	80048c8 <siprintf>
	set_cursor(hspi, 15, 90);
 8003edc:	225a      	movs	r2, #90	; 0x5a
 8003ede:	210f      	movs	r1, #15
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff fe6c 	bl	8003bbe <set_cursor>
	text_write(hspi, buffer, strlen(buffer)); // Write the string to the display
 8003ee6:	f107 0320 	add.w	r3, r7, #32
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fc f970 	bl	80001d0 <strlen>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	f107 0320 	add.w	r3, r7, #32
 8003ef8:	4619      	mov	r1, r3
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fe99 	bl	8003c32 <text_write>

	set_cursor(hspi, 15, 200);
 8003f00:	22c8      	movs	r2, #200	; 0xc8
 8003f02:	210f      	movs	r1, #15
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff fe5a 	bl	8003bbe <set_cursor>
	text_write(hspi, msg_header, strlen(msg_header)); // Write the string to the display
 8003f0a:	f107 0314 	add.w	r3, r7, #20
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc f95e 	bl	80001d0 <strlen>
 8003f14:	4603      	mov	r3, r0
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff fe87 	bl	8003c32 <text_write>

	print_message(hspi, msg1, 0);
 8003f24:	2200      	movs	r2, #0
 8003f26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f7ff ff60 	bl	8003dee <print_message>
	print_message(hspi, msg2, 1);
 8003f2e:	2201      	movs	r2, #1
 8003f30:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff ff5b 	bl	8003dee <print_message>
	print_message(hspi, msg3, 2);
 8003f38:	2202      	movs	r2, #2
 8003f3a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7ff ff56 	bl	8003dee <print_message>
	print_message(hspi, msg4, 3);
 8003f42:	2203      	movs	r2, #3
 8003f44:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff ff51 	bl	8003dee <print_message>
}
 8003f4c:	bf00      	nop
 8003f4e:	3760      	adds	r7, #96	; 0x60
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	08005148 	.word	0x08005148
 8003f58:	080050ec 	.word	0x080050ec
 8003f5c:	0800510c 	.word	0x0800510c
 8003f60:	0800512c 	.word	0x0800512c

08003f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f6a:	f7fc f989 	bl	8000280 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LCD_GLASS_Init();
 8003f6e:	f000 f9a7 	bl	80042c0 <BSP_LCD_GLASS_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f72:	f000 f823 	bl	8003fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f76:	f000 f943 	bl	8004200 <MX_GPIO_Init>
  MX_LCD_Init();
 8003f7a:	f000 f8cb 	bl	8004114 <MX_LCD_Init>
  MX_I2C1_Init();
 8003f7e:	f000 f88b 	bl	8004098 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003f82:	f000 f8ff 	bl	8004184 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  main_display_init(&hspi1);
 8003f86:	4809      	ldr	r0, [pc, #36]	; (8003fac <main+0x48>)
 8003f88:	f7ff ff0e 	bl	8003da8 <main_display_init>
  main_display_info(&hspi1, 10, 2, 50, "Welcome to ABC store!", "Please scan your temperature now", NULL, "Oops! Initialization failed, please try again...");
 8003f8c:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <main+0x4c>)
 8003f8e:	9303      	str	r3, [sp, #12]
 8003f90:	2300      	movs	r3, #0
 8003f92:	9302      	str	r3, [sp, #8]
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <main+0x50>)
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <main+0x54>)
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	2332      	movs	r3, #50	; 0x32
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	210a      	movs	r1, #10
 8003fa2:	4802      	ldr	r0, [pc, #8]	; (8003fac <main+0x48>)
 8003fa4:	f7ff ff48 	bl	8003e38 <main_display_info>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003fa8:	e7fe      	b.n	8003fa8 <main+0x44>
 8003faa:	bf00      	nop
 8003fac:	20000128 	.word	0x20000128
 8003fb0:	08005154 	.word	0x08005154
 8003fb4:	08005188 	.word	0x08005188
 8003fb8:	080051ac 	.word	0x080051ac

08003fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b0b8      	sub	sp, #224	; 0xe0
 8003fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fc2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fc6:	2244      	movs	r2, #68	; 0x44
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fc74 	bl	80048b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fd0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fe0:	463b      	mov	r3, r7
 8003fe2:	2288      	movs	r2, #136	; 0x88
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fc66 	bl	80048b8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8003fec:	2318      	movs	r3, #24
 8003fee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004004:	2360      	movs	r3, #96	; 0x60
 8004006:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004010:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004014:	4618      	mov	r0, r3
 8004016:	f7fc ff69 	bl	8000eec <HAL_RCC_OscConfig>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8004020:	f000 f946 	bl	80042b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004024:	230f      	movs	r3, #15
 8004026:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800403c:	2300      	movs	r3, #0
 800403e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004042:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f7fd fb35 	bl	80016b8 <HAL_RCC_ClockConfig>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004054:	f000 f92c 	bl	80042b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1;
 8004058:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <SystemClock_Config+0xd8>)
 800405a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800405c:	2300      	movs	r3, #0
 800405e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004068:	463b      	mov	r3, r7
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd fcf0 	bl	8001a50 <HAL_RCCEx_PeriphCLKConfig>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8004076:	f000 f91b 	bl	80042b0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800407a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800407e:	f7fc fedf 	bl	8000e40 <HAL_PWREx_ControlVoltageScaling>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8004088:	f000 f912 	bl	80042b0 <Error_Handler>
  }
}
 800408c:	bf00      	nop
 800408e:	37e0      	adds	r7, #224	; 0xe0
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	00020040 	.word	0x00020040

08004098 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800409c:	4b1b      	ldr	r3, [pc, #108]	; (800410c <MX_I2C1_Init+0x74>)
 800409e:	4a1c      	ldr	r2, [pc, #112]	; (8004110 <MX_I2C1_Init+0x78>)
 80040a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80040a2:	4b1a      	ldr	r3, [pc, #104]	; (800410c <MX_I2C1_Init+0x74>)
 80040a4:	f640 6214 	movw	r2, #3604	; 0xe14
 80040a8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80040aa:	4b18      	ldr	r3, [pc, #96]	; (800410c <MX_I2C1_Init+0x74>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040b0:	4b16      	ldr	r3, [pc, #88]	; (800410c <MX_I2C1_Init+0x74>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <MX_I2C1_Init+0x74>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80040bc:	4b13      	ldr	r3, [pc, #76]	; (800410c <MX_I2C1_Init+0x74>)
 80040be:	2200      	movs	r2, #0
 80040c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <MX_I2C1_Init+0x74>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040c8:	4b10      	ldr	r3, [pc, #64]	; (800410c <MX_I2C1_Init+0x74>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040ce:	4b0f      	ldr	r3, [pc, #60]	; (800410c <MX_I2C1_Init+0x74>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040d4:	480d      	ldr	r0, [pc, #52]	; (800410c <MX_I2C1_Init+0x74>)
 80040d6:	f7fc fc0f 	bl	80008f8 <HAL_I2C_Init>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80040e0:	f000 f8e6 	bl	80042b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040e4:	2100      	movs	r1, #0
 80040e6:	4809      	ldr	r0, [pc, #36]	; (800410c <MX_I2C1_Init+0x74>)
 80040e8:	f7fc fc95 	bl	8000a16 <HAL_I2CEx_ConfigAnalogFilter>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80040f2:	f000 f8dd 	bl	80042b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80040f6:	2100      	movs	r1, #0
 80040f8:	4804      	ldr	r0, [pc, #16]	; (800410c <MX_I2C1_Init+0x74>)
 80040fa:	f7fc fcd7 	bl	8000aac <HAL_I2CEx_ConfigDigitalFilter>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8004104:	f000 f8d4 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004108:	bf00      	nop
 800410a:	bd80      	pop	{r7, pc}
 800410c:	200000a0 	.word	0x200000a0
 8004110:	40005400 	.word	0x40005400

08004114 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8004118:	4b18      	ldr	r3, [pc, #96]	; (800417c <MX_LCD_Init+0x68>)
 800411a:	4a19      	ldr	r2, [pc, #100]	; (8004180 <MX_LCD_Init+0x6c>)
 800411c:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800411e:	4b17      	ldr	r3, [pc, #92]	; (800417c <MX_LCD_Init+0x68>)
 8004120:	2200      	movs	r2, #0
 8004122:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8004124:	4b15      	ldr	r3, [pc, #84]	; (800417c <MX_LCD_Init+0x68>)
 8004126:	2200      	movs	r2, #0
 8004128:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_2;
 800412a:	4b14      	ldr	r3, [pc, #80]	; (800417c <MX_LCD_Init+0x68>)
 800412c:	2204      	movs	r2, #4
 800412e:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8004130:	4b12      	ldr	r3, [pc, #72]	; (800417c <MX_LCD_Init+0x68>)
 8004132:	2200      	movs	r2, #0
 8004134:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <MX_LCD_Init+0x68>)
 8004138:	2200      	movs	r2, #0
 800413a:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <MX_LCD_Init+0x68>)
 800413e:	2200      	movs	r2, #0
 8004140:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8004142:	4b0e      	ldr	r3, [pc, #56]	; (800417c <MX_LCD_Init+0x68>)
 8004144:	2200      	movs	r2, #0
 8004146:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <MX_LCD_Init+0x68>)
 800414a:	2200      	movs	r2, #0
 800414c:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <MX_LCD_Init+0x68>)
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <MX_LCD_Init+0x68>)
 8004156:	2200      	movs	r2, #0
 8004158:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <MX_LCD_Init+0x68>)
 800415c:	2200      	movs	r2, #0
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <MX_LCD_Init+0x68>)
 8004162:	2200      	movs	r2, #0
 8004164:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8004166:	4805      	ldr	r0, [pc, #20]	; (800417c <MX_LCD_Init+0x68>)
 8004168:	f7fc fcec 	bl	8000b44 <HAL_LCD_Init>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <MX_LCD_Init+0x62>
  {
    Error_Handler();
 8004172:	f000 f89d 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	200000ec 	.word	0x200000ec
 8004180:	40002400 	.word	0x40002400

08004184 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004188:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <MX_SPI1_Init+0x74>)
 800418a:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <MX_SPI1_Init+0x78>)
 800418c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800418e:	4b1a      	ldr	r3, [pc, #104]	; (80041f8 <MX_SPI1_Init+0x74>)
 8004190:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004194:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <MX_SPI1_Init+0x74>)
 8004198:	2200      	movs	r2, #0
 800419a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800419c:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <MX_SPI1_Init+0x74>)
 800419e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80041a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a4:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <MX_SPI1_Init+0x74>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041aa:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <MX_SPI1_Init+0x74>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <MX_SPI1_Init+0x74>)
 80041b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <MX_SPI1_Init+0x74>)
 80041ba:	2208      	movs	r2, #8
 80041bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <MX_SPI1_Init+0x74>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <MX_SPI1_Init+0x74>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <MX_SPI1_Init+0x74>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <MX_SPI1_Init+0x74>)
 80041d2:	2207      	movs	r2, #7
 80041d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <MX_SPI1_Init+0x74>)
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <MX_SPI1_Init+0x74>)
 80041de:	2200      	movs	r2, #0
 80041e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041e2:	4805      	ldr	r0, [pc, #20]	; (80041f8 <MX_SPI1_Init+0x74>)
 80041e4:	f7fe f8e4 	bl	80023b0 <HAL_SPI_Init>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80041ee:	f000 f85f 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000128 	.word	0x20000128
 80041fc:	40013000 	.word	0x40013000

08004200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004206:	f107 0314 	add.w	r3, r7, #20
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	605a      	str	r2, [r3, #4]
 8004210:	609a      	str	r2, [r3, #8]
 8004212:	60da      	str	r2, [r3, #12]
 8004214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004216:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <MX_GPIO_Init+0xa8>)
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	4a23      	ldr	r2, [pc, #140]	; (80042a8 <MX_GPIO_Init+0xa8>)
 800421c:	f043 0304 	orr.w	r3, r3, #4
 8004220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004222:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <MX_GPIO_Init+0xa8>)
 8004224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800422e:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <MX_GPIO_Init+0xa8>)
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <MX_GPIO_Init+0xa8>)
 8004234:	f043 0310 	orr.w	r3, r3, #16
 8004238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800423a:	4b1b      	ldr	r3, [pc, #108]	; (80042a8 <MX_GPIO_Init+0xa8>)
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004246:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <MX_GPIO_Init+0xa8>)
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <MX_GPIO_Init+0xa8>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004252:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <MX_GPIO_Init+0xa8>)
 8004254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800425e:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <MX_GPIO_Init+0xa8>)
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	4a11      	ldr	r2, [pc, #68]	; (80042a8 <MX_GPIO_Init+0xa8>)
 8004264:	f043 0302 	orr.w	r3, r3, #2
 8004268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800426a:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <MX_GPIO_Init+0xa8>)
 800426c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	607b      	str	r3, [r7, #4]
 8004274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RST_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8004276:	2200      	movs	r2, #0
 8004278:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800427c:	480b      	ldr	r0, [pc, #44]	; (80042ac <MX_GPIO_Init+0xac>)
 800427e:	f7fc fb23 	bl	80008c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|SPI1_CS_Pin;
 8004282:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004288:	2301      	movs	r3, #1
 800428a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	2300      	movs	r3, #0
 800428e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004290:	2300      	movs	r3, #0
 8004292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004294:	f107 0314 	add.w	r3, r7, #20
 8004298:	4619      	mov	r1, r3
 800429a:	4804      	ldr	r0, [pc, #16]	; (80042ac <MX_GPIO_Init+0xac>)
 800429c:	f7fc f96c 	bl	8000578 <HAL_GPIO_Init>

}
 80042a0:	bf00      	nop
 80042a2:	3728      	adds	r7, #40	; 0x28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40021000 	.word	0x40021000
 80042ac:	48001000 	.word	0x48001000

080042b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 80042c4:	4b19      	ldr	r3, [pc, #100]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 80042c6:	4a1a      	ldr	r2, [pc, #104]	; (8004330 <BSP_LCD_GLASS_Init+0x70>)
 80042c8:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 80042ca:	4b18      	ldr	r3, [pc, #96]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 80042d0:	4b16      	ldr	r3, [pc, #88]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 80042d2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80042d6:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 80042d8:	4b14      	ldr	r3, [pc, #80]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 80042da:	220c      	movs	r2, #12
 80042dc:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 80042de:	4b13      	ldr	r3, [pc, #76]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 80042e0:	2240      	movs	r2, #64	; 0x40
 80042e2:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 80042ec:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80042f0:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 80042f2:	4b0e      	ldr	r3, [pc, #56]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 80042fa:	2240      	movs	r2, #64	; 0x40
 80042fc:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 8004300:	2200      	movs	r2, #0
 8004302:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8004304:	4b09      	ldr	r3, [pc, #36]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 8004306:	2200      	movs	r2, #0
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 800430a:	4b08      	ldr	r3, [pc, #32]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 800430c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004310:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8004318:	4804      	ldr	r0, [pc, #16]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 800431a:	f000 f815 	bl	8004348 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 800431e:	4803      	ldr	r0, [pc, #12]	; (800432c <BSP_LCD_GLASS_Init+0x6c>)
 8004320:	f7fc fc10 	bl	8000b44 <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 8004324:	f000 f806 	bl	8004334 <BSP_LCD_GLASS_Clear>
}
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}
 800432c:	2000019c 	.word	0x2000019c
 8004330:	40002400 	.word	0x40002400

08004334 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle); 
 8004338:	4802      	ldr	r0, [pc, #8]	; (8004344 <BSP_LCD_GLASS_Clear+0x10>)
 800433a:	f7fc fcc3 	bl	8000cc4 <HAL_LCD_Clear>
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	2000019c 	.word	0x2000019c

08004348 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b0c0      	sub	sp, #256	; 0x100
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004350:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8004360:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004364:	2244      	movs	r2, #68	; 0x44
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f000 faa5 	bl	80048b8 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 800436e:	f107 0320 	add.w	r3, r7, #32
 8004372:	2288      	movs	r2, #136	; 0x88
 8004374:	2100      	movs	r1, #0
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fa9e 	bl	80048b8 <memset>
  
  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 800437c:	4b51      	ldr	r3, [pc, #324]	; (80044c4 <LCD_MspInit+0x17c>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004380:	4a50      	ldr	r2, [pc, #320]	; (80044c4 <LCD_MspInit+0x17c>)
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004386:	6593      	str	r3, [r2, #88]	; 0x58
 8004388:	4b4e      	ldr	r3, [pc, #312]	; (80044c4 <LCD_MspInit+0x17c>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	69fb      	ldr	r3, [r7, #28]
  
  /*##-2- Configure LSE as RTC clock soucre ###################################*/ 
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8004394:	2304      	movs	r3, #4
 8004396:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 800439a:	2300      	movs	r3, #0
 800439c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 80043a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fc fd9e 	bl	8000eec <HAL_RCC_OscConfig>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d000      	beq.n	80043b8 <LCD_MspInit+0x70>
  { 
    while(1);
 80043b6:	e7fe      	b.n	80043b6 <LCD_MspInit+0x6e>
  }
  
  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80043b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043bc:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80043be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 80043c6:	f107 0320 	add.w	r3, r7, #32
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fd fb40 	bl	8001a50 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d0:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <LCD_MspInit+0x17c>)
 80043d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d4:	4a3b      	ldr	r2, [pc, #236]	; (80044c4 <LCD_MspInit+0x17c>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043dc:	4b39      	ldr	r3, [pc, #228]	; (80044c4 <LCD_MspInit+0x17c>)
 80043de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043e8:	4b36      	ldr	r3, [pc, #216]	; (80044c4 <LCD_MspInit+0x17c>)
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	4a35      	ldr	r2, [pc, #212]	; (80044c4 <LCD_MspInit+0x17c>)
 80043ee:	f043 0302 	orr.w	r3, r3, #2
 80043f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043f4:	4b33      	ldr	r3, [pc, #204]	; (80044c4 <LCD_MspInit+0x17c>)
 80043f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004400:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <LCD_MspInit+0x17c>)
 8004402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004404:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <LCD_MspInit+0x17c>)
 8004406:	f043 0304 	orr.w	r3, r3, #4
 800440a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800440c:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <LCD_MspInit+0x17c>)
 800440e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004418:	4b2a      	ldr	r3, [pc, #168]	; (80044c4 <LCD_MspInit+0x17c>)
 800441a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441c:	4a29      	ldr	r2, [pc, #164]	; (80044c4 <LCD_MspInit+0x17c>)
 800441e:	f043 0308 	orr.w	r3, r3, #8
 8004422:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004424:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <LCD_MspInit+0x17c>)
 8004426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]

  
  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8004430:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8004434:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8004438:	2302      	movs	r3, #2
 800443a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 800443e:	2300      	movs	r3, #0
 8004440:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_HIGH;
 8004444:	2303      	movs	r3, #3
 8004446:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 800444a:	230b      	movs	r3, #11
 800444c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8004450:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004454:	4619      	mov	r1, r3
 8004456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800445a:	f7fc f88d 	bl	8000578 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 800445e:	f24f 2333 	movw	r3, #62003	; 0xf233
 8004462:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8004466:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800446a:	4619      	mov	r1, r3
 800446c:	4816      	ldr	r0, [pc, #88]	; (80044c8 <LCD_MspInit+0x180>)
 800446e:	f7fc f883 	bl	8000578 <HAL_GPIO_Init>
  
  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8004472:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8004476:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 800447a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800447e:	4619      	mov	r1, r3
 8004480:	4812      	ldr	r0, [pc, #72]	; (80044cc <LCD_MspInit+0x184>)
 8004482:	f7fc f879 	bl	8000578 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8004486:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800448a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 800448e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004492:	4619      	mov	r1, r3
 8004494:	480e      	ldr	r0, [pc, #56]	; (80044d0 <LCD_MspInit+0x188>)
 8004496:	f7fc f86f 	bl	8000578 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 800449a:	2002      	movs	r0, #2
 800449c:	f7fb ff64 	bl	8000368 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 80044a0:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <LCD_MspInit+0x17c>)
 80044a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a4:	4a07      	ldr	r2, [pc, #28]	; (80044c4 <LCD_MspInit+0x17c>)
 80044a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044aa:	6593      	str	r3, [r2, #88]	; 0x58
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <LCD_MspInit+0x17c>)
 80044ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]
}
 80044b8:	bf00      	nop
 80044ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
 80044c8:	48000400 	.word	0x48000400
 80044cc:	48000800 	.word	0x48000800
 80044d0:	48000c00 	.word	0x48000c00

080044d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <HAL_MspInit+0x44>)
 80044dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044de:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <HAL_MspInit+0x44>)
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	6613      	str	r3, [r2, #96]	; 0x60
 80044e6:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <HAL_MspInit+0x44>)
 80044e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	4b09      	ldr	r3, [pc, #36]	; (8004518 <HAL_MspInit+0x44>)
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f6:	4a08      	ldr	r2, [pc, #32]	; (8004518 <HAL_MspInit+0x44>)
 80044f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fc:	6593      	str	r3, [r2, #88]	; 0x58
 80044fe:	4b06      	ldr	r3, [pc, #24]	; (8004518 <HAL_MspInit+0x44>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000

0800451c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004524:	f107 0314 	add.w	r3, r7, #20
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a17      	ldr	r2, [pc, #92]	; (8004598 <HAL_I2C_MspInit+0x7c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d127      	bne.n	800458e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800453e:	4b17      	ldr	r3, [pc, #92]	; (800459c <HAL_I2C_MspInit+0x80>)
 8004540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004542:	4a16      	ldr	r2, [pc, #88]	; (800459c <HAL_I2C_MspInit+0x80>)
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800454a:	4b14      	ldr	r3, [pc, #80]	; (800459c <HAL_I2C_MspInit+0x80>)
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004556:	23c0      	movs	r3, #192	; 0xc0
 8004558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800455a:	2312      	movs	r3, #18
 800455c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800455e:	2301      	movs	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004562:	2303      	movs	r3, #3
 8004564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004566:	2304      	movs	r3, #4
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800456a:	f107 0314 	add.w	r3, r7, #20
 800456e:	4619      	mov	r1, r3
 8004570:	480b      	ldr	r0, [pc, #44]	; (80045a0 <HAL_I2C_MspInit+0x84>)
 8004572:	f7fc f801 	bl	8000578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004576:	4b09      	ldr	r3, [pc, #36]	; (800459c <HAL_I2C_MspInit+0x80>)
 8004578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457a:	4a08      	ldr	r2, [pc, #32]	; (800459c <HAL_I2C_MspInit+0x80>)
 800457c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004580:	6593      	str	r3, [r2, #88]	; 0x58
 8004582:	4b06      	ldr	r3, [pc, #24]	; (800459c <HAL_I2C_MspInit+0x80>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800458e:	bf00      	nop
 8004590:	3728      	adds	r7, #40	; 0x28
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40005400 	.word	0x40005400
 800459c:	40021000 	.word	0x40021000
 80045a0:	48000400 	.word	0x48000400

080045a4 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08a      	sub	sp, #40	; 0x28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ac:	f107 0314 	add.w	r3, r7, #20
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a26      	ldr	r2, [pc, #152]	; (800465c <HAL_LCD_MspInit+0xb8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d145      	bne.n	8004652 <HAL_LCD_MspInit+0xae>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <HAL_LCD_MspInit+0xbc>)
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	4a25      	ldr	r2, [pc, #148]	; (8004660 <HAL_LCD_MspInit+0xbc>)
 80045cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045d0:	6593      	str	r3, [r2, #88]	; 0x58
 80045d2:	4b23      	ldr	r3, [pc, #140]	; (8004660 <HAL_LCD_MspInit+0xbc>)
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045de:	4b20      	ldr	r3, [pc, #128]	; (8004660 <HAL_LCD_MspInit+0xbc>)
 80045e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e2:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <HAL_LCD_MspInit+0xbc>)
 80045e4:	f043 0304 	orr.w	r3, r3, #4
 80045e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045ea:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <HAL_LCD_MspInit+0xbc>)
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f6:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <HAL_LCD_MspInit+0xbc>)
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	4a19      	ldr	r2, [pc, #100]	; (8004660 <HAL_LCD_MspInit+0xbc>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004602:	4b17      	ldr	r3, [pc, #92]	; (8004660 <HAL_LCD_MspInit+0xbc>)
 8004604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	68bb      	ldr	r3, [r7, #8]
    /**LCD GPIO Configuration
    PC3     ------> LCD_VLCD
    PA8     ------> LCD_COM0
    PA9     ------> LCD_COM1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800460e:	2308      	movs	r3, #8
 8004610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004612:	2302      	movs	r3, #2
 8004614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800461a:	2300      	movs	r3, #0
 800461c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800461e:	230b      	movs	r3, #11
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004622:	f107 0314 	add.w	r3, r7, #20
 8004626:	4619      	mov	r1, r3
 8004628:	480e      	ldr	r0, [pc, #56]	; (8004664 <HAL_LCD_MspInit+0xc0>)
 800462a:	f7fb ffa5 	bl	8000578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800462e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004634:	2302      	movs	r3, #2
 8004636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004638:	2300      	movs	r3, #0
 800463a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463c:	2300      	movs	r3, #0
 800463e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8004640:	230b      	movs	r3, #11
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	4619      	mov	r1, r3
 800464a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800464e:	f7fb ff93 	bl	8000578 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8004652:	bf00      	nop
 8004654:	3728      	adds	r7, #40	; 0x28
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40002400 	.word	0x40002400
 8004660:	40021000 	.word	0x40021000
 8004664:	48000800 	.word	0x48000800

08004668 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <HAL_SPI_MspInit+0x7c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d128      	bne.n	80046dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800468a:	4b17      	ldr	r3, [pc, #92]	; (80046e8 <HAL_SPI_MspInit+0x80>)
 800468c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468e:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <HAL_SPI_MspInit+0x80>)
 8004690:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004694:	6613      	str	r3, [r2, #96]	; 0x60
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <HAL_SPI_MspInit+0x80>)
 8004698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80046a2:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <HAL_SPI_MspInit+0x80>)
 80046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a6:	4a10      	ldr	r2, [pc, #64]	; (80046e8 <HAL_SPI_MspInit+0x80>)
 80046a8:	f043 0310 	orr.w	r3, r3, #16
 80046ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046ae:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <HAL_SPI_MspInit+0x80>)
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80046ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80046be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c0:	2302      	movs	r3, #2
 80046c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c8:	2303      	movs	r3, #3
 80046ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046cc:	2305      	movs	r3, #5
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046d0:	f107 0314 	add.w	r3, r7, #20
 80046d4:	4619      	mov	r1, r3
 80046d6:	4805      	ldr	r0, [pc, #20]	; (80046ec <HAL_SPI_MspInit+0x84>)
 80046d8:	f7fb ff4e 	bl	8000578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80046dc:	bf00      	nop
 80046de:	3728      	adds	r7, #40	; 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40013000 	.word	0x40013000
 80046e8:	40021000 	.word	0x40021000
 80046ec:	48001000 	.word	0x48001000

080046f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046fe:	b480      	push	{r7}
 8004700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004702:	e7fe      	b.n	8004702 <HardFault_Handler+0x4>

08004704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004708:	e7fe      	b.n	8004708 <MemManage_Handler+0x4>

0800470a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800470a:	b480      	push	{r7}
 800470c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800470e:	e7fe      	b.n	800470e <BusFault_Handler+0x4>

08004710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004714:	e7fe      	b.n	8004714 <UsageFault_Handler+0x4>

08004716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004716:	b480      	push	{r7}
 8004718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800471a:	bf00      	nop
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004732:	b480      	push	{r7}
 8004734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004744:	f7fb fdf0 	bl	8000328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004748:	bf00      	nop
 800474a:	bd80      	pop	{r7, pc}

0800474c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004754:	4b11      	ldr	r3, [pc, #68]	; (800479c <_sbrk+0x50>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d102      	bne.n	8004762 <_sbrk+0x16>
		heap_end = &end;
 800475c:	4b0f      	ldr	r3, [pc, #60]	; (800479c <_sbrk+0x50>)
 800475e:	4a10      	ldr	r2, [pc, #64]	; (80047a0 <_sbrk+0x54>)
 8004760:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004762:	4b0e      	ldr	r3, [pc, #56]	; (800479c <_sbrk+0x50>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <_sbrk+0x50>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4413      	add	r3, r2
 8004770:	466a      	mov	r2, sp
 8004772:	4293      	cmp	r3, r2
 8004774:	d907      	bls.n	8004786 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004776:	f000 f875 	bl	8004864 <__errno>
 800477a:	4602      	mov	r2, r0
 800477c:	230c      	movs	r3, #12
 800477e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004784:	e006      	b.n	8004794 <_sbrk+0x48>
	}

	heap_end += incr;
 8004786:	4b05      	ldr	r3, [pc, #20]	; (800479c <_sbrk+0x50>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4413      	add	r3, r2
 800478e:	4a03      	ldr	r2, [pc, #12]	; (800479c <_sbrk+0x50>)
 8004790:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004792:	68fb      	ldr	r3, [r7, #12]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000090 	.word	0x20000090
 80047a0:	200001e0 	.word	0x200001e0

080047a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047a8:	4b17      	ldr	r3, [pc, #92]	; (8004808 <SystemInit+0x64>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	4a16      	ldr	r2, [pc, #88]	; (8004808 <SystemInit+0x64>)
 80047b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80047b8:	4b14      	ldr	r3, [pc, #80]	; (800480c <SystemInit+0x68>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a13      	ldr	r2, [pc, #76]	; (800480c <SystemInit+0x68>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <SystemInit+0x68>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <SystemInit+0x68>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a0f      	ldr	r2, [pc, #60]	; (800480c <SystemInit+0x68>)
 80047d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80047d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80047d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80047da:	4b0c      	ldr	r3, [pc, #48]	; (800480c <SystemInit+0x68>)
 80047dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80047e2:	4b0a      	ldr	r3, [pc, #40]	; (800480c <SystemInit+0x68>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <SystemInit+0x68>)
 80047e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80047ee:	4b07      	ldr	r3, [pc, #28]	; (800480c <SystemInit+0x68>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047f4:	4b04      	ldr	r3, [pc, #16]	; (8004808 <SystemInit+0x64>)
 80047f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047fa:	609a      	str	r2, [r3, #8]
#endif
}
 80047fc:	bf00      	nop
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	e000ed00 	.word	0xe000ed00
 800480c:	40021000 	.word	0x40021000

08004810 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004848 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004814:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004816:	e003      	b.n	8004820 <LoopCopyDataInit>

08004818 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800481a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800481c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800481e:	3104      	adds	r1, #4

08004820 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004820:	480b      	ldr	r0, [pc, #44]	; (8004850 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004822:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004824:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004826:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004828:	d3f6      	bcc.n	8004818 <CopyDataInit>
	ldr	r2, =_sbss
 800482a:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <LoopForever+0x12>)
	b	LoopFillZerobss
 800482c:	e002      	b.n	8004834 <LoopFillZerobss>

0800482e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800482e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004830:	f842 3b04 	str.w	r3, [r2], #4

08004834 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <LoopForever+0x16>)
	cmp	r2, r3
 8004836:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004838:	d3f9      	bcc.n	800482e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800483a:	f7ff ffb3 	bl	80047a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800483e:	f000 f817 	bl	8004870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004842:	f7ff fb8f 	bl	8003f64 <main>

08004846 <LoopForever>:

LoopForever:
    b LoopForever
 8004846:	e7fe      	b.n	8004846 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004848:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800484c:	080052a0 	.word	0x080052a0
	ldr	r0, =_sdata
 8004850:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004854:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8004858:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800485c:	200001dc 	.word	0x200001dc

08004860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004860:	e7fe      	b.n	8004860 <ADC1_2_IRQHandler>
	...

08004864 <__errno>:
 8004864:	4b01      	ldr	r3, [pc, #4]	; (800486c <__errno+0x8>)
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	2000000c 	.word	0x2000000c

08004870 <__libc_init_array>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	4e0d      	ldr	r6, [pc, #52]	; (80048a8 <__libc_init_array+0x38>)
 8004874:	4c0d      	ldr	r4, [pc, #52]	; (80048ac <__libc_init_array+0x3c>)
 8004876:	1ba4      	subs	r4, r4, r6
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	2500      	movs	r5, #0
 800487c:	42a5      	cmp	r5, r4
 800487e:	d109      	bne.n	8004894 <__libc_init_array+0x24>
 8004880:	4e0b      	ldr	r6, [pc, #44]	; (80048b0 <__libc_init_array+0x40>)
 8004882:	4c0c      	ldr	r4, [pc, #48]	; (80048b4 <__libc_init_array+0x44>)
 8004884:	f000 fc26 	bl	80050d4 <_init>
 8004888:	1ba4      	subs	r4, r4, r6
 800488a:	10a4      	asrs	r4, r4, #2
 800488c:	2500      	movs	r5, #0
 800488e:	42a5      	cmp	r5, r4
 8004890:	d105      	bne.n	800489e <__libc_init_array+0x2e>
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004898:	4798      	blx	r3
 800489a:	3501      	adds	r5, #1
 800489c:	e7ee      	b.n	800487c <__libc_init_array+0xc>
 800489e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048a2:	4798      	blx	r3
 80048a4:	3501      	adds	r5, #1
 80048a6:	e7f2      	b.n	800488e <__libc_init_array+0x1e>
 80048a8:	08005298 	.word	0x08005298
 80048ac:	08005298 	.word	0x08005298
 80048b0:	08005298 	.word	0x08005298
 80048b4:	0800529c 	.word	0x0800529c

080048b8 <memset>:
 80048b8:	4402      	add	r2, r0
 80048ba:	4603      	mov	r3, r0
 80048bc:	4293      	cmp	r3, r2
 80048be:	d100      	bne.n	80048c2 <memset+0xa>
 80048c0:	4770      	bx	lr
 80048c2:	f803 1b01 	strb.w	r1, [r3], #1
 80048c6:	e7f9      	b.n	80048bc <memset+0x4>

080048c8 <siprintf>:
 80048c8:	b40e      	push	{r1, r2, r3}
 80048ca:	b500      	push	{lr}
 80048cc:	b09c      	sub	sp, #112	; 0x70
 80048ce:	ab1d      	add	r3, sp, #116	; 0x74
 80048d0:	9002      	str	r0, [sp, #8]
 80048d2:	9006      	str	r0, [sp, #24]
 80048d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048d8:	4809      	ldr	r0, [pc, #36]	; (8004900 <siprintf+0x38>)
 80048da:	9107      	str	r1, [sp, #28]
 80048dc:	9104      	str	r1, [sp, #16]
 80048de:	4909      	ldr	r1, [pc, #36]	; (8004904 <siprintf+0x3c>)
 80048e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048e4:	9105      	str	r1, [sp, #20]
 80048e6:	6800      	ldr	r0, [r0, #0]
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	a902      	add	r1, sp, #8
 80048ec:	f000 f90e 	bl	8004b0c <_svfiprintf_r>
 80048f0:	9b02      	ldr	r3, [sp, #8]
 80048f2:	2200      	movs	r2, #0
 80048f4:	701a      	strb	r2, [r3, #0]
 80048f6:	b01c      	add	sp, #112	; 0x70
 80048f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048fc:	b003      	add	sp, #12
 80048fe:	4770      	bx	lr
 8004900:	2000000c 	.word	0x2000000c
 8004904:	ffff0208 	.word	0xffff0208

08004908 <_free_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4605      	mov	r5, r0
 800490c:	2900      	cmp	r1, #0
 800490e:	d045      	beq.n	800499c <_free_r+0x94>
 8004910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004914:	1f0c      	subs	r4, r1, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	bfb8      	it	lt
 800491a:	18e4      	addlt	r4, r4, r3
 800491c:	f000 fbaa 	bl	8005074 <__malloc_lock>
 8004920:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <_free_r+0x98>)
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	4610      	mov	r0, r2
 8004926:	b933      	cbnz	r3, 8004936 <_free_r+0x2e>
 8004928:	6063      	str	r3, [r4, #4]
 800492a:	6014      	str	r4, [r2, #0]
 800492c:	4628      	mov	r0, r5
 800492e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004932:	f000 bba0 	b.w	8005076 <__malloc_unlock>
 8004936:	42a3      	cmp	r3, r4
 8004938:	d90c      	bls.n	8004954 <_free_r+0x4c>
 800493a:	6821      	ldr	r1, [r4, #0]
 800493c:	1862      	adds	r2, r4, r1
 800493e:	4293      	cmp	r3, r2
 8004940:	bf04      	itt	eq
 8004942:	681a      	ldreq	r2, [r3, #0]
 8004944:	685b      	ldreq	r3, [r3, #4]
 8004946:	6063      	str	r3, [r4, #4]
 8004948:	bf04      	itt	eq
 800494a:	1852      	addeq	r2, r2, r1
 800494c:	6022      	streq	r2, [r4, #0]
 800494e:	6004      	str	r4, [r0, #0]
 8004950:	e7ec      	b.n	800492c <_free_r+0x24>
 8004952:	4613      	mov	r3, r2
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	b10a      	cbz	r2, 800495c <_free_r+0x54>
 8004958:	42a2      	cmp	r2, r4
 800495a:	d9fa      	bls.n	8004952 <_free_r+0x4a>
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	1858      	adds	r0, r3, r1
 8004960:	42a0      	cmp	r0, r4
 8004962:	d10b      	bne.n	800497c <_free_r+0x74>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	4401      	add	r1, r0
 8004968:	1858      	adds	r0, r3, r1
 800496a:	4282      	cmp	r2, r0
 800496c:	6019      	str	r1, [r3, #0]
 800496e:	d1dd      	bne.n	800492c <_free_r+0x24>
 8004970:	6810      	ldr	r0, [r2, #0]
 8004972:	6852      	ldr	r2, [r2, #4]
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	4401      	add	r1, r0
 8004978:	6019      	str	r1, [r3, #0]
 800497a:	e7d7      	b.n	800492c <_free_r+0x24>
 800497c:	d902      	bls.n	8004984 <_free_r+0x7c>
 800497e:	230c      	movs	r3, #12
 8004980:	602b      	str	r3, [r5, #0]
 8004982:	e7d3      	b.n	800492c <_free_r+0x24>
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	1821      	adds	r1, r4, r0
 8004988:	428a      	cmp	r2, r1
 800498a:	bf04      	itt	eq
 800498c:	6811      	ldreq	r1, [r2, #0]
 800498e:	6852      	ldreq	r2, [r2, #4]
 8004990:	6062      	str	r2, [r4, #4]
 8004992:	bf04      	itt	eq
 8004994:	1809      	addeq	r1, r1, r0
 8004996:	6021      	streq	r1, [r4, #0]
 8004998:	605c      	str	r4, [r3, #4]
 800499a:	e7c7      	b.n	800492c <_free_r+0x24>
 800499c:	bd38      	pop	{r3, r4, r5, pc}
 800499e:	bf00      	nop
 80049a0:	20000094 	.word	0x20000094

080049a4 <_malloc_r>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	1ccd      	adds	r5, r1, #3
 80049a8:	f025 0503 	bic.w	r5, r5, #3
 80049ac:	3508      	adds	r5, #8
 80049ae:	2d0c      	cmp	r5, #12
 80049b0:	bf38      	it	cc
 80049b2:	250c      	movcc	r5, #12
 80049b4:	2d00      	cmp	r5, #0
 80049b6:	4606      	mov	r6, r0
 80049b8:	db01      	blt.n	80049be <_malloc_r+0x1a>
 80049ba:	42a9      	cmp	r1, r5
 80049bc:	d903      	bls.n	80049c6 <_malloc_r+0x22>
 80049be:	230c      	movs	r3, #12
 80049c0:	6033      	str	r3, [r6, #0]
 80049c2:	2000      	movs	r0, #0
 80049c4:	bd70      	pop	{r4, r5, r6, pc}
 80049c6:	f000 fb55 	bl	8005074 <__malloc_lock>
 80049ca:	4a21      	ldr	r2, [pc, #132]	; (8004a50 <_malloc_r+0xac>)
 80049cc:	6814      	ldr	r4, [r2, #0]
 80049ce:	4621      	mov	r1, r4
 80049d0:	b991      	cbnz	r1, 80049f8 <_malloc_r+0x54>
 80049d2:	4c20      	ldr	r4, [pc, #128]	; (8004a54 <_malloc_r+0xb0>)
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	b91b      	cbnz	r3, 80049e0 <_malloc_r+0x3c>
 80049d8:	4630      	mov	r0, r6
 80049da:	f000 fb17 	bl	800500c <_sbrk_r>
 80049de:	6020      	str	r0, [r4, #0]
 80049e0:	4629      	mov	r1, r5
 80049e2:	4630      	mov	r0, r6
 80049e4:	f000 fb12 	bl	800500c <_sbrk_r>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d124      	bne.n	8004a36 <_malloc_r+0x92>
 80049ec:	230c      	movs	r3, #12
 80049ee:	6033      	str	r3, [r6, #0]
 80049f0:	4630      	mov	r0, r6
 80049f2:	f000 fb40 	bl	8005076 <__malloc_unlock>
 80049f6:	e7e4      	b.n	80049c2 <_malloc_r+0x1e>
 80049f8:	680b      	ldr	r3, [r1, #0]
 80049fa:	1b5b      	subs	r3, r3, r5
 80049fc:	d418      	bmi.n	8004a30 <_malloc_r+0x8c>
 80049fe:	2b0b      	cmp	r3, #11
 8004a00:	d90f      	bls.n	8004a22 <_malloc_r+0x7e>
 8004a02:	600b      	str	r3, [r1, #0]
 8004a04:	50cd      	str	r5, [r1, r3]
 8004a06:	18cc      	adds	r4, r1, r3
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f000 fb34 	bl	8005076 <__malloc_unlock>
 8004a0e:	f104 000b 	add.w	r0, r4, #11
 8004a12:	1d23      	adds	r3, r4, #4
 8004a14:	f020 0007 	bic.w	r0, r0, #7
 8004a18:	1ac3      	subs	r3, r0, r3
 8004a1a:	d0d3      	beq.n	80049c4 <_malloc_r+0x20>
 8004a1c:	425a      	negs	r2, r3
 8004a1e:	50e2      	str	r2, [r4, r3]
 8004a20:	e7d0      	b.n	80049c4 <_malloc_r+0x20>
 8004a22:	428c      	cmp	r4, r1
 8004a24:	684b      	ldr	r3, [r1, #4]
 8004a26:	bf16      	itet	ne
 8004a28:	6063      	strne	r3, [r4, #4]
 8004a2a:	6013      	streq	r3, [r2, #0]
 8004a2c:	460c      	movne	r4, r1
 8004a2e:	e7eb      	b.n	8004a08 <_malloc_r+0x64>
 8004a30:	460c      	mov	r4, r1
 8004a32:	6849      	ldr	r1, [r1, #4]
 8004a34:	e7cc      	b.n	80049d0 <_malloc_r+0x2c>
 8004a36:	1cc4      	adds	r4, r0, #3
 8004a38:	f024 0403 	bic.w	r4, r4, #3
 8004a3c:	42a0      	cmp	r0, r4
 8004a3e:	d005      	beq.n	8004a4c <_malloc_r+0xa8>
 8004a40:	1a21      	subs	r1, r4, r0
 8004a42:	4630      	mov	r0, r6
 8004a44:	f000 fae2 	bl	800500c <_sbrk_r>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d0cf      	beq.n	80049ec <_malloc_r+0x48>
 8004a4c:	6025      	str	r5, [r4, #0]
 8004a4e:	e7db      	b.n	8004a08 <_malloc_r+0x64>
 8004a50:	20000094 	.word	0x20000094
 8004a54:	20000098 	.word	0x20000098

08004a58 <__ssputs_r>:
 8004a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5c:	688e      	ldr	r6, [r1, #8]
 8004a5e:	429e      	cmp	r6, r3
 8004a60:	4682      	mov	sl, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	4690      	mov	r8, r2
 8004a66:	4699      	mov	r9, r3
 8004a68:	d837      	bhi.n	8004ada <__ssputs_r+0x82>
 8004a6a:	898a      	ldrh	r2, [r1, #12]
 8004a6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a70:	d031      	beq.n	8004ad6 <__ssputs_r+0x7e>
 8004a72:	6825      	ldr	r5, [r4, #0]
 8004a74:	6909      	ldr	r1, [r1, #16]
 8004a76:	1a6f      	subs	r7, r5, r1
 8004a78:	6965      	ldr	r5, [r4, #20]
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a80:	fb95 f5f3 	sdiv	r5, r5, r3
 8004a84:	f109 0301 	add.w	r3, r9, #1
 8004a88:	443b      	add	r3, r7
 8004a8a:	429d      	cmp	r5, r3
 8004a8c:	bf38      	it	cc
 8004a8e:	461d      	movcc	r5, r3
 8004a90:	0553      	lsls	r3, r2, #21
 8004a92:	d530      	bpl.n	8004af6 <__ssputs_r+0x9e>
 8004a94:	4629      	mov	r1, r5
 8004a96:	f7ff ff85 	bl	80049a4 <_malloc_r>
 8004a9a:	4606      	mov	r6, r0
 8004a9c:	b950      	cbnz	r0, 8004ab4 <__ssputs_r+0x5c>
 8004a9e:	230c      	movs	r3, #12
 8004aa0:	f8ca 3000 	str.w	r3, [sl]
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aaa:	81a3      	strh	r3, [r4, #12]
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab4:	463a      	mov	r2, r7
 8004ab6:	6921      	ldr	r1, [r4, #16]
 8004ab8:	f000 fab8 	bl	800502c <memcpy>
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac6:	81a3      	strh	r3, [r4, #12]
 8004ac8:	6126      	str	r6, [r4, #16]
 8004aca:	6165      	str	r5, [r4, #20]
 8004acc:	443e      	add	r6, r7
 8004ace:	1bed      	subs	r5, r5, r7
 8004ad0:	6026      	str	r6, [r4, #0]
 8004ad2:	60a5      	str	r5, [r4, #8]
 8004ad4:	464e      	mov	r6, r9
 8004ad6:	454e      	cmp	r6, r9
 8004ad8:	d900      	bls.n	8004adc <__ssputs_r+0x84>
 8004ada:	464e      	mov	r6, r9
 8004adc:	4632      	mov	r2, r6
 8004ade:	4641      	mov	r1, r8
 8004ae0:	6820      	ldr	r0, [r4, #0]
 8004ae2:	f000 faae 	bl	8005042 <memmove>
 8004ae6:	68a3      	ldr	r3, [r4, #8]
 8004ae8:	1b9b      	subs	r3, r3, r6
 8004aea:	60a3      	str	r3, [r4, #8]
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	441e      	add	r6, r3
 8004af0:	6026      	str	r6, [r4, #0]
 8004af2:	2000      	movs	r0, #0
 8004af4:	e7dc      	b.n	8004ab0 <__ssputs_r+0x58>
 8004af6:	462a      	mov	r2, r5
 8004af8:	f000 fabe 	bl	8005078 <_realloc_r>
 8004afc:	4606      	mov	r6, r0
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d1e2      	bne.n	8004ac8 <__ssputs_r+0x70>
 8004b02:	6921      	ldr	r1, [r4, #16]
 8004b04:	4650      	mov	r0, sl
 8004b06:	f7ff feff 	bl	8004908 <_free_r>
 8004b0a:	e7c8      	b.n	8004a9e <__ssputs_r+0x46>

08004b0c <_svfiprintf_r>:
 8004b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	461d      	mov	r5, r3
 8004b12:	898b      	ldrh	r3, [r1, #12]
 8004b14:	061f      	lsls	r7, r3, #24
 8004b16:	b09d      	sub	sp, #116	; 0x74
 8004b18:	4680      	mov	r8, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	d50f      	bpl.n	8004b40 <_svfiprintf_r+0x34>
 8004b20:	690b      	ldr	r3, [r1, #16]
 8004b22:	b96b      	cbnz	r3, 8004b40 <_svfiprintf_r+0x34>
 8004b24:	2140      	movs	r1, #64	; 0x40
 8004b26:	f7ff ff3d 	bl	80049a4 <_malloc_r>
 8004b2a:	6020      	str	r0, [r4, #0]
 8004b2c:	6120      	str	r0, [r4, #16]
 8004b2e:	b928      	cbnz	r0, 8004b3c <_svfiprintf_r+0x30>
 8004b30:	230c      	movs	r3, #12
 8004b32:	f8c8 3000 	str.w	r3, [r8]
 8004b36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b3a:	e0c8      	b.n	8004cce <_svfiprintf_r+0x1c2>
 8004b3c:	2340      	movs	r3, #64	; 0x40
 8004b3e:	6163      	str	r3, [r4, #20]
 8004b40:	2300      	movs	r3, #0
 8004b42:	9309      	str	r3, [sp, #36]	; 0x24
 8004b44:	2320      	movs	r3, #32
 8004b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b4a:	2330      	movs	r3, #48	; 0x30
 8004b4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b50:	9503      	str	r5, [sp, #12]
 8004b52:	f04f 0b01 	mov.w	fp, #1
 8004b56:	4637      	mov	r7, r6
 8004b58:	463d      	mov	r5, r7
 8004b5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b5e:	b10b      	cbz	r3, 8004b64 <_svfiprintf_r+0x58>
 8004b60:	2b25      	cmp	r3, #37	; 0x25
 8004b62:	d13e      	bne.n	8004be2 <_svfiprintf_r+0xd6>
 8004b64:	ebb7 0a06 	subs.w	sl, r7, r6
 8004b68:	d00b      	beq.n	8004b82 <_svfiprintf_r+0x76>
 8004b6a:	4653      	mov	r3, sl
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4640      	mov	r0, r8
 8004b72:	f7ff ff71 	bl	8004a58 <__ssputs_r>
 8004b76:	3001      	adds	r0, #1
 8004b78:	f000 80a4 	beq.w	8004cc4 <_svfiprintf_r+0x1b8>
 8004b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7e:	4453      	add	r3, sl
 8004b80:	9309      	str	r3, [sp, #36]	; 0x24
 8004b82:	783b      	ldrb	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 809d 	beq.w	8004cc4 <_svfiprintf_r+0x1b8>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b94:	9304      	str	r3, [sp, #16]
 8004b96:	9307      	str	r3, [sp, #28]
 8004b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b9e:	462f      	mov	r7, r5
 8004ba0:	2205      	movs	r2, #5
 8004ba2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004ba6:	4850      	ldr	r0, [pc, #320]	; (8004ce8 <_svfiprintf_r+0x1dc>)
 8004ba8:	f7fb fb1a 	bl	80001e0 <memchr>
 8004bac:	9b04      	ldr	r3, [sp, #16]
 8004bae:	b9d0      	cbnz	r0, 8004be6 <_svfiprintf_r+0xda>
 8004bb0:	06d9      	lsls	r1, r3, #27
 8004bb2:	bf44      	itt	mi
 8004bb4:	2220      	movmi	r2, #32
 8004bb6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bba:	071a      	lsls	r2, r3, #28
 8004bbc:	bf44      	itt	mi
 8004bbe:	222b      	movmi	r2, #43	; 0x2b
 8004bc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004bc4:	782a      	ldrb	r2, [r5, #0]
 8004bc6:	2a2a      	cmp	r2, #42	; 0x2a
 8004bc8:	d015      	beq.n	8004bf6 <_svfiprintf_r+0xea>
 8004bca:	9a07      	ldr	r2, [sp, #28]
 8004bcc:	462f      	mov	r7, r5
 8004bce:	2000      	movs	r0, #0
 8004bd0:	250a      	movs	r5, #10
 8004bd2:	4639      	mov	r1, r7
 8004bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bd8:	3b30      	subs	r3, #48	; 0x30
 8004bda:	2b09      	cmp	r3, #9
 8004bdc:	d94d      	bls.n	8004c7a <_svfiprintf_r+0x16e>
 8004bde:	b1b8      	cbz	r0, 8004c10 <_svfiprintf_r+0x104>
 8004be0:	e00f      	b.n	8004c02 <_svfiprintf_r+0xf6>
 8004be2:	462f      	mov	r7, r5
 8004be4:	e7b8      	b.n	8004b58 <_svfiprintf_r+0x4c>
 8004be6:	4a40      	ldr	r2, [pc, #256]	; (8004ce8 <_svfiprintf_r+0x1dc>)
 8004be8:	1a80      	subs	r0, r0, r2
 8004bea:	fa0b f000 	lsl.w	r0, fp, r0
 8004bee:	4318      	orrs	r0, r3
 8004bf0:	9004      	str	r0, [sp, #16]
 8004bf2:	463d      	mov	r5, r7
 8004bf4:	e7d3      	b.n	8004b9e <_svfiprintf_r+0x92>
 8004bf6:	9a03      	ldr	r2, [sp, #12]
 8004bf8:	1d11      	adds	r1, r2, #4
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	9103      	str	r1, [sp, #12]
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	db01      	blt.n	8004c06 <_svfiprintf_r+0xfa>
 8004c02:	9207      	str	r2, [sp, #28]
 8004c04:	e004      	b.n	8004c10 <_svfiprintf_r+0x104>
 8004c06:	4252      	negs	r2, r2
 8004c08:	f043 0302 	orr.w	r3, r3, #2
 8004c0c:	9207      	str	r2, [sp, #28]
 8004c0e:	9304      	str	r3, [sp, #16]
 8004c10:	783b      	ldrb	r3, [r7, #0]
 8004c12:	2b2e      	cmp	r3, #46	; 0x2e
 8004c14:	d10c      	bne.n	8004c30 <_svfiprintf_r+0x124>
 8004c16:	787b      	ldrb	r3, [r7, #1]
 8004c18:	2b2a      	cmp	r3, #42	; 0x2a
 8004c1a:	d133      	bne.n	8004c84 <_svfiprintf_r+0x178>
 8004c1c:	9b03      	ldr	r3, [sp, #12]
 8004c1e:	1d1a      	adds	r2, r3, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	9203      	str	r2, [sp, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bfb8      	it	lt
 8004c28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c2c:	3702      	adds	r7, #2
 8004c2e:	9305      	str	r3, [sp, #20]
 8004c30:	4d2e      	ldr	r5, [pc, #184]	; (8004cec <_svfiprintf_r+0x1e0>)
 8004c32:	7839      	ldrb	r1, [r7, #0]
 8004c34:	2203      	movs	r2, #3
 8004c36:	4628      	mov	r0, r5
 8004c38:	f7fb fad2 	bl	80001e0 <memchr>
 8004c3c:	b138      	cbz	r0, 8004c4e <_svfiprintf_r+0x142>
 8004c3e:	2340      	movs	r3, #64	; 0x40
 8004c40:	1b40      	subs	r0, r0, r5
 8004c42:	fa03 f000 	lsl.w	r0, r3, r0
 8004c46:	9b04      	ldr	r3, [sp, #16]
 8004c48:	4303      	orrs	r3, r0
 8004c4a:	3701      	adds	r7, #1
 8004c4c:	9304      	str	r3, [sp, #16]
 8004c4e:	7839      	ldrb	r1, [r7, #0]
 8004c50:	4827      	ldr	r0, [pc, #156]	; (8004cf0 <_svfiprintf_r+0x1e4>)
 8004c52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c56:	2206      	movs	r2, #6
 8004c58:	1c7e      	adds	r6, r7, #1
 8004c5a:	f7fb fac1 	bl	80001e0 <memchr>
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	d038      	beq.n	8004cd4 <_svfiprintf_r+0x1c8>
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <_svfiprintf_r+0x1e8>)
 8004c64:	bb13      	cbnz	r3, 8004cac <_svfiprintf_r+0x1a0>
 8004c66:	9b03      	ldr	r3, [sp, #12]
 8004c68:	3307      	adds	r3, #7
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	3308      	adds	r3, #8
 8004c70:	9303      	str	r3, [sp, #12]
 8004c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c74:	444b      	add	r3, r9
 8004c76:	9309      	str	r3, [sp, #36]	; 0x24
 8004c78:	e76d      	b.n	8004b56 <_svfiprintf_r+0x4a>
 8004c7a:	fb05 3202 	mla	r2, r5, r2, r3
 8004c7e:	2001      	movs	r0, #1
 8004c80:	460f      	mov	r7, r1
 8004c82:	e7a6      	b.n	8004bd2 <_svfiprintf_r+0xc6>
 8004c84:	2300      	movs	r3, #0
 8004c86:	3701      	adds	r7, #1
 8004c88:	9305      	str	r3, [sp, #20]
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	250a      	movs	r5, #10
 8004c8e:	4638      	mov	r0, r7
 8004c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c94:	3a30      	subs	r2, #48	; 0x30
 8004c96:	2a09      	cmp	r2, #9
 8004c98:	d903      	bls.n	8004ca2 <_svfiprintf_r+0x196>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0c8      	beq.n	8004c30 <_svfiprintf_r+0x124>
 8004c9e:	9105      	str	r1, [sp, #20]
 8004ca0:	e7c6      	b.n	8004c30 <_svfiprintf_r+0x124>
 8004ca2:	fb05 2101 	mla	r1, r5, r1, r2
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	4607      	mov	r7, r0
 8004caa:	e7f0      	b.n	8004c8e <_svfiprintf_r+0x182>
 8004cac:	ab03      	add	r3, sp, #12
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	4b11      	ldr	r3, [pc, #68]	; (8004cf8 <_svfiprintf_r+0x1ec>)
 8004cb4:	a904      	add	r1, sp, #16
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	f3af 8000 	nop.w
 8004cbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004cc0:	4681      	mov	r9, r0
 8004cc2:	d1d6      	bne.n	8004c72 <_svfiprintf_r+0x166>
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	065b      	lsls	r3, r3, #25
 8004cc8:	f53f af35 	bmi.w	8004b36 <_svfiprintf_r+0x2a>
 8004ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cce:	b01d      	add	sp, #116	; 0x74
 8004cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd4:	ab03      	add	r3, sp, #12
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	4622      	mov	r2, r4
 8004cda:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <_svfiprintf_r+0x1ec>)
 8004cdc:	a904      	add	r1, sp, #16
 8004cde:	4640      	mov	r0, r8
 8004ce0:	f000 f882 	bl	8004de8 <_printf_i>
 8004ce4:	e7ea      	b.n	8004cbc <_svfiprintf_r+0x1b0>
 8004ce6:	bf00      	nop
 8004ce8:	08005264 	.word	0x08005264
 8004cec:	0800526a 	.word	0x0800526a
 8004cf0:	0800526e 	.word	0x0800526e
 8004cf4:	00000000 	.word	0x00000000
 8004cf8:	08004a59 	.word	0x08004a59

08004cfc <_printf_common>:
 8004cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	4691      	mov	r9, r2
 8004d02:	461f      	mov	r7, r3
 8004d04:	688a      	ldr	r2, [r1, #8]
 8004d06:	690b      	ldr	r3, [r1, #16]
 8004d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	bfb8      	it	lt
 8004d10:	4613      	movlt	r3, r2
 8004d12:	f8c9 3000 	str.w	r3, [r9]
 8004d16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	b112      	cbz	r2, 8004d26 <_printf_common+0x2a>
 8004d20:	3301      	adds	r3, #1
 8004d22:	f8c9 3000 	str.w	r3, [r9]
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	0699      	lsls	r1, r3, #26
 8004d2a:	bf42      	ittt	mi
 8004d2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d30:	3302      	addmi	r3, #2
 8004d32:	f8c9 3000 	strmi.w	r3, [r9]
 8004d36:	6825      	ldr	r5, [r4, #0]
 8004d38:	f015 0506 	ands.w	r5, r5, #6
 8004d3c:	d107      	bne.n	8004d4e <_printf_common+0x52>
 8004d3e:	f104 0a19 	add.w	sl, r4, #25
 8004d42:	68e3      	ldr	r3, [r4, #12]
 8004d44:	f8d9 2000 	ldr.w	r2, [r9]
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	42ab      	cmp	r3, r5
 8004d4c:	dc28      	bgt.n	8004da0 <_printf_common+0xa4>
 8004d4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	3300      	adds	r3, #0
 8004d56:	bf18      	it	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	0692      	lsls	r2, r2, #26
 8004d5c:	d42d      	bmi.n	8004dba <_printf_common+0xbe>
 8004d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d62:	4639      	mov	r1, r7
 8004d64:	4630      	mov	r0, r6
 8004d66:	47c0      	blx	r8
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d020      	beq.n	8004dae <_printf_common+0xb2>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	68e5      	ldr	r5, [r4, #12]
 8004d70:	f8d9 2000 	ldr.w	r2, [r9]
 8004d74:	f003 0306 	and.w	r3, r3, #6
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	bf08      	it	eq
 8004d7c:	1aad      	subeq	r5, r5, r2
 8004d7e:	68a3      	ldr	r3, [r4, #8]
 8004d80:	6922      	ldr	r2, [r4, #16]
 8004d82:	bf0c      	ite	eq
 8004d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d88:	2500      	movne	r5, #0
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	bfc4      	itt	gt
 8004d8e:	1a9b      	subgt	r3, r3, r2
 8004d90:	18ed      	addgt	r5, r5, r3
 8004d92:	f04f 0900 	mov.w	r9, #0
 8004d96:	341a      	adds	r4, #26
 8004d98:	454d      	cmp	r5, r9
 8004d9a:	d11a      	bne.n	8004dd2 <_printf_common+0xd6>
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	e008      	b.n	8004db2 <_printf_common+0xb6>
 8004da0:	2301      	movs	r3, #1
 8004da2:	4652      	mov	r2, sl
 8004da4:	4639      	mov	r1, r7
 8004da6:	4630      	mov	r0, r6
 8004da8:	47c0      	blx	r8
 8004daa:	3001      	adds	r0, #1
 8004dac:	d103      	bne.n	8004db6 <_printf_common+0xba>
 8004dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db6:	3501      	adds	r5, #1
 8004db8:	e7c3      	b.n	8004d42 <_printf_common+0x46>
 8004dba:	18e1      	adds	r1, r4, r3
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	2030      	movs	r0, #48	; 0x30
 8004dc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dc4:	4422      	add	r2, r4
 8004dc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dce:	3302      	adds	r3, #2
 8004dd0:	e7c5      	b.n	8004d5e <_printf_common+0x62>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	4622      	mov	r2, r4
 8004dd6:	4639      	mov	r1, r7
 8004dd8:	4630      	mov	r0, r6
 8004dda:	47c0      	blx	r8
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d0e6      	beq.n	8004dae <_printf_common+0xb2>
 8004de0:	f109 0901 	add.w	r9, r9, #1
 8004de4:	e7d8      	b.n	8004d98 <_printf_common+0x9c>
	...

08004de8 <_printf_i>:
 8004de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004df0:	460c      	mov	r4, r1
 8004df2:	7e09      	ldrb	r1, [r1, #24]
 8004df4:	b085      	sub	sp, #20
 8004df6:	296e      	cmp	r1, #110	; 0x6e
 8004df8:	4617      	mov	r7, r2
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	4698      	mov	r8, r3
 8004dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e00:	f000 80b3 	beq.w	8004f6a <_printf_i+0x182>
 8004e04:	d822      	bhi.n	8004e4c <_printf_i+0x64>
 8004e06:	2963      	cmp	r1, #99	; 0x63
 8004e08:	d036      	beq.n	8004e78 <_printf_i+0x90>
 8004e0a:	d80a      	bhi.n	8004e22 <_printf_i+0x3a>
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	f000 80b9 	beq.w	8004f84 <_printf_i+0x19c>
 8004e12:	2958      	cmp	r1, #88	; 0x58
 8004e14:	f000 8083 	beq.w	8004f1e <_printf_i+0x136>
 8004e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004e20:	e032      	b.n	8004e88 <_printf_i+0xa0>
 8004e22:	2964      	cmp	r1, #100	; 0x64
 8004e24:	d001      	beq.n	8004e2a <_printf_i+0x42>
 8004e26:	2969      	cmp	r1, #105	; 0x69
 8004e28:	d1f6      	bne.n	8004e18 <_printf_i+0x30>
 8004e2a:	6820      	ldr	r0, [r4, #0]
 8004e2c:	6813      	ldr	r3, [r2, #0]
 8004e2e:	0605      	lsls	r5, r0, #24
 8004e30:	f103 0104 	add.w	r1, r3, #4
 8004e34:	d52a      	bpl.n	8004e8c <_printf_i+0xa4>
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6011      	str	r1, [r2, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da03      	bge.n	8004e46 <_printf_i+0x5e>
 8004e3e:	222d      	movs	r2, #45	; 0x2d
 8004e40:	425b      	negs	r3, r3
 8004e42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e46:	486f      	ldr	r0, [pc, #444]	; (8005004 <_printf_i+0x21c>)
 8004e48:	220a      	movs	r2, #10
 8004e4a:	e039      	b.n	8004ec0 <_printf_i+0xd8>
 8004e4c:	2973      	cmp	r1, #115	; 0x73
 8004e4e:	f000 809d 	beq.w	8004f8c <_printf_i+0x1a4>
 8004e52:	d808      	bhi.n	8004e66 <_printf_i+0x7e>
 8004e54:	296f      	cmp	r1, #111	; 0x6f
 8004e56:	d020      	beq.n	8004e9a <_printf_i+0xb2>
 8004e58:	2970      	cmp	r1, #112	; 0x70
 8004e5a:	d1dd      	bne.n	8004e18 <_printf_i+0x30>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	f043 0320 	orr.w	r3, r3, #32
 8004e62:	6023      	str	r3, [r4, #0]
 8004e64:	e003      	b.n	8004e6e <_printf_i+0x86>
 8004e66:	2975      	cmp	r1, #117	; 0x75
 8004e68:	d017      	beq.n	8004e9a <_printf_i+0xb2>
 8004e6a:	2978      	cmp	r1, #120	; 0x78
 8004e6c:	d1d4      	bne.n	8004e18 <_printf_i+0x30>
 8004e6e:	2378      	movs	r3, #120	; 0x78
 8004e70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e74:	4864      	ldr	r0, [pc, #400]	; (8005008 <_printf_i+0x220>)
 8004e76:	e055      	b.n	8004f24 <_printf_i+0x13c>
 8004e78:	6813      	ldr	r3, [r2, #0]
 8004e7a:	1d19      	adds	r1, r3, #4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6011      	str	r1, [r2, #0]
 8004e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e08c      	b.n	8004fa6 <_printf_i+0x1be>
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6011      	str	r1, [r2, #0]
 8004e90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e94:	bf18      	it	ne
 8004e96:	b21b      	sxthne	r3, r3
 8004e98:	e7cf      	b.n	8004e3a <_printf_i+0x52>
 8004e9a:	6813      	ldr	r3, [r2, #0]
 8004e9c:	6825      	ldr	r5, [r4, #0]
 8004e9e:	1d18      	adds	r0, r3, #4
 8004ea0:	6010      	str	r0, [r2, #0]
 8004ea2:	0628      	lsls	r0, r5, #24
 8004ea4:	d501      	bpl.n	8004eaa <_printf_i+0xc2>
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	e002      	b.n	8004eb0 <_printf_i+0xc8>
 8004eaa:	0668      	lsls	r0, r5, #25
 8004eac:	d5fb      	bpl.n	8004ea6 <_printf_i+0xbe>
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	4854      	ldr	r0, [pc, #336]	; (8005004 <_printf_i+0x21c>)
 8004eb2:	296f      	cmp	r1, #111	; 0x6f
 8004eb4:	bf14      	ite	ne
 8004eb6:	220a      	movne	r2, #10
 8004eb8:	2208      	moveq	r2, #8
 8004eba:	2100      	movs	r1, #0
 8004ebc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ec0:	6865      	ldr	r5, [r4, #4]
 8004ec2:	60a5      	str	r5, [r4, #8]
 8004ec4:	2d00      	cmp	r5, #0
 8004ec6:	f2c0 8095 	blt.w	8004ff4 <_printf_i+0x20c>
 8004eca:	6821      	ldr	r1, [r4, #0]
 8004ecc:	f021 0104 	bic.w	r1, r1, #4
 8004ed0:	6021      	str	r1, [r4, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d13d      	bne.n	8004f52 <_printf_i+0x16a>
 8004ed6:	2d00      	cmp	r5, #0
 8004ed8:	f040 808e 	bne.w	8004ff8 <_printf_i+0x210>
 8004edc:	4665      	mov	r5, ip
 8004ede:	2a08      	cmp	r2, #8
 8004ee0:	d10b      	bne.n	8004efa <_printf_i+0x112>
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	07db      	lsls	r3, r3, #31
 8004ee6:	d508      	bpl.n	8004efa <_printf_i+0x112>
 8004ee8:	6923      	ldr	r3, [r4, #16]
 8004eea:	6862      	ldr	r2, [r4, #4]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	bfde      	ittt	le
 8004ef0:	2330      	movle	r3, #48	; 0x30
 8004ef2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ef6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004efa:	ebac 0305 	sub.w	r3, ip, r5
 8004efe:	6123      	str	r3, [r4, #16]
 8004f00:	f8cd 8000 	str.w	r8, [sp]
 8004f04:	463b      	mov	r3, r7
 8004f06:	aa03      	add	r2, sp, #12
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f7ff fef6 	bl	8004cfc <_printf_common>
 8004f10:	3001      	adds	r0, #1
 8004f12:	d14d      	bne.n	8004fb0 <_printf_i+0x1c8>
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f18:	b005      	add	sp, #20
 8004f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f1e:	4839      	ldr	r0, [pc, #228]	; (8005004 <_printf_i+0x21c>)
 8004f20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004f24:	6813      	ldr	r3, [r2, #0]
 8004f26:	6821      	ldr	r1, [r4, #0]
 8004f28:	1d1d      	adds	r5, r3, #4
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6015      	str	r5, [r2, #0]
 8004f2e:	060a      	lsls	r2, r1, #24
 8004f30:	d50b      	bpl.n	8004f4a <_printf_i+0x162>
 8004f32:	07ca      	lsls	r2, r1, #31
 8004f34:	bf44      	itt	mi
 8004f36:	f041 0120 	orrmi.w	r1, r1, #32
 8004f3a:	6021      	strmi	r1, [r4, #0]
 8004f3c:	b91b      	cbnz	r3, 8004f46 <_printf_i+0x15e>
 8004f3e:	6822      	ldr	r2, [r4, #0]
 8004f40:	f022 0220 	bic.w	r2, r2, #32
 8004f44:	6022      	str	r2, [r4, #0]
 8004f46:	2210      	movs	r2, #16
 8004f48:	e7b7      	b.n	8004eba <_printf_i+0xd2>
 8004f4a:	064d      	lsls	r5, r1, #25
 8004f4c:	bf48      	it	mi
 8004f4e:	b29b      	uxthmi	r3, r3
 8004f50:	e7ef      	b.n	8004f32 <_printf_i+0x14a>
 8004f52:	4665      	mov	r5, ip
 8004f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f58:	fb02 3311 	mls	r3, r2, r1, r3
 8004f5c:	5cc3      	ldrb	r3, [r0, r3]
 8004f5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f62:	460b      	mov	r3, r1
 8004f64:	2900      	cmp	r1, #0
 8004f66:	d1f5      	bne.n	8004f54 <_printf_i+0x16c>
 8004f68:	e7b9      	b.n	8004ede <_printf_i+0xf6>
 8004f6a:	6813      	ldr	r3, [r2, #0]
 8004f6c:	6825      	ldr	r5, [r4, #0]
 8004f6e:	6961      	ldr	r1, [r4, #20]
 8004f70:	1d18      	adds	r0, r3, #4
 8004f72:	6010      	str	r0, [r2, #0]
 8004f74:	0628      	lsls	r0, r5, #24
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	d501      	bpl.n	8004f7e <_printf_i+0x196>
 8004f7a:	6019      	str	r1, [r3, #0]
 8004f7c:	e002      	b.n	8004f84 <_printf_i+0x19c>
 8004f7e:	066a      	lsls	r2, r5, #25
 8004f80:	d5fb      	bpl.n	8004f7a <_printf_i+0x192>
 8004f82:	8019      	strh	r1, [r3, #0]
 8004f84:	2300      	movs	r3, #0
 8004f86:	6123      	str	r3, [r4, #16]
 8004f88:	4665      	mov	r5, ip
 8004f8a:	e7b9      	b.n	8004f00 <_printf_i+0x118>
 8004f8c:	6813      	ldr	r3, [r2, #0]
 8004f8e:	1d19      	adds	r1, r3, #4
 8004f90:	6011      	str	r1, [r2, #0]
 8004f92:	681d      	ldr	r5, [r3, #0]
 8004f94:	6862      	ldr	r2, [r4, #4]
 8004f96:	2100      	movs	r1, #0
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f7fb f921 	bl	80001e0 <memchr>
 8004f9e:	b108      	cbz	r0, 8004fa4 <_printf_i+0x1bc>
 8004fa0:	1b40      	subs	r0, r0, r5
 8004fa2:	6060      	str	r0, [r4, #4]
 8004fa4:	6863      	ldr	r3, [r4, #4]
 8004fa6:	6123      	str	r3, [r4, #16]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fae:	e7a7      	b.n	8004f00 <_printf_i+0x118>
 8004fb0:	6923      	ldr	r3, [r4, #16]
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	4639      	mov	r1, r7
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	47c0      	blx	r8
 8004fba:	3001      	adds	r0, #1
 8004fbc:	d0aa      	beq.n	8004f14 <_printf_i+0x12c>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	079b      	lsls	r3, r3, #30
 8004fc2:	d413      	bmi.n	8004fec <_printf_i+0x204>
 8004fc4:	68e0      	ldr	r0, [r4, #12]
 8004fc6:	9b03      	ldr	r3, [sp, #12]
 8004fc8:	4298      	cmp	r0, r3
 8004fca:	bfb8      	it	lt
 8004fcc:	4618      	movlt	r0, r3
 8004fce:	e7a3      	b.n	8004f18 <_printf_i+0x130>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	464a      	mov	r2, r9
 8004fd4:	4639      	mov	r1, r7
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	47c0      	blx	r8
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d09a      	beq.n	8004f14 <_printf_i+0x12c>
 8004fde:	3501      	adds	r5, #1
 8004fe0:	68e3      	ldr	r3, [r4, #12]
 8004fe2:	9a03      	ldr	r2, [sp, #12]
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	42ab      	cmp	r3, r5
 8004fe8:	dcf2      	bgt.n	8004fd0 <_printf_i+0x1e8>
 8004fea:	e7eb      	b.n	8004fc4 <_printf_i+0x1dc>
 8004fec:	2500      	movs	r5, #0
 8004fee:	f104 0919 	add.w	r9, r4, #25
 8004ff2:	e7f5      	b.n	8004fe0 <_printf_i+0x1f8>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1ac      	bne.n	8004f52 <_printf_i+0x16a>
 8004ff8:	7803      	ldrb	r3, [r0, #0]
 8004ffa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ffe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005002:	e76c      	b.n	8004ede <_printf_i+0xf6>
 8005004:	08005275 	.word	0x08005275
 8005008:	08005286 	.word	0x08005286

0800500c <_sbrk_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4c06      	ldr	r4, [pc, #24]	; (8005028 <_sbrk_r+0x1c>)
 8005010:	2300      	movs	r3, #0
 8005012:	4605      	mov	r5, r0
 8005014:	4608      	mov	r0, r1
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	f7ff fb98 	bl	800474c <_sbrk>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d102      	bne.n	8005026 <_sbrk_r+0x1a>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	b103      	cbz	r3, 8005026 <_sbrk_r+0x1a>
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	200001d8 	.word	0x200001d8

0800502c <memcpy>:
 800502c:	b510      	push	{r4, lr}
 800502e:	1e43      	subs	r3, r0, #1
 8005030:	440a      	add	r2, r1
 8005032:	4291      	cmp	r1, r2
 8005034:	d100      	bne.n	8005038 <memcpy+0xc>
 8005036:	bd10      	pop	{r4, pc}
 8005038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800503c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005040:	e7f7      	b.n	8005032 <memcpy+0x6>

08005042 <memmove>:
 8005042:	4288      	cmp	r0, r1
 8005044:	b510      	push	{r4, lr}
 8005046:	eb01 0302 	add.w	r3, r1, r2
 800504a:	d807      	bhi.n	800505c <memmove+0x1a>
 800504c:	1e42      	subs	r2, r0, #1
 800504e:	4299      	cmp	r1, r3
 8005050:	d00a      	beq.n	8005068 <memmove+0x26>
 8005052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005056:	f802 4f01 	strb.w	r4, [r2, #1]!
 800505a:	e7f8      	b.n	800504e <memmove+0xc>
 800505c:	4283      	cmp	r3, r0
 800505e:	d9f5      	bls.n	800504c <memmove+0xa>
 8005060:	1881      	adds	r1, r0, r2
 8005062:	1ad2      	subs	r2, r2, r3
 8005064:	42d3      	cmn	r3, r2
 8005066:	d100      	bne.n	800506a <memmove+0x28>
 8005068:	bd10      	pop	{r4, pc}
 800506a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800506e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005072:	e7f7      	b.n	8005064 <memmove+0x22>

08005074 <__malloc_lock>:
 8005074:	4770      	bx	lr

08005076 <__malloc_unlock>:
 8005076:	4770      	bx	lr

08005078 <_realloc_r>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	4607      	mov	r7, r0
 800507c:	4614      	mov	r4, r2
 800507e:	460e      	mov	r6, r1
 8005080:	b921      	cbnz	r1, 800508c <_realloc_r+0x14>
 8005082:	4611      	mov	r1, r2
 8005084:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005088:	f7ff bc8c 	b.w	80049a4 <_malloc_r>
 800508c:	b922      	cbnz	r2, 8005098 <_realloc_r+0x20>
 800508e:	f7ff fc3b 	bl	8004908 <_free_r>
 8005092:	4625      	mov	r5, r4
 8005094:	4628      	mov	r0, r5
 8005096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005098:	f000 f814 	bl	80050c4 <_malloc_usable_size_r>
 800509c:	42a0      	cmp	r0, r4
 800509e:	d20f      	bcs.n	80050c0 <_realloc_r+0x48>
 80050a0:	4621      	mov	r1, r4
 80050a2:	4638      	mov	r0, r7
 80050a4:	f7ff fc7e 	bl	80049a4 <_malloc_r>
 80050a8:	4605      	mov	r5, r0
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d0f2      	beq.n	8005094 <_realloc_r+0x1c>
 80050ae:	4631      	mov	r1, r6
 80050b0:	4622      	mov	r2, r4
 80050b2:	f7ff ffbb 	bl	800502c <memcpy>
 80050b6:	4631      	mov	r1, r6
 80050b8:	4638      	mov	r0, r7
 80050ba:	f7ff fc25 	bl	8004908 <_free_r>
 80050be:	e7e9      	b.n	8005094 <_realloc_r+0x1c>
 80050c0:	4635      	mov	r5, r6
 80050c2:	e7e7      	b.n	8005094 <_realloc_r+0x1c>

080050c4 <_malloc_usable_size_r>:
 80050c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c8:	1f18      	subs	r0, r3, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bfbc      	itt	lt
 80050ce:	580b      	ldrlt	r3, [r1, r0]
 80050d0:	18c0      	addlt	r0, r0, r3
 80050d2:	4770      	bx	lr

080050d4 <_init>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr

080050e0 <_fini>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr

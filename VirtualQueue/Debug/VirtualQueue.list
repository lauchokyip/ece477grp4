
VirtualQueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000529c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005740  08005740  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005748  08005748  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a10  20000070  080057c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a80  080057c0  00020a80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e712  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020fc  00000000  00000000  0002e7b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a38  00000000  00000000  000308b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000920  00000000  00000000  000312e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027a2c  00000000  00000000  00031c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b403  00000000  00000000  00059634  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0e24  00000000  00000000  00064a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015585b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a8  00000000  00000000  001558d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005414 	.word	0x08005414

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005414 	.word	0x08005414

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057a:	2003      	movs	r0, #3
 800057c:	f000 f93c 	bl	80007f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000580:	2000      	movs	r0, #0
 8000582:	f000 f80d 	bl	80005a0 <HAL_InitTick>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	71fb      	strb	r3, [r7, #7]
 8000590:	e001      	b.n	8000596 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000592:	f003 f8eb 	bl	800376c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000596:	79fb      	ldrb	r3, [r7, #7]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <HAL_InitTick+0x68>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d022      	beq.n	80005fa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_InitTick+0x6c>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <HAL_InitTick+0x68>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f93c 	bl	8000846 <HAL_SYSTICK_Config>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d10f      	bne.n	80005f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b0f      	cmp	r3, #15
 80005d8:	d809      	bhi.n	80005ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005da:	2200      	movs	r2, #0
 80005dc:	6879      	ldr	r1, [r7, #4]
 80005de:	f04f 30ff 	mov.w	r0, #4294967295
 80005e2:	f000 f914 	bl	800080e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <HAL_InitTick+0x70>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	e007      	b.n	80005fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	e004      	b.n	80005fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005f4:	2301      	movs	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	e001      	b.n	80005fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
 80005fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000004 	.word	0x20000004
 800060c:	20000008 	.word	0x20000008
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_IncTick+0x1c>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_IncTick+0x20>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4413      	add	r3, r2
 8000622:	4a03      	ldr	r2, [pc, #12]	; (8000630 <HAL_IncTick+0x1c>)
 8000624:	6013      	str	r3, [r2, #0]
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	20000098 	.word	0x20000098
 8000634:	20000004 	.word	0x20000004

08000638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return uwTick;
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <HAL_GetTick+0x14>)
 800063e:	681b      	ldr	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098

08000650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000658:	f7ff ffee 	bl	8000638 <HAL_GetTick>
 800065c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000668:	d004      	beq.n	8000674 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_Delay+0x40>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000674:	bf00      	nop
 8000676:	f7ff ffdf 	bl	8000638 <HAL_GetTick>
 800067a:	4602      	mov	r2, r0
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	429a      	cmp	r2, r3
 8000684:	d8f7      	bhi.n	8000676 <HAL_Delay+0x26>
  {
  }
}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000004 	.word	0x20000004

08000694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f003 0307 	and.w	r3, r3, #7
 80006a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b0:	4013      	ands	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006c6:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	60d3      	str	r3, [r2, #12]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <__NVIC_GetPriorityGrouping+0x18>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	f003 0307 	and.w	r3, r3, #7
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db0a      	blt.n	8000722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <__NVIC_SetPriority+0x4c>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000720:	e00a      	b.n	8000738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4908      	ldr	r1, [pc, #32]	; (8000748 <__NVIC_SetPriority+0x50>)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	3b04      	subs	r3, #4
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	440b      	add	r3, r1
 8000736:	761a      	strb	r2, [r3, #24]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074c:	b480      	push	{r7}
 800074e:	b089      	sub	sp, #36	; 0x24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f1c3 0307 	rsb	r3, r3, #7
 8000766:	2b04      	cmp	r3, #4
 8000768:	bf28      	it	cs
 800076a:	2304      	movcs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3304      	adds	r3, #4
 8000772:	2b06      	cmp	r3, #6
 8000774:	d902      	bls.n	800077c <NVIC_EncodePriority+0x30>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3b03      	subs	r3, #3
 800077a:	e000      	b.n	800077e <NVIC_EncodePriority+0x32>
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43da      	mvns	r2, r3
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	401a      	ands	r2, r3
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000794:	f04f 31ff 	mov.w	r1, #4294967295
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43d9      	mvns	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	4313      	orrs	r3, r2
         );
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3724      	adds	r7, #36	; 0x24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007c4:	d301      	bcc.n	80007ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00f      	b.n	80007ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <SysTick_Config+0x40>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d2:	210f      	movs	r1, #15
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f7ff ff8e 	bl	80006f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <SysTick_Config+0x40>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <SysTick_Config+0x40>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	e000e010 	.word	0xe000e010

080007f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ff47 	bl	8000694 <__NVIC_SetPriorityGrouping>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b086      	sub	sp, #24
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000820:	f7ff ff5c 	bl	80006dc <__NVIC_GetPriorityGrouping>
 8000824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	f7ff ff8e 	bl	800074c <NVIC_EncodePriority>
 8000830:	4602      	mov	r2, r0
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000836:	4611      	mov	r1, r2
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff5d 	bl	80006f8 <__NVIC_SetPriority>
}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ffb0 	bl	80007b4 <SysTick_Config>
 8000854:	4603      	mov	r3, r0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000860:	b480      	push	{r7}
 8000862:	b087      	sub	sp, #28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086e:	e17f      	b.n	8000b70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	2101      	movs	r1, #1
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	fa01 f303 	lsl.w	r3, r1, r3
 800087c:	4013      	ands	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	f000 8171 	beq.w	8000b6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d003      	beq.n	8000898 <HAL_GPIO_Init+0x38>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2b12      	cmp	r3, #18
 8000896:	d123      	bne.n	80008e0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	08da      	lsrs	r2, r3, #3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3208      	adds	r2, #8
 80008a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	220f      	movs	r2, #15
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	691a      	ldr	r2, [r3, #16]
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	08da      	lsrs	r2, r3, #3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3208      	adds	r2, #8
 80008da:	6939      	ldr	r1, [r7, #16]
 80008dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	2203      	movs	r2, #3
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4013      	ands	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 0203 	and.w	r2, r3, #3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	4313      	orrs	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d00b      	beq.n	8000934 <HAL_GPIO_Init+0xd4>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b02      	cmp	r3, #2
 8000922:	d007      	beq.n	8000934 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000928:	2b11      	cmp	r3, #17
 800092a:	d003      	beq.n	8000934 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b12      	cmp	r3, #18
 8000932:	d130      	bne.n	8000996 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	2203      	movs	r2, #3
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4013      	ands	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68da      	ldr	r2, [r3, #12]
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800096a:	2201      	movs	r2, #1
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4013      	ands	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	091b      	lsrs	r3, r3, #4
 8000980:	f003 0201 	and.w	r2, r3, #1
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f003 0303 	and.w	r3, r3, #3
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d118      	bne.n	80009d4 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80009a8:	2201      	movs	r2, #1
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	08db      	lsrs	r3, r3, #3
 80009be:	f003 0201 	and.w	r2, r3, #1
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	2203      	movs	r2, #3
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f000 80ac 	beq.w	8000b6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b5e      	ldr	r3, [pc, #376]	; (8000b8c <HAL_GPIO_Init+0x32c>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	4a5d      	ldr	r2, [pc, #372]	; (8000b8c <HAL_GPIO_Init+0x32c>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1e:	4b5b      	ldr	r3, [pc, #364]	; (8000b8c <HAL_GPIO_Init+0x32c>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a2a:	4a59      	ldr	r2, [pc, #356]	; (8000b90 <HAL_GPIO_Init+0x330>)
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	3302      	adds	r3, #2
 8000a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	220f      	movs	r2, #15
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a54:	d025      	beq.n	8000aa2 <HAL_GPIO_Init+0x242>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4e      	ldr	r2, [pc, #312]	; (8000b94 <HAL_GPIO_Init+0x334>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d01f      	beq.n	8000a9e <HAL_GPIO_Init+0x23e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a4d      	ldr	r2, [pc, #308]	; (8000b98 <HAL_GPIO_Init+0x338>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d019      	beq.n	8000a9a <HAL_GPIO_Init+0x23a>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a4c      	ldr	r2, [pc, #304]	; (8000b9c <HAL_GPIO_Init+0x33c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0x236>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a4b      	ldr	r2, [pc, #300]	; (8000ba0 <HAL_GPIO_Init+0x340>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d00d      	beq.n	8000a92 <HAL_GPIO_Init+0x232>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a4a      	ldr	r2, [pc, #296]	; (8000ba4 <HAL_GPIO_Init+0x344>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d007      	beq.n	8000a8e <HAL_GPIO_Init+0x22e>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a49      	ldr	r2, [pc, #292]	; (8000ba8 <HAL_GPIO_Init+0x348>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_GPIO_Init+0x22a>
 8000a86:	2306      	movs	r3, #6
 8000a88:	e00c      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	e00a      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000a8e:	2305      	movs	r3, #5
 8000a90:	e008      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000a92:	2304      	movs	r3, #4
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000a96:	2303      	movs	r3, #3
 8000a98:	e004      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	e002      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e000      	b.n	8000aa4 <HAL_GPIO_Init+0x244>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	f002 0203 	and.w	r2, r2, #3
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	4093      	lsls	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ab4:	4936      	ldr	r1, [pc, #216]	; (8000b90 <HAL_GPIO_Init+0x330>)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ac2:	4b3a      	ldr	r3, [pc, #232]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ae6:	4a31      	ldr	r2, [pc, #196]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000aec:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b10:	4a26      	ldr	r2, [pc, #152]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b64:	4a11      	ldr	r2, [pc, #68]	; (8000bac <HAL_GPIO_Init+0x34c>)
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f47f ae78 	bne.w	8000870 <HAL_GPIO_Init+0x10>
  }
}
 8000b80:	bf00      	nop
 8000b82:	371c      	adds	r7, #28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000
 8000b94:	48000400 	.word	0x48000400
 8000b98:	48000800 	.word	0x48000800
 8000b9c:	48000c00 	.word	0x48000c00
 8000ba0:	48001000 	.word	0x48001000
 8000ba4:	48001400 	.word	0x48001400
 8000ba8:	48001800 	.word	0x48001800
 8000bac:	40010400 	.word	0x40010400

08000bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bc0:	787b      	ldrb	r3, [r7, #1]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bcc:	e002      	b.n	8000bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e0af      	b.n	8000d52 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d106      	bne.n	8000c0c <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f002 fdd4 	bl	80037b4 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2202      	movs	r2, #2
 8000c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0201 	bic.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e00a      	b.n	8000c40 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3304      	adds	r3, #4
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	d9f1      	bls.n	8000c2a <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f042 0204 	orr.w	r2, r2, #4
 8000c54:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <HAL_LCD_Init+0x17c>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	6851      	ldr	r1, [r2, #4]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	6892      	ldr	r2, [r2, #8]
 8000c68:	4311      	orrs	r1, r2
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000c6e:	4311      	orrs	r1, r2
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c74:	4311      	orrs	r1, r2
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	69d2      	ldr	r2, [r2, #28]
 8000c7a:	4311      	orrs	r1, r2
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	6a12      	ldr	r2, [r2, #32]
 8000c80:	4311      	orrs	r1, r2
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	6992      	ldr	r2, [r2, #24]
 8000c86:	4311      	orrs	r1, r2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c8c:	4311      	orrs	r1, r2
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	6812      	ldr	r2, [r2, #0]
 8000c92:	430b      	orrs	r3, r1
 8000c94:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f8f1 	bl	8000e7e <LCD_WaitForSynchro>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8000ca0:	7cfb      	ldrb	r3, [r7, #19]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_LCD_Init+0xca>
  {
    return status;
 8000ca6:	7cfb      	ldrb	r3, [r7, #19]
 8000ca8:	e053      	b.n	8000d52 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f042 0201 	orr.w	r2, r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000ce2:	f7ff fca9 	bl	8000638 <HAL_GetTick>
 8000ce6:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000ce8:	e00c      	b.n	8000d04 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000cea:	f7ff fca5 	bl	8000638 <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cf8:	d904      	bls.n	8000d04 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e026      	b.n	8000d52 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d1eb      	bne.n	8000cea <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000d12:	f7ff fc91 	bl	8000638 <HAL_GetTick>
 8000d16:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000d18:	e00c      	b.n	8000d34 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000d1a:	f7ff fc8d 	bl	8000638 <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d28:	d904      	bls.n	8000d34 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e00e      	b.n	8000d52 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	2b10      	cmp	r3, #16
 8000d40:	d1eb      	bne.n	8000d1a <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8000d50:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	fc00000e 	.word	0xfc00000e

08000d60 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d72:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8000d74:	7cbb      	ldrb	r3, [r7, #18]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d002      	beq.n	8000d80 <HAL_LCD_Clear+0x20>
 8000d7a:	7cbb      	ldrb	r3, [r7, #18]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d140      	bne.n	8000e02 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <HAL_LCD_Clear+0x2e>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e03a      	b.n	8000e04 <HAL_LCD_Clear+0xa4>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2202      	movs	r2, #2
 8000d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8000d9e:	f7ff fc4b 	bl	8000638 <HAL_GetTick>
 8000da2:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000da4:	e010      	b.n	8000dc8 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000da6:	f7ff fc47 	bl	8000638 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000db4:	d908      	bls.n	8000dc8 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2202      	movs	r2, #2
 8000dba:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e01d      	b.n	8000e04 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d0e7      	beq.n	8000da6 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	e00a      	b.n	8000df2 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3304      	adds	r3, #4
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d9f1      	bls.n	8000ddc <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f807 	bl	8000e0c <HAL_LCD_UpdateDisplayRequest>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8000e02:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2208      	movs	r2, #8
 8000e1a:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0204 	orr.w	r2, r2, #4
 8000e2a:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000e2c:	f7ff fc04 	bl	8000638 <HAL_GetTick>
 8000e30:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000e32:	e010      	b.n	8000e56 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000e34:	f7ff fc00 	bl	8000638 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e42:	d908      	bls.n	8000e56 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2204      	movs	r2, #4
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e00f      	b.n	8000e76 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	2b08      	cmp	r3, #8
 8000e62:	d1e7      	bne.n	8000e34 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b084      	sub	sp, #16
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000e86:	f7ff fbd7 	bl	8000638 <HAL_GetTick>
 8000e8a:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000e8c:	e00c      	b.n	8000ea8 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000e8e:	f7ff fbd3 	bl	8000638 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e9c:	d904      	bls.n	8000ea8 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e007      	b.n	8000eb8 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 0320 	and.w	r3, r3, #32
 8000eb2:	2b20      	cmp	r3, #32
 8000eb4:	d1eb      	bne.n	8000e8e <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40007000 	.word	0x40007000

08000edc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eea:	d130      	bne.n	8000f4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eec:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ef8:	d038      	beq.n	8000f6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f02:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2232      	movs	r2, #50	; 0x32
 8000f10:	fb02 f303 	mul.w	r3, r2, r3
 8000f14:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f16:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1a:	0c9b      	lsrs	r3, r3, #18
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f20:	e002      	b.n	8000f28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f34:	d102      	bne.n	8000f3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1f2      	bne.n	8000f22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f48:	d110      	bne.n	8000f6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e00f      	b.n	8000f6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f5a:	d007      	beq.n	8000f6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f64:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40007000 	.word	0x40007000
 8000f80:	20000008 	.word	0x20000008
 8000f84:	431bde83 	.word	0x431bde83

08000f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e39d      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f9a:	4ba4      	ldr	r3, [pc, #656]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fa4:	4ba1      	ldr	r3, [pc, #644]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 80e1 	beq.w	800117e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d007      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x4a>
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	2b0c      	cmp	r3, #12
 8000fc6:	f040 8088 	bne.w	80010da <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	f040 8084 	bne.w	80010da <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fd2:	4b96      	ldr	r3, [pc, #600]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <HAL_RCC_OscConfig+0x62>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e375      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a1a      	ldr	r2, [r3, #32]
 8000fee:	4b8f      	ldr	r3, [pc, #572]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <HAL_RCC_OscConfig+0x7c>
 8000ffa:	4b8c      	ldr	r3, [pc, #560]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001002:	e005      	b.n	8001010 <HAL_RCC_OscConfig+0x88>
 8001004:	4b89      	ldr	r3, [pc, #548]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001010:	4293      	cmp	r3, r2
 8001012:	d223      	bcs.n	800105c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fd09 	bl	8001a30 <RCC_SetFlashLatencyFromMSIRange>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e356      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001028:	4b80      	ldr	r3, [pc, #512]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a7f      	ldr	r2, [pc, #508]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b7d      	ldr	r3, [pc, #500]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	497a      	ldr	r1, [pc, #488]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001046:	4b79      	ldr	r3, [pc, #484]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	4975      	ldr	r1, [pc, #468]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001056:	4313      	orrs	r3, r2
 8001058:	604b      	str	r3, [r1, #4]
 800105a:	e022      	b.n	80010a2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800105c:	4b73      	ldr	r3, [pc, #460]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a72      	ldr	r2, [pc, #456]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001062:	f043 0308 	orr.w	r3, r3, #8
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b70      	ldr	r3, [pc, #448]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	496d      	ldr	r1, [pc, #436]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001076:	4313      	orrs	r3, r2
 8001078:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800107a:	4b6c      	ldr	r3, [pc, #432]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	4968      	ldr	r1, [pc, #416]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 800108a:	4313      	orrs	r3, r2
 800108c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fccc 	bl	8001a30 <RCC_SetFlashLatencyFromMSIRange>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e319      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010a2:	f000 fc03 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 80010a6:	4601      	mov	r1, r0
 80010a8:	4b60      	ldr	r3, [pc, #384]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	4a5f      	ldr	r2, [pc, #380]	; (8001230 <HAL_RCC_OscConfig+0x2a8>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	fa21 f303 	lsr.w	r3, r1, r3
 80010be:	4a5d      	ldr	r2, [pc, #372]	; (8001234 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010c2:	4b5d      	ldr	r3, [pc, #372]	; (8001238 <HAL_RCC_OscConfig+0x2b0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa6a 	bl	80005a0 <HAL_InitTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d052      	beq.n	800117c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	e2fd      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d032      	beq.n	8001148 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010e2:	4b52      	ldr	r3, [pc, #328]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a51      	ldr	r2, [pc, #324]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010ee:	f7ff faa3 	bl	8000638 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010f6:	f7ff fa9f 	bl	8000638 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e2e6      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001108:	4b48      	ldr	r3, [pc, #288]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0f0      	beq.n	80010f6 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a44      	ldr	r2, [pc, #272]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b42      	ldr	r3, [pc, #264]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	493f      	ldr	r1, [pc, #252]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 800112e:	4313      	orrs	r3, r2
 8001130:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001132:	4b3e      	ldr	r3, [pc, #248]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	493a      	ldr	r1, [pc, #232]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001142:	4313      	orrs	r3, r2
 8001144:	604b      	str	r3, [r1, #4]
 8001146:	e01a      	b.n	800117e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001148:	4b38      	ldr	r3, [pc, #224]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a37      	ldr	r2, [pc, #220]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 800114e:	f023 0301 	bic.w	r3, r3, #1
 8001152:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001154:	f7ff fa70 	bl	8000638 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800115c:	f7ff fa6c 	bl	8000638 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e2b3      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x1d4>
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800117c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d074      	beq.n	8001274 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	2b08      	cmp	r3, #8
 800118e:	d005      	beq.n	800119c <HAL_RCC_OscConfig+0x214>
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2b0c      	cmp	r3, #12
 8001194:	d10e      	bne.n	80011b4 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b03      	cmp	r3, #3
 800119a:	d10b      	bne.n	80011b4 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d064      	beq.n	8001272 <HAL_RCC_OscConfig+0x2ea>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d160      	bne.n	8001272 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e290      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d106      	bne.n	80011cc <HAL_RCC_OscConfig+0x244>
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a1a      	ldr	r2, [pc, #104]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01d      	b.n	8001208 <HAL_RCC_OscConfig+0x280>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x268>
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0x280>
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_RCC_OscConfig+0x2a4>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01c      	beq.n	800124a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fa12 	bl	8000638 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001216:	e011      	b.n	800123c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fa0e 	bl	8000638 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d90a      	bls.n	800123c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e255      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	08005660 	.word	0x08005660
 8001234:	20000008 	.word	0x20000008
 8001238:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800123c:	4bae      	ldr	r3, [pc, #696]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0e7      	beq.n	8001218 <HAL_RCC_OscConfig+0x290>
 8001248:	e014      	b.n	8001274 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124a:	f7ff f9f5 	bl	8000638 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001252:	f7ff f9f1 	bl	8000638 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b64      	cmp	r3, #100	; 0x64
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e238      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001264:	4ba4      	ldr	r3, [pc, #656]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f0      	bne.n	8001252 <HAL_RCC_OscConfig+0x2ca>
 8001270:	e000      	b.n	8001274 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001272:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d060      	beq.n	8001342 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b04      	cmp	r3, #4
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x30a>
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b0c      	cmp	r3, #12
 800128a:	d119      	bne.n	80012c0 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d116      	bne.n	80012c0 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001292:	4b99      	ldr	r3, [pc, #612]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x322>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e215      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b93      	ldr	r3, [pc, #588]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	061b      	lsls	r3, r3, #24
 80012b8:	498f      	ldr	r1, [pc, #572]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012be:	e040      	b.n	8001342 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d023      	beq.n	8001310 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c8:	4b8b      	ldr	r3, [pc, #556]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a8a      	ldr	r2, [pc, #552]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff f9b0 	bl	8000638 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012dc:	f7ff f9ac 	bl	8000638 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e1f3      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ee:	4b82      	ldr	r3, [pc, #520]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fa:	4b7f      	ldr	r3, [pc, #508]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	061b      	lsls	r3, r3, #24
 8001308:	497b      	ldr	r1, [pc, #492]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
 800130e:	e018      	b.n	8001342 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001310:	4b79      	ldr	r3, [pc, #484]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a78      	ldr	r2, [pc, #480]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800131a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff f98c 	bl	8000638 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff f988 	bl	8000638 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1cf      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001336:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d03c      	beq.n	80013c8 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01c      	beq.n	8001390 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001356:	4b68      	ldr	r3, [pc, #416]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135c:	4a66      	ldr	r2, [pc, #408]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff f967 	bl	8000638 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff f963 	bl	8000638 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1aa      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001380:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0ef      	beq.n	800136e <HAL_RCC_OscConfig+0x3e6>
 800138e:	e01b      	b.n	80013c8 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b59      	ldr	r3, [pc, #356]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001396:	4a58      	ldr	r2, [pc, #352]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a0:	f7ff f94a 	bl	8000638 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff f946 	bl	8000638 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e18d      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013ba:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 80013bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1ef      	bne.n	80013a8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80a5 	beq.w	8001520 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013da:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10d      	bne.n	8001402 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	4a43      	ldr	r2, [pc, #268]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	6593      	str	r3, [r2, #88]	; 0x58
 80013f2:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <HAL_RCC_OscConfig+0x574>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d118      	bne.n	8001440 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800140e:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <HAL_RCC_OscConfig+0x574>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a3a      	ldr	r2, [pc, #232]	; (80014fc <HAL_RCC_OscConfig+0x574>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141a:	f7ff f90d 	bl	8000638 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001422:	f7ff f909 	bl	8000638 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e150      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001434:	4b31      	ldr	r3, [pc, #196]	; (80014fc <HAL_RCC_OscConfig+0x574>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d108      	bne.n	800145a <HAL_RCC_OscConfig+0x4d2>
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 800144a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800144e:	4a2a      	ldr	r2, [pc, #168]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001458:	e024      	b.n	80014a4 <HAL_RCC_OscConfig+0x51c>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b05      	cmp	r3, #5
 8001460:	d110      	bne.n	8001484 <HAL_RCC_OscConfig+0x4fc>
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001468:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001478:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001482:	e00f      	b.n	80014a4 <HAL_RCC_OscConfig+0x51c>
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 8001496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149a:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d016      	beq.n	80014da <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff f8c4 	bl	8000638 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014b2:	e00a      	b.n	80014ca <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7ff f8c0 	bl	8000638 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e105      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_RCC_OscConfig+0x570>)
 80014cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0ed      	beq.n	80014b4 <HAL_RCC_OscConfig+0x52c>
 80014d8:	e019      	b.n	800150e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014da:	f7ff f8ad 	bl	8000638 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014e0:	e00e      	b.n	8001500 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f7ff f8a9 	bl	8000638 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d905      	bls.n	8001500 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e0ee      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001500:	4b77      	ldr	r3, [pc, #476]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 8001502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1e9      	bne.n	80014e2 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001514:	4b72      	ldr	r3, [pc, #456]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001518:	4a71      	ldr	r2, [pc, #452]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 800151a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80d5 	beq.w	80016d4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	f000 808e 	beq.w	800164e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001536:	2b02      	cmp	r3, #2
 8001538:	d15b      	bne.n	80015f2 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b69      	ldr	r3, [pc, #420]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a68      	ldr	r2, [pc, #416]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 8001540:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff f877 	bl	8000638 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154e:	f7ff f873 	bl	8000638 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0ba      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001560:	4b5f      	ldr	r3, [pc, #380]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f0      	bne.n	800154e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800156c:	4b5c      	ldr	r3, [pc, #368]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <HAL_RCC_OscConfig+0x75c>)
 8001572:	4013      	ands	r3, r2
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800157c:	3a01      	subs	r2, #1
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	4311      	orrs	r1, r2
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001586:	0212      	lsls	r2, r2, #8
 8001588:	4311      	orrs	r1, r2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800158e:	0852      	lsrs	r2, r2, #1
 8001590:	3a01      	subs	r2, #1
 8001592:	0552      	lsls	r2, r2, #21
 8001594:	4311      	orrs	r1, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800159a:	0852      	lsrs	r2, r2, #1
 800159c:	3a01      	subs	r2, #1
 800159e:	0652      	lsls	r2, r2, #25
 80015a0:	4311      	orrs	r1, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015a6:	0912      	lsrs	r2, r2, #4
 80015a8:	0452      	lsls	r2, r2, #17
 80015aa:	430a      	orrs	r2, r1
 80015ac:	494c      	ldr	r1, [pc, #304]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b2:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a4a      	ldr	r2, [pc, #296]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 80015b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015bc:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015be:	4b48      	ldr	r3, [pc, #288]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	4a47      	ldr	r2, [pc, #284]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 80015c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff f835 	bl	8000638 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff f831 	bl	8000638 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e078      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e4:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x64a>
 80015f0:	e070      	b.n	80016d4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f2:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a3a      	ldr	r2, [pc, #232]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 80015f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80015fe:	4b38      	ldr	r3, [pc, #224]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d105      	bne.n	8001616 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800160a:	4b35      	ldr	r3, [pc, #212]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	4a34      	ldr	r2, [pc, #208]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 8001610:	f023 0303 	bic.w	r3, r3, #3
 8001614:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001616:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	4a31      	ldr	r2, [pc, #196]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 800161c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001624:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001626:	f7ff f807 	bl	8000638 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff f803 	bl	8000638 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e04a      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f0      	bne.n	800162e <HAL_RCC_OscConfig+0x6a6>
 800164c:	e042      	b.n	80016d4 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e03d      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_RCC_OscConfig+0x758>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0203 	and.w	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	429a      	cmp	r2, r3
 800166c:	d130      	bne.n	80016d0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	3b01      	subs	r3, #1
 800167a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d127      	bne.n	80016d0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800168c:	429a      	cmp	r2, r3
 800168e:	d11f      	bne.n	80016d0 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800169a:	2a07      	cmp	r2, #7
 800169c:	bf14      	ite	ne
 800169e:	2201      	movne	r2, #1
 80016a0:	2200      	moveq	r2, #0
 80016a2:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d113      	bne.n	80016d0 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d109      	bne.n	80016d0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	3b01      	subs	r3, #1
 80016ca:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3720      	adds	r7, #32
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	f99d808c 	.word	0xf99d808c

080016e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0c8      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b66      	ldr	r3, [pc, #408]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d910      	bls.n	800172c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 0207 	bic.w	r2, r3, #7
 8001712:	4961      	ldr	r1, [pc, #388]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b5f      	ldr	r3, [pc, #380]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0b0      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d04c      	beq.n	80017d2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b03      	cmp	r3, #3
 800173e:	d107      	bne.n	8001750 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001740:	4b56      	ldr	r3, [pc, #344]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d121      	bne.n	8001790 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e09e      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d107      	bne.n	8001768 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001758:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d115      	bne.n	8001790 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e092      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d107      	bne.n	8001780 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001770:	4b4a      	ldr	r3, [pc, #296]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d109      	bne.n	8001790 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e086      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001780:	4b46      	ldr	r3, [pc, #280]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e07e      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 0203 	bic.w	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	493f      	ldr	r1, [pc, #252]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017a2:	f7fe ff49 	bl	8000638 <HAL_GetTick>
 80017a6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017aa:	f7fe ff45 	bl	8000638 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e066      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c0:	4b36      	ldr	r3, [pc, #216]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 020c 	and.w	r2, r3, #12
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d1eb      	bne.n	80017aa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d008      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	492c      	ldr	r1, [pc, #176]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d210      	bcs.n	8001820 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 0207 	bic.w	r2, r3, #7
 8001806:	4924      	ldr	r1, [pc, #144]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_RCC_ClockConfig+0x1b0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e036      	b.n	800188e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4918      	ldr	r1, [pc, #96]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4910      	ldr	r1, [pc, #64]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800185e:	f000 f825 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8001862:	4601      	mov	r1, r0
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_RCC_ClockConfig+0x1b4>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	fa21 f303 	lsr.w	r3, r1, r3
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe8c 	bl	80005a0 <HAL_InitTick>
 8001888:	4603      	mov	r3, r0
 800188a:	72fb      	strb	r3, [r7, #11]

  return status;
 800188c:	7afb      	ldrb	r3, [r7, #11]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000
 800189c:	40021000 	.word	0x40021000
 80018a0:	08005660 	.word	0x08005660
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000000 	.word	0x20000000

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018c4:	4b3a      	ldr	r3, [pc, #232]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x34>
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d121      	bne.n	800191e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d11e      	bne.n	800191e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018e0:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018ec:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80018ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	e005      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018fc:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001908:	4a2a      	ldr	r2, [pc, #168]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10d      	bne.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b04      	cmp	r3, #4
 8001922:	d102      	bne.n	800192a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	e004      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b08      	cmp	r3, #8
 800192e:	d101      	bne.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_RCC_GetSysClockFreq+0x110>)
 8001932:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d133      	bne.n	80019a2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d002      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0xa4>
 800194a:	2b03      	cmp	r3, #3
 800194c:	d003      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0xaa>
 800194e:	e005      	b.n	800195c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001952:	617b      	str	r3, [r7, #20]
      break;
 8001954:	e005      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_RCC_GetSysClockFreq+0x110>)
 8001958:	617b      	str	r3, [r7, #20]
      break;
 800195a:	e002      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	617b      	str	r3, [r7, #20]
      break;
 8001960:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	3301      	adds	r3, #1
 800196e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	fb02 f203 	mul.w	r2, r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0e5b      	lsrs	r3, r3, #25
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	3301      	adds	r3, #1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019a2:	69bb      	ldr	r3, [r7, #24]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3724      	adds	r7, #36	; 0x24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08005678 	.word	0x08005678
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	007a1200 	.word	0x007a1200

080019c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008

080019d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80019dc:	f7ff fff0 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 80019e0:	4601      	mov	r1, r0
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	0a1b      	lsrs	r3, r3, #8
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	08005670 	.word	0x08005670

08001a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a08:	f7ff ffda 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 8001a0c:	4601      	mov	r1, r0
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	0adb      	lsrs	r3, r3, #11
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	08005670 	.word	0x08005670

08001a30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a48:	f7ff fa3a 	bl	8000ec0 <HAL_PWREx_GetVoltageRange>
 8001a4c:	6178      	str	r0, [r7, #20]
 8001a4e:	e014      	b.n	8001a7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	4a24      	ldr	r2, [pc, #144]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a68:	f7ff fa2a 	bl	8000ec0 <HAL_PWREx_GetVoltageRange>
 8001a6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a80:	d10b      	bne.n	8001a9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b80      	cmp	r3, #128	; 0x80
 8001a86:	d919      	bls.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001a8c:	d902      	bls.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a8e:	2302      	movs	r3, #2
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	e013      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a94:	2301      	movs	r3, #1
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	e010      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b80      	cmp	r3, #128	; 0x80
 8001a9e:	d902      	bls.n	8001aa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	e00a      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b80      	cmp	r3, #128	; 0x80
 8001aaa:	d102      	bne.n	8001ab2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aac:	2302      	movs	r3, #2
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	e004      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b70      	cmp	r3, #112	; 0x70
 8001ab6:	d101      	bne.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ab8:	2301      	movs	r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 0207 	bic.w	r2, r3, #7
 8001ac4:	4909      	ldr	r1, [pc, #36]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40022000 	.word	0x40022000

08001af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001af8:	2300      	movs	r3, #0
 8001afa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001afc:	2300      	movs	r3, #0
 8001afe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d03f      	beq.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b14:	d01c      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b1a:	d802      	bhi.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00e      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001b20:	e01f      	b.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b26:	d003      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001b28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001b2c:	d01c      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001b2e:	e018      	b.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b30:	4b85      	ldr	r3, [pc, #532]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4a84      	ldr	r2, [pc, #528]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b3c:	e015      	b.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fab9 	bl	80020bc <RCCEx_PLLSAI1_Config>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b4e:	e00c      	b.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3320      	adds	r3, #32
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fba0 	bl	800229c <RCCEx_PLLSAI2_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b60:	e003      	b.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	74fb      	strb	r3, [r7, #19]
      break;
 8001b66:	e000      	b.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b6a:	7cfb      	ldrb	r3, [r7, #19]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10b      	bne.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b70:	4b75      	ldr	r3, [pc, #468]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b7e:	4972      	ldr	r1, [pc, #456]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001b86:	e001      	b.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b88:	7cfb      	ldrb	r3, [r7, #19]
 8001b8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d03f      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba0:	d01c      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001ba2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba6:	d802      	bhi.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00e      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001bac:	e01f      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bb2:	d003      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001bb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001bb8:	d01c      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001bba:	e018      	b.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001bbc:	4b62      	ldr	r3, [pc, #392]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4a61      	ldr	r2, [pc, #388]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bc8:	e015      	b.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fa73 	bl	80020bc <RCCEx_PLLSAI1_Config>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bda:	e00c      	b.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3320      	adds	r3, #32
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fb5a 	bl	800229c <RCCEx_PLLSAI2_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bec:	e003      	b.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	74fb      	strb	r3, [r7, #19]
      break;
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001bf6:	7cfb      	ldrb	r3, [r7, #19]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10b      	bne.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bfc:	4b52      	ldr	r3, [pc, #328]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c0a:	494f      	ldr	r1, [pc, #316]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c12:	e001      	b.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c14:	7cfb      	ldrb	r3, [r7, #19]
 8001c16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80a0 	beq.w	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00d      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c44:	4a40      	ldr	r2, [pc, #256]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4c:	4b3e      	ldr	r3, [pc, #248]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a3a      	ldr	r2, [pc, #232]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c68:	f7fe fce6 	bl	8000638 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c6e:	e009      	b.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c70:	f7fe fce2 	bl	8000638 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d902      	bls.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	74fb      	strb	r3, [r7, #19]
        break;
 8001c82:	e005      	b.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c84:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0ef      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001c90:	7cfb      	ldrb	r3, [r7, #19]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d15c      	bne.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c96:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01f      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d019      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cc0:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc6:	4a20      	ldr	r2, [pc, #128]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	4a1c      	ldr	r2, [pc, #112]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d016      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7fe fca1 	bl	8000638 <HAL_GetTick>
 8001cf6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7fe fc9d 	bl	8000638 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d902      	bls.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	74fb      	strb	r3, [r7, #19]
            break;
 8001d10:	e006      	b.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ec      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001d20:	7cfb      	ldrb	r3, [r7, #19]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d36:	4904      	ldr	r1, [pc, #16]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d3e:	e009      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d40:	7cfb      	ldrb	r3, [r7, #19]
 8001d42:	74bb      	strb	r3, [r7, #18]
 8001d44:	e006      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d50:	7cfb      	ldrb	r3, [r7, #19]
 8001d52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d54:	7c7b      	ldrb	r3, [r7, #17]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5a:	4b9e      	ldr	r3, [pc, #632]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a9d      	ldr	r2, [pc, #628]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d72:	4b98      	ldr	r3, [pc, #608]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d78:	f023 0203 	bic.w	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	4994      	ldr	r1, [pc, #592]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00a      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d94:	4b8f      	ldr	r3, [pc, #572]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	f023 020c 	bic.w	r2, r3, #12
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da2:	498c      	ldr	r1, [pc, #560]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001db6:	4b87      	ldr	r3, [pc, #540]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	4983      	ldr	r1, [pc, #524]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00a      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dd8:	4b7e      	ldr	r3, [pc, #504]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	497b      	ldr	r1, [pc, #492]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00a      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dfa:	4b76      	ldr	r3, [pc, #472]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e08:	4972      	ldr	r1, [pc, #456]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00a      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e1c:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	496a      	ldr	r1, [pc, #424]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e3e:	4b65      	ldr	r3, [pc, #404]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	4961      	ldr	r1, [pc, #388]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00a      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e60:	4b5c      	ldr	r3, [pc, #368]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	4959      	ldr	r1, [pc, #356]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00a      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e82:	4b54      	ldr	r3, [pc, #336]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e90:	4950      	ldr	r1, [pc, #320]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00a      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ea4:	4b4b      	ldr	r3, [pc, #300]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	4948      	ldr	r1, [pc, #288]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ec6:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ecc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	493f      	ldr	r1, [pc, #252]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d028      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef6:	4937      	ldr	r1, [pc, #220]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f06:	d106      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f08:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a31      	ldr	r2, [pc, #196]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f12:	60d3      	str	r3, [r2, #12]
 8001f14:	e011      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3304      	adds	r3, #4
 8001f24:	2101      	movs	r1, #1
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f8c8 	bl	80020bc <RCCEx_PLLSAI1_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001f30:	7cfb      	ldrb	r3, [r7, #19]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d028      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f46:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	491f      	ldr	r1, [pc, #124]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f64:	d106      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f70:	60d3      	str	r3, [r2, #12]
 8001f72:	e011      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3304      	adds	r3, #4
 8001f82:	2101      	movs	r1, #1
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 f899 	bl	80020bc <RCCEx_PLLSAI1_Config>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f8e:	7cfb      	ldrb	r3, [r7, #19]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d02b      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001faa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fc2:	d109      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4a02      	ldr	r2, [pc, #8]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fce:	60d3      	str	r3, [r2, #12]
 8001fd0:	e014      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 f867 	bl	80020bc <RCCEx_PLLSAI1_Config>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ff2:	7cfb      	ldrb	r3, [r7, #19]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d02f      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002016:	4928      	ldr	r1, [pc, #160]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002022:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002026:	d10d      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	2102      	movs	r1, #2
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f844 	bl	80020bc <RCCEx_PLLSAI1_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d014      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800203e:	7cfb      	ldrb	r3, [r7, #19]
 8002040:	74bb      	strb	r3, [r7, #18]
 8002042:	e011      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800204c:	d10c      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3320      	adds	r3, #32
 8002052:	2102      	movs	r1, #2
 8002054:	4618      	mov	r0, r3
 8002056:	f000 f921 	bl	800229c <RCCEx_PLLSAI2_Config>
 800205a:	4603      	mov	r3, r0
 800205c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002082:	490d      	ldr	r1, [pc, #52]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020a6:	4904      	ldr	r1, [pc, #16]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80020ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000

080020bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d018      	beq.n	8002108 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80020d6:	4b70      	ldr	r3, [pc, #448]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0203 	and.w	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d10d      	bne.n	8002102 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
       ||
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80020ee:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
       ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d044      	beq.n	800218c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	e041      	b.n	800218c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d00c      	beq.n	800212a <RCCEx_PLLSAI1_Config+0x6e>
 8002110:	2b03      	cmp	r3, #3
 8002112:	d013      	beq.n	800213c <RCCEx_PLLSAI1_Config+0x80>
 8002114:	2b01      	cmp	r3, #1
 8002116:	d120      	bne.n	800215a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002118:	4b5f      	ldr	r3, [pc, #380]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d11d      	bne.n	8002160 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002128:	e01a      	b.n	8002160 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800212a:	4b5b      	ldr	r3, [pc, #364]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002132:	2b00      	cmp	r3, #0
 8002134:	d116      	bne.n	8002164 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213a:	e013      	b.n	8002164 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800213c:	4b56      	ldr	r3, [pc, #344]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10f      	bne.n	8002168 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002148:	4b53      	ldr	r3, [pc, #332]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d109      	bne.n	8002168 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002158:	e006      	b.n	8002168 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      break;
 800215e:	e004      	b.n	800216a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002160:	bf00      	nop
 8002162:	e002      	b.n	800216a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002164:	bf00      	nop
 8002166:	e000      	b.n	800216a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002168:	bf00      	nop
    }

    if(status == HAL_OK)
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10d      	bne.n	800218c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002170:	4b49      	ldr	r3, [pc, #292]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6819      	ldr	r1, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	3b01      	subs	r3, #1
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	430b      	orrs	r3, r1
 8002186:	4944      	ldr	r1, [pc, #272]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002188:	4313      	orrs	r3, r2
 800218a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d17d      	bne.n	800228e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a40      	ldr	r2, [pc, #256]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002198:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800219c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800219e:	f7fe fa4b 	bl	8000638 <HAL_GetTick>
 80021a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021a4:	e009      	b.n	80021ba <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021a6:	f7fe fa47 	bl	8000638 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d902      	bls.n	80021ba <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	73fb      	strb	r3, [r7, #15]
        break;
 80021b8:	e005      	b.n	80021c6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021ba:	4b37      	ldr	r3, [pc, #220]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ef      	bne.n	80021a6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d160      	bne.n	800228e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d111      	bne.n	80021f6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021d2:	4b31      	ldr	r3, [pc, #196]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80021da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6892      	ldr	r2, [r2, #8]
 80021e2:	0211      	lsls	r1, r2, #8
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68d2      	ldr	r2, [r2, #12]
 80021e8:	0912      	lsrs	r2, r2, #4
 80021ea:	0452      	lsls	r2, r2, #17
 80021ec:	430a      	orrs	r2, r1
 80021ee:	492a      	ldr	r1, [pc, #168]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	610b      	str	r3, [r1, #16]
 80021f4:	e027      	b.n	8002246 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d112      	bne.n	8002222 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021fc:	4b26      	ldr	r3, [pc, #152]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002204:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6892      	ldr	r2, [r2, #8]
 800220c:	0211      	lsls	r1, r2, #8
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6912      	ldr	r2, [r2, #16]
 8002212:	0852      	lsrs	r2, r2, #1
 8002214:	3a01      	subs	r2, #1
 8002216:	0552      	lsls	r2, r2, #21
 8002218:	430a      	orrs	r2, r1
 800221a:	491f      	ldr	r1, [pc, #124]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 800221c:	4313      	orrs	r3, r2
 800221e:	610b      	str	r3, [r1, #16]
 8002220:	e011      	b.n	8002246 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002222:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800222a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6892      	ldr	r2, [r2, #8]
 8002232:	0211      	lsls	r1, r2, #8
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6952      	ldr	r2, [r2, #20]
 8002238:	0852      	lsrs	r2, r2, #1
 800223a:	3a01      	subs	r2, #1
 800223c:	0652      	lsls	r2, r2, #25
 800223e:	430a      	orrs	r2, r1
 8002240:	4915      	ldr	r1, [pc, #84]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a13      	ldr	r2, [pc, #76]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 800224c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002250:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7fe f9f1 	bl	8000638 <HAL_GetTick>
 8002256:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002258:	e009      	b.n	800226e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800225a:	f7fe f9ed 	bl	8000638 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d902      	bls.n	800226e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	73fb      	strb	r3, [r7, #15]
          break;
 800226c:	e005      	b.n	800227a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0ef      	beq.n	800225a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d106      	bne.n	800228e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	4903      	ldr	r1, [pc, #12]	; (8002298 <RCCEx_PLLSAI1_Config+0x1dc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800228e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000

0800229c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022aa:	4b68      	ldr	r3, [pc, #416]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d018      	beq.n	80022e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80022b6:	4b65      	ldr	r3, [pc, #404]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f003 0203 	and.w	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d10d      	bne.n	80022e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
       ||
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80022ce:	4b5f      	ldr	r3, [pc, #380]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
       ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d044      	beq.n	800236c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	e041      	b.n	800236c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d00c      	beq.n	800230a <RCCEx_PLLSAI2_Config+0x6e>
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d013      	beq.n	800231c <RCCEx_PLLSAI2_Config+0x80>
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d120      	bne.n	800233a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022f8:	4b54      	ldr	r3, [pc, #336]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d11d      	bne.n	8002340 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002308:	e01a      	b.n	8002340 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800230a:	4b50      	ldr	r3, [pc, #320]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800231a:	e013      	b.n	8002344 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800231c:	4b4b      	ldr	r3, [pc, #300]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10f      	bne.n	8002348 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002328:	4b48      	ldr	r3, [pc, #288]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d109      	bne.n	8002348 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002338:	e006      	b.n	8002348 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
      break;
 800233e:	e004      	b.n	800234a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002340:	bf00      	nop
 8002342:	e002      	b.n	800234a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002344:	bf00      	nop
 8002346:	e000      	b.n	800234a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002348:	bf00      	nop
    }

    if(status == HAL_OK)
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002350:	4b3e      	ldr	r3, [pc, #248]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6819      	ldr	r1, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	3b01      	subs	r3, #1
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	430b      	orrs	r3, r1
 8002366:	4939      	ldr	r1, [pc, #228]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002368:	4313      	orrs	r3, r2
 800236a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d167      	bne.n	8002442 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002372:	4b36      	ldr	r3, [pc, #216]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a35      	ldr	r2, [pc, #212]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800237e:	f7fe f95b 	bl	8000638 <HAL_GetTick>
 8002382:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002384:	e009      	b.n	800239a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002386:	f7fe f957 	bl	8000638 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d902      	bls.n	800239a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	73fb      	strb	r3, [r7, #15]
        break;
 8002398:	e005      	b.n	80023a6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800239a:	4b2c      	ldr	r3, [pc, #176]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1ef      	bne.n	8002386 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d14a      	bne.n	8002442 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d111      	bne.n	80023d6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80023ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6892      	ldr	r2, [r2, #8]
 80023c2:	0211      	lsls	r1, r2, #8
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68d2      	ldr	r2, [r2, #12]
 80023c8:	0912      	lsrs	r2, r2, #4
 80023ca:	0452      	lsls	r2, r2, #17
 80023cc:	430a      	orrs	r2, r1
 80023ce:	491f      	ldr	r1, [pc, #124]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	614b      	str	r3, [r1, #20]
 80023d4:	e011      	b.n	80023fa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6892      	ldr	r2, [r2, #8]
 80023e6:	0211      	lsls	r1, r2, #8
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6912      	ldr	r2, [r2, #16]
 80023ec:	0852      	lsrs	r2, r2, #1
 80023ee:	3a01      	subs	r2, #1
 80023f0:	0652      	lsls	r2, r2, #25
 80023f2:	430a      	orrs	r2, r1
 80023f4:	4915      	ldr	r1, [pc, #84]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a13      	ldr	r2, [pc, #76]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002406:	f7fe f917 	bl	8000638 <HAL_GetTick>
 800240a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800240c:	e009      	b.n	8002422 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800240e:	f7fe f913 	bl	8000638 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d902      	bls.n	8002422 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	73fb      	strb	r3, [r7, #15]
          break;
 8002420:	e005      	b.n	800242e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0ef      	beq.n	800240e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d106      	bne.n	8002442 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	4903      	ldr	r1, [pc, #12]	; (800244c <RCCEx_PLLSAI2_Config+0x1b0>)
 800243e:	4313      	orrs	r3, r2
 8002440:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002442:	7bfb      	ldrb	r3, [r7, #15]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000

08002450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e040      	b.n	80024e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f001 fa00 	bl	8003878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f98c 	bl	80027ac <UART_SetConfig>
 8002494:	4603      	mov	r3, r0
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e022      	b.n	80024e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fcc8 	bl	8002e3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fd4f 	bl	8002f80 <UART_CheckIdleState>
 80024e2:	4603      	mov	r3, r0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002500:	2b20      	cmp	r3, #32
 8002502:	f040 8081 	bne.w	8002608 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_UART_Transmit+0x26>
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e079      	b.n	800260a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_UART_Transmit+0x38>
 8002520:	2302      	movs	r3, #2
 8002522:	e072      	b.n	800260a <HAL_UART_Transmit+0x11e>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2221      	movs	r2, #33	; 0x21
 8002536:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002538:	f7fe f87e 	bl	8000638 <HAL_GetTick>
 800253c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	88fa      	ldrh	r2, [r7, #6]
 8002542:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	88fa      	ldrh	r2, [r7, #6]
 800254a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002556:	d108      	bne.n	800256a <HAL_UART_Transmit+0x7e>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d104      	bne.n	800256a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	e003      	b.n	8002572 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002572:	e02d      	b.n	80025d0 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2200      	movs	r2, #0
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fd43 	bl	800300a <UART_WaitOnFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e03d      	b.n	800260a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	881a      	ldrh	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025a0:	b292      	uxth	r2, r2
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	3302      	adds	r3, #2
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	e008      	b.n	80025be <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	b292      	uxth	r2, r2
 80025b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	3301      	adds	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1cb      	bne.n	8002574 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2200      	movs	r2, #0
 80025e4:	2140      	movs	r1, #64	; 0x40
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fd0f 	bl	800300a <UART_WaitOnFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e009      	b.n	800260a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2220      	movs	r2, #32
 80025fa:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	3720      	adds	r7, #32
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b08a      	sub	sp, #40	; 0x28
 8002616:	af02      	add	r7, sp, #8
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	4613      	mov	r3, r2
 8002620:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002626:	2b20      	cmp	r3, #32
 8002628:	f040 80bb 	bne.w	80027a2 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_UART_Receive+0x26>
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0b3      	b.n	80027a4 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_UART_Receive+0x38>
 8002646:	2302      	movs	r3, #2
 8002648:	e0ac      	b.n	80027a4 <HAL_UART_Receive+0x192>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2222      	movs	r2, #34	; 0x22
 800265c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800265e:	f7fd ffeb 	bl	8000638 <HAL_GetTick>
 8002662:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	88fa      	ldrh	r2, [r7, #6]
 8002668:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	88fa      	ldrh	r2, [r7, #6]
 8002670:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267c:	d10e      	bne.n	800269c <HAL_UART_Receive+0x8a>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d105      	bne.n	8002692 <HAL_UART_Receive+0x80>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f240 12ff 	movw	r2, #511	; 0x1ff
 800268c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002690:	e02d      	b.n	80026ee <HAL_UART_Receive+0xdc>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	22ff      	movs	r2, #255	; 0xff
 8002696:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800269a:	e028      	b.n	80026ee <HAL_UART_Receive+0xdc>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10d      	bne.n	80026c0 <HAL_UART_Receive+0xae>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d104      	bne.n	80026b6 <HAL_UART_Receive+0xa4>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	22ff      	movs	r2, #255	; 0xff
 80026b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026b4:	e01b      	b.n	80026ee <HAL_UART_Receive+0xdc>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	227f      	movs	r2, #127	; 0x7f
 80026ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026be:	e016      	b.n	80026ee <HAL_UART_Receive+0xdc>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026c8:	d10d      	bne.n	80026e6 <HAL_UART_Receive+0xd4>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <HAL_UART_Receive+0xca>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	227f      	movs	r2, #127	; 0x7f
 80026d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026da:	e008      	b.n	80026ee <HAL_UART_Receive+0xdc>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	223f      	movs	r2, #63	; 0x3f
 80026e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026e4:	e003      	b.n	80026ee <HAL_UART_Receive+0xdc>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80026f4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fe:	d108      	bne.n	8002712 <HAL_UART_Receive+0x100>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d104      	bne.n	8002712 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	e003      	b.n	800271a <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800271a:	e033      	b.n	8002784 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2200      	movs	r2, #0
 8002724:	2120      	movs	r1, #32
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fc6f 	bl	800300a <UART_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e036      	b.n	80027a4 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10c      	bne.n	8002756 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002742:	b29a      	uxth	r2, r3
 8002744:	8a7b      	ldrh	r3, [r7, #18]
 8002746:	4013      	ands	r3, r2
 8002748:	b29a      	uxth	r2, r3
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	3302      	adds	r3, #2
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	e00d      	b.n	8002772 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800275c:	b29b      	uxth	r3, r3
 800275e:	b2da      	uxtb	r2, r3
 8002760:	8a7b      	ldrh	r3, [r7, #18]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	4013      	ands	r3, r2
 8002766:	b2da      	uxtb	r2, r3
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3301      	adds	r3, #1
 8002770:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1c5      	bne.n	800271c <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
  }
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80027b0:	b088      	sub	sp, #32
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4bac      	ldr	r3, [pc, #688]	; (8002a94 <UART_SetConfig+0x2e8>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	69f9      	ldr	r1, [r7, #28]
 80027ea:	430b      	orrs	r3, r1
 80027ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4aa2      	ldr	r2, [pc, #648]	; (8002a98 <UART_SetConfig+0x2ec>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	4313      	orrs	r3, r2
 800281c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	430a      	orrs	r2, r1
 8002830:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a99      	ldr	r2, [pc, #612]	; (8002a9c <UART_SetConfig+0x2f0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d121      	bne.n	8002880 <UART_SetConfig+0xd4>
 800283c:	4b98      	ldr	r3, [pc, #608]	; (8002aa0 <UART_SetConfig+0x2f4>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b03      	cmp	r3, #3
 8002848:	d816      	bhi.n	8002878 <UART_SetConfig+0xcc>
 800284a:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <UART_SetConfig+0xa4>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	08002861 	.word	0x08002861
 8002854:	0800286d 	.word	0x0800286d
 8002858:	08002867 	.word	0x08002867
 800285c:	08002873 	.word	0x08002873
 8002860:	2301      	movs	r3, #1
 8002862:	76fb      	strb	r3, [r7, #27]
 8002864:	e0e8      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002866:	2302      	movs	r3, #2
 8002868:	76fb      	strb	r3, [r7, #27]
 800286a:	e0e5      	b.n	8002a38 <UART_SetConfig+0x28c>
 800286c:	2304      	movs	r3, #4
 800286e:	76fb      	strb	r3, [r7, #27]
 8002870:	e0e2      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002872:	2308      	movs	r3, #8
 8002874:	76fb      	strb	r3, [r7, #27]
 8002876:	e0df      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002878:	2310      	movs	r3, #16
 800287a:	76fb      	strb	r3, [r7, #27]
 800287c:	bf00      	nop
 800287e:	e0db      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a87      	ldr	r2, [pc, #540]	; (8002aa4 <UART_SetConfig+0x2f8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d134      	bne.n	80028f4 <UART_SetConfig+0x148>
 800288a:	4b85      	ldr	r3, [pc, #532]	; (8002aa0 <UART_SetConfig+0x2f4>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d829      	bhi.n	80028ec <UART_SetConfig+0x140>
 8002898:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <UART_SetConfig+0xf4>)
 800289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289e:	bf00      	nop
 80028a0:	080028d5 	.word	0x080028d5
 80028a4:	080028ed 	.word	0x080028ed
 80028a8:	080028ed 	.word	0x080028ed
 80028ac:	080028ed 	.word	0x080028ed
 80028b0:	080028e1 	.word	0x080028e1
 80028b4:	080028ed 	.word	0x080028ed
 80028b8:	080028ed 	.word	0x080028ed
 80028bc:	080028ed 	.word	0x080028ed
 80028c0:	080028db 	.word	0x080028db
 80028c4:	080028ed 	.word	0x080028ed
 80028c8:	080028ed 	.word	0x080028ed
 80028cc:	080028ed 	.word	0x080028ed
 80028d0:	080028e7 	.word	0x080028e7
 80028d4:	2300      	movs	r3, #0
 80028d6:	76fb      	strb	r3, [r7, #27]
 80028d8:	e0ae      	b.n	8002a38 <UART_SetConfig+0x28c>
 80028da:	2302      	movs	r3, #2
 80028dc:	76fb      	strb	r3, [r7, #27]
 80028de:	e0ab      	b.n	8002a38 <UART_SetConfig+0x28c>
 80028e0:	2304      	movs	r3, #4
 80028e2:	76fb      	strb	r3, [r7, #27]
 80028e4:	e0a8      	b.n	8002a38 <UART_SetConfig+0x28c>
 80028e6:	2308      	movs	r3, #8
 80028e8:	76fb      	strb	r3, [r7, #27]
 80028ea:	e0a5      	b.n	8002a38 <UART_SetConfig+0x28c>
 80028ec:	2310      	movs	r3, #16
 80028ee:	76fb      	strb	r3, [r7, #27]
 80028f0:	bf00      	nop
 80028f2:	e0a1      	b.n	8002a38 <UART_SetConfig+0x28c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6b      	ldr	r2, [pc, #428]	; (8002aa8 <UART_SetConfig+0x2fc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d120      	bne.n	8002940 <UART_SetConfig+0x194>
 80028fe:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <UART_SetConfig+0x2f4>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002908:	2b10      	cmp	r3, #16
 800290a:	d00f      	beq.n	800292c <UART_SetConfig+0x180>
 800290c:	2b10      	cmp	r3, #16
 800290e:	d802      	bhi.n	8002916 <UART_SetConfig+0x16a>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <UART_SetConfig+0x174>
 8002914:	e010      	b.n	8002938 <UART_SetConfig+0x18c>
 8002916:	2b20      	cmp	r3, #32
 8002918:	d005      	beq.n	8002926 <UART_SetConfig+0x17a>
 800291a:	2b30      	cmp	r3, #48	; 0x30
 800291c:	d009      	beq.n	8002932 <UART_SetConfig+0x186>
 800291e:	e00b      	b.n	8002938 <UART_SetConfig+0x18c>
 8002920:	2300      	movs	r3, #0
 8002922:	76fb      	strb	r3, [r7, #27]
 8002924:	e088      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002926:	2302      	movs	r3, #2
 8002928:	76fb      	strb	r3, [r7, #27]
 800292a:	e085      	b.n	8002a38 <UART_SetConfig+0x28c>
 800292c:	2304      	movs	r3, #4
 800292e:	76fb      	strb	r3, [r7, #27]
 8002930:	e082      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002932:	2308      	movs	r3, #8
 8002934:	76fb      	strb	r3, [r7, #27]
 8002936:	e07f      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002938:	2310      	movs	r3, #16
 800293a:	76fb      	strb	r3, [r7, #27]
 800293c:	bf00      	nop
 800293e:	e07b      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a59      	ldr	r2, [pc, #356]	; (8002aac <UART_SetConfig+0x300>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d120      	bne.n	800298c <UART_SetConfig+0x1e0>
 800294a:	4b55      	ldr	r3, [pc, #340]	; (8002aa0 <UART_SetConfig+0x2f4>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	d00f      	beq.n	8002978 <UART_SetConfig+0x1cc>
 8002958:	2b40      	cmp	r3, #64	; 0x40
 800295a:	d802      	bhi.n	8002962 <UART_SetConfig+0x1b6>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <UART_SetConfig+0x1c0>
 8002960:	e010      	b.n	8002984 <UART_SetConfig+0x1d8>
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d005      	beq.n	8002972 <UART_SetConfig+0x1c6>
 8002966:	2bc0      	cmp	r3, #192	; 0xc0
 8002968:	d009      	beq.n	800297e <UART_SetConfig+0x1d2>
 800296a:	e00b      	b.n	8002984 <UART_SetConfig+0x1d8>
 800296c:	2300      	movs	r3, #0
 800296e:	76fb      	strb	r3, [r7, #27]
 8002970:	e062      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002972:	2302      	movs	r3, #2
 8002974:	76fb      	strb	r3, [r7, #27]
 8002976:	e05f      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002978:	2304      	movs	r3, #4
 800297a:	76fb      	strb	r3, [r7, #27]
 800297c:	e05c      	b.n	8002a38 <UART_SetConfig+0x28c>
 800297e:	2308      	movs	r3, #8
 8002980:	76fb      	strb	r3, [r7, #27]
 8002982:	e059      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002984:	2310      	movs	r3, #16
 8002986:	76fb      	strb	r3, [r7, #27]
 8002988:	bf00      	nop
 800298a:	e055      	b.n	8002a38 <UART_SetConfig+0x28c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a47      	ldr	r2, [pc, #284]	; (8002ab0 <UART_SetConfig+0x304>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d124      	bne.n	80029e0 <UART_SetConfig+0x234>
 8002996:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <UART_SetConfig+0x2f4>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a4:	d012      	beq.n	80029cc <UART_SetConfig+0x220>
 80029a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029aa:	d802      	bhi.n	80029b2 <UART_SetConfig+0x206>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <UART_SetConfig+0x214>
 80029b0:	e012      	b.n	80029d8 <UART_SetConfig+0x22c>
 80029b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b6:	d006      	beq.n	80029c6 <UART_SetConfig+0x21a>
 80029b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029bc:	d009      	beq.n	80029d2 <UART_SetConfig+0x226>
 80029be:	e00b      	b.n	80029d8 <UART_SetConfig+0x22c>
 80029c0:	2300      	movs	r3, #0
 80029c2:	76fb      	strb	r3, [r7, #27]
 80029c4:	e038      	b.n	8002a38 <UART_SetConfig+0x28c>
 80029c6:	2302      	movs	r3, #2
 80029c8:	76fb      	strb	r3, [r7, #27]
 80029ca:	e035      	b.n	8002a38 <UART_SetConfig+0x28c>
 80029cc:	2304      	movs	r3, #4
 80029ce:	76fb      	strb	r3, [r7, #27]
 80029d0:	e032      	b.n	8002a38 <UART_SetConfig+0x28c>
 80029d2:	2308      	movs	r3, #8
 80029d4:	76fb      	strb	r3, [r7, #27]
 80029d6:	e02f      	b.n	8002a38 <UART_SetConfig+0x28c>
 80029d8:	2310      	movs	r3, #16
 80029da:	76fb      	strb	r3, [r7, #27]
 80029dc:	bf00      	nop
 80029de:	e02b      	b.n	8002a38 <UART_SetConfig+0x28c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2c      	ldr	r2, [pc, #176]	; (8002a98 <UART_SetConfig+0x2ec>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d124      	bne.n	8002a34 <UART_SetConfig+0x288>
 80029ea:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <UART_SetConfig+0x2f4>)
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f8:	d012      	beq.n	8002a20 <UART_SetConfig+0x274>
 80029fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fe:	d802      	bhi.n	8002a06 <UART_SetConfig+0x25a>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <UART_SetConfig+0x268>
 8002a04:	e012      	b.n	8002a2c <UART_SetConfig+0x280>
 8002a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0a:	d006      	beq.n	8002a1a <UART_SetConfig+0x26e>
 8002a0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a10:	d009      	beq.n	8002a26 <UART_SetConfig+0x27a>
 8002a12:	e00b      	b.n	8002a2c <UART_SetConfig+0x280>
 8002a14:	2300      	movs	r3, #0
 8002a16:	76fb      	strb	r3, [r7, #27]
 8002a18:	e00e      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	76fb      	strb	r3, [r7, #27]
 8002a1e:	e00b      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002a20:	2304      	movs	r3, #4
 8002a22:	76fb      	strb	r3, [r7, #27]
 8002a24:	e008      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002a26:	2308      	movs	r3, #8
 8002a28:	76fb      	strb	r3, [r7, #27]
 8002a2a:	e005      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	76fb      	strb	r3, [r7, #27]
 8002a30:	bf00      	nop
 8002a32:	e001      	b.n	8002a38 <UART_SetConfig+0x28c>
 8002a34:	2310      	movs	r3, #16
 8002a36:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a16      	ldr	r2, [pc, #88]	; (8002a98 <UART_SetConfig+0x2ec>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	f040 80fa 	bne.w	8002c38 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a44:	7efb      	ldrb	r3, [r7, #27]
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d836      	bhi.n	8002ab8 <UART_SetConfig+0x30c>
 8002a4a:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <UART_SetConfig+0x2a4>)
 8002a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a50:	08002a75 	.word	0x08002a75
 8002a54:	08002ab9 	.word	0x08002ab9
 8002a58:	08002a7d 	.word	0x08002a7d
 8002a5c:	08002ab9 	.word	0x08002ab9
 8002a60:	08002a83 	.word	0x08002a83
 8002a64:	08002ab9 	.word	0x08002ab9
 8002a68:	08002ab9 	.word	0x08002ab9
 8002a6c:	08002ab9 	.word	0x08002ab9
 8002a70:	08002a8b 	.word	0x08002a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002a74:	f7fe ffb0 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 8002a78:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a7a:	e020      	b.n	8002abe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <UART_SetConfig+0x308>)
 8002a7e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a80:	e01d      	b.n	8002abe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002a82:	f7fe ff13 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8002a86:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a88:	e019      	b.n	8002abe <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a8e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a90:	e015      	b.n	8002abe <UART_SetConfig+0x312>
 8002a92:	bf00      	nop
 8002a94:	efff69f3 	.word	0xefff69f3
 8002a98:	40008000 	.word	0x40008000
 8002a9c:	40013800 	.word	0x40013800
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40004400 	.word	0x40004400
 8002aa8:	40004800 	.word	0x40004800
 8002aac:	40004c00 	.word	0x40004c00
 8002ab0:	40005000 	.word	0x40005000
 8002ab4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	74fb      	strb	r3, [r7, #19]
        break;
 8002abc:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 81ac 	beq.w	8002e1e <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d305      	bcc.n	8002ae2 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d902      	bls.n	8002ae8 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	74fb      	strb	r3, [r7, #19]
 8002ae6:	e19a      	b.n	8002e1e <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8002ae8:	7efb      	ldrb	r3, [r7, #27]
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	f200 8091 	bhi.w	8002c12 <UART_SetConfig+0x466>
 8002af0:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <UART_SetConfig+0x34c>)
 8002af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af6:	bf00      	nop
 8002af8:	08002b1d 	.word	0x08002b1d
 8002afc:	08002c13 	.word	0x08002c13
 8002b00:	08002b69 	.word	0x08002b69
 8002b04:	08002c13 	.word	0x08002c13
 8002b08:	08002b9d 	.word	0x08002b9d
 8002b0c:	08002c13 	.word	0x08002c13
 8002b10:	08002c13 	.word	0x08002c13
 8002b14:	08002c13 	.word	0x08002c13
 8002b18:	08002be9 	.word	0x08002be9
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b1c:	f7fe ff5c 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4619      	mov	r1, r3
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	f04f 0400 	mov.w	r4, #0
 8002b30:	0214      	lsls	r4, r2, #8
 8002b32:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002b36:	020b      	lsls	r3, r1, #8
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6852      	ldr	r2, [r2, #4]
 8002b3c:	0852      	lsrs	r2, r2, #1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	eb13 0b01 	adds.w	fp, r3, r1
 8002b48:	eb44 0c02 	adc.w	ip, r4, r2
 8002b4c:	4658      	mov	r0, fp
 8002b4e:	4661      	mov	r1, ip
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f04f 0400 	mov.w	r4, #0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4623      	mov	r3, r4
 8002b5c:	f7fd fb88 	bl	8000270 <__aeabi_uldivmod>
 8002b60:	4603      	mov	r3, r0
 8002b62:	460c      	mov	r4, r1
 8002b64:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002b66:	e057      	b.n	8002c18 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	085b      	lsrs	r3, r3, #1
 8002b6e:	f04f 0400 	mov.w	r4, #0
 8002b72:	49b1      	ldr	r1, [pc, #708]	; (8002e38 <UART_SetConfig+0x68c>)
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	eb13 0b01 	adds.w	fp, r3, r1
 8002b7c:	eb44 0c02 	adc.w	ip, r4, r2
 8002b80:	4658      	mov	r0, fp
 8002b82:	4661      	mov	r1, ip
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f04f 0400 	mov.w	r4, #0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4623      	mov	r3, r4
 8002b90:	f7fd fb6e 	bl	8000270 <__aeabi_uldivmod>
 8002b94:	4603      	mov	r3, r0
 8002b96:	460c      	mov	r4, r1
 8002b98:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002b9a:	e03d      	b.n	8002c18 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b9c:	f7fe fe86 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	f04f 0400 	mov.w	r4, #0
 8002bb0:	0214      	lsls	r4, r2, #8
 8002bb2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002bb6:	020b      	lsls	r3, r1, #8
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6852      	ldr	r2, [r2, #4]
 8002bbc:	0852      	lsrs	r2, r2, #1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	eb13 0b01 	adds.w	fp, r3, r1
 8002bc8:	eb44 0c02 	adc.w	ip, r4, r2
 8002bcc:	4658      	mov	r0, fp
 8002bce:	4661      	mov	r1, ip
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f04f 0400 	mov.w	r4, #0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4623      	mov	r3, r4
 8002bdc:	f7fd fb48 	bl	8000270 <__aeabi_uldivmod>
 8002be0:	4603      	mov	r3, r0
 8002be2:	460c      	mov	r4, r1
 8002be4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002be6:	e017      	b.n	8002c18 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	f04f 0400 	mov.w	r4, #0
 8002bf2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002bf6:	f144 0100 	adc.w	r1, r4, #0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f04f 0400 	mov.w	r4, #0
 8002c02:	461a      	mov	r2, r3
 8002c04:	4623      	mov	r3, r4
 8002c06:	f7fd fb33 	bl	8000270 <__aeabi_uldivmod>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002c10:	e002      	b.n	8002c18 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	74fb      	strb	r3, [r7, #19]
            break;
 8002c16:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c1e:	d308      	bcc.n	8002c32 <UART_SetConfig+0x486>
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c26:	d204      	bcs.n	8002c32 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	e0f5      	b.n	8002e1e <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	74fb      	strb	r3, [r7, #19]
 8002c36:	e0f2      	b.n	8002e1e <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c40:	d17f      	bne.n	8002d42 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8002c42:	7efb      	ldrb	r3, [r7, #27]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d85c      	bhi.n	8002d02 <UART_SetConfig+0x556>
 8002c48:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <UART_SetConfig+0x4a4>)
 8002c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4e:	bf00      	nop
 8002c50:	08002c75 	.word	0x08002c75
 8002c54:	08002c93 	.word	0x08002c93
 8002c58:	08002cb1 	.word	0x08002cb1
 8002c5c:	08002d03 	.word	0x08002d03
 8002c60:	08002ccd 	.word	0x08002ccd
 8002c64:	08002d03 	.word	0x08002d03
 8002c68:	08002d03 	.word	0x08002d03
 8002c6c:	08002d03 	.word	0x08002d03
 8002c70:	08002ceb 	.word	0x08002ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c74:	f7fe feb0 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	005a      	lsls	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	441a      	add	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c90:	e03a      	b.n	8002d08 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c92:	f7fe feb7 	bl	8001a04 <HAL_RCC_GetPCLK2Freq>
 8002c96:	4603      	mov	r3, r0
 8002c98:	005a      	lsls	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cae:	e02b      	b.n	8002d08 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002cba:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6852      	ldr	r2, [r2, #4]
 8002cc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cca:	e01d      	b.n	8002d08 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ccc:	f7fe fdee 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	005a      	lsls	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	441a      	add	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ce8:	e00e      	b.n	8002d08 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d00:	e002      	b.n	8002d08 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	74fb      	strb	r3, [r7, #19]
        break;
 8002d06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b0f      	cmp	r3, #15
 8002d0c:	d916      	bls.n	8002d3c <UART_SetConfig+0x590>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d14:	d212      	bcs.n	8002d3c <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f023 030f 	bic.w	r3, r3, #15
 8002d1e:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	085b      	lsrs	r3, r3, #1
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	897b      	ldrh	r3, [r7, #10]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	897a      	ldrh	r2, [r7, #10]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	e070      	b.n	8002e1e <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	74fb      	strb	r3, [r7, #19]
 8002d40:	e06d      	b.n	8002e1e <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8002d42:	7efb      	ldrb	r3, [r7, #27]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d859      	bhi.n	8002dfc <UART_SetConfig+0x650>
 8002d48:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <UART_SetConfig+0x5a4>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002d75 	.word	0x08002d75
 8002d54:	08002d91 	.word	0x08002d91
 8002d58:	08002dad 	.word	0x08002dad
 8002d5c:	08002dfd 	.word	0x08002dfd
 8002d60:	08002dc9 	.word	0x08002dc9
 8002d64:	08002dfd 	.word	0x08002dfd
 8002d68:	08002dfd 	.word	0x08002dfd
 8002d6c:	08002dfd 	.word	0x08002dfd
 8002d70:	08002de5 	.word	0x08002de5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d74:	f7fe fe30 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	441a      	add	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d8e:	e038      	b.n	8002e02 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d90:	f7fe fe38 	bl	8001a04 <HAL_RCC_GetPCLK2Freq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002daa:	e02a      	b.n	8002e02 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002db6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6852      	ldr	r2, [r2, #4]
 8002dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dc6:	e01c      	b.n	8002e02 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002dc8:	f7fe fd70 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	441a      	add	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002de2:	e00e      	b.n	8002e02 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dfa:	e002      	b.n	8002e02 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	74fb      	strb	r3, [r7, #19]
        break;
 8002e00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b0f      	cmp	r3, #15
 8002e06:	d908      	bls.n	8002e1a <UART_SetConfig+0x66e>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0e:	d204      	bcs.n	8002e1a <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	60da      	str	r2, [r3, #12]
 8002e18:	e001      	b.n	8002e1e <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002e36:	bf00      	nop
 8002e38:	f4240000 	.word	0xf4240000

08002e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01a      	beq.n	8002f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f3a:	d10a      	bne.n	8002f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]
  }
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f8e:	f7fd fb53 	bl	8000638 <HAL_GetTick>
 8002f92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d10e      	bne.n	8002fc0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fa2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f82a 	bl	800300a <UART_WaitOnFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e020      	b.n	8003002 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d10e      	bne.n	8002fec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f814 	bl	800300a <UART_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e00a      	b.n	8003002 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301a:	e02a      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003022:	d026      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003024:	f7fd fb08 	bl	8000638 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	429a      	cmp	r2, r3
 8003032:	d302      	bcc.n	800303a <UART_WaitOnFlagUntilTimeout+0x30>
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11b      	bne.n	8003072 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003048:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e00f      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	429a      	cmp	r2, r3
 800308e:	d0c5      	beq.n	800301c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b096      	sub	sp, #88	; 0x58
 80030a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030a2:	f7fd fa65 	bl	8000570 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LCD_GLASS_Init();
 80030a6:	f000 fa57 	bl	8003558 <BSP_LCD_GLASS_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030aa:	f000 f829 	bl	8003100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030ae:	f000 f92f 	bl	8003310 <MX_GPIO_Init>
  MX_LCD_Init();
 80030b2:	f000 f895 	bl	80031e0 <MX_LCD_Init>
  MX_USART2_UART_Init();
 80030b6:	f000 f8fb 	bl	80032b0 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80030ba:	f000 f8c9 	bl	8003250 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  //BSP_LCD_GLASS_DisplayString("Hello");
  RetargetInit(&huart2);
 80030be:	480c      	ldr	r0, [pc, #48]	; (80030f0 <main+0x54>)
 80030c0:	f000 f984 	bl	80033cc <RetargetInit>
  printf("\r\nStarting\r\n");
 80030c4:	480b      	ldr	r0, [pc, #44]	; (80030f4 <main+0x58>)
 80030c6:	f001 f911 	bl	80042ec <puts>
  esp8266_init(&huart4, 0, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2100      	movs	r1, #0
 80030ce:	480a      	ldr	r0, [pc, #40]	; (80030f8 <main+0x5c>)
 80030d0:	f000 fd4a 	bl	8003b68 <esp8266_init>
  uint8_t data[] = "https://virtualqueue477.herokuapp.com/enterQueue?storeSecret=grp4&potenID=183f271f";
 80030d4:	4a09      	ldr	r2, [pc, #36]	; (80030fc <main+0x60>)
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	4611      	mov	r1, r2
 80030da:	2253      	movs	r2, #83	; 0x53
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 ffd5 	bl	800408c <memcpy>
  send_get(data, sizeof(data)/sizeof(uint8_t)-1);
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	2152      	movs	r1, #82	; 0x52
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fe60 	bl	8003dac <send_get>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80030ec:	e7fe      	b.n	80030ec <main+0x50>
 80030ee:	bf00      	nop
 80030f0:	200001d8 	.word	0x200001d8
 80030f4:	0800542c 	.word	0x0800542c
 80030f8:	20000158 	.word	0x20000158
 80030fc:	08005438 	.word	0x08005438

08003100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0b8      	sub	sp, #224	; 0xe0
 8003104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003106:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800310a:	2244      	movs	r2, #68	; 0x44
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f000 ffc7 	bl	80040a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003114:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003124:	463b      	mov	r3, r7
 8003126:	2288      	movs	r2, #136	; 0x88
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f000 ffb9 	bl	80040a2 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8003130:	2318      	movs	r3, #24
 8003132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003136:	2301      	movs	r3, #1
 8003138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800313c:	2301      	movs	r3, #1
 800313e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003148:	2360      	movs	r3, #96	; 0x60
 800314a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800314e:	2300      	movs	r3, #0
 8003150:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003154:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd ff15 	bl	8000f88 <HAL_RCC_OscConfig>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8003164:	f000 f92a 	bl	80033bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003168:	230f      	movs	r3, #15
 800316a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800316e:	2300      	movs	r3, #0
 8003170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003174:	2300      	movs	r3, #0
 8003176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003186:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe faab 	bl	80016e8 <HAL_RCC_ClockConfig>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003198:	f000 f910 	bl	80033bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <SystemClock_Config+0xdc>)
 800319e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031a0:	2300      	movs	r3, #0
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80031a4:	2300      	movs	r3, #0
 80031a6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80031a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031b0:	463b      	mov	r3, r7
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe fc9c 	bl	8001af0 <HAL_RCCEx_PeriphCLKConfig>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80031be:	f000 f8fd 	bl	80033bc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80031c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80031c6:	f7fd fe89 	bl	8000edc <HAL_PWREx_ControlVoltageScaling>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80031d0:	f000 f8f4 	bl	80033bc <Error_Handler>
  }
}
 80031d4:	bf00      	nop
 80031d6:	37e0      	adds	r7, #224	; 0xe0
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	0002000a 	.word	0x0002000a

080031e0 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 80031e4:	4b18      	ldr	r3, [pc, #96]	; (8003248 <MX_LCD_Init+0x68>)
 80031e6:	4a19      	ldr	r2, [pc, #100]	; (800324c <MX_LCD_Init+0x6c>)
 80031e8:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80031ea:	4b17      	ldr	r3, [pc, #92]	; (8003248 <MX_LCD_Init+0x68>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <MX_LCD_Init+0x68>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_2;
 80031f6:	4b14      	ldr	r3, [pc, #80]	; (8003248 <MX_LCD_Init+0x68>)
 80031f8:	2204      	movs	r2, #4
 80031fa:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80031fc:	4b12      	ldr	r3, [pc, #72]	; (8003248 <MX_LCD_Init+0x68>)
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <MX_LCD_Init+0x68>)
 8003204:	2200      	movs	r2, #0
 8003206:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <MX_LCD_Init+0x68>)
 800320a:	2200      	movs	r2, #0
 800320c:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <MX_LCD_Init+0x68>)
 8003210:	2200      	movs	r2, #0
 8003212:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <MX_LCD_Init+0x68>)
 8003216:	2200      	movs	r2, #0
 8003218:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 800321a:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <MX_LCD_Init+0x68>)
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <MX_LCD_Init+0x68>)
 8003222:	2200      	movs	r2, #0
 8003224:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <MX_LCD_Init+0x68>)
 8003228:	2200      	movs	r2, #0
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <MX_LCD_Init+0x68>)
 800322e:	2200      	movs	r2, #0
 8003230:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8003232:	4805      	ldr	r0, [pc, #20]	; (8003248 <MX_LCD_Init+0x68>)
 8003234:	f7fd fcd4 	bl	8000be0 <HAL_LCD_Init>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_LCD_Init+0x62>
  {
    Error_Handler();
 800323e:	f000 f8bd 	bl	80033bc <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	2000011c 	.word	0x2000011c
 800324c:	40002400 	.word	0x40002400

08003250 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <MX_UART4_Init+0x58>)
 8003256:	4a15      	ldr	r2, [pc, #84]	; (80032ac <MX_UART4_Init+0x5c>)
 8003258:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <MX_UART4_Init+0x58>)
 800325c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003260:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003262:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <MX_UART4_Init+0x58>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <MX_UART4_Init+0x58>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <MX_UART4_Init+0x58>)
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <MX_UART4_Init+0x58>)
 8003276:	220c      	movs	r2, #12
 8003278:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <MX_UART4_Init+0x58>)
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <MX_UART4_Init+0x58>)
 8003282:	2200      	movs	r2, #0
 8003284:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <MX_UART4_Init+0x58>)
 8003288:	2200      	movs	r2, #0
 800328a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <MX_UART4_Init+0x58>)
 800328e:	2200      	movs	r2, #0
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003292:	4805      	ldr	r0, [pc, #20]	; (80032a8 <MX_UART4_Init+0x58>)
 8003294:	f7ff f8dc 	bl	8002450 <HAL_UART_Init>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800329e:	f000 f88d 	bl	80033bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000158 	.word	0x20000158
 80032ac:	40004c00 	.word	0x40004c00

080032b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032b4:	4b14      	ldr	r3, [pc, #80]	; (8003308 <MX_USART2_UART_Init+0x58>)
 80032b6:	4a15      	ldr	r2, [pc, #84]	; (800330c <MX_USART2_UART_Init+0x5c>)
 80032b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <MX_USART2_UART_Init+0x58>)
 80032bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <MX_USART2_UART_Init+0x58>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <MX_USART2_UART_Init+0x58>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032ce:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <MX_USART2_UART_Init+0x58>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <MX_USART2_UART_Init+0x58>)
 80032d6:	220c      	movs	r2, #12
 80032d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <MX_USART2_UART_Init+0x58>)
 80032dc:	2200      	movs	r2, #0
 80032de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <MX_USART2_UART_Init+0x58>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <MX_USART2_UART_Init+0x58>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <MX_USART2_UART_Init+0x58>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032f2:	4805      	ldr	r0, [pc, #20]	; (8003308 <MX_USART2_UART_Init+0x58>)
 80032f4:	f7ff f8ac 	bl	8002450 <HAL_UART_Init>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80032fe:	f000 f85d 	bl	80033bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200001d8 	.word	0x200001d8
 800330c:	40004400 	.word	0x40004400

08003310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003316:	f107 0314 	add.w	r3, r7, #20
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003326:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <MX_GPIO_Init+0xa4>)
 8003328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332a:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <MX_GPIO_Init+0xa4>)
 800332c:	f043 0304 	orr.w	r3, r3, #4
 8003330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <MX_GPIO_Init+0xa4>)
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <MX_GPIO_Init+0xa4>)
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <MX_GPIO_Init+0xa4>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800334a:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <MX_GPIO_Init+0xa4>)
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003356:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <MX_GPIO_Init+0xa4>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <MX_GPIO_Init+0xa4>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003362:	4b14      	ldr	r3, [pc, #80]	; (80033b4 <MX_GPIO_Init+0xa4>)
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <MX_GPIO_Init+0xa4>)
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	4a10      	ldr	r2, [pc, #64]	; (80033b4 <MX_GPIO_Init+0xa4>)
 8003374:	f043 0308 	orr.w	r3, r3, #8
 8003378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800337a:	4b0e      	ldr	r3, [pc, #56]	; (80033b4 <MX_GPIO_Init+0xa4>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	607b      	str	r3, [r7, #4]
 8003384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8003386:	2200      	movs	r2, #0
 8003388:	2104      	movs	r1, #4
 800338a:	480b      	ldr	r0, [pc, #44]	; (80033b8 <MX_GPIO_Init+0xa8>)
 800338c:	f7fd fc10 	bl	8000bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003390:	2304      	movs	r3, #4
 8003392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003394:	2301      	movs	r3, #1
 8003396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339c:	2300      	movs	r3, #0
 800339e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	4619      	mov	r1, r3
 80033a6:	4804      	ldr	r0, [pc, #16]	; (80033b8 <MX_GPIO_Init+0xa8>)
 80033a8:	f7fd fa5a 	bl	8000860 <HAL_GPIO_Init>

}
 80033ac:	bf00      	nop
 80033ae:	3728      	adds	r7, #40	; 0x28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	48000400 	.word	0x48000400

080033bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80033d4:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <RetargetInit+0x28>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80033da:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <RetargetInit+0x2c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6898      	ldr	r0, [r3, #8]
 80033e0:	2300      	movs	r3, #0
 80033e2:	2202      	movs	r2, #2
 80033e4:	2100      	movs	r1, #0
 80033e6:	f000 ff99 	bl	800431c <setvbuf>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000258 	.word	0x20000258
 80033f8:	2000000c 	.word	0x2000000c

080033fc <_isatty>:

int _isatty(int fd) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db04      	blt.n	8003414 <_isatty+0x18>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b02      	cmp	r3, #2
 800340e:	dc01      	bgt.n	8003414 <_isatty+0x18>
    return 1;
 8003410:	2301      	movs	r3, #1
 8003412:	e005      	b.n	8003420 <_isatty+0x24>

  errno = EBADF;
 8003414:	f000 fe08 	bl	8004028 <__errno>
 8003418:	4602      	mov	r2, r0
 800341a:	2309      	movs	r3, #9
 800341c:	6013      	str	r3, [r2, #0]
  return 0;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <_write>:

int _write(int fd, char* ptr, int len) {
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d002      	beq.n	8003440 <_write+0x18>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d111      	bne.n	8003464 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <_write+0x54>)
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	b29a      	uxth	r2, r3
 8003448:	f04f 33ff 	mov.w	r3, #4294967295
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	f7ff f84d 	bl	80024ec <HAL_UART_Transmit>
 8003452:	4603      	mov	r3, r0
 8003454:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <_write+0x38>
      return len;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	e008      	b.n	8003472 <_write+0x4a>
    else
      return EIO;
 8003460:	2305      	movs	r3, #5
 8003462:	e006      	b.n	8003472 <_write+0x4a>
  }
  errno = EBADF;
 8003464:	f000 fde0 	bl	8004028 <__errno>
 8003468:	4602      	mov	r2, r0
 800346a:	2309      	movs	r3, #9
 800346c:	6013      	str	r3, [r2, #0]
  return -1;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000258 	.word	0x20000258

08003480 <_close>:

int _close(int fd) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db04      	blt.n	8003498 <_close+0x18>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b02      	cmp	r3, #2
 8003492:	dc01      	bgt.n	8003498 <_close+0x18>
    return 0;
 8003494:	2300      	movs	r3, #0
 8003496:	e006      	b.n	80034a6 <_close+0x26>

  errno = EBADF;
 8003498:	f000 fdc6 	bl	8004028 <__errno>
 800349c:	4602      	mov	r2, r0
 800349e:	2309      	movs	r3, #9
 80034a0:	6013      	str	r3, [r2, #0]
  return -1;
 80034a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80034ba:	f000 fdb5 	bl	8004028 <__errno>
 80034be:	4602      	mov	r2, r0
 80034c0:	2309      	movs	r3, #9
 80034c2:	6013      	str	r3, [r2, #0]
  return -1;
 80034c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <_read>:

int _read(int fd, char* ptr, int len) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d110      	bne.n	8003504 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <_read+0x4c>)
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ea:	2201      	movs	r2, #1
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	f7ff f890 	bl	8002612 <HAL_UART_Receive>
 80034f2:	4603      	mov	r3, r0
 80034f4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <_read+0x30>
      return 1;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e008      	b.n	8003512 <_read+0x42>
    else
      return EIO;
 8003500:	2305      	movs	r3, #5
 8003502:	e006      	b.n	8003512 <_read+0x42>
  }
  errno = EBADF;
 8003504:	f000 fd90 	bl	8004028 <__errno>
 8003508:	4602      	mov	r2, r0
 800350a:	2309      	movs	r3, #9
 800350c:	6013      	str	r3, [r2, #0]
  return -1;
 800350e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000258 	.word	0x20000258

08003520 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	db08      	blt.n	8003542 <_fstat+0x22>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b02      	cmp	r3, #2
 8003534:	dc05      	bgt.n	8003542 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800353c:	605a      	str	r2, [r3, #4]
    return 0;
 800353e:	2300      	movs	r3, #0
 8003540:	e005      	b.n	800354e <_fstat+0x2e>
  }

  errno = EBADF;
 8003542:	f000 fd71 	bl	8004028 <__errno>
 8003546:	4602      	mov	r2, r0
 8003548:	2309      	movs	r3, #9
 800354a:	6013      	str	r3, [r2, #0]
  return 0;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 800355e:	4a1a      	ldr	r2, [pc, #104]	; (80035c8 <BSP_LCD_GLASS_Init+0x70>)
 8003560:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 8003564:	2200      	movs	r2, #0
 8003566:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8003568:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 800356a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800356e:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 8003572:	220c      	movs	r2, #12
 8003574:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 8003578:	2240      	movs	r2, #64	; 0x40
 800357a:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 800357e:	2200      	movs	r2, #0
 8003580:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8003582:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 8003584:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8003588:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 800358c:	2200      	movs	r2, #0
 800358e:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 8003592:	2240      	movs	r2, #64	; 0x40
 8003594:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 8003598:	2200      	movs	r2, #0
 800359a:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 800359e:	2200      	movs	r2, #0
 80035a0:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 80035a2:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 80035a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 80035b0:	4804      	ldr	r0, [pc, #16]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 80035b2:	f000 f815 	bl	80035e0 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 80035b6:	4803      	ldr	r0, [pc, #12]	; (80035c4 <BSP_LCD_GLASS_Init+0x6c>)
 80035b8:	f7fd fb12 	bl	8000be0 <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 80035bc:	f000 f806 	bl	80035cc <BSP_LCD_GLASS_Clear>
}
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	2000026c 	.word	0x2000026c
 80035c8:	40002400 	.word	0x40002400

080035cc <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle); 
 80035d0:	4802      	ldr	r0, [pc, #8]	; (80035dc <BSP_LCD_GLASS_Clear+0x10>)
 80035d2:	f7fd fbc5 	bl	8000d60 <HAL_LCD_Clear>
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000026c 	.word	0x2000026c

080035e0 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b0c0      	sub	sp, #256	; 0x100
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80035e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 80035f8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80035fc:	2244      	movs	r2, #68	; 0x44
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fd4e 	bl	80040a2 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 8003606:	f107 0320 	add.w	r3, r7, #32
 800360a:	2288      	movs	r2, #136	; 0x88
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fd47 	bl	80040a2 <memset>
  
  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8003614:	4b51      	ldr	r3, [pc, #324]	; (800375c <LCD_MspInit+0x17c>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	4a50      	ldr	r2, [pc, #320]	; (800375c <LCD_MspInit+0x17c>)
 800361a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361e:	6593      	str	r3, [r2, #88]	; 0x58
 8003620:	4b4e      	ldr	r3, [pc, #312]	; (800375c <LCD_MspInit+0x17c>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	69fb      	ldr	r3, [r7, #28]
  
  /*##-2- Configure LSE as RTC clock soucre ###################################*/ 
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 800362c:	2304      	movs	r3, #4
 800362e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 8003632:	2300      	movs	r3, #0
 8003634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8003638:	2301      	movs	r3, #1
 800363a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 800363e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd fca0 	bl	8000f88 <HAL_RCC_OscConfig>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d000      	beq.n	8003650 <LCD_MspInit+0x70>
  { 
    while(1);
 800364e:	e7fe      	b.n	800364e <LCD_MspInit+0x6e>
  }
  
  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003654:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800365a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 800365e:	f107 0320 	add.w	r3, r7, #32
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe fa44 	bl	8001af0 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003668:	4b3c      	ldr	r3, [pc, #240]	; (800375c <LCD_MspInit+0x17c>)
 800366a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366c:	4a3b      	ldr	r2, [pc, #236]	; (800375c <LCD_MspInit+0x17c>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003674:	4b39      	ldr	r3, [pc, #228]	; (800375c <LCD_MspInit+0x17c>)
 8003676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003680:	4b36      	ldr	r3, [pc, #216]	; (800375c <LCD_MspInit+0x17c>)
 8003682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003684:	4a35      	ldr	r2, [pc, #212]	; (800375c <LCD_MspInit+0x17c>)
 8003686:	f043 0302 	orr.w	r3, r3, #2
 800368a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800368c:	4b33      	ldr	r3, [pc, #204]	; (800375c <LCD_MspInit+0x17c>)
 800368e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003698:	4b30      	ldr	r3, [pc, #192]	; (800375c <LCD_MspInit+0x17c>)
 800369a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369c:	4a2f      	ldr	r2, [pc, #188]	; (800375c <LCD_MspInit+0x17c>)
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036a4:	4b2d      	ldr	r3, [pc, #180]	; (800375c <LCD_MspInit+0x17c>)
 80036a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b0:	4b2a      	ldr	r3, [pc, #168]	; (800375c <LCD_MspInit+0x17c>)
 80036b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b4:	4a29      	ldr	r2, [pc, #164]	; (800375c <LCD_MspInit+0x17c>)
 80036b6:	f043 0308 	orr.w	r3, r3, #8
 80036ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <LCD_MspInit+0x17c>)
 80036be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]

  
  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 80036c8:	f248 73c0 	movw	r3, #34752	; 0x87c0
 80036cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 80036d0:	2302      	movs	r3, #2
 80036d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_HIGH;
 80036dc:	2303      	movs	r3, #3
 80036de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 80036e2:	230b      	movs	r3, #11
 80036e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 80036e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80036ec:	4619      	mov	r1, r3
 80036ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f2:	f7fd f8b5 	bl	8000860 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 80036f6:	f24f 2333 	movw	r3, #62003	; 0xf233
 80036fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 80036fe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003702:	4619      	mov	r1, r3
 8003704:	4816      	ldr	r0, [pc, #88]	; (8003760 <LCD_MspInit+0x180>)
 8003706:	f7fd f8ab 	bl	8000860 <HAL_GPIO_Init>
  
  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 800370a:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800370e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8003712:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003716:	4619      	mov	r1, r3
 8003718:	4812      	ldr	r0, [pc, #72]	; (8003764 <LCD_MspInit+0x184>)
 800371a:	f7fd f8a1 	bl	8000860 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 800371e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003722:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8003726:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800372a:	4619      	mov	r1, r3
 800372c:	480e      	ldr	r0, [pc, #56]	; (8003768 <LCD_MspInit+0x188>)
 800372e:	f7fd f897 	bl	8000860 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 8003732:	2002      	movs	r0, #2
 8003734:	f7fc ff8c 	bl	8000650 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <LCD_MspInit+0x17c>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	4a07      	ldr	r2, [pc, #28]	; (800375c <LCD_MspInit+0x17c>)
 800373e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003742:	6593      	str	r3, [r2, #88]	; 0x58
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <LCD_MspInit+0x17c>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
}
 8003750:	bf00      	nop
 8003752:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
 8003760:	48000400 	.word	0x48000400
 8003764:	48000800 	.word	0x48000800
 8003768:	48000c00 	.word	0x48000c00

0800376c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003772:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <HAL_MspInit+0x44>)
 8003774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003776:	4a0e      	ldr	r2, [pc, #56]	; (80037b0 <HAL_MspInit+0x44>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6613      	str	r3, [r2, #96]	; 0x60
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <HAL_MspInit+0x44>)
 8003780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_MspInit+0x44>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <HAL_MspInit+0x44>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003794:	6593      	str	r3, [r2, #88]	; 0x58
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_MspInit+0x44>)
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	f107 0314 	add.w	r3, r7, #20
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a26      	ldr	r2, [pc, #152]	; (800386c <HAL_LCD_MspInit+0xb8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d145      	bne.n	8003862 <HAL_LCD_MspInit+0xae>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 80037d6:	4b26      	ldr	r3, [pc, #152]	; (8003870 <HAL_LCD_MspInit+0xbc>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	4a25      	ldr	r2, [pc, #148]	; (8003870 <HAL_LCD_MspInit+0xbc>)
 80037dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
 80037e2:	4b23      	ldr	r3, [pc, #140]	; (8003870 <HAL_LCD_MspInit+0xbc>)
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <HAL_LCD_MspInit+0xbc>)
 80037f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f2:	4a1f      	ldr	r2, [pc, #124]	; (8003870 <HAL_LCD_MspInit+0xbc>)
 80037f4:	f043 0304 	orr.w	r3, r3, #4
 80037f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037fa:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_LCD_MspInit+0xbc>)
 80037fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003806:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <HAL_LCD_MspInit+0xbc>)
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	4a19      	ldr	r2, [pc, #100]	; (8003870 <HAL_LCD_MspInit+0xbc>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003812:	4b17      	ldr	r3, [pc, #92]	; (8003870 <HAL_LCD_MspInit+0xbc>)
 8003814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
    /**LCD GPIO Configuration
    PC3     ------> LCD_VLCD
    PA8     ------> LCD_COM0
    PA9     ------> LCD_COM1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800381e:	2308      	movs	r3, #8
 8003820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	2302      	movs	r3, #2
 8003824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800382e:	230b      	movs	r3, #11
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003832:	f107 0314 	add.w	r3, r7, #20
 8003836:	4619      	mov	r1, r3
 8003838:	480e      	ldr	r0, [pc, #56]	; (8003874 <HAL_LCD_MspInit+0xc0>)
 800383a:	f7fd f811 	bl	8000860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800383e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003844:	2302      	movs	r3, #2
 8003846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384c:	2300      	movs	r3, #0
 800384e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8003850:	230b      	movs	r3, #11
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003854:	f107 0314 	add.w	r3, r7, #20
 8003858:	4619      	mov	r1, r3
 800385a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800385e:	f7fc ffff 	bl	8000860 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 8003862:	bf00      	nop
 8003864:	3728      	adds	r7, #40	; 0x28
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40002400 	.word	0x40002400
 8003870:	40021000 	.word	0x40021000
 8003874:	48000800 	.word	0x48000800

08003878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08c      	sub	sp, #48	; 0x30
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	f107 031c 	add.w	r3, r7, #28
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a3d      	ldr	r2, [pc, #244]	; (800398c <HAL_UART_MspInit+0x114>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d129      	bne.n	80038ee <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_UART_MspInit+0x118>)
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <HAL_UART_MspInit+0x118>)
 80038a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038a4:	6593      	str	r3, [r2, #88]	; 0x58
 80038a6:	4b3a      	ldr	r3, [pc, #232]	; (8003990 <HAL_UART_MspInit+0x118>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b2:	4b37      	ldr	r3, [pc, #220]	; (8003990 <HAL_UART_MspInit+0x118>)
 80038b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b6:	4a36      	ldr	r2, [pc, #216]	; (8003990 <HAL_UART_MspInit+0x118>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038be:	4b34      	ldr	r3, [pc, #208]	; (8003990 <HAL_UART_MspInit+0x118>)
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038ca:	2303      	movs	r3, #3
 80038cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ce:	2302      	movs	r3, #2
 80038d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d6:	2303      	movs	r3, #3
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038da:	2308      	movs	r3, #8
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038de:	f107 031c 	add.w	r3, r7, #28
 80038e2:	4619      	mov	r1, r3
 80038e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038e8:	f7fc ffba 	bl	8000860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038ec:	e049      	b.n	8003982 <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART2)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a28      	ldr	r2, [pc, #160]	; (8003994 <HAL_UART_MspInit+0x11c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d144      	bne.n	8003982 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038f8:	4b25      	ldr	r3, [pc, #148]	; (8003990 <HAL_UART_MspInit+0x118>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	4a24      	ldr	r2, [pc, #144]	; (8003990 <HAL_UART_MspInit+0x118>)
 80038fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003902:	6593      	str	r3, [r2, #88]	; 0x58
 8003904:	4b22      	ldr	r3, [pc, #136]	; (8003990 <HAL_UART_MspInit+0x118>)
 8003906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003910:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <HAL_UART_MspInit+0x118>)
 8003912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003914:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <HAL_UART_MspInit+0x118>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800391c:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <HAL_UART_MspInit+0x118>)
 800391e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_UART_MspInit+0x118>)
 800392a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392c:	4a18      	ldr	r2, [pc, #96]	; (8003990 <HAL_UART_MspInit+0x118>)
 800392e:	f043 0308 	orr.w	r3, r3, #8
 8003932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003934:	4b16      	ldr	r3, [pc, #88]	; (8003990 <HAL_UART_MspInit+0x118>)
 8003936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003940:	2308      	movs	r3, #8
 8003942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003944:	2302      	movs	r3, #2
 8003946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394c:	2303      	movs	r3, #3
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003950:	2307      	movs	r3, #7
 8003952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003954:	f107 031c 	add.w	r3, r7, #28
 8003958:	4619      	mov	r1, r3
 800395a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800395e:	f7fc ff7f 	bl	8000860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003962:	2320      	movs	r3, #32
 8003964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2302      	movs	r3, #2
 8003968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396e:	2303      	movs	r3, #3
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003972:	2307      	movs	r3, #7
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003976:	f107 031c 	add.w	r3, r7, #28
 800397a:	4619      	mov	r1, r3
 800397c:	4806      	ldr	r0, [pc, #24]	; (8003998 <HAL_UART_MspInit+0x120>)
 800397e:	f7fc ff6f 	bl	8000860 <HAL_GPIO_Init>
}
 8003982:	bf00      	nop
 8003984:	3730      	adds	r7, #48	; 0x30
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40004c00 	.word	0x40004c00
 8003990:	40021000 	.word	0x40021000
 8003994:	40004400 	.word	0x40004400
 8003998:	48000c00 	.word	0x48000c00

0800399c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039aa:	b480      	push	{r7}
 80039ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ae:	e7fe      	b.n	80039ae <HardFault_Handler+0x4>

080039b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039b4:	e7fe      	b.n	80039b4 <MemManage_Handler+0x4>

080039b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039b6:	b480      	push	{r7}
 80039b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039ba:	e7fe      	b.n	80039ba <BusFault_Handler+0x4>

080039bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039c0:	e7fe      	b.n	80039c0 <UsageFault_Handler+0x4>

080039c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039c2:	b480      	push	{r7}
 80039c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039f0:	f7fc fe10 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <_sbrk+0x50>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <_sbrk+0x16>
		heap_end = &end;
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <_sbrk+0x50>)
 8003a0a:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <_sbrk+0x54>)
 8003a0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <_sbrk+0x50>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <_sbrk+0x50>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	466a      	mov	r2, sp
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d907      	bls.n	8003a32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003a22:	f000 fb01 	bl	8004028 <__errno>
 8003a26:	4602      	mov	r2, r0
 8003a28:	230c      	movs	r3, #12
 8003a2a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a30:	e006      	b.n	8003a40 <_sbrk+0x48>
	}

	heap_end += incr;
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <_sbrk+0x50>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	4a03      	ldr	r2, [pc, #12]	; (8003a48 <_sbrk+0x50>)
 8003a3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	2000008c 	.word	0x2000008c
 8003a4c:	20000a80 	.word	0x20000a80

08003a50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a54:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <SystemInit+0x64>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	4a16      	ldr	r2, [pc, #88]	; (8003ab4 <SystemInit+0x64>)
 8003a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <SystemInit+0x68>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <SystemInit+0x68>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <SystemInit+0x68>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <SystemInit+0x68>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <SystemInit+0x68>)
 8003a7c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003a80:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003a84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <SystemInit+0x68>)
 8003a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a8c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <SystemInit+0x68>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <SystemInit+0x68>)
 8003a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <SystemInit+0x68>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003aa0:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <SystemInit+0x64>)
 8003aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003aa6:	609a      	str	r2, [r3, #8]
#endif
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000ed00 	.word	0xe000ed00
 8003ab8:	40021000 	.word	0x40021000

08003abc <clear_buf>:
#include "utility.h"

// clean out a buffer with end of string chars
void clear_buf(uint8_t* buf, int buf_size) {
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
	int i;
	for (i = 0; i < buf_size; ++i) {
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	e007      	b.n	8003adc <clear_buf+0x20>

		buf[i] = '\0';
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < buf_size; ++i) {
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	dbf3      	blt.n	8003acc <clear_buf+0x10>
	}
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <count_digits>:

// count the number of digits in a number
int count_digits(int n) {
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	int digits = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
	while (n != 0) {
 8003afc:	e00a      	b.n	8003b14 <count_digits+0x24>
		n /= 10;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <count_digits+0x38>)
 8003b02:	fb82 1203 	smull	r1, r2, r2, r3
 8003b06:	1092      	asrs	r2, r2, #2
 8003b08:	17db      	asrs	r3, r3, #31
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	607b      	str	r3, [r7, #4]
		++digits;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3301      	adds	r3, #1
 8003b12:	60fb      	str	r3, [r7, #12]
	while (n != 0) {
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f1      	bne.n	8003afe <count_digits+0xe>
	}
	return digits;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	66666667 	.word	0x66666667

08003b2c <str_to_uint>:
	}
	printf("\r\n");
}

// converts a string into a uint8_t array
void str_to_uint(char* str, uint8_t* arr, int length) {
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < length; ++i) {
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	e00a      	b.n	8003b54 <str_to_uint+0x28>
		arr[i] = (uint8_t)str[i];
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	441a      	add	r2, r3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	440b      	add	r3, r1
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < length; ++i) {
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	3301      	adds	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	dbf0      	blt.n	8003b3e <str_to_uint+0x12>
	}
}
 8003b5c:	bf00      	nop
 8003b5e:	371c      	adds	r7, #28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <esp8266_init>:
// set up the module and connect to internet
// currently uses blocking/polling so is dumb but is during setup so not the end of the world
// pass huart for esp, connection=0 for heroku, 1 for ptsv2
// TODO: set up to take in wifi name and password as params
// TODO: add set up verification checks
void esp8266_init(UART_HandleTypeDef* huart, int connection, int wifi) {
 8003b68:	b5b0      	push	{r4, r5, r7, lr}
 8003b6a:	b09e      	sub	sp, #120	; 0x78
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
	esp_huart = *huart;
 8003b74:	4a7d      	ldr	r2, [pc, #500]	; (8003d6c <esp8266_init+0x204>)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f000 fa84 	bl	800408c <memcpy>
	__HAL_UART_ENABLE_IT(&esp_huart, UART_IT_IDLE); // enable IDLE line detection as message length is variable
 8003b84:	4b79      	ldr	r3, [pc, #484]	; (8003d6c <esp8266_init+0x204>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b78      	ldr	r3, [pc, #480]	; (8003d6c <esp8266_init+0x204>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0210 	orr.w	r2, r2, #16
 8003b92:	601a      	str	r2, [r3, #0]

	// reset
	printf("reset...\r\n");
 8003b94:	4876      	ldr	r0, [pc, #472]	; (8003d70 <esp8266_init+0x208>)
 8003b96:	f000 fba9 	bl	80042ec <puts>
	uint8_t reset[] = "AT+RST\r\n";
 8003b9a:	4a76      	ldr	r2, [pc, #472]	; (8003d74 <esp8266_init+0x20c>)
 8003b9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ba0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ba2:	c303      	stmia	r3!, {r0, r1}
 8003ba4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&esp_huart, reset, sizeof(reset)/sizeof(uint8_t), 100);
 8003ba6:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003baa:	2364      	movs	r3, #100	; 0x64
 8003bac:	2209      	movs	r2, #9
 8003bae:	486f      	ldr	r0, [pc, #444]	; (8003d6c <esp8266_init+0x204>)
 8003bb0:	f7fe fc9c 	bl	80024ec <HAL_UART_Transmit>
	HAL_UART_Receive(&esp_huart, esp_recv_buf, 2000, 5000);
 8003bb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bb8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003bbc:	496e      	ldr	r1, [pc, #440]	; (8003d78 <esp8266_init+0x210>)
 8003bbe:	486b      	ldr	r0, [pc, #428]	; (8003d6c <esp8266_init+0x204>)
 8003bc0:	f7fe fd27 	bl	8002612 <HAL_UART_Receive>
	printf("%s\r\n", esp_recv_buf);
 8003bc4:	496c      	ldr	r1, [pc, #432]	; (8003d78 <esp8266_init+0x210>)
 8003bc6:	486d      	ldr	r0, [pc, #436]	; (8003d7c <esp8266_init+0x214>)
 8003bc8:	f000 fb1c 	bl	8004204 <iprintf>
	clear_buf(esp_recv_buf, 2000);
 8003bcc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003bd0:	4869      	ldr	r0, [pc, #420]	; (8003d78 <esp8266_init+0x210>)
 8003bd2:	f7ff ff73 	bl	8003abc <clear_buf>

	// set mode to station/client
	printf("set mode...\r\n");
 8003bd6:	486a      	ldr	r0, [pc, #424]	; (8003d80 <esp8266_init+0x218>)
 8003bd8:	f000 fb88 	bl	80042ec <puts>
	uint8_t mode[] = "AT+CWMODE=1\r\n";
 8003bdc:	4b69      	ldr	r3, [pc, #420]	; (8003d84 <esp8266_init+0x21c>)
 8003bde:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8003be2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003be4:	c407      	stmia	r4!, {r0, r1, r2}
 8003be6:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&esp_huart, mode, sizeof(mode)/sizeof(uint8_t), 100);
 8003be8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003bec:	2364      	movs	r3, #100	; 0x64
 8003bee:	220e      	movs	r2, #14
 8003bf0:	485e      	ldr	r0, [pc, #376]	; (8003d6c <esp8266_init+0x204>)
 8003bf2:	f7fe fc7b 	bl	80024ec <HAL_UART_Transmit>
	HAL_UART_Receive(&esp_huart, esp_recv_buf, 2000, 500);
 8003bf6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003bfa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003bfe:	495e      	ldr	r1, [pc, #376]	; (8003d78 <esp8266_init+0x210>)
 8003c00:	485a      	ldr	r0, [pc, #360]	; (8003d6c <esp8266_init+0x204>)
 8003c02:	f7fe fd06 	bl	8002612 <HAL_UART_Receive>
	printf("%s\r\n", esp_recv_buf);
 8003c06:	495c      	ldr	r1, [pc, #368]	; (8003d78 <esp8266_init+0x210>)
 8003c08:	485c      	ldr	r0, [pc, #368]	; (8003d7c <esp8266_init+0x214>)
 8003c0a:	f000 fafb 	bl	8004204 <iprintf>
	clear_buf(esp_recv_buf, 2000);
 8003c0e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003c12:	4859      	ldr	r0, [pc, #356]	; (8003d78 <esp8266_init+0x210>)
 8003c14:	f7ff ff52 	bl	8003abc <clear_buf>

	// set connections to 1 at a time
	printf("set connections...\r\n");
 8003c18:	485b      	ldr	r0, [pc, #364]	; (8003d88 <esp8266_init+0x220>)
 8003c1a:	f000 fb67 	bl	80042ec <puts>
	uint8_t numcons[] = "AT+CIPMUX=0\r\n";
 8003c1e:	4b5b      	ldr	r3, [pc, #364]	; (8003d8c <esp8266_init+0x224>)
 8003c20:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8003c24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c26:	c407      	stmia	r4!, {r0, r1, r2}
 8003c28:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&esp_huart, numcons, sizeof(numcons)/sizeof(uint8_t), 100);
 8003c2a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003c2e:	2364      	movs	r3, #100	; 0x64
 8003c30:	220e      	movs	r2, #14
 8003c32:	484e      	ldr	r0, [pc, #312]	; (8003d6c <esp8266_init+0x204>)
 8003c34:	f7fe fc5a 	bl	80024ec <HAL_UART_Transmit>
	HAL_UART_Receive(&esp_huart, esp_recv_buf, 2000, 500);
 8003c38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c3c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003c40:	494d      	ldr	r1, [pc, #308]	; (8003d78 <esp8266_init+0x210>)
 8003c42:	484a      	ldr	r0, [pc, #296]	; (8003d6c <esp8266_init+0x204>)
 8003c44:	f7fe fce5 	bl	8002612 <HAL_UART_Receive>
	printf("%s\r\n", esp_recv_buf);
 8003c48:	494b      	ldr	r1, [pc, #300]	; (8003d78 <esp8266_init+0x210>)
 8003c4a:	484c      	ldr	r0, [pc, #304]	; (8003d7c <esp8266_init+0x214>)
 8003c4c:	f000 fada 	bl	8004204 <iprintf>
	clear_buf(esp_recv_buf, 2000);
 8003c50:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003c54:	4848      	ldr	r0, [pc, #288]	; (8003d78 <esp8266_init+0x210>)
 8003c56:	f7ff ff31 	bl	8003abc <clear_buf>

	// connect to given wifi
	if (wifi == 1) {
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d127      	bne.n	8003cb0 <esp8266_init+0x148>
	  printf("connect to wifi...\r\n");
 8003c60:	484b      	ldr	r0, [pc, #300]	; (8003d90 <esp8266_init+0x228>)
 8003c62:	f000 fb43 	bl	80042ec <puts>
	  uint8_t connect[] = "AT+CWJAP=\"TEST-HOTSPOT\",\"65c9O21=\"\r\n";
 8003c66:	4b4b      	ldr	r3, [pc, #300]	; (8003d94 <esp8266_init+0x22c>)
 8003c68:	f107 0414 	add.w	r4, r7, #20
 8003c6c:	461d      	mov	r5, r3
 8003c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c7a:	6020      	str	r0, [r4, #0]
 8003c7c:	3404      	adds	r4, #4
 8003c7e:	7021      	strb	r1, [r4, #0]
	  HAL_UART_Transmit(&esp_huart, connect, sizeof(connect)/sizeof(uint8_t), 100);
 8003c80:	f107 0114 	add.w	r1, r7, #20
 8003c84:	2364      	movs	r3, #100	; 0x64
 8003c86:	2225      	movs	r2, #37	; 0x25
 8003c88:	4838      	ldr	r0, [pc, #224]	; (8003d6c <esp8266_init+0x204>)
 8003c8a:	f7fe fc2f 	bl	80024ec <HAL_UART_Transmit>
	  HAL_UART_Receive(&esp_huart, esp_recv_buf, 2000, 10000);
 8003c8e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003c92:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003c96:	4938      	ldr	r1, [pc, #224]	; (8003d78 <esp8266_init+0x210>)
 8003c98:	4834      	ldr	r0, [pc, #208]	; (8003d6c <esp8266_init+0x204>)
 8003c9a:	f7fe fcba 	bl	8002612 <HAL_UART_Receive>
	  printf("%s\r\n", esp_recv_buf);
 8003c9e:	4936      	ldr	r1, [pc, #216]	; (8003d78 <esp8266_init+0x210>)
 8003ca0:	4836      	ldr	r0, [pc, #216]	; (8003d7c <esp8266_init+0x214>)
 8003ca2:	f000 faaf 	bl	8004204 <iprintf>
	  clear_buf(esp_recv_buf, 2000);
 8003ca6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003caa:	4833      	ldr	r0, [pc, #204]	; (8003d78 <esp8266_init+0x210>)
 8003cac:	f7ff ff06 	bl	8003abc <clear_buf>
	}

	// start tcp connection to server
	if (connection == 0) {
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d124      	bne.n	8003d00 <esp8266_init+0x198>
		printf("connect to VQ web server...\r\n");
 8003cb6:	4838      	ldr	r0, [pc, #224]	; (8003d98 <esp8266_init+0x230>)
 8003cb8:	f000 fb18 	bl	80042ec <puts>
		uint8_t start[] = "AT+CIPSTART=\"TCP\",\"virtualqueue477.herokuapp.com\",80\r\n";
 8003cbc:	4b37      	ldr	r3, [pc, #220]	; (8003d9c <esp8266_init+0x234>)
 8003cbe:	f107 0414 	add.w	r4, r7, #20
 8003cc2:	461d      	mov	r5, r3
 8003cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003cd4:	6020      	str	r0, [r4, #0]
 8003cd6:	3404      	adds	r4, #4
 8003cd8:	8021      	strh	r1, [r4, #0]
 8003cda:	3402      	adds	r4, #2
 8003cdc:	0c0b      	lsrs	r3, r1, #16
 8003cde:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&esp_huart, start, sizeof(start)/sizeof(uint8_t), 100);
 8003ce0:	f107 0114 	add.w	r1, r7, #20
 8003ce4:	2364      	movs	r3, #100	; 0x64
 8003ce6:	2237      	movs	r2, #55	; 0x37
 8003ce8:	4820      	ldr	r0, [pc, #128]	; (8003d6c <esp8266_init+0x204>)
 8003cea:	f7fe fbff 	bl	80024ec <HAL_UART_Transmit>
		HAL_UART_Receive(&esp_huart, esp_recv_buf, 2000, 5000);
 8003cee:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cf2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003cf6:	4920      	ldr	r1, [pc, #128]	; (8003d78 <esp8266_init+0x210>)
 8003cf8:	481c      	ldr	r0, [pc, #112]	; (8003d6c <esp8266_init+0x204>)
 8003cfa:	f7fe fc8a 	bl	8002612 <HAL_UART_Receive>
 8003cfe:	e024      	b.n	8003d4a <esp8266_init+0x1e2>
	} else if (connection == 1) {
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d121      	bne.n	8003d4a <esp8266_init+0x1e2>
		printf("connect to ptsv2...\r\n");
 8003d06:	4826      	ldr	r0, [pc, #152]	; (8003da0 <esp8266_init+0x238>)
 8003d08:	f000 faf0 	bl	80042ec <puts>
		uint8_t start[] = "AT+CIPSTART=\"TCP\",\"www.ptsv2.com\",80\r\n";
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <esp8266_init+0x23c>)
 8003d0e:	f107 0414 	add.w	r4, r7, #20
 8003d12:	461d      	mov	r5, r3
 8003d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003d20:	6020      	str	r0, [r4, #0]
 8003d22:	3404      	adds	r4, #4
 8003d24:	8021      	strh	r1, [r4, #0]
 8003d26:	3402      	adds	r4, #2
 8003d28:	0c0b      	lsrs	r3, r1, #16
 8003d2a:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&esp_huart, start, sizeof(start)/sizeof(uint8_t), 100);
 8003d2c:	f107 0114 	add.w	r1, r7, #20
 8003d30:	2364      	movs	r3, #100	; 0x64
 8003d32:	2227      	movs	r2, #39	; 0x27
 8003d34:	480d      	ldr	r0, [pc, #52]	; (8003d6c <esp8266_init+0x204>)
 8003d36:	f7fe fbd9 	bl	80024ec <HAL_UART_Transmit>
		HAL_UART_Receive(&esp_huart, esp_recv_buf, 2000, 5000);
 8003d3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d3e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003d42:	490d      	ldr	r1, [pc, #52]	; (8003d78 <esp8266_init+0x210>)
 8003d44:	4809      	ldr	r0, [pc, #36]	; (8003d6c <esp8266_init+0x204>)
 8003d46:	f7fe fc64 	bl	8002612 <HAL_UART_Receive>
	}
	printf("%s\r\n", esp_recv_buf);
 8003d4a:	490b      	ldr	r1, [pc, #44]	; (8003d78 <esp8266_init+0x210>)
 8003d4c:	480b      	ldr	r0, [pc, #44]	; (8003d7c <esp8266_init+0x214>)
 8003d4e:	f000 fa59 	bl	8004204 <iprintf>
	clear_buf(esp_recv_buf, 2000);
 8003d52:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003d56:	4808      	ldr	r0, [pc, #32]	; (8003d78 <esp8266_init+0x210>)
 8003d58:	f7ff feb0 	bl	8003abc <clear_buf>
	printf("ESP8266 INIT COMPLETE\r\n");
 8003d5c:	4812      	ldr	r0, [pc, #72]	; (8003da8 <esp8266_init+0x240>)
 8003d5e:	f000 fac5 	bl	80042ec <puts>
}
 8003d62:	bf00      	nop
 8003d64:	3778      	adds	r7, #120	; 0x78
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bdb0      	pop	{r4, r5, r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	2000009c 	.word	0x2000009c
 8003d70:	0800548c 	.word	0x0800548c
 8003d74:	08005528 	.word	0x08005528
 8003d78:	200002a8 	.word	0x200002a8
 8003d7c:	08005498 	.word	0x08005498
 8003d80:	080054a0 	.word	0x080054a0
 8003d84:	08005534 	.word	0x08005534
 8003d88:	080054b0 	.word	0x080054b0
 8003d8c:	08005544 	.word	0x08005544
 8003d90:	080054c4 	.word	0x080054c4
 8003d94:	08005554 	.word	0x08005554
 8003d98:	080054d8 	.word	0x080054d8
 8003d9c:	0800557c 	.word	0x0800557c
 8003da0:	080054f8 	.word	0x080054f8
 8003da4:	080055b4 	.word	0x080055b4
 8003da8:	08005510 	.word	0x08005510

08003dac <send_get>:

// sends a get request to the given url
void send_get(uint8_t* url, int url_len) {
 8003dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db0:	b08c      	sub	sp, #48	; 0x30
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
 8003db8:	466b      	mov	r3, sp
 8003dba:	4698      	mov	r8, r3
	int digits = count_digits(url_len + GET_LEN);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	3336      	adds	r3, #54	; 0x36
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fe95 	bl	8003af0 <count_digits>
 8003dc6:	6238      	str	r0, [r7, #32]
	printf("DIGITS=%d\r\n", digits);
 8003dc8:	6a39      	ldr	r1, [r7, #32]
 8003dca:	4879      	ldr	r0, [pc, #484]	; (8003fb0 <send_get+0x204>)
 8003dcc:	f000 fa1a 	bl	8004204 <iprintf>

	uint8_t send_cmd[digits + SEND_CMD_LEN];
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	f103 060d 	add.w	r6, r3, #13
 8003dd6:	1e73      	subs	r3, r6, #1
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dda:	4633      	mov	r3, r6
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	f04f 0400 	mov.w	r4, #0
 8003dea:	00d4      	lsls	r4, r2, #3
 8003dec:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003df0:	00cb      	lsls	r3, r1, #3
 8003df2:	4633      	mov	r3, r6
 8003df4:	4619      	mov	r1, r3
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	f04f 0400 	mov.w	r4, #0
 8003e02:	00d4      	lsls	r4, r2, #3
 8003e04:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003e08:	00cb      	lsls	r3, r1, #3
 8003e0a:	4633      	mov	r3, r6
 8003e0c:	3307      	adds	r3, #7
 8003e0e:	08db      	lsrs	r3, r3, #3
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	ebad 0d03 	sub.w	sp, sp, r3
 8003e16:	466b      	mov	r3, sp
 8003e18:	3300      	adds	r3, #0
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
	char send_cmd_str[digits + SEND_CMD_LEN];
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	f103 000d 	add.w	r0, r3, #13
 8003e22:	1e43      	subs	r3, r0, #1
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e26:	4603      	mov	r3, r0
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	f04f 0400 	mov.w	r4, #0
 8003e36:	00d4      	lsls	r4, r2, #3
 8003e38:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003e3c:	00cb      	lsls	r3, r1, #3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4619      	mov	r1, r3
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	f04f 0400 	mov.w	r4, #0
 8003e4e:	00d4      	lsls	r4, r2, #3
 8003e50:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003e54:	00cb      	lsls	r3, r1, #3
 8003e56:	4603      	mov	r3, r0
 8003e58:	3307      	adds	r3, #7
 8003e5a:	08db      	lsrs	r3, r3, #3
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	ebad 0d03 	sub.w	sp, sp, r3
 8003e62:	466b      	mov	r3, sp
 8003e64:	3300      	adds	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]
	sprintf(send_cmd_str, "AT+CIPSEND=%d\r\n", url_len + GET_LEN);
 8003e68:	69f8      	ldr	r0, [r7, #28]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	3336      	adds	r3, #54	; 0x36
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4950      	ldr	r1, [pc, #320]	; (8003fb4 <send_get+0x208>)
 8003e72:	f000 fb01 	bl	8004478 <siprintf>
	str_to_uint(send_cmd_str, send_cmd, digits + SEND_CMD_LEN);
 8003e76:	69f8      	ldr	r0, [r7, #28]
 8003e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	330d      	adds	r3, #13
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f7ff fe54 	bl	8003b2c <str_to_uint>

	uint8_t data[url_len + GET_LEN];
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8003e8a:	1e6b      	subs	r3, r5, #1
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	462b      	mov	r3, r5
 8003e90:	4619      	mov	r1, r3
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	f04f 0400 	mov.w	r4, #0
 8003e9e:	00d4      	lsls	r4, r2, #3
 8003ea0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003ea4:	00cb      	lsls	r3, r1, #3
 8003ea6:	462b      	mov	r3, r5
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	f04f 0400 	mov.w	r4, #0
 8003eb6:	00d4      	lsls	r4, r2, #3
 8003eb8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003ebc:	00cb      	lsls	r3, r1, #3
 8003ebe:	462b      	mov	r3, r5
 8003ec0:	3307      	adds	r3, #7
 8003ec2:	08db      	lsrs	r3, r3, #3
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	ebad 0d03 	sub.w	sp, sp, r3
 8003eca:	466b      	mov	r3, sp
 8003ecc:	3300      	adds	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
	char data_str[url_len + GET_LEN];
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	f103 0036 	add.w	r0, r3, #54	; 0x36
 8003ed6:	1e43      	subs	r3, r0, #1
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	4603      	mov	r3, r0
 8003edc:	4619      	mov	r1, r3
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	f04f 0400 	mov.w	r4, #0
 8003eea:	00d4      	lsls	r4, r2, #3
 8003eec:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003ef0:	00cb      	lsls	r3, r1, #3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	f04f 0400 	mov.w	r4, #0
 8003f02:	00d4      	lsls	r4, r2, #3
 8003f04:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003f08:	00cb      	lsls	r3, r1, #3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	3307      	adds	r3, #7
 8003f0e:	08db      	lsrs	r3, r3, #3
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	ebad 0d03 	sub.w	sp, sp, r3
 8003f16:	466b      	mov	r3, sp
 8003f18:	3300      	adds	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
	sprintf(data_str, "GET %s HTTP/1.1\r\nHost: virtualqueue477.herokuapp.com\r\n\r\n", url);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	4925      	ldr	r1, [pc, #148]	; (8003fb8 <send_get+0x20c>)
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 faa8 	bl	8004478 <siprintf>
	str_to_uint(data_str, data, url_len + GET_LEN);
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	6979      	ldr	r1, [r7, #20]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	3336      	adds	r3, #54	; 0x36
 8003f30:	461a      	mov	r2, r3
 8003f32:	f7ff fdfb 	bl	8003b2c <str_to_uint>

	printf("asking to send...\r\n");
 8003f36:	4821      	ldr	r0, [pc, #132]	; (8003fbc <send_get+0x210>)
 8003f38:	f000 f9d8 	bl	80042ec <puts>
	HAL_UART_Transmit(&esp_huart, send_cmd, sizeof(send_cmd)/sizeof(uint8_t), 100);
 8003f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f3e:	b2b2      	uxth	r2, r6
 8003f40:	2364      	movs	r3, #100	; 0x64
 8003f42:	481f      	ldr	r0, [pc, #124]	; (8003fc0 <send_get+0x214>)
 8003f44:	f7fe fad2 	bl	80024ec <HAL_UART_Transmit>
	HAL_UART_Receive(&esp_huart, esp_recv_buf, 2000, 5000);
 8003f48:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003f50:	491c      	ldr	r1, [pc, #112]	; (8003fc4 <send_get+0x218>)
 8003f52:	481b      	ldr	r0, [pc, #108]	; (8003fc0 <send_get+0x214>)
 8003f54:	f7fe fb5d 	bl	8002612 <HAL_UART_Receive>
    printf("%s\r\n", esp_recv_buf);
 8003f58:	491a      	ldr	r1, [pc, #104]	; (8003fc4 <send_get+0x218>)
 8003f5a:	481b      	ldr	r0, [pc, #108]	; (8003fc8 <send_get+0x21c>)
 8003f5c:	f000 f952 	bl	8004204 <iprintf>
    clear_buf(esp_recv_buf, 2000);
 8003f60:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003f64:	4817      	ldr	r0, [pc, #92]	; (8003fc4 <send_get+0x218>)
 8003f66:	f7ff fda9 	bl	8003abc <clear_buf>
    printf("sending...\r\n");
 8003f6a:	4818      	ldr	r0, [pc, #96]	; (8003fcc <send_get+0x220>)
 8003f6c:	f000 f9be 	bl	80042ec <puts>
    HAL_UART_Transmit(&esp_huart, data, sizeof(data)/sizeof(uint8_t), 100);
 8003f70:	6979      	ldr	r1, [r7, #20]
 8003f72:	b2aa      	uxth	r2, r5
 8003f74:	2364      	movs	r3, #100	; 0x64
 8003f76:	4812      	ldr	r0, [pc, #72]	; (8003fc0 <send_get+0x214>)
 8003f78:	f7fe fab8 	bl	80024ec <HAL_UART_Transmit>
    HAL_UART_Receive(&esp_huart, esp_recv_buf, 2000, 5000);
 8003f7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003f84:	490f      	ldr	r1, [pc, #60]	; (8003fc4 <send_get+0x218>)
 8003f86:	480e      	ldr	r0, [pc, #56]	; (8003fc0 <send_get+0x214>)
 8003f88:	f7fe fb43 	bl	8002612 <HAL_UART_Receive>
    printf("%s\r\n", esp_recv_buf);
 8003f8c:	490d      	ldr	r1, [pc, #52]	; (8003fc4 <send_get+0x218>)
 8003f8e:	480e      	ldr	r0, [pc, #56]	; (8003fc8 <send_get+0x21c>)
 8003f90:	f000 f938 	bl	8004204 <iprintf>
    clear_buf(esp_recv_buf, 2000);
 8003f94:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003f98:	480a      	ldr	r0, [pc, #40]	; (8003fc4 <send_get+0x218>)
 8003f9a:	f7ff fd8f 	bl	8003abc <clear_buf>
    printf("GET sent\r\n");
 8003f9e:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <send_get+0x224>)
 8003fa0:	f000 f9a4 	bl	80042ec <puts>
 8003fa4:	46c5      	mov	sp, r8
}
 8003fa6:	bf00      	nop
 8003fa8:	3730      	adds	r7, #48	; 0x30
 8003faa:	46bd      	mov	sp, r7
 8003fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb0:	080055dc 	.word	0x080055dc
 8003fb4:	080055e8 	.word	0x080055e8
 8003fb8:	080055f8 	.word	0x080055f8
 8003fbc:	08005634 	.word	0x08005634
 8003fc0:	2000009c 	.word	0x2000009c
 8003fc4:	200002a8 	.word	0x200002a8
 8003fc8:	08005498 	.word	0x08005498
 8003fcc:	08005648 	.word	0x08005648
 8003fd0:	08005654 	.word	0x08005654

08003fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800400c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003fda:	e003      	b.n	8003fe4 <LoopCopyDataInit>

08003fdc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003fde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003fe0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003fe2:	3104      	adds	r1, #4

08003fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003fe4:	480b      	ldr	r0, [pc, #44]	; (8004014 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003fe8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003fea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003fec:	d3f6      	bcc.n	8003fdc <CopyDataInit>
	ldr	r2, =_sbss
 8003fee:	4a0b      	ldr	r2, [pc, #44]	; (800401c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003ff0:	e002      	b.n	8003ff8 <LoopFillZerobss>

08003ff2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ff2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ff4:	f842 3b04 	str.w	r3, [r2], #4

08003ff8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003ff8:	4b09      	ldr	r3, [pc, #36]	; (8004020 <LoopForever+0x16>)
	cmp	r2, r3
 8003ffa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ffc:	d3f9      	bcc.n	8003ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ffe:	f7ff fd27 	bl	8003a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004002:	f000 f817 	bl	8004034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004006:	f7ff f849 	bl	800309c <main>

0800400a <LoopForever>:

LoopForever:
    b LoopForever
 800400a:	e7fe      	b.n	800400a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800400c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004010:	08005750 	.word	0x08005750
	ldr	r0, =_sdata
 8004014:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004018:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800401c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8004020:	20000a80 	.word	0x20000a80

08004024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004024:	e7fe      	b.n	8004024 <ADC1_2_IRQHandler>
	...

08004028 <__errno>:
 8004028:	4b01      	ldr	r3, [pc, #4]	; (8004030 <__errno+0x8>)
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	2000000c 	.word	0x2000000c

08004034 <__libc_init_array>:
 8004034:	b570      	push	{r4, r5, r6, lr}
 8004036:	4e0d      	ldr	r6, [pc, #52]	; (800406c <__libc_init_array+0x38>)
 8004038:	4c0d      	ldr	r4, [pc, #52]	; (8004070 <__libc_init_array+0x3c>)
 800403a:	1ba4      	subs	r4, r4, r6
 800403c:	10a4      	asrs	r4, r4, #2
 800403e:	2500      	movs	r5, #0
 8004040:	42a5      	cmp	r5, r4
 8004042:	d109      	bne.n	8004058 <__libc_init_array+0x24>
 8004044:	4e0b      	ldr	r6, [pc, #44]	; (8004074 <__libc_init_array+0x40>)
 8004046:	4c0c      	ldr	r4, [pc, #48]	; (8004078 <__libc_init_array+0x44>)
 8004048:	f001 f9e4 	bl	8005414 <_init>
 800404c:	1ba4      	subs	r4, r4, r6
 800404e:	10a4      	asrs	r4, r4, #2
 8004050:	2500      	movs	r5, #0
 8004052:	42a5      	cmp	r5, r4
 8004054:	d105      	bne.n	8004062 <__libc_init_array+0x2e>
 8004056:	bd70      	pop	{r4, r5, r6, pc}
 8004058:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800405c:	4798      	blx	r3
 800405e:	3501      	adds	r5, #1
 8004060:	e7ee      	b.n	8004040 <__libc_init_array+0xc>
 8004062:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004066:	4798      	blx	r3
 8004068:	3501      	adds	r5, #1
 800406a:	e7f2      	b.n	8004052 <__libc_init_array+0x1e>
 800406c:	08005748 	.word	0x08005748
 8004070:	08005748 	.word	0x08005748
 8004074:	08005748 	.word	0x08005748
 8004078:	0800574c 	.word	0x0800574c

0800407c <malloc>:
 800407c:	4b02      	ldr	r3, [pc, #8]	; (8004088 <malloc+0xc>)
 800407e:	4601      	mov	r1, r0
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	f000 b865 	b.w	8004150 <_malloc_r>
 8004086:	bf00      	nop
 8004088:	2000000c 	.word	0x2000000c

0800408c <memcpy>:
 800408c:	b510      	push	{r4, lr}
 800408e:	1e43      	subs	r3, r0, #1
 8004090:	440a      	add	r2, r1
 8004092:	4291      	cmp	r1, r2
 8004094:	d100      	bne.n	8004098 <memcpy+0xc>
 8004096:	bd10      	pop	{r4, pc}
 8004098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800409c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040a0:	e7f7      	b.n	8004092 <memcpy+0x6>

080040a2 <memset>:
 80040a2:	4402      	add	r2, r0
 80040a4:	4603      	mov	r3, r0
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d100      	bne.n	80040ac <memset+0xa>
 80040aa:	4770      	bx	lr
 80040ac:	f803 1b01 	strb.w	r1, [r3], #1
 80040b0:	e7f9      	b.n	80040a6 <memset+0x4>
	...

080040b4 <_free_r>:
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4605      	mov	r5, r0
 80040b8:	2900      	cmp	r1, #0
 80040ba:	d045      	beq.n	8004148 <_free_r+0x94>
 80040bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c0:	1f0c      	subs	r4, r1, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bfb8      	it	lt
 80040c6:	18e4      	addlt	r4, r4, r3
 80040c8:	f000 fc94 	bl	80049f4 <__malloc_lock>
 80040cc:	4a1f      	ldr	r2, [pc, #124]	; (800414c <_free_r+0x98>)
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	4610      	mov	r0, r2
 80040d2:	b933      	cbnz	r3, 80040e2 <_free_r+0x2e>
 80040d4:	6063      	str	r3, [r4, #4]
 80040d6:	6014      	str	r4, [r2, #0]
 80040d8:	4628      	mov	r0, r5
 80040da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040de:	f000 bc8a 	b.w	80049f6 <__malloc_unlock>
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	d90c      	bls.n	8004100 <_free_r+0x4c>
 80040e6:	6821      	ldr	r1, [r4, #0]
 80040e8:	1862      	adds	r2, r4, r1
 80040ea:	4293      	cmp	r3, r2
 80040ec:	bf04      	itt	eq
 80040ee:	681a      	ldreq	r2, [r3, #0]
 80040f0:	685b      	ldreq	r3, [r3, #4]
 80040f2:	6063      	str	r3, [r4, #4]
 80040f4:	bf04      	itt	eq
 80040f6:	1852      	addeq	r2, r2, r1
 80040f8:	6022      	streq	r2, [r4, #0]
 80040fa:	6004      	str	r4, [r0, #0]
 80040fc:	e7ec      	b.n	80040d8 <_free_r+0x24>
 80040fe:	4613      	mov	r3, r2
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	b10a      	cbz	r2, 8004108 <_free_r+0x54>
 8004104:	42a2      	cmp	r2, r4
 8004106:	d9fa      	bls.n	80040fe <_free_r+0x4a>
 8004108:	6819      	ldr	r1, [r3, #0]
 800410a:	1858      	adds	r0, r3, r1
 800410c:	42a0      	cmp	r0, r4
 800410e:	d10b      	bne.n	8004128 <_free_r+0x74>
 8004110:	6820      	ldr	r0, [r4, #0]
 8004112:	4401      	add	r1, r0
 8004114:	1858      	adds	r0, r3, r1
 8004116:	4282      	cmp	r2, r0
 8004118:	6019      	str	r1, [r3, #0]
 800411a:	d1dd      	bne.n	80040d8 <_free_r+0x24>
 800411c:	6810      	ldr	r0, [r2, #0]
 800411e:	6852      	ldr	r2, [r2, #4]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	4401      	add	r1, r0
 8004124:	6019      	str	r1, [r3, #0]
 8004126:	e7d7      	b.n	80040d8 <_free_r+0x24>
 8004128:	d902      	bls.n	8004130 <_free_r+0x7c>
 800412a:	230c      	movs	r3, #12
 800412c:	602b      	str	r3, [r5, #0]
 800412e:	e7d3      	b.n	80040d8 <_free_r+0x24>
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	1821      	adds	r1, r4, r0
 8004134:	428a      	cmp	r2, r1
 8004136:	bf04      	itt	eq
 8004138:	6811      	ldreq	r1, [r2, #0]
 800413a:	6852      	ldreq	r2, [r2, #4]
 800413c:	6062      	str	r2, [r4, #4]
 800413e:	bf04      	itt	eq
 8004140:	1809      	addeq	r1, r1, r0
 8004142:	6021      	streq	r1, [r4, #0]
 8004144:	605c      	str	r4, [r3, #4]
 8004146:	e7c7      	b.n	80040d8 <_free_r+0x24>
 8004148:	bd38      	pop	{r3, r4, r5, pc}
 800414a:	bf00      	nop
 800414c:	20000090 	.word	0x20000090

08004150 <_malloc_r>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	1ccd      	adds	r5, r1, #3
 8004154:	f025 0503 	bic.w	r5, r5, #3
 8004158:	3508      	adds	r5, #8
 800415a:	2d0c      	cmp	r5, #12
 800415c:	bf38      	it	cc
 800415e:	250c      	movcc	r5, #12
 8004160:	2d00      	cmp	r5, #0
 8004162:	4606      	mov	r6, r0
 8004164:	db01      	blt.n	800416a <_malloc_r+0x1a>
 8004166:	42a9      	cmp	r1, r5
 8004168:	d903      	bls.n	8004172 <_malloc_r+0x22>
 800416a:	230c      	movs	r3, #12
 800416c:	6033      	str	r3, [r6, #0]
 800416e:	2000      	movs	r0, #0
 8004170:	bd70      	pop	{r4, r5, r6, pc}
 8004172:	f000 fc3f 	bl	80049f4 <__malloc_lock>
 8004176:	4a21      	ldr	r2, [pc, #132]	; (80041fc <_malloc_r+0xac>)
 8004178:	6814      	ldr	r4, [r2, #0]
 800417a:	4621      	mov	r1, r4
 800417c:	b991      	cbnz	r1, 80041a4 <_malloc_r+0x54>
 800417e:	4c20      	ldr	r4, [pc, #128]	; (8004200 <_malloc_r+0xb0>)
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	b91b      	cbnz	r3, 800418c <_malloc_r+0x3c>
 8004184:	4630      	mov	r0, r6
 8004186:	f000 f8b9 	bl	80042fc <_sbrk_r>
 800418a:	6020      	str	r0, [r4, #0]
 800418c:	4629      	mov	r1, r5
 800418e:	4630      	mov	r0, r6
 8004190:	f000 f8b4 	bl	80042fc <_sbrk_r>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d124      	bne.n	80041e2 <_malloc_r+0x92>
 8004198:	230c      	movs	r3, #12
 800419a:	6033      	str	r3, [r6, #0]
 800419c:	4630      	mov	r0, r6
 800419e:	f000 fc2a 	bl	80049f6 <__malloc_unlock>
 80041a2:	e7e4      	b.n	800416e <_malloc_r+0x1e>
 80041a4:	680b      	ldr	r3, [r1, #0]
 80041a6:	1b5b      	subs	r3, r3, r5
 80041a8:	d418      	bmi.n	80041dc <_malloc_r+0x8c>
 80041aa:	2b0b      	cmp	r3, #11
 80041ac:	d90f      	bls.n	80041ce <_malloc_r+0x7e>
 80041ae:	600b      	str	r3, [r1, #0]
 80041b0:	50cd      	str	r5, [r1, r3]
 80041b2:	18cc      	adds	r4, r1, r3
 80041b4:	4630      	mov	r0, r6
 80041b6:	f000 fc1e 	bl	80049f6 <__malloc_unlock>
 80041ba:	f104 000b 	add.w	r0, r4, #11
 80041be:	1d23      	adds	r3, r4, #4
 80041c0:	f020 0007 	bic.w	r0, r0, #7
 80041c4:	1ac3      	subs	r3, r0, r3
 80041c6:	d0d3      	beq.n	8004170 <_malloc_r+0x20>
 80041c8:	425a      	negs	r2, r3
 80041ca:	50e2      	str	r2, [r4, r3]
 80041cc:	e7d0      	b.n	8004170 <_malloc_r+0x20>
 80041ce:	428c      	cmp	r4, r1
 80041d0:	684b      	ldr	r3, [r1, #4]
 80041d2:	bf16      	itet	ne
 80041d4:	6063      	strne	r3, [r4, #4]
 80041d6:	6013      	streq	r3, [r2, #0]
 80041d8:	460c      	movne	r4, r1
 80041da:	e7eb      	b.n	80041b4 <_malloc_r+0x64>
 80041dc:	460c      	mov	r4, r1
 80041de:	6849      	ldr	r1, [r1, #4]
 80041e0:	e7cc      	b.n	800417c <_malloc_r+0x2c>
 80041e2:	1cc4      	adds	r4, r0, #3
 80041e4:	f024 0403 	bic.w	r4, r4, #3
 80041e8:	42a0      	cmp	r0, r4
 80041ea:	d005      	beq.n	80041f8 <_malloc_r+0xa8>
 80041ec:	1a21      	subs	r1, r4, r0
 80041ee:	4630      	mov	r0, r6
 80041f0:	f000 f884 	bl	80042fc <_sbrk_r>
 80041f4:	3001      	adds	r0, #1
 80041f6:	d0cf      	beq.n	8004198 <_malloc_r+0x48>
 80041f8:	6025      	str	r5, [r4, #0]
 80041fa:	e7db      	b.n	80041b4 <_malloc_r+0x64>
 80041fc:	20000090 	.word	0x20000090
 8004200:	20000094 	.word	0x20000094

08004204 <iprintf>:
 8004204:	b40f      	push	{r0, r1, r2, r3}
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <iprintf+0x2c>)
 8004208:	b513      	push	{r0, r1, r4, lr}
 800420a:	681c      	ldr	r4, [r3, #0]
 800420c:	b124      	cbz	r4, 8004218 <iprintf+0x14>
 800420e:	69a3      	ldr	r3, [r4, #24]
 8004210:	b913      	cbnz	r3, 8004218 <iprintf+0x14>
 8004212:	4620      	mov	r0, r4
 8004214:	f000 fb00 	bl	8004818 <__sinit>
 8004218:	ab05      	add	r3, sp, #20
 800421a:	9a04      	ldr	r2, [sp, #16]
 800421c:	68a1      	ldr	r1, [r4, #8]
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	4620      	mov	r0, r4
 8004222:	f000 fd65 	bl	8004cf0 <_vfiprintf_r>
 8004226:	b002      	add	sp, #8
 8004228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800422c:	b004      	add	sp, #16
 800422e:	4770      	bx	lr
 8004230:	2000000c 	.word	0x2000000c

08004234 <_puts_r>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	460e      	mov	r6, r1
 8004238:	4605      	mov	r5, r0
 800423a:	b118      	cbz	r0, 8004244 <_puts_r+0x10>
 800423c:	6983      	ldr	r3, [r0, #24]
 800423e:	b90b      	cbnz	r3, 8004244 <_puts_r+0x10>
 8004240:	f000 faea 	bl	8004818 <__sinit>
 8004244:	69ab      	ldr	r3, [r5, #24]
 8004246:	68ac      	ldr	r4, [r5, #8]
 8004248:	b913      	cbnz	r3, 8004250 <_puts_r+0x1c>
 800424a:	4628      	mov	r0, r5
 800424c:	f000 fae4 	bl	8004818 <__sinit>
 8004250:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <_puts_r+0xac>)
 8004252:	429c      	cmp	r4, r3
 8004254:	d117      	bne.n	8004286 <_puts_r+0x52>
 8004256:	686c      	ldr	r4, [r5, #4]
 8004258:	89a3      	ldrh	r3, [r4, #12]
 800425a:	071b      	lsls	r3, r3, #28
 800425c:	d51d      	bpl.n	800429a <_puts_r+0x66>
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	b1db      	cbz	r3, 800429a <_puts_r+0x66>
 8004262:	3e01      	subs	r6, #1
 8004264:	68a3      	ldr	r3, [r4, #8]
 8004266:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800426a:	3b01      	subs	r3, #1
 800426c:	60a3      	str	r3, [r4, #8]
 800426e:	b9e9      	cbnz	r1, 80042ac <_puts_r+0x78>
 8004270:	2b00      	cmp	r3, #0
 8004272:	da2e      	bge.n	80042d2 <_puts_r+0x9e>
 8004274:	4622      	mov	r2, r4
 8004276:	210a      	movs	r1, #10
 8004278:	4628      	mov	r0, r5
 800427a:	f000 f91d 	bl	80044b8 <__swbuf_r>
 800427e:	3001      	adds	r0, #1
 8004280:	d011      	beq.n	80042a6 <_puts_r+0x72>
 8004282:	200a      	movs	r0, #10
 8004284:	e011      	b.n	80042aa <_puts_r+0x76>
 8004286:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <_puts_r+0xb0>)
 8004288:	429c      	cmp	r4, r3
 800428a:	d101      	bne.n	8004290 <_puts_r+0x5c>
 800428c:	68ac      	ldr	r4, [r5, #8]
 800428e:	e7e3      	b.n	8004258 <_puts_r+0x24>
 8004290:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <_puts_r+0xb4>)
 8004292:	429c      	cmp	r4, r3
 8004294:	bf08      	it	eq
 8004296:	68ec      	ldreq	r4, [r5, #12]
 8004298:	e7de      	b.n	8004258 <_puts_r+0x24>
 800429a:	4621      	mov	r1, r4
 800429c:	4628      	mov	r0, r5
 800429e:	f000 f95d 	bl	800455c <__swsetup_r>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d0dd      	beq.n	8004262 <_puts_r+0x2e>
 80042a6:	f04f 30ff 	mov.w	r0, #4294967295
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	da04      	bge.n	80042ba <_puts_r+0x86>
 80042b0:	69a2      	ldr	r2, [r4, #24]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	dc06      	bgt.n	80042c4 <_puts_r+0x90>
 80042b6:	290a      	cmp	r1, #10
 80042b8:	d004      	beq.n	80042c4 <_puts_r+0x90>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	6022      	str	r2, [r4, #0]
 80042c0:	7019      	strb	r1, [r3, #0]
 80042c2:	e7cf      	b.n	8004264 <_puts_r+0x30>
 80042c4:	4622      	mov	r2, r4
 80042c6:	4628      	mov	r0, r5
 80042c8:	f000 f8f6 	bl	80044b8 <__swbuf_r>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d1c9      	bne.n	8004264 <_puts_r+0x30>
 80042d0:	e7e9      	b.n	80042a6 <_puts_r+0x72>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	200a      	movs	r0, #10
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	6022      	str	r2, [r4, #0]
 80042da:	7018      	strb	r0, [r3, #0]
 80042dc:	e7e5      	b.n	80042aa <_puts_r+0x76>
 80042de:	bf00      	nop
 80042e0:	080056cc 	.word	0x080056cc
 80042e4:	080056ec 	.word	0x080056ec
 80042e8:	080056ac 	.word	0x080056ac

080042ec <puts>:
 80042ec:	4b02      	ldr	r3, [pc, #8]	; (80042f8 <puts+0xc>)
 80042ee:	4601      	mov	r1, r0
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	f7ff bf9f 	b.w	8004234 <_puts_r>
 80042f6:	bf00      	nop
 80042f8:	2000000c 	.word	0x2000000c

080042fc <_sbrk_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4c06      	ldr	r4, [pc, #24]	; (8004318 <_sbrk_r+0x1c>)
 8004300:	2300      	movs	r3, #0
 8004302:	4605      	mov	r5, r0
 8004304:	4608      	mov	r0, r1
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	f7ff fb76 	bl	80039f8 <_sbrk>
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d102      	bne.n	8004316 <_sbrk_r+0x1a>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	b103      	cbz	r3, 8004316 <_sbrk_r+0x1a>
 8004314:	602b      	str	r3, [r5, #0]
 8004316:	bd38      	pop	{r3, r4, r5, pc}
 8004318:	20000a7c 	.word	0x20000a7c

0800431c <setvbuf>:
 800431c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004320:	461d      	mov	r5, r3
 8004322:	4b51      	ldr	r3, [pc, #324]	; (8004468 <setvbuf+0x14c>)
 8004324:	681e      	ldr	r6, [r3, #0]
 8004326:	4604      	mov	r4, r0
 8004328:	460f      	mov	r7, r1
 800432a:	4690      	mov	r8, r2
 800432c:	b126      	cbz	r6, 8004338 <setvbuf+0x1c>
 800432e:	69b3      	ldr	r3, [r6, #24]
 8004330:	b913      	cbnz	r3, 8004338 <setvbuf+0x1c>
 8004332:	4630      	mov	r0, r6
 8004334:	f000 fa70 	bl	8004818 <__sinit>
 8004338:	4b4c      	ldr	r3, [pc, #304]	; (800446c <setvbuf+0x150>)
 800433a:	429c      	cmp	r4, r3
 800433c:	d152      	bne.n	80043e4 <setvbuf+0xc8>
 800433e:	6874      	ldr	r4, [r6, #4]
 8004340:	f1b8 0f02 	cmp.w	r8, #2
 8004344:	d006      	beq.n	8004354 <setvbuf+0x38>
 8004346:	f1b8 0f01 	cmp.w	r8, #1
 800434a:	f200 8089 	bhi.w	8004460 <setvbuf+0x144>
 800434e:	2d00      	cmp	r5, #0
 8004350:	f2c0 8086 	blt.w	8004460 <setvbuf+0x144>
 8004354:	4621      	mov	r1, r4
 8004356:	4630      	mov	r0, r6
 8004358:	f000 f9f4 	bl	8004744 <_fflush_r>
 800435c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800435e:	b141      	cbz	r1, 8004372 <setvbuf+0x56>
 8004360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004364:	4299      	cmp	r1, r3
 8004366:	d002      	beq.n	800436e <setvbuf+0x52>
 8004368:	4630      	mov	r0, r6
 800436a:	f7ff fea3 	bl	80040b4 <_free_r>
 800436e:	2300      	movs	r3, #0
 8004370:	6363      	str	r3, [r4, #52]	; 0x34
 8004372:	2300      	movs	r3, #0
 8004374:	61a3      	str	r3, [r4, #24]
 8004376:	6063      	str	r3, [r4, #4]
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	061b      	lsls	r3, r3, #24
 800437c:	d503      	bpl.n	8004386 <setvbuf+0x6a>
 800437e:	6921      	ldr	r1, [r4, #16]
 8004380:	4630      	mov	r0, r6
 8004382:	f7ff fe97 	bl	80040b4 <_free_r>
 8004386:	89a3      	ldrh	r3, [r4, #12]
 8004388:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800438c:	f023 0303 	bic.w	r3, r3, #3
 8004390:	f1b8 0f02 	cmp.w	r8, #2
 8004394:	81a3      	strh	r3, [r4, #12]
 8004396:	d05d      	beq.n	8004454 <setvbuf+0x138>
 8004398:	ab01      	add	r3, sp, #4
 800439a:	466a      	mov	r2, sp
 800439c:	4621      	mov	r1, r4
 800439e:	4630      	mov	r0, r6
 80043a0:	f000 fac4 	bl	800492c <__swhatbuf_r>
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	4318      	orrs	r0, r3
 80043a8:	81a0      	strh	r0, [r4, #12]
 80043aa:	bb2d      	cbnz	r5, 80043f8 <setvbuf+0xdc>
 80043ac:	9d00      	ldr	r5, [sp, #0]
 80043ae:	4628      	mov	r0, r5
 80043b0:	f7ff fe64 	bl	800407c <malloc>
 80043b4:	4607      	mov	r7, r0
 80043b6:	2800      	cmp	r0, #0
 80043b8:	d14e      	bne.n	8004458 <setvbuf+0x13c>
 80043ba:	f8dd 9000 	ldr.w	r9, [sp]
 80043be:	45a9      	cmp	r9, r5
 80043c0:	d13c      	bne.n	800443c <setvbuf+0x120>
 80043c2:	f04f 30ff 	mov.w	r0, #4294967295
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	f043 0302 	orr.w	r3, r3, #2
 80043cc:	81a3      	strh	r3, [r4, #12]
 80043ce:	2300      	movs	r3, #0
 80043d0:	60a3      	str	r3, [r4, #8]
 80043d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043d6:	6023      	str	r3, [r4, #0]
 80043d8:	6123      	str	r3, [r4, #16]
 80043da:	2301      	movs	r3, #1
 80043dc:	6163      	str	r3, [r4, #20]
 80043de:	b003      	add	sp, #12
 80043e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043e4:	4b22      	ldr	r3, [pc, #136]	; (8004470 <setvbuf+0x154>)
 80043e6:	429c      	cmp	r4, r3
 80043e8:	d101      	bne.n	80043ee <setvbuf+0xd2>
 80043ea:	68b4      	ldr	r4, [r6, #8]
 80043ec:	e7a8      	b.n	8004340 <setvbuf+0x24>
 80043ee:	4b21      	ldr	r3, [pc, #132]	; (8004474 <setvbuf+0x158>)
 80043f0:	429c      	cmp	r4, r3
 80043f2:	bf08      	it	eq
 80043f4:	68f4      	ldreq	r4, [r6, #12]
 80043f6:	e7a3      	b.n	8004340 <setvbuf+0x24>
 80043f8:	2f00      	cmp	r7, #0
 80043fa:	d0d8      	beq.n	80043ae <setvbuf+0x92>
 80043fc:	69b3      	ldr	r3, [r6, #24]
 80043fe:	b913      	cbnz	r3, 8004406 <setvbuf+0xea>
 8004400:	4630      	mov	r0, r6
 8004402:	f000 fa09 	bl	8004818 <__sinit>
 8004406:	f1b8 0f01 	cmp.w	r8, #1
 800440a:	bf08      	it	eq
 800440c:	89a3      	ldrheq	r3, [r4, #12]
 800440e:	6027      	str	r7, [r4, #0]
 8004410:	bf04      	itt	eq
 8004412:	f043 0301 	orreq.w	r3, r3, #1
 8004416:	81a3      	strheq	r3, [r4, #12]
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	f013 0008 	ands.w	r0, r3, #8
 800441e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004422:	d01b      	beq.n	800445c <setvbuf+0x140>
 8004424:	f013 0001 	ands.w	r0, r3, #1
 8004428:	bf18      	it	ne
 800442a:	426d      	negne	r5, r5
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	bf1d      	ittte	ne
 8004432:	60a3      	strne	r3, [r4, #8]
 8004434:	61a5      	strne	r5, [r4, #24]
 8004436:	4618      	movne	r0, r3
 8004438:	60a5      	streq	r5, [r4, #8]
 800443a:	e7d0      	b.n	80043de <setvbuf+0xc2>
 800443c:	4648      	mov	r0, r9
 800443e:	f7ff fe1d 	bl	800407c <malloc>
 8004442:	4607      	mov	r7, r0
 8004444:	2800      	cmp	r0, #0
 8004446:	d0bc      	beq.n	80043c2 <setvbuf+0xa6>
 8004448:	89a3      	ldrh	r3, [r4, #12]
 800444a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444e:	81a3      	strh	r3, [r4, #12]
 8004450:	464d      	mov	r5, r9
 8004452:	e7d3      	b.n	80043fc <setvbuf+0xe0>
 8004454:	2000      	movs	r0, #0
 8004456:	e7b6      	b.n	80043c6 <setvbuf+0xaa>
 8004458:	46a9      	mov	r9, r5
 800445a:	e7f5      	b.n	8004448 <setvbuf+0x12c>
 800445c:	60a0      	str	r0, [r4, #8]
 800445e:	e7be      	b.n	80043de <setvbuf+0xc2>
 8004460:	f04f 30ff 	mov.w	r0, #4294967295
 8004464:	e7bb      	b.n	80043de <setvbuf+0xc2>
 8004466:	bf00      	nop
 8004468:	2000000c 	.word	0x2000000c
 800446c:	080056cc 	.word	0x080056cc
 8004470:	080056ec 	.word	0x080056ec
 8004474:	080056ac 	.word	0x080056ac

08004478 <siprintf>:
 8004478:	b40e      	push	{r1, r2, r3}
 800447a:	b500      	push	{lr}
 800447c:	b09c      	sub	sp, #112	; 0x70
 800447e:	ab1d      	add	r3, sp, #116	; 0x74
 8004480:	9002      	str	r0, [sp, #8]
 8004482:	9006      	str	r0, [sp, #24]
 8004484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004488:	4809      	ldr	r0, [pc, #36]	; (80044b0 <siprintf+0x38>)
 800448a:	9107      	str	r1, [sp, #28]
 800448c:	9104      	str	r1, [sp, #16]
 800448e:	4909      	ldr	r1, [pc, #36]	; (80044b4 <siprintf+0x3c>)
 8004490:	f853 2b04 	ldr.w	r2, [r3], #4
 8004494:	9105      	str	r1, [sp, #20]
 8004496:	6800      	ldr	r0, [r0, #0]
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	a902      	add	r1, sp, #8
 800449c:	f000 fb06 	bl	8004aac <_svfiprintf_r>
 80044a0:	9b02      	ldr	r3, [sp, #8]
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	b01c      	add	sp, #112	; 0x70
 80044a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044ac:	b003      	add	sp, #12
 80044ae:	4770      	bx	lr
 80044b0:	2000000c 	.word	0x2000000c
 80044b4:	ffff0208 	.word	0xffff0208

080044b8 <__swbuf_r>:
 80044b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ba:	460e      	mov	r6, r1
 80044bc:	4614      	mov	r4, r2
 80044be:	4605      	mov	r5, r0
 80044c0:	b118      	cbz	r0, 80044ca <__swbuf_r+0x12>
 80044c2:	6983      	ldr	r3, [r0, #24]
 80044c4:	b90b      	cbnz	r3, 80044ca <__swbuf_r+0x12>
 80044c6:	f000 f9a7 	bl	8004818 <__sinit>
 80044ca:	4b21      	ldr	r3, [pc, #132]	; (8004550 <__swbuf_r+0x98>)
 80044cc:	429c      	cmp	r4, r3
 80044ce:	d12a      	bne.n	8004526 <__swbuf_r+0x6e>
 80044d0:	686c      	ldr	r4, [r5, #4]
 80044d2:	69a3      	ldr	r3, [r4, #24]
 80044d4:	60a3      	str	r3, [r4, #8]
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	071a      	lsls	r2, r3, #28
 80044da:	d52e      	bpl.n	800453a <__swbuf_r+0x82>
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	b363      	cbz	r3, 800453a <__swbuf_r+0x82>
 80044e0:	6923      	ldr	r3, [r4, #16]
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	1ac0      	subs	r0, r0, r3
 80044e6:	6963      	ldr	r3, [r4, #20]
 80044e8:	b2f6      	uxtb	r6, r6
 80044ea:	4283      	cmp	r3, r0
 80044ec:	4637      	mov	r7, r6
 80044ee:	dc04      	bgt.n	80044fa <__swbuf_r+0x42>
 80044f0:	4621      	mov	r1, r4
 80044f2:	4628      	mov	r0, r5
 80044f4:	f000 f926 	bl	8004744 <_fflush_r>
 80044f8:	bb28      	cbnz	r0, 8004546 <__swbuf_r+0x8e>
 80044fa:	68a3      	ldr	r3, [r4, #8]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	60a3      	str	r3, [r4, #8]
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	6022      	str	r2, [r4, #0]
 8004506:	701e      	strb	r6, [r3, #0]
 8004508:	6963      	ldr	r3, [r4, #20]
 800450a:	3001      	adds	r0, #1
 800450c:	4283      	cmp	r3, r0
 800450e:	d004      	beq.n	800451a <__swbuf_r+0x62>
 8004510:	89a3      	ldrh	r3, [r4, #12]
 8004512:	07db      	lsls	r3, r3, #31
 8004514:	d519      	bpl.n	800454a <__swbuf_r+0x92>
 8004516:	2e0a      	cmp	r6, #10
 8004518:	d117      	bne.n	800454a <__swbuf_r+0x92>
 800451a:	4621      	mov	r1, r4
 800451c:	4628      	mov	r0, r5
 800451e:	f000 f911 	bl	8004744 <_fflush_r>
 8004522:	b190      	cbz	r0, 800454a <__swbuf_r+0x92>
 8004524:	e00f      	b.n	8004546 <__swbuf_r+0x8e>
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <__swbuf_r+0x9c>)
 8004528:	429c      	cmp	r4, r3
 800452a:	d101      	bne.n	8004530 <__swbuf_r+0x78>
 800452c:	68ac      	ldr	r4, [r5, #8]
 800452e:	e7d0      	b.n	80044d2 <__swbuf_r+0x1a>
 8004530:	4b09      	ldr	r3, [pc, #36]	; (8004558 <__swbuf_r+0xa0>)
 8004532:	429c      	cmp	r4, r3
 8004534:	bf08      	it	eq
 8004536:	68ec      	ldreq	r4, [r5, #12]
 8004538:	e7cb      	b.n	80044d2 <__swbuf_r+0x1a>
 800453a:	4621      	mov	r1, r4
 800453c:	4628      	mov	r0, r5
 800453e:	f000 f80d 	bl	800455c <__swsetup_r>
 8004542:	2800      	cmp	r0, #0
 8004544:	d0cc      	beq.n	80044e0 <__swbuf_r+0x28>
 8004546:	f04f 37ff 	mov.w	r7, #4294967295
 800454a:	4638      	mov	r0, r7
 800454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800454e:	bf00      	nop
 8004550:	080056cc 	.word	0x080056cc
 8004554:	080056ec 	.word	0x080056ec
 8004558:	080056ac 	.word	0x080056ac

0800455c <__swsetup_r>:
 800455c:	4b32      	ldr	r3, [pc, #200]	; (8004628 <__swsetup_r+0xcc>)
 800455e:	b570      	push	{r4, r5, r6, lr}
 8004560:	681d      	ldr	r5, [r3, #0]
 8004562:	4606      	mov	r6, r0
 8004564:	460c      	mov	r4, r1
 8004566:	b125      	cbz	r5, 8004572 <__swsetup_r+0x16>
 8004568:	69ab      	ldr	r3, [r5, #24]
 800456a:	b913      	cbnz	r3, 8004572 <__swsetup_r+0x16>
 800456c:	4628      	mov	r0, r5
 800456e:	f000 f953 	bl	8004818 <__sinit>
 8004572:	4b2e      	ldr	r3, [pc, #184]	; (800462c <__swsetup_r+0xd0>)
 8004574:	429c      	cmp	r4, r3
 8004576:	d10f      	bne.n	8004598 <__swsetup_r+0x3c>
 8004578:	686c      	ldr	r4, [r5, #4]
 800457a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800457e:	b29a      	uxth	r2, r3
 8004580:	0715      	lsls	r5, r2, #28
 8004582:	d42c      	bmi.n	80045de <__swsetup_r+0x82>
 8004584:	06d0      	lsls	r0, r2, #27
 8004586:	d411      	bmi.n	80045ac <__swsetup_r+0x50>
 8004588:	2209      	movs	r2, #9
 800458a:	6032      	str	r2, [r6, #0]
 800458c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	f04f 30ff 	mov.w	r0, #4294967295
 8004596:	e03e      	b.n	8004616 <__swsetup_r+0xba>
 8004598:	4b25      	ldr	r3, [pc, #148]	; (8004630 <__swsetup_r+0xd4>)
 800459a:	429c      	cmp	r4, r3
 800459c:	d101      	bne.n	80045a2 <__swsetup_r+0x46>
 800459e:	68ac      	ldr	r4, [r5, #8]
 80045a0:	e7eb      	b.n	800457a <__swsetup_r+0x1e>
 80045a2:	4b24      	ldr	r3, [pc, #144]	; (8004634 <__swsetup_r+0xd8>)
 80045a4:	429c      	cmp	r4, r3
 80045a6:	bf08      	it	eq
 80045a8:	68ec      	ldreq	r4, [r5, #12]
 80045aa:	e7e6      	b.n	800457a <__swsetup_r+0x1e>
 80045ac:	0751      	lsls	r1, r2, #29
 80045ae:	d512      	bpl.n	80045d6 <__swsetup_r+0x7a>
 80045b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045b2:	b141      	cbz	r1, 80045c6 <__swsetup_r+0x6a>
 80045b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045b8:	4299      	cmp	r1, r3
 80045ba:	d002      	beq.n	80045c2 <__swsetup_r+0x66>
 80045bc:	4630      	mov	r0, r6
 80045be:	f7ff fd79 	bl	80040b4 <_free_r>
 80045c2:	2300      	movs	r3, #0
 80045c4:	6363      	str	r3, [r4, #52]	; 0x34
 80045c6:	89a3      	ldrh	r3, [r4, #12]
 80045c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045cc:	81a3      	strh	r3, [r4, #12]
 80045ce:	2300      	movs	r3, #0
 80045d0:	6063      	str	r3, [r4, #4]
 80045d2:	6923      	ldr	r3, [r4, #16]
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	89a3      	ldrh	r3, [r4, #12]
 80045d8:	f043 0308 	orr.w	r3, r3, #8
 80045dc:	81a3      	strh	r3, [r4, #12]
 80045de:	6923      	ldr	r3, [r4, #16]
 80045e0:	b94b      	cbnz	r3, 80045f6 <__swsetup_r+0x9a>
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ec:	d003      	beq.n	80045f6 <__swsetup_r+0x9a>
 80045ee:	4621      	mov	r1, r4
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 f9bf 	bl	8004974 <__smakebuf_r>
 80045f6:	89a2      	ldrh	r2, [r4, #12]
 80045f8:	f012 0301 	ands.w	r3, r2, #1
 80045fc:	d00c      	beq.n	8004618 <__swsetup_r+0xbc>
 80045fe:	2300      	movs	r3, #0
 8004600:	60a3      	str	r3, [r4, #8]
 8004602:	6963      	ldr	r3, [r4, #20]
 8004604:	425b      	negs	r3, r3
 8004606:	61a3      	str	r3, [r4, #24]
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	b953      	cbnz	r3, 8004622 <__swsetup_r+0xc6>
 800460c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004610:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004614:	d1ba      	bne.n	800458c <__swsetup_r+0x30>
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	0792      	lsls	r2, r2, #30
 800461a:	bf58      	it	pl
 800461c:	6963      	ldrpl	r3, [r4, #20]
 800461e:	60a3      	str	r3, [r4, #8]
 8004620:	e7f2      	b.n	8004608 <__swsetup_r+0xac>
 8004622:	2000      	movs	r0, #0
 8004624:	e7f7      	b.n	8004616 <__swsetup_r+0xba>
 8004626:	bf00      	nop
 8004628:	2000000c 	.word	0x2000000c
 800462c:	080056cc 	.word	0x080056cc
 8004630:	080056ec 	.word	0x080056ec
 8004634:	080056ac 	.word	0x080056ac

08004638 <__sflush_r>:
 8004638:	898a      	ldrh	r2, [r1, #12]
 800463a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463e:	4605      	mov	r5, r0
 8004640:	0710      	lsls	r0, r2, #28
 8004642:	460c      	mov	r4, r1
 8004644:	d458      	bmi.n	80046f8 <__sflush_r+0xc0>
 8004646:	684b      	ldr	r3, [r1, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	dc05      	bgt.n	8004658 <__sflush_r+0x20>
 800464c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	dc02      	bgt.n	8004658 <__sflush_r+0x20>
 8004652:	2000      	movs	r0, #0
 8004654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800465a:	2e00      	cmp	r6, #0
 800465c:	d0f9      	beq.n	8004652 <__sflush_r+0x1a>
 800465e:	2300      	movs	r3, #0
 8004660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004664:	682f      	ldr	r7, [r5, #0]
 8004666:	6a21      	ldr	r1, [r4, #32]
 8004668:	602b      	str	r3, [r5, #0]
 800466a:	d032      	beq.n	80046d2 <__sflush_r+0x9a>
 800466c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	075a      	lsls	r2, r3, #29
 8004672:	d505      	bpl.n	8004680 <__sflush_r+0x48>
 8004674:	6863      	ldr	r3, [r4, #4]
 8004676:	1ac0      	subs	r0, r0, r3
 8004678:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800467a:	b10b      	cbz	r3, 8004680 <__sflush_r+0x48>
 800467c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800467e:	1ac0      	subs	r0, r0, r3
 8004680:	2300      	movs	r3, #0
 8004682:	4602      	mov	r2, r0
 8004684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004686:	6a21      	ldr	r1, [r4, #32]
 8004688:	4628      	mov	r0, r5
 800468a:	47b0      	blx	r6
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	d106      	bne.n	80046a0 <__sflush_r+0x68>
 8004692:	6829      	ldr	r1, [r5, #0]
 8004694:	291d      	cmp	r1, #29
 8004696:	d848      	bhi.n	800472a <__sflush_r+0xf2>
 8004698:	4a29      	ldr	r2, [pc, #164]	; (8004740 <__sflush_r+0x108>)
 800469a:	40ca      	lsrs	r2, r1
 800469c:	07d6      	lsls	r6, r2, #31
 800469e:	d544      	bpl.n	800472a <__sflush_r+0xf2>
 80046a0:	2200      	movs	r2, #0
 80046a2:	6062      	str	r2, [r4, #4]
 80046a4:	04d9      	lsls	r1, r3, #19
 80046a6:	6922      	ldr	r2, [r4, #16]
 80046a8:	6022      	str	r2, [r4, #0]
 80046aa:	d504      	bpl.n	80046b6 <__sflush_r+0x7e>
 80046ac:	1c42      	adds	r2, r0, #1
 80046ae:	d101      	bne.n	80046b4 <__sflush_r+0x7c>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	b903      	cbnz	r3, 80046b6 <__sflush_r+0x7e>
 80046b4:	6560      	str	r0, [r4, #84]	; 0x54
 80046b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046b8:	602f      	str	r7, [r5, #0]
 80046ba:	2900      	cmp	r1, #0
 80046bc:	d0c9      	beq.n	8004652 <__sflush_r+0x1a>
 80046be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046c2:	4299      	cmp	r1, r3
 80046c4:	d002      	beq.n	80046cc <__sflush_r+0x94>
 80046c6:	4628      	mov	r0, r5
 80046c8:	f7ff fcf4 	bl	80040b4 <_free_r>
 80046cc:	2000      	movs	r0, #0
 80046ce:	6360      	str	r0, [r4, #52]	; 0x34
 80046d0:	e7c0      	b.n	8004654 <__sflush_r+0x1c>
 80046d2:	2301      	movs	r3, #1
 80046d4:	4628      	mov	r0, r5
 80046d6:	47b0      	blx	r6
 80046d8:	1c41      	adds	r1, r0, #1
 80046da:	d1c8      	bne.n	800466e <__sflush_r+0x36>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0c5      	beq.n	800466e <__sflush_r+0x36>
 80046e2:	2b1d      	cmp	r3, #29
 80046e4:	d001      	beq.n	80046ea <__sflush_r+0xb2>
 80046e6:	2b16      	cmp	r3, #22
 80046e8:	d101      	bne.n	80046ee <__sflush_r+0xb6>
 80046ea:	602f      	str	r7, [r5, #0]
 80046ec:	e7b1      	b.n	8004652 <__sflush_r+0x1a>
 80046ee:	89a3      	ldrh	r3, [r4, #12]
 80046f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f4:	81a3      	strh	r3, [r4, #12]
 80046f6:	e7ad      	b.n	8004654 <__sflush_r+0x1c>
 80046f8:	690f      	ldr	r7, [r1, #16]
 80046fa:	2f00      	cmp	r7, #0
 80046fc:	d0a9      	beq.n	8004652 <__sflush_r+0x1a>
 80046fe:	0793      	lsls	r3, r2, #30
 8004700:	680e      	ldr	r6, [r1, #0]
 8004702:	bf08      	it	eq
 8004704:	694b      	ldreq	r3, [r1, #20]
 8004706:	600f      	str	r7, [r1, #0]
 8004708:	bf18      	it	ne
 800470a:	2300      	movne	r3, #0
 800470c:	eba6 0807 	sub.w	r8, r6, r7
 8004710:	608b      	str	r3, [r1, #8]
 8004712:	f1b8 0f00 	cmp.w	r8, #0
 8004716:	dd9c      	ble.n	8004652 <__sflush_r+0x1a>
 8004718:	4643      	mov	r3, r8
 800471a:	463a      	mov	r2, r7
 800471c:	6a21      	ldr	r1, [r4, #32]
 800471e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004720:	4628      	mov	r0, r5
 8004722:	47b0      	blx	r6
 8004724:	2800      	cmp	r0, #0
 8004726:	dc06      	bgt.n	8004736 <__sflush_r+0xfe>
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472e:	81a3      	strh	r3, [r4, #12]
 8004730:	f04f 30ff 	mov.w	r0, #4294967295
 8004734:	e78e      	b.n	8004654 <__sflush_r+0x1c>
 8004736:	4407      	add	r7, r0
 8004738:	eba8 0800 	sub.w	r8, r8, r0
 800473c:	e7e9      	b.n	8004712 <__sflush_r+0xda>
 800473e:	bf00      	nop
 8004740:	20400001 	.word	0x20400001

08004744 <_fflush_r>:
 8004744:	b538      	push	{r3, r4, r5, lr}
 8004746:	690b      	ldr	r3, [r1, #16]
 8004748:	4605      	mov	r5, r0
 800474a:	460c      	mov	r4, r1
 800474c:	b1db      	cbz	r3, 8004786 <_fflush_r+0x42>
 800474e:	b118      	cbz	r0, 8004758 <_fflush_r+0x14>
 8004750:	6983      	ldr	r3, [r0, #24]
 8004752:	b90b      	cbnz	r3, 8004758 <_fflush_r+0x14>
 8004754:	f000 f860 	bl	8004818 <__sinit>
 8004758:	4b0c      	ldr	r3, [pc, #48]	; (800478c <_fflush_r+0x48>)
 800475a:	429c      	cmp	r4, r3
 800475c:	d109      	bne.n	8004772 <_fflush_r+0x2e>
 800475e:	686c      	ldr	r4, [r5, #4]
 8004760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004764:	b17b      	cbz	r3, 8004786 <_fflush_r+0x42>
 8004766:	4621      	mov	r1, r4
 8004768:	4628      	mov	r0, r5
 800476a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800476e:	f7ff bf63 	b.w	8004638 <__sflush_r>
 8004772:	4b07      	ldr	r3, [pc, #28]	; (8004790 <_fflush_r+0x4c>)
 8004774:	429c      	cmp	r4, r3
 8004776:	d101      	bne.n	800477c <_fflush_r+0x38>
 8004778:	68ac      	ldr	r4, [r5, #8]
 800477a:	e7f1      	b.n	8004760 <_fflush_r+0x1c>
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <_fflush_r+0x50>)
 800477e:	429c      	cmp	r4, r3
 8004780:	bf08      	it	eq
 8004782:	68ec      	ldreq	r4, [r5, #12]
 8004784:	e7ec      	b.n	8004760 <_fflush_r+0x1c>
 8004786:	2000      	movs	r0, #0
 8004788:	bd38      	pop	{r3, r4, r5, pc}
 800478a:	bf00      	nop
 800478c:	080056cc 	.word	0x080056cc
 8004790:	080056ec 	.word	0x080056ec
 8004794:	080056ac 	.word	0x080056ac

08004798 <std>:
 8004798:	2300      	movs	r3, #0
 800479a:	b510      	push	{r4, lr}
 800479c:	4604      	mov	r4, r0
 800479e:	e9c0 3300 	strd	r3, r3, [r0]
 80047a2:	6083      	str	r3, [r0, #8]
 80047a4:	8181      	strh	r1, [r0, #12]
 80047a6:	6643      	str	r3, [r0, #100]	; 0x64
 80047a8:	81c2      	strh	r2, [r0, #14]
 80047aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047ae:	6183      	str	r3, [r0, #24]
 80047b0:	4619      	mov	r1, r3
 80047b2:	2208      	movs	r2, #8
 80047b4:	305c      	adds	r0, #92	; 0x5c
 80047b6:	f7ff fc74 	bl	80040a2 <memset>
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <std+0x38>)
 80047bc:	6263      	str	r3, [r4, #36]	; 0x24
 80047be:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <std+0x3c>)
 80047c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80047c2:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <std+0x40>)
 80047c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <std+0x44>)
 80047c8:	6224      	str	r4, [r4, #32]
 80047ca:	6323      	str	r3, [r4, #48]	; 0x30
 80047cc:	bd10      	pop	{r4, pc}
 80047ce:	bf00      	nop
 80047d0:	0800522d 	.word	0x0800522d
 80047d4:	0800524f 	.word	0x0800524f
 80047d8:	08005287 	.word	0x08005287
 80047dc:	080052ab 	.word	0x080052ab

080047e0 <_cleanup_r>:
 80047e0:	4901      	ldr	r1, [pc, #4]	; (80047e8 <_cleanup_r+0x8>)
 80047e2:	f000 b885 	b.w	80048f0 <_fwalk_reent>
 80047e6:	bf00      	nop
 80047e8:	08004745 	.word	0x08004745

080047ec <__sfmoreglue>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	1e4a      	subs	r2, r1, #1
 80047f0:	2568      	movs	r5, #104	; 0x68
 80047f2:	4355      	muls	r5, r2
 80047f4:	460e      	mov	r6, r1
 80047f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047fa:	f7ff fca9 	bl	8004150 <_malloc_r>
 80047fe:	4604      	mov	r4, r0
 8004800:	b140      	cbz	r0, 8004814 <__sfmoreglue+0x28>
 8004802:	2100      	movs	r1, #0
 8004804:	e9c0 1600 	strd	r1, r6, [r0]
 8004808:	300c      	adds	r0, #12
 800480a:	60a0      	str	r0, [r4, #8]
 800480c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004810:	f7ff fc47 	bl	80040a2 <memset>
 8004814:	4620      	mov	r0, r4
 8004816:	bd70      	pop	{r4, r5, r6, pc}

08004818 <__sinit>:
 8004818:	6983      	ldr	r3, [r0, #24]
 800481a:	b510      	push	{r4, lr}
 800481c:	4604      	mov	r4, r0
 800481e:	bb33      	cbnz	r3, 800486e <__sinit+0x56>
 8004820:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004824:	6503      	str	r3, [r0, #80]	; 0x50
 8004826:	4b12      	ldr	r3, [pc, #72]	; (8004870 <__sinit+0x58>)
 8004828:	4a12      	ldr	r2, [pc, #72]	; (8004874 <__sinit+0x5c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6282      	str	r2, [r0, #40]	; 0x28
 800482e:	4298      	cmp	r0, r3
 8004830:	bf04      	itt	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	6183      	streq	r3, [r0, #24]
 8004836:	f000 f81f 	bl	8004878 <__sfp>
 800483a:	6060      	str	r0, [r4, #4]
 800483c:	4620      	mov	r0, r4
 800483e:	f000 f81b 	bl	8004878 <__sfp>
 8004842:	60a0      	str	r0, [r4, #8]
 8004844:	4620      	mov	r0, r4
 8004846:	f000 f817 	bl	8004878 <__sfp>
 800484a:	2200      	movs	r2, #0
 800484c:	60e0      	str	r0, [r4, #12]
 800484e:	2104      	movs	r1, #4
 8004850:	6860      	ldr	r0, [r4, #4]
 8004852:	f7ff ffa1 	bl	8004798 <std>
 8004856:	2201      	movs	r2, #1
 8004858:	2109      	movs	r1, #9
 800485a:	68a0      	ldr	r0, [r4, #8]
 800485c:	f7ff ff9c 	bl	8004798 <std>
 8004860:	2202      	movs	r2, #2
 8004862:	2112      	movs	r1, #18
 8004864:	68e0      	ldr	r0, [r4, #12]
 8004866:	f7ff ff97 	bl	8004798 <std>
 800486a:	2301      	movs	r3, #1
 800486c:	61a3      	str	r3, [r4, #24]
 800486e:	bd10      	pop	{r4, pc}
 8004870:	080056a8 	.word	0x080056a8
 8004874:	080047e1 	.word	0x080047e1

08004878 <__sfp>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <__sfp+0x70>)
 800487c:	681e      	ldr	r6, [r3, #0]
 800487e:	69b3      	ldr	r3, [r6, #24]
 8004880:	4607      	mov	r7, r0
 8004882:	b913      	cbnz	r3, 800488a <__sfp+0x12>
 8004884:	4630      	mov	r0, r6
 8004886:	f7ff ffc7 	bl	8004818 <__sinit>
 800488a:	3648      	adds	r6, #72	; 0x48
 800488c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004890:	3b01      	subs	r3, #1
 8004892:	d503      	bpl.n	800489c <__sfp+0x24>
 8004894:	6833      	ldr	r3, [r6, #0]
 8004896:	b133      	cbz	r3, 80048a6 <__sfp+0x2e>
 8004898:	6836      	ldr	r6, [r6, #0]
 800489a:	e7f7      	b.n	800488c <__sfp+0x14>
 800489c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048a0:	b16d      	cbz	r5, 80048be <__sfp+0x46>
 80048a2:	3468      	adds	r4, #104	; 0x68
 80048a4:	e7f4      	b.n	8004890 <__sfp+0x18>
 80048a6:	2104      	movs	r1, #4
 80048a8:	4638      	mov	r0, r7
 80048aa:	f7ff ff9f 	bl	80047ec <__sfmoreglue>
 80048ae:	6030      	str	r0, [r6, #0]
 80048b0:	2800      	cmp	r0, #0
 80048b2:	d1f1      	bne.n	8004898 <__sfp+0x20>
 80048b4:	230c      	movs	r3, #12
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	4604      	mov	r4, r0
 80048ba:	4620      	mov	r0, r4
 80048bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <__sfp+0x74>)
 80048c0:	6665      	str	r5, [r4, #100]	; 0x64
 80048c2:	e9c4 5500 	strd	r5, r5, [r4]
 80048c6:	60a5      	str	r5, [r4, #8]
 80048c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80048cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80048d0:	2208      	movs	r2, #8
 80048d2:	4629      	mov	r1, r5
 80048d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048d8:	f7ff fbe3 	bl	80040a2 <memset>
 80048dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048e4:	e7e9      	b.n	80048ba <__sfp+0x42>
 80048e6:	bf00      	nop
 80048e8:	080056a8 	.word	0x080056a8
 80048ec:	ffff0001 	.word	0xffff0001

080048f0 <_fwalk_reent>:
 80048f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f4:	4680      	mov	r8, r0
 80048f6:	4689      	mov	r9, r1
 80048f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048fc:	2600      	movs	r6, #0
 80048fe:	b914      	cbnz	r4, 8004906 <_fwalk_reent+0x16>
 8004900:	4630      	mov	r0, r6
 8004902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004906:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800490a:	3f01      	subs	r7, #1
 800490c:	d501      	bpl.n	8004912 <_fwalk_reent+0x22>
 800490e:	6824      	ldr	r4, [r4, #0]
 8004910:	e7f5      	b.n	80048fe <_fwalk_reent+0xe>
 8004912:	89ab      	ldrh	r3, [r5, #12]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d907      	bls.n	8004928 <_fwalk_reent+0x38>
 8004918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800491c:	3301      	adds	r3, #1
 800491e:	d003      	beq.n	8004928 <_fwalk_reent+0x38>
 8004920:	4629      	mov	r1, r5
 8004922:	4640      	mov	r0, r8
 8004924:	47c8      	blx	r9
 8004926:	4306      	orrs	r6, r0
 8004928:	3568      	adds	r5, #104	; 0x68
 800492a:	e7ee      	b.n	800490a <_fwalk_reent+0x1a>

0800492c <__swhatbuf_r>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	460e      	mov	r6, r1
 8004930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004934:	2900      	cmp	r1, #0
 8004936:	b096      	sub	sp, #88	; 0x58
 8004938:	4614      	mov	r4, r2
 800493a:	461d      	mov	r5, r3
 800493c:	da07      	bge.n	800494e <__swhatbuf_r+0x22>
 800493e:	2300      	movs	r3, #0
 8004940:	602b      	str	r3, [r5, #0]
 8004942:	89b3      	ldrh	r3, [r6, #12]
 8004944:	061a      	lsls	r2, r3, #24
 8004946:	d410      	bmi.n	800496a <__swhatbuf_r+0x3e>
 8004948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800494c:	e00e      	b.n	800496c <__swhatbuf_r+0x40>
 800494e:	466a      	mov	r2, sp
 8004950:	f000 fcd2 	bl	80052f8 <_fstat_r>
 8004954:	2800      	cmp	r0, #0
 8004956:	dbf2      	blt.n	800493e <__swhatbuf_r+0x12>
 8004958:	9a01      	ldr	r2, [sp, #4]
 800495a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800495e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004962:	425a      	negs	r2, r3
 8004964:	415a      	adcs	r2, r3
 8004966:	602a      	str	r2, [r5, #0]
 8004968:	e7ee      	b.n	8004948 <__swhatbuf_r+0x1c>
 800496a:	2340      	movs	r3, #64	; 0x40
 800496c:	2000      	movs	r0, #0
 800496e:	6023      	str	r3, [r4, #0]
 8004970:	b016      	add	sp, #88	; 0x58
 8004972:	bd70      	pop	{r4, r5, r6, pc}

08004974 <__smakebuf_r>:
 8004974:	898b      	ldrh	r3, [r1, #12]
 8004976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004978:	079d      	lsls	r5, r3, #30
 800497a:	4606      	mov	r6, r0
 800497c:	460c      	mov	r4, r1
 800497e:	d507      	bpl.n	8004990 <__smakebuf_r+0x1c>
 8004980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	2301      	movs	r3, #1
 800498a:	6163      	str	r3, [r4, #20]
 800498c:	b002      	add	sp, #8
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	ab01      	add	r3, sp, #4
 8004992:	466a      	mov	r2, sp
 8004994:	f7ff ffca 	bl	800492c <__swhatbuf_r>
 8004998:	9900      	ldr	r1, [sp, #0]
 800499a:	4605      	mov	r5, r0
 800499c:	4630      	mov	r0, r6
 800499e:	f7ff fbd7 	bl	8004150 <_malloc_r>
 80049a2:	b948      	cbnz	r0, 80049b8 <__smakebuf_r+0x44>
 80049a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a8:	059a      	lsls	r2, r3, #22
 80049aa:	d4ef      	bmi.n	800498c <__smakebuf_r+0x18>
 80049ac:	f023 0303 	bic.w	r3, r3, #3
 80049b0:	f043 0302 	orr.w	r3, r3, #2
 80049b4:	81a3      	strh	r3, [r4, #12]
 80049b6:	e7e3      	b.n	8004980 <__smakebuf_r+0xc>
 80049b8:	4b0d      	ldr	r3, [pc, #52]	; (80049f0 <__smakebuf_r+0x7c>)
 80049ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	6020      	str	r0, [r4, #0]
 80049c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c4:	81a3      	strh	r3, [r4, #12]
 80049c6:	9b00      	ldr	r3, [sp, #0]
 80049c8:	6163      	str	r3, [r4, #20]
 80049ca:	9b01      	ldr	r3, [sp, #4]
 80049cc:	6120      	str	r0, [r4, #16]
 80049ce:	b15b      	cbz	r3, 80049e8 <__smakebuf_r+0x74>
 80049d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049d4:	4630      	mov	r0, r6
 80049d6:	f000 fca1 	bl	800531c <_isatty_r>
 80049da:	b128      	cbz	r0, 80049e8 <__smakebuf_r+0x74>
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	f023 0303 	bic.w	r3, r3, #3
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	81a3      	strh	r3, [r4, #12]
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	431d      	orrs	r5, r3
 80049ec:	81a5      	strh	r5, [r4, #12]
 80049ee:	e7cd      	b.n	800498c <__smakebuf_r+0x18>
 80049f0:	080047e1 	.word	0x080047e1

080049f4 <__malloc_lock>:
 80049f4:	4770      	bx	lr

080049f6 <__malloc_unlock>:
 80049f6:	4770      	bx	lr

080049f8 <__ssputs_r>:
 80049f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049fc:	688e      	ldr	r6, [r1, #8]
 80049fe:	429e      	cmp	r6, r3
 8004a00:	4682      	mov	sl, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	4690      	mov	r8, r2
 8004a06:	4699      	mov	r9, r3
 8004a08:	d837      	bhi.n	8004a7a <__ssputs_r+0x82>
 8004a0a:	898a      	ldrh	r2, [r1, #12]
 8004a0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a10:	d031      	beq.n	8004a76 <__ssputs_r+0x7e>
 8004a12:	6825      	ldr	r5, [r4, #0]
 8004a14:	6909      	ldr	r1, [r1, #16]
 8004a16:	1a6f      	subs	r7, r5, r1
 8004a18:	6965      	ldr	r5, [r4, #20]
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a20:	fb95 f5f3 	sdiv	r5, r5, r3
 8004a24:	f109 0301 	add.w	r3, r9, #1
 8004a28:	443b      	add	r3, r7
 8004a2a:	429d      	cmp	r5, r3
 8004a2c:	bf38      	it	cc
 8004a2e:	461d      	movcc	r5, r3
 8004a30:	0553      	lsls	r3, r2, #21
 8004a32:	d530      	bpl.n	8004a96 <__ssputs_r+0x9e>
 8004a34:	4629      	mov	r1, r5
 8004a36:	f7ff fb8b 	bl	8004150 <_malloc_r>
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	b950      	cbnz	r0, 8004a54 <__ssputs_r+0x5c>
 8004a3e:	230c      	movs	r3, #12
 8004a40:	f8ca 3000 	str.w	r3, [sl]
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a4a:	81a3      	strh	r3, [r4, #12]
 8004a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a54:	463a      	mov	r2, r7
 8004a56:	6921      	ldr	r1, [r4, #16]
 8004a58:	f7ff fb18 	bl	800408c <memcpy>
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a66:	81a3      	strh	r3, [r4, #12]
 8004a68:	6126      	str	r6, [r4, #16]
 8004a6a:	6165      	str	r5, [r4, #20]
 8004a6c:	443e      	add	r6, r7
 8004a6e:	1bed      	subs	r5, r5, r7
 8004a70:	6026      	str	r6, [r4, #0]
 8004a72:	60a5      	str	r5, [r4, #8]
 8004a74:	464e      	mov	r6, r9
 8004a76:	454e      	cmp	r6, r9
 8004a78:	d900      	bls.n	8004a7c <__ssputs_r+0x84>
 8004a7a:	464e      	mov	r6, r9
 8004a7c:	4632      	mov	r2, r6
 8004a7e:	4641      	mov	r1, r8
 8004a80:	6820      	ldr	r0, [r4, #0]
 8004a82:	f000 fc6d 	bl	8005360 <memmove>
 8004a86:	68a3      	ldr	r3, [r4, #8]
 8004a88:	1b9b      	subs	r3, r3, r6
 8004a8a:	60a3      	str	r3, [r4, #8]
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	441e      	add	r6, r3
 8004a90:	6026      	str	r6, [r4, #0]
 8004a92:	2000      	movs	r0, #0
 8004a94:	e7dc      	b.n	8004a50 <__ssputs_r+0x58>
 8004a96:	462a      	mov	r2, r5
 8004a98:	f000 fc7b 	bl	8005392 <_realloc_r>
 8004a9c:	4606      	mov	r6, r0
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d1e2      	bne.n	8004a68 <__ssputs_r+0x70>
 8004aa2:	6921      	ldr	r1, [r4, #16]
 8004aa4:	4650      	mov	r0, sl
 8004aa6:	f7ff fb05 	bl	80040b4 <_free_r>
 8004aaa:	e7c8      	b.n	8004a3e <__ssputs_r+0x46>

08004aac <_svfiprintf_r>:
 8004aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	461d      	mov	r5, r3
 8004ab2:	898b      	ldrh	r3, [r1, #12]
 8004ab4:	061f      	lsls	r7, r3, #24
 8004ab6:	b09d      	sub	sp, #116	; 0x74
 8004ab8:	4680      	mov	r8, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	4616      	mov	r6, r2
 8004abe:	d50f      	bpl.n	8004ae0 <_svfiprintf_r+0x34>
 8004ac0:	690b      	ldr	r3, [r1, #16]
 8004ac2:	b96b      	cbnz	r3, 8004ae0 <_svfiprintf_r+0x34>
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	f7ff fb43 	bl	8004150 <_malloc_r>
 8004aca:	6020      	str	r0, [r4, #0]
 8004acc:	6120      	str	r0, [r4, #16]
 8004ace:	b928      	cbnz	r0, 8004adc <_svfiprintf_r+0x30>
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	f8c8 3000 	str.w	r3, [r8]
 8004ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ada:	e0c8      	b.n	8004c6e <_svfiprintf_r+0x1c2>
 8004adc:	2340      	movs	r3, #64	; 0x40
 8004ade:	6163      	str	r3, [r4, #20]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae4:	2320      	movs	r3, #32
 8004ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004aea:	2330      	movs	r3, #48	; 0x30
 8004aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004af0:	9503      	str	r5, [sp, #12]
 8004af2:	f04f 0b01 	mov.w	fp, #1
 8004af6:	4637      	mov	r7, r6
 8004af8:	463d      	mov	r5, r7
 8004afa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004afe:	b10b      	cbz	r3, 8004b04 <_svfiprintf_r+0x58>
 8004b00:	2b25      	cmp	r3, #37	; 0x25
 8004b02:	d13e      	bne.n	8004b82 <_svfiprintf_r+0xd6>
 8004b04:	ebb7 0a06 	subs.w	sl, r7, r6
 8004b08:	d00b      	beq.n	8004b22 <_svfiprintf_r+0x76>
 8004b0a:	4653      	mov	r3, sl
 8004b0c:	4632      	mov	r2, r6
 8004b0e:	4621      	mov	r1, r4
 8004b10:	4640      	mov	r0, r8
 8004b12:	f7ff ff71 	bl	80049f8 <__ssputs_r>
 8004b16:	3001      	adds	r0, #1
 8004b18:	f000 80a4 	beq.w	8004c64 <_svfiprintf_r+0x1b8>
 8004b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1e:	4453      	add	r3, sl
 8004b20:	9309      	str	r3, [sp, #36]	; 0x24
 8004b22:	783b      	ldrb	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 809d 	beq.w	8004c64 <_svfiprintf_r+0x1b8>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b34:	9304      	str	r3, [sp, #16]
 8004b36:	9307      	str	r3, [sp, #28]
 8004b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b3e:	462f      	mov	r7, r5
 8004b40:	2205      	movs	r2, #5
 8004b42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004b46:	4850      	ldr	r0, [pc, #320]	; (8004c88 <_svfiprintf_r+0x1dc>)
 8004b48:	f7fb fb42 	bl	80001d0 <memchr>
 8004b4c:	9b04      	ldr	r3, [sp, #16]
 8004b4e:	b9d0      	cbnz	r0, 8004b86 <_svfiprintf_r+0xda>
 8004b50:	06d9      	lsls	r1, r3, #27
 8004b52:	bf44      	itt	mi
 8004b54:	2220      	movmi	r2, #32
 8004b56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b5a:	071a      	lsls	r2, r3, #28
 8004b5c:	bf44      	itt	mi
 8004b5e:	222b      	movmi	r2, #43	; 0x2b
 8004b60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b64:	782a      	ldrb	r2, [r5, #0]
 8004b66:	2a2a      	cmp	r2, #42	; 0x2a
 8004b68:	d015      	beq.n	8004b96 <_svfiprintf_r+0xea>
 8004b6a:	9a07      	ldr	r2, [sp, #28]
 8004b6c:	462f      	mov	r7, r5
 8004b6e:	2000      	movs	r0, #0
 8004b70:	250a      	movs	r5, #10
 8004b72:	4639      	mov	r1, r7
 8004b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b78:	3b30      	subs	r3, #48	; 0x30
 8004b7a:	2b09      	cmp	r3, #9
 8004b7c:	d94d      	bls.n	8004c1a <_svfiprintf_r+0x16e>
 8004b7e:	b1b8      	cbz	r0, 8004bb0 <_svfiprintf_r+0x104>
 8004b80:	e00f      	b.n	8004ba2 <_svfiprintf_r+0xf6>
 8004b82:	462f      	mov	r7, r5
 8004b84:	e7b8      	b.n	8004af8 <_svfiprintf_r+0x4c>
 8004b86:	4a40      	ldr	r2, [pc, #256]	; (8004c88 <_svfiprintf_r+0x1dc>)
 8004b88:	1a80      	subs	r0, r0, r2
 8004b8a:	fa0b f000 	lsl.w	r0, fp, r0
 8004b8e:	4318      	orrs	r0, r3
 8004b90:	9004      	str	r0, [sp, #16]
 8004b92:	463d      	mov	r5, r7
 8004b94:	e7d3      	b.n	8004b3e <_svfiprintf_r+0x92>
 8004b96:	9a03      	ldr	r2, [sp, #12]
 8004b98:	1d11      	adds	r1, r2, #4
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	9103      	str	r1, [sp, #12]
 8004b9e:	2a00      	cmp	r2, #0
 8004ba0:	db01      	blt.n	8004ba6 <_svfiprintf_r+0xfa>
 8004ba2:	9207      	str	r2, [sp, #28]
 8004ba4:	e004      	b.n	8004bb0 <_svfiprintf_r+0x104>
 8004ba6:	4252      	negs	r2, r2
 8004ba8:	f043 0302 	orr.w	r3, r3, #2
 8004bac:	9207      	str	r2, [sp, #28]
 8004bae:	9304      	str	r3, [sp, #16]
 8004bb0:	783b      	ldrb	r3, [r7, #0]
 8004bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8004bb4:	d10c      	bne.n	8004bd0 <_svfiprintf_r+0x124>
 8004bb6:	787b      	ldrb	r3, [r7, #1]
 8004bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bba:	d133      	bne.n	8004c24 <_svfiprintf_r+0x178>
 8004bbc:	9b03      	ldr	r3, [sp, #12]
 8004bbe:	1d1a      	adds	r2, r3, #4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	9203      	str	r2, [sp, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bfb8      	it	lt
 8004bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bcc:	3702      	adds	r7, #2
 8004bce:	9305      	str	r3, [sp, #20]
 8004bd0:	4d2e      	ldr	r5, [pc, #184]	; (8004c8c <_svfiprintf_r+0x1e0>)
 8004bd2:	7839      	ldrb	r1, [r7, #0]
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f7fb fafa 	bl	80001d0 <memchr>
 8004bdc:	b138      	cbz	r0, 8004bee <_svfiprintf_r+0x142>
 8004bde:	2340      	movs	r3, #64	; 0x40
 8004be0:	1b40      	subs	r0, r0, r5
 8004be2:	fa03 f000 	lsl.w	r0, r3, r0
 8004be6:	9b04      	ldr	r3, [sp, #16]
 8004be8:	4303      	orrs	r3, r0
 8004bea:	3701      	adds	r7, #1
 8004bec:	9304      	str	r3, [sp, #16]
 8004bee:	7839      	ldrb	r1, [r7, #0]
 8004bf0:	4827      	ldr	r0, [pc, #156]	; (8004c90 <_svfiprintf_r+0x1e4>)
 8004bf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bf6:	2206      	movs	r2, #6
 8004bf8:	1c7e      	adds	r6, r7, #1
 8004bfa:	f7fb fae9 	bl	80001d0 <memchr>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d038      	beq.n	8004c74 <_svfiprintf_r+0x1c8>
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <_svfiprintf_r+0x1e8>)
 8004c04:	bb13      	cbnz	r3, 8004c4c <_svfiprintf_r+0x1a0>
 8004c06:	9b03      	ldr	r3, [sp, #12]
 8004c08:	3307      	adds	r3, #7
 8004c0a:	f023 0307 	bic.w	r3, r3, #7
 8004c0e:	3308      	adds	r3, #8
 8004c10:	9303      	str	r3, [sp, #12]
 8004c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c14:	444b      	add	r3, r9
 8004c16:	9309      	str	r3, [sp, #36]	; 0x24
 8004c18:	e76d      	b.n	8004af6 <_svfiprintf_r+0x4a>
 8004c1a:	fb05 3202 	mla	r2, r5, r2, r3
 8004c1e:	2001      	movs	r0, #1
 8004c20:	460f      	mov	r7, r1
 8004c22:	e7a6      	b.n	8004b72 <_svfiprintf_r+0xc6>
 8004c24:	2300      	movs	r3, #0
 8004c26:	3701      	adds	r7, #1
 8004c28:	9305      	str	r3, [sp, #20]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	250a      	movs	r5, #10
 8004c2e:	4638      	mov	r0, r7
 8004c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c34:	3a30      	subs	r2, #48	; 0x30
 8004c36:	2a09      	cmp	r2, #9
 8004c38:	d903      	bls.n	8004c42 <_svfiprintf_r+0x196>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0c8      	beq.n	8004bd0 <_svfiprintf_r+0x124>
 8004c3e:	9105      	str	r1, [sp, #20]
 8004c40:	e7c6      	b.n	8004bd0 <_svfiprintf_r+0x124>
 8004c42:	fb05 2101 	mla	r1, r5, r1, r2
 8004c46:	2301      	movs	r3, #1
 8004c48:	4607      	mov	r7, r0
 8004c4a:	e7f0      	b.n	8004c2e <_svfiprintf_r+0x182>
 8004c4c:	ab03      	add	r3, sp, #12
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	4622      	mov	r2, r4
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <_svfiprintf_r+0x1ec>)
 8004c54:	a904      	add	r1, sp, #16
 8004c56:	4640      	mov	r0, r8
 8004c58:	f3af 8000 	nop.w
 8004c5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c60:	4681      	mov	r9, r0
 8004c62:	d1d6      	bne.n	8004c12 <_svfiprintf_r+0x166>
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	065b      	lsls	r3, r3, #25
 8004c68:	f53f af35 	bmi.w	8004ad6 <_svfiprintf_r+0x2a>
 8004c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c6e:	b01d      	add	sp, #116	; 0x74
 8004c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c74:	ab03      	add	r3, sp, #12
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	4622      	mov	r2, r4
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <_svfiprintf_r+0x1ec>)
 8004c7c:	a904      	add	r1, sp, #16
 8004c7e:	4640      	mov	r0, r8
 8004c80:	f000 f9c2 	bl	8005008 <_printf_i>
 8004c84:	e7ea      	b.n	8004c5c <_svfiprintf_r+0x1b0>
 8004c86:	bf00      	nop
 8004c88:	0800570c 	.word	0x0800570c
 8004c8c:	08005712 	.word	0x08005712
 8004c90:	08005716 	.word	0x08005716
 8004c94:	00000000 	.word	0x00000000
 8004c98:	080049f9 	.word	0x080049f9

08004c9c <__sfputc_r>:
 8004c9c:	6893      	ldr	r3, [r2, #8]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	b410      	push	{r4}
 8004ca4:	6093      	str	r3, [r2, #8]
 8004ca6:	da08      	bge.n	8004cba <__sfputc_r+0x1e>
 8004ca8:	6994      	ldr	r4, [r2, #24]
 8004caa:	42a3      	cmp	r3, r4
 8004cac:	db01      	blt.n	8004cb2 <__sfputc_r+0x16>
 8004cae:	290a      	cmp	r1, #10
 8004cb0:	d103      	bne.n	8004cba <__sfputc_r+0x1e>
 8004cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cb6:	f7ff bbff 	b.w	80044b8 <__swbuf_r>
 8004cba:	6813      	ldr	r3, [r2, #0]
 8004cbc:	1c58      	adds	r0, r3, #1
 8004cbe:	6010      	str	r0, [r2, #0]
 8004cc0:	7019      	strb	r1, [r3, #0]
 8004cc2:	4608      	mov	r0, r1
 8004cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <__sfputs_r>:
 8004cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ccc:	4606      	mov	r6, r0
 8004cce:	460f      	mov	r7, r1
 8004cd0:	4614      	mov	r4, r2
 8004cd2:	18d5      	adds	r5, r2, r3
 8004cd4:	42ac      	cmp	r4, r5
 8004cd6:	d101      	bne.n	8004cdc <__sfputs_r+0x12>
 8004cd8:	2000      	movs	r0, #0
 8004cda:	e007      	b.n	8004cec <__sfputs_r+0x22>
 8004cdc:	463a      	mov	r2, r7
 8004cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f7ff ffda 	bl	8004c9c <__sfputc_r>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d1f3      	bne.n	8004cd4 <__sfputs_r+0xa>
 8004cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cf0 <_vfiprintf_r>:
 8004cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	b09d      	sub	sp, #116	; 0x74
 8004cf8:	4617      	mov	r7, r2
 8004cfa:	461d      	mov	r5, r3
 8004cfc:	4606      	mov	r6, r0
 8004cfe:	b118      	cbz	r0, 8004d08 <_vfiprintf_r+0x18>
 8004d00:	6983      	ldr	r3, [r0, #24]
 8004d02:	b90b      	cbnz	r3, 8004d08 <_vfiprintf_r+0x18>
 8004d04:	f7ff fd88 	bl	8004818 <__sinit>
 8004d08:	4b7c      	ldr	r3, [pc, #496]	; (8004efc <_vfiprintf_r+0x20c>)
 8004d0a:	429c      	cmp	r4, r3
 8004d0c:	d158      	bne.n	8004dc0 <_vfiprintf_r+0xd0>
 8004d0e:	6874      	ldr	r4, [r6, #4]
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	0718      	lsls	r0, r3, #28
 8004d14:	d55e      	bpl.n	8004dd4 <_vfiprintf_r+0xe4>
 8004d16:	6923      	ldr	r3, [r4, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d05b      	beq.n	8004dd4 <_vfiprintf_r+0xe4>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d20:	2320      	movs	r3, #32
 8004d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d26:	2330      	movs	r3, #48	; 0x30
 8004d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d2c:	9503      	str	r5, [sp, #12]
 8004d2e:	f04f 0b01 	mov.w	fp, #1
 8004d32:	46b8      	mov	r8, r7
 8004d34:	4645      	mov	r5, r8
 8004d36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d3a:	b10b      	cbz	r3, 8004d40 <_vfiprintf_r+0x50>
 8004d3c:	2b25      	cmp	r3, #37	; 0x25
 8004d3e:	d154      	bne.n	8004dea <_vfiprintf_r+0xfa>
 8004d40:	ebb8 0a07 	subs.w	sl, r8, r7
 8004d44:	d00b      	beq.n	8004d5e <_vfiprintf_r+0x6e>
 8004d46:	4653      	mov	r3, sl
 8004d48:	463a      	mov	r2, r7
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	f7ff ffbc 	bl	8004cca <__sfputs_r>
 8004d52:	3001      	adds	r0, #1
 8004d54:	f000 80c2 	beq.w	8004edc <_vfiprintf_r+0x1ec>
 8004d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d5a:	4453      	add	r3, sl
 8004d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d5e:	f898 3000 	ldrb.w	r3, [r8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80ba 	beq.w	8004edc <_vfiprintf_r+0x1ec>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d72:	9304      	str	r3, [sp, #16]
 8004d74:	9307      	str	r3, [sp, #28]
 8004d76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d7a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d7c:	46a8      	mov	r8, r5
 8004d7e:	2205      	movs	r2, #5
 8004d80:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004d84:	485e      	ldr	r0, [pc, #376]	; (8004f00 <_vfiprintf_r+0x210>)
 8004d86:	f7fb fa23 	bl	80001d0 <memchr>
 8004d8a:	9b04      	ldr	r3, [sp, #16]
 8004d8c:	bb78      	cbnz	r0, 8004dee <_vfiprintf_r+0xfe>
 8004d8e:	06d9      	lsls	r1, r3, #27
 8004d90:	bf44      	itt	mi
 8004d92:	2220      	movmi	r2, #32
 8004d94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d98:	071a      	lsls	r2, r3, #28
 8004d9a:	bf44      	itt	mi
 8004d9c:	222b      	movmi	r2, #43	; 0x2b
 8004d9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004da2:	782a      	ldrb	r2, [r5, #0]
 8004da4:	2a2a      	cmp	r2, #42	; 0x2a
 8004da6:	d02a      	beq.n	8004dfe <_vfiprintf_r+0x10e>
 8004da8:	9a07      	ldr	r2, [sp, #28]
 8004daa:	46a8      	mov	r8, r5
 8004dac:	2000      	movs	r0, #0
 8004dae:	250a      	movs	r5, #10
 8004db0:	4641      	mov	r1, r8
 8004db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004db6:	3b30      	subs	r3, #48	; 0x30
 8004db8:	2b09      	cmp	r3, #9
 8004dba:	d969      	bls.n	8004e90 <_vfiprintf_r+0x1a0>
 8004dbc:	b360      	cbz	r0, 8004e18 <_vfiprintf_r+0x128>
 8004dbe:	e024      	b.n	8004e0a <_vfiprintf_r+0x11a>
 8004dc0:	4b50      	ldr	r3, [pc, #320]	; (8004f04 <_vfiprintf_r+0x214>)
 8004dc2:	429c      	cmp	r4, r3
 8004dc4:	d101      	bne.n	8004dca <_vfiprintf_r+0xda>
 8004dc6:	68b4      	ldr	r4, [r6, #8]
 8004dc8:	e7a2      	b.n	8004d10 <_vfiprintf_r+0x20>
 8004dca:	4b4f      	ldr	r3, [pc, #316]	; (8004f08 <_vfiprintf_r+0x218>)
 8004dcc:	429c      	cmp	r4, r3
 8004dce:	bf08      	it	eq
 8004dd0:	68f4      	ldreq	r4, [r6, #12]
 8004dd2:	e79d      	b.n	8004d10 <_vfiprintf_r+0x20>
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f7ff fbc0 	bl	800455c <__swsetup_r>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d09d      	beq.n	8004d1c <_vfiprintf_r+0x2c>
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295
 8004de4:	b01d      	add	sp, #116	; 0x74
 8004de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dea:	46a8      	mov	r8, r5
 8004dec:	e7a2      	b.n	8004d34 <_vfiprintf_r+0x44>
 8004dee:	4a44      	ldr	r2, [pc, #272]	; (8004f00 <_vfiprintf_r+0x210>)
 8004df0:	1a80      	subs	r0, r0, r2
 8004df2:	fa0b f000 	lsl.w	r0, fp, r0
 8004df6:	4318      	orrs	r0, r3
 8004df8:	9004      	str	r0, [sp, #16]
 8004dfa:	4645      	mov	r5, r8
 8004dfc:	e7be      	b.n	8004d7c <_vfiprintf_r+0x8c>
 8004dfe:	9a03      	ldr	r2, [sp, #12]
 8004e00:	1d11      	adds	r1, r2, #4
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	9103      	str	r1, [sp, #12]
 8004e06:	2a00      	cmp	r2, #0
 8004e08:	db01      	blt.n	8004e0e <_vfiprintf_r+0x11e>
 8004e0a:	9207      	str	r2, [sp, #28]
 8004e0c:	e004      	b.n	8004e18 <_vfiprintf_r+0x128>
 8004e0e:	4252      	negs	r2, r2
 8004e10:	f043 0302 	orr.w	r3, r3, #2
 8004e14:	9207      	str	r2, [sp, #28]
 8004e16:	9304      	str	r3, [sp, #16]
 8004e18:	f898 3000 	ldrb.w	r3, [r8]
 8004e1c:	2b2e      	cmp	r3, #46	; 0x2e
 8004e1e:	d10e      	bne.n	8004e3e <_vfiprintf_r+0x14e>
 8004e20:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004e24:	2b2a      	cmp	r3, #42	; 0x2a
 8004e26:	d138      	bne.n	8004e9a <_vfiprintf_r+0x1aa>
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	1d1a      	adds	r2, r3, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	9203      	str	r2, [sp, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bfb8      	it	lt
 8004e34:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e38:	f108 0802 	add.w	r8, r8, #2
 8004e3c:	9305      	str	r3, [sp, #20]
 8004e3e:	4d33      	ldr	r5, [pc, #204]	; (8004f0c <_vfiprintf_r+0x21c>)
 8004e40:	f898 1000 	ldrb.w	r1, [r8]
 8004e44:	2203      	movs	r2, #3
 8004e46:	4628      	mov	r0, r5
 8004e48:	f7fb f9c2 	bl	80001d0 <memchr>
 8004e4c:	b140      	cbz	r0, 8004e60 <_vfiprintf_r+0x170>
 8004e4e:	2340      	movs	r3, #64	; 0x40
 8004e50:	1b40      	subs	r0, r0, r5
 8004e52:	fa03 f000 	lsl.w	r0, r3, r0
 8004e56:	9b04      	ldr	r3, [sp, #16]
 8004e58:	4303      	orrs	r3, r0
 8004e5a:	f108 0801 	add.w	r8, r8, #1
 8004e5e:	9304      	str	r3, [sp, #16]
 8004e60:	f898 1000 	ldrb.w	r1, [r8]
 8004e64:	482a      	ldr	r0, [pc, #168]	; (8004f10 <_vfiprintf_r+0x220>)
 8004e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e6a:	2206      	movs	r2, #6
 8004e6c:	f108 0701 	add.w	r7, r8, #1
 8004e70:	f7fb f9ae 	bl	80001d0 <memchr>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d037      	beq.n	8004ee8 <_vfiprintf_r+0x1f8>
 8004e78:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <_vfiprintf_r+0x224>)
 8004e7a:	bb1b      	cbnz	r3, 8004ec4 <_vfiprintf_r+0x1d4>
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	3307      	adds	r3, #7
 8004e80:	f023 0307 	bic.w	r3, r3, #7
 8004e84:	3308      	adds	r3, #8
 8004e86:	9303      	str	r3, [sp, #12]
 8004e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e8a:	444b      	add	r3, r9
 8004e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8e:	e750      	b.n	8004d32 <_vfiprintf_r+0x42>
 8004e90:	fb05 3202 	mla	r2, r5, r2, r3
 8004e94:	2001      	movs	r0, #1
 8004e96:	4688      	mov	r8, r1
 8004e98:	e78a      	b.n	8004db0 <_vfiprintf_r+0xc0>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f108 0801 	add.w	r8, r8, #1
 8004ea0:	9305      	str	r3, [sp, #20]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	250a      	movs	r5, #10
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eac:	3a30      	subs	r2, #48	; 0x30
 8004eae:	2a09      	cmp	r2, #9
 8004eb0:	d903      	bls.n	8004eba <_vfiprintf_r+0x1ca>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0c3      	beq.n	8004e3e <_vfiprintf_r+0x14e>
 8004eb6:	9105      	str	r1, [sp, #20]
 8004eb8:	e7c1      	b.n	8004e3e <_vfiprintf_r+0x14e>
 8004eba:	fb05 2101 	mla	r1, r5, r1, r2
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	e7f0      	b.n	8004ea6 <_vfiprintf_r+0x1b6>
 8004ec4:	ab03      	add	r3, sp, #12
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	4622      	mov	r2, r4
 8004eca:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <_vfiprintf_r+0x228>)
 8004ecc:	a904      	add	r1, sp, #16
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f3af 8000 	nop.w
 8004ed4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ed8:	4681      	mov	r9, r0
 8004eda:	d1d5      	bne.n	8004e88 <_vfiprintf_r+0x198>
 8004edc:	89a3      	ldrh	r3, [r4, #12]
 8004ede:	065b      	lsls	r3, r3, #25
 8004ee0:	f53f af7e 	bmi.w	8004de0 <_vfiprintf_r+0xf0>
 8004ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ee6:	e77d      	b.n	8004de4 <_vfiprintf_r+0xf4>
 8004ee8:	ab03      	add	r3, sp, #12
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	4622      	mov	r2, r4
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <_vfiprintf_r+0x228>)
 8004ef0:	a904      	add	r1, sp, #16
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f000 f888 	bl	8005008 <_printf_i>
 8004ef8:	e7ec      	b.n	8004ed4 <_vfiprintf_r+0x1e4>
 8004efa:	bf00      	nop
 8004efc:	080056cc 	.word	0x080056cc
 8004f00:	0800570c 	.word	0x0800570c
 8004f04:	080056ec 	.word	0x080056ec
 8004f08:	080056ac 	.word	0x080056ac
 8004f0c:	08005712 	.word	0x08005712
 8004f10:	08005716 	.word	0x08005716
 8004f14:	00000000 	.word	0x00000000
 8004f18:	08004ccb 	.word	0x08004ccb

08004f1c <_printf_common>:
 8004f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f20:	4691      	mov	r9, r2
 8004f22:	461f      	mov	r7, r3
 8004f24:	688a      	ldr	r2, [r1, #8]
 8004f26:	690b      	ldr	r3, [r1, #16]
 8004f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	bfb8      	it	lt
 8004f30:	4613      	movlt	r3, r2
 8004f32:	f8c9 3000 	str.w	r3, [r9]
 8004f36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	b112      	cbz	r2, 8004f46 <_printf_common+0x2a>
 8004f40:	3301      	adds	r3, #1
 8004f42:	f8c9 3000 	str.w	r3, [r9]
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	0699      	lsls	r1, r3, #26
 8004f4a:	bf42      	ittt	mi
 8004f4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f50:	3302      	addmi	r3, #2
 8004f52:	f8c9 3000 	strmi.w	r3, [r9]
 8004f56:	6825      	ldr	r5, [r4, #0]
 8004f58:	f015 0506 	ands.w	r5, r5, #6
 8004f5c:	d107      	bne.n	8004f6e <_printf_common+0x52>
 8004f5e:	f104 0a19 	add.w	sl, r4, #25
 8004f62:	68e3      	ldr	r3, [r4, #12]
 8004f64:	f8d9 2000 	ldr.w	r2, [r9]
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	42ab      	cmp	r3, r5
 8004f6c:	dc28      	bgt.n	8004fc0 <_printf_common+0xa4>
 8004f6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f72:	6822      	ldr	r2, [r4, #0]
 8004f74:	3300      	adds	r3, #0
 8004f76:	bf18      	it	ne
 8004f78:	2301      	movne	r3, #1
 8004f7a:	0692      	lsls	r2, r2, #26
 8004f7c:	d42d      	bmi.n	8004fda <_printf_common+0xbe>
 8004f7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f82:	4639      	mov	r1, r7
 8004f84:	4630      	mov	r0, r6
 8004f86:	47c0      	blx	r8
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d020      	beq.n	8004fce <_printf_common+0xb2>
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	68e5      	ldr	r5, [r4, #12]
 8004f90:	f8d9 2000 	ldr.w	r2, [r9]
 8004f94:	f003 0306 	and.w	r3, r3, #6
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	bf08      	it	eq
 8004f9c:	1aad      	subeq	r5, r5, r2
 8004f9e:	68a3      	ldr	r3, [r4, #8]
 8004fa0:	6922      	ldr	r2, [r4, #16]
 8004fa2:	bf0c      	ite	eq
 8004fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fa8:	2500      	movne	r5, #0
 8004faa:	4293      	cmp	r3, r2
 8004fac:	bfc4      	itt	gt
 8004fae:	1a9b      	subgt	r3, r3, r2
 8004fb0:	18ed      	addgt	r5, r5, r3
 8004fb2:	f04f 0900 	mov.w	r9, #0
 8004fb6:	341a      	adds	r4, #26
 8004fb8:	454d      	cmp	r5, r9
 8004fba:	d11a      	bne.n	8004ff2 <_printf_common+0xd6>
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	e008      	b.n	8004fd2 <_printf_common+0xb6>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	4652      	mov	r2, sl
 8004fc4:	4639      	mov	r1, r7
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	47c0      	blx	r8
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d103      	bne.n	8004fd6 <_printf_common+0xba>
 8004fce:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd6:	3501      	adds	r5, #1
 8004fd8:	e7c3      	b.n	8004f62 <_printf_common+0x46>
 8004fda:	18e1      	adds	r1, r4, r3
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	2030      	movs	r0, #48	; 0x30
 8004fe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fe4:	4422      	add	r2, r4
 8004fe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fee:	3302      	adds	r3, #2
 8004ff0:	e7c5      	b.n	8004f7e <_printf_common+0x62>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	4622      	mov	r2, r4
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	47c0      	blx	r8
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d0e6      	beq.n	8004fce <_printf_common+0xb2>
 8005000:	f109 0901 	add.w	r9, r9, #1
 8005004:	e7d8      	b.n	8004fb8 <_printf_common+0x9c>
	...

08005008 <_printf_i>:
 8005008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800500c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005010:	460c      	mov	r4, r1
 8005012:	7e09      	ldrb	r1, [r1, #24]
 8005014:	b085      	sub	sp, #20
 8005016:	296e      	cmp	r1, #110	; 0x6e
 8005018:	4617      	mov	r7, r2
 800501a:	4606      	mov	r6, r0
 800501c:	4698      	mov	r8, r3
 800501e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005020:	f000 80b3 	beq.w	800518a <_printf_i+0x182>
 8005024:	d822      	bhi.n	800506c <_printf_i+0x64>
 8005026:	2963      	cmp	r1, #99	; 0x63
 8005028:	d036      	beq.n	8005098 <_printf_i+0x90>
 800502a:	d80a      	bhi.n	8005042 <_printf_i+0x3a>
 800502c:	2900      	cmp	r1, #0
 800502e:	f000 80b9 	beq.w	80051a4 <_printf_i+0x19c>
 8005032:	2958      	cmp	r1, #88	; 0x58
 8005034:	f000 8083 	beq.w	800513e <_printf_i+0x136>
 8005038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800503c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005040:	e032      	b.n	80050a8 <_printf_i+0xa0>
 8005042:	2964      	cmp	r1, #100	; 0x64
 8005044:	d001      	beq.n	800504a <_printf_i+0x42>
 8005046:	2969      	cmp	r1, #105	; 0x69
 8005048:	d1f6      	bne.n	8005038 <_printf_i+0x30>
 800504a:	6820      	ldr	r0, [r4, #0]
 800504c:	6813      	ldr	r3, [r2, #0]
 800504e:	0605      	lsls	r5, r0, #24
 8005050:	f103 0104 	add.w	r1, r3, #4
 8005054:	d52a      	bpl.n	80050ac <_printf_i+0xa4>
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6011      	str	r1, [r2, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	da03      	bge.n	8005066 <_printf_i+0x5e>
 800505e:	222d      	movs	r2, #45	; 0x2d
 8005060:	425b      	negs	r3, r3
 8005062:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005066:	486f      	ldr	r0, [pc, #444]	; (8005224 <_printf_i+0x21c>)
 8005068:	220a      	movs	r2, #10
 800506a:	e039      	b.n	80050e0 <_printf_i+0xd8>
 800506c:	2973      	cmp	r1, #115	; 0x73
 800506e:	f000 809d 	beq.w	80051ac <_printf_i+0x1a4>
 8005072:	d808      	bhi.n	8005086 <_printf_i+0x7e>
 8005074:	296f      	cmp	r1, #111	; 0x6f
 8005076:	d020      	beq.n	80050ba <_printf_i+0xb2>
 8005078:	2970      	cmp	r1, #112	; 0x70
 800507a:	d1dd      	bne.n	8005038 <_printf_i+0x30>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	f043 0320 	orr.w	r3, r3, #32
 8005082:	6023      	str	r3, [r4, #0]
 8005084:	e003      	b.n	800508e <_printf_i+0x86>
 8005086:	2975      	cmp	r1, #117	; 0x75
 8005088:	d017      	beq.n	80050ba <_printf_i+0xb2>
 800508a:	2978      	cmp	r1, #120	; 0x78
 800508c:	d1d4      	bne.n	8005038 <_printf_i+0x30>
 800508e:	2378      	movs	r3, #120	; 0x78
 8005090:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005094:	4864      	ldr	r0, [pc, #400]	; (8005228 <_printf_i+0x220>)
 8005096:	e055      	b.n	8005144 <_printf_i+0x13c>
 8005098:	6813      	ldr	r3, [r2, #0]
 800509a:	1d19      	adds	r1, r3, #4
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6011      	str	r1, [r2, #0]
 80050a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050a8:	2301      	movs	r3, #1
 80050aa:	e08c      	b.n	80051c6 <_printf_i+0x1be>
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6011      	str	r1, [r2, #0]
 80050b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050b4:	bf18      	it	ne
 80050b6:	b21b      	sxthne	r3, r3
 80050b8:	e7cf      	b.n	800505a <_printf_i+0x52>
 80050ba:	6813      	ldr	r3, [r2, #0]
 80050bc:	6825      	ldr	r5, [r4, #0]
 80050be:	1d18      	adds	r0, r3, #4
 80050c0:	6010      	str	r0, [r2, #0]
 80050c2:	0628      	lsls	r0, r5, #24
 80050c4:	d501      	bpl.n	80050ca <_printf_i+0xc2>
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	e002      	b.n	80050d0 <_printf_i+0xc8>
 80050ca:	0668      	lsls	r0, r5, #25
 80050cc:	d5fb      	bpl.n	80050c6 <_printf_i+0xbe>
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	4854      	ldr	r0, [pc, #336]	; (8005224 <_printf_i+0x21c>)
 80050d2:	296f      	cmp	r1, #111	; 0x6f
 80050d4:	bf14      	ite	ne
 80050d6:	220a      	movne	r2, #10
 80050d8:	2208      	moveq	r2, #8
 80050da:	2100      	movs	r1, #0
 80050dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050e0:	6865      	ldr	r5, [r4, #4]
 80050e2:	60a5      	str	r5, [r4, #8]
 80050e4:	2d00      	cmp	r5, #0
 80050e6:	f2c0 8095 	blt.w	8005214 <_printf_i+0x20c>
 80050ea:	6821      	ldr	r1, [r4, #0]
 80050ec:	f021 0104 	bic.w	r1, r1, #4
 80050f0:	6021      	str	r1, [r4, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d13d      	bne.n	8005172 <_printf_i+0x16a>
 80050f6:	2d00      	cmp	r5, #0
 80050f8:	f040 808e 	bne.w	8005218 <_printf_i+0x210>
 80050fc:	4665      	mov	r5, ip
 80050fe:	2a08      	cmp	r2, #8
 8005100:	d10b      	bne.n	800511a <_printf_i+0x112>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	07db      	lsls	r3, r3, #31
 8005106:	d508      	bpl.n	800511a <_printf_i+0x112>
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	6862      	ldr	r2, [r4, #4]
 800510c:	429a      	cmp	r2, r3
 800510e:	bfde      	ittt	le
 8005110:	2330      	movle	r3, #48	; 0x30
 8005112:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005116:	f105 35ff 	addle.w	r5, r5, #4294967295
 800511a:	ebac 0305 	sub.w	r3, ip, r5
 800511e:	6123      	str	r3, [r4, #16]
 8005120:	f8cd 8000 	str.w	r8, [sp]
 8005124:	463b      	mov	r3, r7
 8005126:	aa03      	add	r2, sp, #12
 8005128:	4621      	mov	r1, r4
 800512a:	4630      	mov	r0, r6
 800512c:	f7ff fef6 	bl	8004f1c <_printf_common>
 8005130:	3001      	adds	r0, #1
 8005132:	d14d      	bne.n	80051d0 <_printf_i+0x1c8>
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	b005      	add	sp, #20
 800513a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800513e:	4839      	ldr	r0, [pc, #228]	; (8005224 <_printf_i+0x21c>)
 8005140:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005144:	6813      	ldr	r3, [r2, #0]
 8005146:	6821      	ldr	r1, [r4, #0]
 8005148:	1d1d      	adds	r5, r3, #4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6015      	str	r5, [r2, #0]
 800514e:	060a      	lsls	r2, r1, #24
 8005150:	d50b      	bpl.n	800516a <_printf_i+0x162>
 8005152:	07ca      	lsls	r2, r1, #31
 8005154:	bf44      	itt	mi
 8005156:	f041 0120 	orrmi.w	r1, r1, #32
 800515a:	6021      	strmi	r1, [r4, #0]
 800515c:	b91b      	cbnz	r3, 8005166 <_printf_i+0x15e>
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	f022 0220 	bic.w	r2, r2, #32
 8005164:	6022      	str	r2, [r4, #0]
 8005166:	2210      	movs	r2, #16
 8005168:	e7b7      	b.n	80050da <_printf_i+0xd2>
 800516a:	064d      	lsls	r5, r1, #25
 800516c:	bf48      	it	mi
 800516e:	b29b      	uxthmi	r3, r3
 8005170:	e7ef      	b.n	8005152 <_printf_i+0x14a>
 8005172:	4665      	mov	r5, ip
 8005174:	fbb3 f1f2 	udiv	r1, r3, r2
 8005178:	fb02 3311 	mls	r3, r2, r1, r3
 800517c:	5cc3      	ldrb	r3, [r0, r3]
 800517e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005182:	460b      	mov	r3, r1
 8005184:	2900      	cmp	r1, #0
 8005186:	d1f5      	bne.n	8005174 <_printf_i+0x16c>
 8005188:	e7b9      	b.n	80050fe <_printf_i+0xf6>
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	6825      	ldr	r5, [r4, #0]
 800518e:	6961      	ldr	r1, [r4, #20]
 8005190:	1d18      	adds	r0, r3, #4
 8005192:	6010      	str	r0, [r2, #0]
 8005194:	0628      	lsls	r0, r5, #24
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	d501      	bpl.n	800519e <_printf_i+0x196>
 800519a:	6019      	str	r1, [r3, #0]
 800519c:	e002      	b.n	80051a4 <_printf_i+0x19c>
 800519e:	066a      	lsls	r2, r5, #25
 80051a0:	d5fb      	bpl.n	800519a <_printf_i+0x192>
 80051a2:	8019      	strh	r1, [r3, #0]
 80051a4:	2300      	movs	r3, #0
 80051a6:	6123      	str	r3, [r4, #16]
 80051a8:	4665      	mov	r5, ip
 80051aa:	e7b9      	b.n	8005120 <_printf_i+0x118>
 80051ac:	6813      	ldr	r3, [r2, #0]
 80051ae:	1d19      	adds	r1, r3, #4
 80051b0:	6011      	str	r1, [r2, #0]
 80051b2:	681d      	ldr	r5, [r3, #0]
 80051b4:	6862      	ldr	r2, [r4, #4]
 80051b6:	2100      	movs	r1, #0
 80051b8:	4628      	mov	r0, r5
 80051ba:	f7fb f809 	bl	80001d0 <memchr>
 80051be:	b108      	cbz	r0, 80051c4 <_printf_i+0x1bc>
 80051c0:	1b40      	subs	r0, r0, r5
 80051c2:	6060      	str	r0, [r4, #4]
 80051c4:	6863      	ldr	r3, [r4, #4]
 80051c6:	6123      	str	r3, [r4, #16]
 80051c8:	2300      	movs	r3, #0
 80051ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ce:	e7a7      	b.n	8005120 <_printf_i+0x118>
 80051d0:	6923      	ldr	r3, [r4, #16]
 80051d2:	462a      	mov	r2, r5
 80051d4:	4639      	mov	r1, r7
 80051d6:	4630      	mov	r0, r6
 80051d8:	47c0      	blx	r8
 80051da:	3001      	adds	r0, #1
 80051dc:	d0aa      	beq.n	8005134 <_printf_i+0x12c>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	079b      	lsls	r3, r3, #30
 80051e2:	d413      	bmi.n	800520c <_printf_i+0x204>
 80051e4:	68e0      	ldr	r0, [r4, #12]
 80051e6:	9b03      	ldr	r3, [sp, #12]
 80051e8:	4298      	cmp	r0, r3
 80051ea:	bfb8      	it	lt
 80051ec:	4618      	movlt	r0, r3
 80051ee:	e7a3      	b.n	8005138 <_printf_i+0x130>
 80051f0:	2301      	movs	r3, #1
 80051f2:	464a      	mov	r2, r9
 80051f4:	4639      	mov	r1, r7
 80051f6:	4630      	mov	r0, r6
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d09a      	beq.n	8005134 <_printf_i+0x12c>
 80051fe:	3501      	adds	r5, #1
 8005200:	68e3      	ldr	r3, [r4, #12]
 8005202:	9a03      	ldr	r2, [sp, #12]
 8005204:	1a9b      	subs	r3, r3, r2
 8005206:	42ab      	cmp	r3, r5
 8005208:	dcf2      	bgt.n	80051f0 <_printf_i+0x1e8>
 800520a:	e7eb      	b.n	80051e4 <_printf_i+0x1dc>
 800520c:	2500      	movs	r5, #0
 800520e:	f104 0919 	add.w	r9, r4, #25
 8005212:	e7f5      	b.n	8005200 <_printf_i+0x1f8>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ac      	bne.n	8005172 <_printf_i+0x16a>
 8005218:	7803      	ldrb	r3, [r0, #0]
 800521a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800521e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005222:	e76c      	b.n	80050fe <_printf_i+0xf6>
 8005224:	0800571d 	.word	0x0800571d
 8005228:	0800572e 	.word	0x0800572e

0800522c <__sread>:
 800522c:	b510      	push	{r4, lr}
 800522e:	460c      	mov	r4, r1
 8005230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005234:	f000 f8d4 	bl	80053e0 <_read_r>
 8005238:	2800      	cmp	r0, #0
 800523a:	bfab      	itete	ge
 800523c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800523e:	89a3      	ldrhlt	r3, [r4, #12]
 8005240:	181b      	addge	r3, r3, r0
 8005242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005246:	bfac      	ite	ge
 8005248:	6563      	strge	r3, [r4, #84]	; 0x54
 800524a:	81a3      	strhlt	r3, [r4, #12]
 800524c:	bd10      	pop	{r4, pc}

0800524e <__swrite>:
 800524e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005252:	461f      	mov	r7, r3
 8005254:	898b      	ldrh	r3, [r1, #12]
 8005256:	05db      	lsls	r3, r3, #23
 8005258:	4605      	mov	r5, r0
 800525a:	460c      	mov	r4, r1
 800525c:	4616      	mov	r6, r2
 800525e:	d505      	bpl.n	800526c <__swrite+0x1e>
 8005260:	2302      	movs	r3, #2
 8005262:	2200      	movs	r2, #0
 8005264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005268:	f000 f868 	bl	800533c <_lseek_r>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005276:	81a3      	strh	r3, [r4, #12]
 8005278:	4632      	mov	r2, r6
 800527a:	463b      	mov	r3, r7
 800527c:	4628      	mov	r0, r5
 800527e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005282:	f000 b817 	b.w	80052b4 <_write_r>

08005286 <__sseek>:
 8005286:	b510      	push	{r4, lr}
 8005288:	460c      	mov	r4, r1
 800528a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528e:	f000 f855 	bl	800533c <_lseek_r>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	89a3      	ldrh	r3, [r4, #12]
 8005296:	bf15      	itete	ne
 8005298:	6560      	strne	r0, [r4, #84]	; 0x54
 800529a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800529e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052a2:	81a3      	strheq	r3, [r4, #12]
 80052a4:	bf18      	it	ne
 80052a6:	81a3      	strhne	r3, [r4, #12]
 80052a8:	bd10      	pop	{r4, pc}

080052aa <__sclose>:
 80052aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ae:	f000 b813 	b.w	80052d8 <_close_r>
	...

080052b4 <_write_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4c07      	ldr	r4, [pc, #28]	; (80052d4 <_write_r+0x20>)
 80052b8:	4605      	mov	r5, r0
 80052ba:	4608      	mov	r0, r1
 80052bc:	4611      	mov	r1, r2
 80052be:	2200      	movs	r2, #0
 80052c0:	6022      	str	r2, [r4, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f7fe f8b0 	bl	8003428 <_write>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	d102      	bne.n	80052d2 <_write_r+0x1e>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	b103      	cbz	r3, 80052d2 <_write_r+0x1e>
 80052d0:	602b      	str	r3, [r5, #0]
 80052d2:	bd38      	pop	{r3, r4, r5, pc}
 80052d4:	20000a7c 	.word	0x20000a7c

080052d8 <_close_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4c06      	ldr	r4, [pc, #24]	; (80052f4 <_close_r+0x1c>)
 80052dc:	2300      	movs	r3, #0
 80052de:	4605      	mov	r5, r0
 80052e0:	4608      	mov	r0, r1
 80052e2:	6023      	str	r3, [r4, #0]
 80052e4:	f7fe f8cc 	bl	8003480 <_close>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_close_r+0x1a>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_close_r+0x1a>
 80052f0:	602b      	str	r3, [r5, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	20000a7c 	.word	0x20000a7c

080052f8 <_fstat_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4c07      	ldr	r4, [pc, #28]	; (8005318 <_fstat_r+0x20>)
 80052fc:	2300      	movs	r3, #0
 80052fe:	4605      	mov	r5, r0
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	f7fe f90b 	bl	8003520 <_fstat>
 800530a:	1c43      	adds	r3, r0, #1
 800530c:	d102      	bne.n	8005314 <_fstat_r+0x1c>
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	b103      	cbz	r3, 8005314 <_fstat_r+0x1c>
 8005312:	602b      	str	r3, [r5, #0]
 8005314:	bd38      	pop	{r3, r4, r5, pc}
 8005316:	bf00      	nop
 8005318:	20000a7c 	.word	0x20000a7c

0800531c <_isatty_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4c06      	ldr	r4, [pc, #24]	; (8005338 <_isatty_r+0x1c>)
 8005320:	2300      	movs	r3, #0
 8005322:	4605      	mov	r5, r0
 8005324:	4608      	mov	r0, r1
 8005326:	6023      	str	r3, [r4, #0]
 8005328:	f7fe f868 	bl	80033fc <_isatty>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_isatty_r+0x1a>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	b103      	cbz	r3, 8005336 <_isatty_r+0x1a>
 8005334:	602b      	str	r3, [r5, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	20000a7c 	.word	0x20000a7c

0800533c <_lseek_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4c07      	ldr	r4, [pc, #28]	; (800535c <_lseek_r+0x20>)
 8005340:	4605      	mov	r5, r0
 8005342:	4608      	mov	r0, r1
 8005344:	4611      	mov	r1, r2
 8005346:	2200      	movs	r2, #0
 8005348:	6022      	str	r2, [r4, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	f7fe f8af 	bl	80034ae <_lseek>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_lseek_r+0x1e>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	b103      	cbz	r3, 800535a <_lseek_r+0x1e>
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	20000a7c 	.word	0x20000a7c

08005360 <memmove>:
 8005360:	4288      	cmp	r0, r1
 8005362:	b510      	push	{r4, lr}
 8005364:	eb01 0302 	add.w	r3, r1, r2
 8005368:	d807      	bhi.n	800537a <memmove+0x1a>
 800536a:	1e42      	subs	r2, r0, #1
 800536c:	4299      	cmp	r1, r3
 800536e:	d00a      	beq.n	8005386 <memmove+0x26>
 8005370:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005374:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005378:	e7f8      	b.n	800536c <memmove+0xc>
 800537a:	4283      	cmp	r3, r0
 800537c:	d9f5      	bls.n	800536a <memmove+0xa>
 800537e:	1881      	adds	r1, r0, r2
 8005380:	1ad2      	subs	r2, r2, r3
 8005382:	42d3      	cmn	r3, r2
 8005384:	d100      	bne.n	8005388 <memmove+0x28>
 8005386:	bd10      	pop	{r4, pc}
 8005388:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800538c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005390:	e7f7      	b.n	8005382 <memmove+0x22>

08005392 <_realloc_r>:
 8005392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005394:	4607      	mov	r7, r0
 8005396:	4614      	mov	r4, r2
 8005398:	460e      	mov	r6, r1
 800539a:	b921      	cbnz	r1, 80053a6 <_realloc_r+0x14>
 800539c:	4611      	mov	r1, r2
 800539e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053a2:	f7fe bed5 	b.w	8004150 <_malloc_r>
 80053a6:	b922      	cbnz	r2, 80053b2 <_realloc_r+0x20>
 80053a8:	f7fe fe84 	bl	80040b4 <_free_r>
 80053ac:	4625      	mov	r5, r4
 80053ae:	4628      	mov	r0, r5
 80053b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b2:	f000 f827 	bl	8005404 <_malloc_usable_size_r>
 80053b6:	42a0      	cmp	r0, r4
 80053b8:	d20f      	bcs.n	80053da <_realloc_r+0x48>
 80053ba:	4621      	mov	r1, r4
 80053bc:	4638      	mov	r0, r7
 80053be:	f7fe fec7 	bl	8004150 <_malloc_r>
 80053c2:	4605      	mov	r5, r0
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d0f2      	beq.n	80053ae <_realloc_r+0x1c>
 80053c8:	4631      	mov	r1, r6
 80053ca:	4622      	mov	r2, r4
 80053cc:	f7fe fe5e 	bl	800408c <memcpy>
 80053d0:	4631      	mov	r1, r6
 80053d2:	4638      	mov	r0, r7
 80053d4:	f7fe fe6e 	bl	80040b4 <_free_r>
 80053d8:	e7e9      	b.n	80053ae <_realloc_r+0x1c>
 80053da:	4635      	mov	r5, r6
 80053dc:	e7e7      	b.n	80053ae <_realloc_r+0x1c>
	...

080053e0 <_read_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4c07      	ldr	r4, [pc, #28]	; (8005400 <_read_r+0x20>)
 80053e4:	4605      	mov	r5, r0
 80053e6:	4608      	mov	r0, r1
 80053e8:	4611      	mov	r1, r2
 80053ea:	2200      	movs	r2, #0
 80053ec:	6022      	str	r2, [r4, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f7fe f86e 	bl	80034d0 <_read>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_read_r+0x1e>
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_read_r+0x1e>
 80053fc:	602b      	str	r3, [r5, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	20000a7c 	.word	0x20000a7c

08005404 <_malloc_usable_size_r>:
 8005404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005408:	1f18      	subs	r0, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	bfbc      	itt	lt
 800540e:	580b      	ldrlt	r3, [r1, r0]
 8005410:	18c0      	addlt	r0, r0, r3
 8005412:	4770      	bx	lr

08005414 <_init>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr

08005420 <_fini>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr

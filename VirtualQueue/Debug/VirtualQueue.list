
VirtualQueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000466c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004848  08004848  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004848  08004848  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004848  08004848  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  0800485c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  0800485c  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e895  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001efc  00000000  00000000  0002e8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d00  00000000  00000000  000307d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf8  00000000  00000000  000314d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026c17  00000000  00000000  000320c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a8e9  00000000  00000000  00058cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ebeba  00000000  00000000  000635c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f482  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a4  00000000  00000000  0014f500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080047dc 	.word	0x080047dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080047dc 	.word	0x080047dc

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f940 	bl	8000458 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f004 f92f 	bl	800444c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <HAL_InitTick+0x6c>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d023      	beq.n	8000254 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800020c:	4b16      	ldr	r3, [pc, #88]	; (8000268 <HAL_InitTick+0x70>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <HAL_InitTick+0x6c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f93f 	bl	80004a6 <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d10f      	bne.n	800024e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d809      	bhi.n	8000248 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800023c:	f000 f917 	bl	800046e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <HAL_InitTick+0x74>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
 8000246:	e007      	b.n	8000258 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000248:	2301      	movs	r3, #1
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e004      	b.n	8000258 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024e:	2301      	movs	r3, #1
 8000250:	73fb      	strb	r3, [r7, #15]
 8000252:	e001      	b.n	8000258 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000258:	7bfb      	ldrb	r3, [r7, #15]
}
 800025a:	4618      	mov	r0, r3
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004
 8000268:	20000008 	.word	0x20000008
 800026c:	20000000 	.word	0x20000000

08000270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_IncTick+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_IncTick+0x24>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4413      	add	r3, r2
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <HAL_IncTick+0x24>)
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	2000002c 	.word	0x2000002c

08000298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <HAL_GetTick+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	2000002c 	.word	0x2000002c

080002b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff ffee 	bl	8000298 <HAL_GetTick>
 80002bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002c8:	d005      	beq.n	80002d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <HAL_Delay+0x40>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	4413      	add	r3, r2
 80002d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002d6:	bf00      	nop
 80002d8:	f7ff ffde 	bl	8000298 <HAL_GetTick>
 80002dc:	4602      	mov	r2, r0
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d8f7      	bhi.n	80002d8 <HAL_Delay+0x28>
  {
  }
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000004 	.word	0x20000004

080002f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f003 0307 	and.w	r3, r3, #7
 8000302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <__NVIC_SetPriorityGrouping+0x44>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030a:	68ba      	ldr	r2, [r7, #8]
 800030c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000310:	4013      	ands	r3, r2
 8000312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800031c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000326:	4a04      	ldr	r2, [pc, #16]	; (8000338 <__NVIC_SetPriorityGrouping+0x44>)
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	60d3      	str	r3, [r2, #12]
}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <__NVIC_GetPriorityGrouping+0x18>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	f003 0307 	and.w	r3, r3, #7
}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	6039      	str	r1, [r7, #0]
 8000362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000368:	2b00      	cmp	r3, #0
 800036a:	db0a      	blt.n	8000382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	b2da      	uxtb	r2, r3
 8000370:	490c      	ldr	r1, [pc, #48]	; (80003a4 <__NVIC_SetPriority+0x4c>)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	0112      	lsls	r2, r2, #4
 8000378:	b2d2      	uxtb	r2, r2
 800037a:	440b      	add	r3, r1
 800037c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000380:	e00a      	b.n	8000398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	b2da      	uxtb	r2, r3
 8000386:	4908      	ldr	r1, [pc, #32]	; (80003a8 <__NVIC_SetPriority+0x50>)
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	f003 030f 	and.w	r3, r3, #15
 800038e:	3b04      	subs	r3, #4
 8000390:	0112      	lsls	r2, r2, #4
 8000392:	b2d2      	uxtb	r2, r2
 8000394:	440b      	add	r3, r1
 8000396:	761a      	strb	r2, [r3, #24]
}
 8000398:	bf00      	nop
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	e000e100 	.word	0xe000e100
 80003a8:	e000ed00 	.word	0xe000ed00

080003ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b089      	sub	sp, #36	; 0x24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f003 0307 	and.w	r3, r3, #7
 80003be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003c0:	69fb      	ldr	r3, [r7, #28]
 80003c2:	f1c3 0307 	rsb	r3, r3, #7
 80003c6:	2b04      	cmp	r3, #4
 80003c8:	bf28      	it	cs
 80003ca:	2304      	movcs	r3, #4
 80003cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003ce:	69fb      	ldr	r3, [r7, #28]
 80003d0:	3304      	adds	r3, #4
 80003d2:	2b06      	cmp	r3, #6
 80003d4:	d902      	bls.n	80003dc <NVIC_EncodePriority+0x30>
 80003d6:	69fb      	ldr	r3, [r7, #28]
 80003d8:	3b03      	subs	r3, #3
 80003da:	e000      	b.n	80003de <NVIC_EncodePriority+0x32>
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003e4:	69bb      	ldr	r3, [r7, #24]
 80003e6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ea:	43da      	mvns	r2, r3
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	401a      	ands	r2, r3
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	fa01 f303 	lsl.w	r3, r1, r3
 80003fe:	43d9      	mvns	r1, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000404:	4313      	orrs	r3, r2
         );
}
 8000406:	4618      	mov	r0, r3
 8000408:	3724      	adds	r7, #36	; 0x24
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
	...

08000414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3b01      	subs	r3, #1
 8000420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000424:	d301      	bcc.n	800042a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000426:	2301      	movs	r3, #1
 8000428:	e00f      	b.n	800044a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800042a:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <SysTick_Config+0x40>)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3b01      	subs	r3, #1
 8000430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000432:	210f      	movs	r1, #15
 8000434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000438:	f7ff ff8e 	bl	8000358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <SysTick_Config+0x40>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000442:	4b04      	ldr	r3, [pc, #16]	; (8000454 <SysTick_Config+0x40>)
 8000444:	2207      	movs	r2, #7
 8000446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000448:	2300      	movs	r3, #0
}
 800044a:	4618      	mov	r0, r3
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	e000e010 	.word	0xe000e010

08000458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f7ff ff47 	bl	80002f4 <__NVIC_SetPriorityGrouping>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b086      	sub	sp, #24
 8000472:	af00      	add	r7, sp, #0
 8000474:	4603      	mov	r3, r0
 8000476:	60b9      	str	r1, [r7, #8]
 8000478:	607a      	str	r2, [r7, #4]
 800047a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000480:	f7ff ff5c 	bl	800033c <__NVIC_GetPriorityGrouping>
 8000484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	68b9      	ldr	r1, [r7, #8]
 800048a:	6978      	ldr	r0, [r7, #20]
 800048c:	f7ff ff8e 	bl	80003ac <NVIC_EncodePriority>
 8000490:	4602      	mov	r2, r0
 8000492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000496:	4611      	mov	r1, r2
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff5d 	bl	8000358 <__NVIC_SetPriority>
}
 800049e:	bf00      	nop
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b082      	sub	sp, #8
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f7ff ffb0 	bl	8000414 <SysTick_Config>
 80004b4:	4603      	mov	r3, r0
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b087      	sub	sp, #28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004ce:	e17f      	b.n	80007d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	2101      	movs	r1, #1
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	f000 8171 	beq.w	80007ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d00b      	beq.n	8000508 <HAL_GPIO_Init+0x48>
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d007      	beq.n	8000508 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004fc:	2b11      	cmp	r3, #17
 80004fe:	d003      	beq.n	8000508 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	2b12      	cmp	r3, #18
 8000506:	d130      	bne.n	800056a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	2203      	movs	r2, #3
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	693a      	ldr	r2, [r7, #16]
 800051c:	4013      	ands	r3, r2
 800051e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	68da      	ldr	r2, [r3, #12]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	693a      	ldr	r2, [r7, #16]
 800052e:	4313      	orrs	r3, r2
 8000530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	693a      	ldr	r2, [r7, #16]
 8000536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800053e:	2201      	movs	r2, #1
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	43db      	mvns	r3, r3
 8000548:	693a      	ldr	r2, [r7, #16]
 800054a:	4013      	ands	r3, r2
 800054c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	091b      	lsrs	r3, r3, #4
 8000554:	f003 0201 	and.w	r2, r3, #1
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	fa02 f303 	lsl.w	r3, r2, r3
 800055e:	693a      	ldr	r2, [r7, #16]
 8000560:	4313      	orrs	r3, r2
 8000562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	693a      	ldr	r2, [r7, #16]
 8000568:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	f003 0303 	and.w	r3, r3, #3
 8000572:	2b03      	cmp	r3, #3
 8000574:	d118      	bne.n	80005a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800057c:	2201      	movs	r2, #1
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	4013      	ands	r3, r2
 800058a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	08db      	lsrs	r3, r3, #3
 8000592:	f003 0201 	and.w	r2, r3, #1
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	4313      	orrs	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	2203      	movs	r2, #3
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	43db      	mvns	r3, r3
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	4013      	ands	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	689a      	ldr	r2, [r3, #8]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	693a      	ldr	r2, [r7, #16]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	693a      	ldr	r2, [r7, #16]
 80005d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d003      	beq.n	80005e8 <HAL_GPIO_Init+0x128>
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	2b12      	cmp	r3, #18
 80005e6:	d123      	bne.n	8000630 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	08da      	lsrs	r2, r3, #3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3208      	adds	r2, #8
 80005f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	f003 0307 	and.w	r3, r3, #7
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	220f      	movs	r2, #15
 8000600:	fa02 f303 	lsl.w	r3, r2, r3
 8000604:	43db      	mvns	r3, r3
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	4013      	ands	r3, r2
 800060a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	691a      	ldr	r2, [r3, #16]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	693a      	ldr	r2, [r7, #16]
 800061e:	4313      	orrs	r3, r2
 8000620:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	08da      	lsrs	r2, r3, #3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3208      	adds	r2, #8
 800062a:	6939      	ldr	r1, [r7, #16]
 800062c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	2203      	movs	r2, #3
 800063c:	fa02 f303 	lsl.w	r3, r2, r3
 8000640:	43db      	mvns	r3, r3
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	4013      	ands	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	f003 0203 	and.w	r2, r3, #3
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	fa02 f303 	lsl.w	r3, r2, r3
 8000658:	693a      	ldr	r2, [r7, #16]
 800065a:	4313      	orrs	r3, r2
 800065c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	2b00      	cmp	r3, #0
 800066e:	f000 80ac 	beq.w	80007ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	4b5e      	ldr	r3, [pc, #376]	; (80007ec <HAL_GPIO_Init+0x32c>)
 8000674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000676:	4a5d      	ldr	r2, [pc, #372]	; (80007ec <HAL_GPIO_Init+0x32c>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6613      	str	r3, [r2, #96]	; 0x60
 800067e:	4b5b      	ldr	r3, [pc, #364]	; (80007ec <HAL_GPIO_Init+0x32c>)
 8000680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800068a:	4a59      	ldr	r2, [pc, #356]	; (80007f0 <HAL_GPIO_Init+0x330>)
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	089b      	lsrs	r3, r3, #2
 8000690:	3302      	adds	r3, #2
 8000692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000696:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	f003 0303 	and.w	r3, r3, #3
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	220f      	movs	r2, #15
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	43db      	mvns	r3, r3
 80006a8:	693a      	ldr	r2, [r7, #16]
 80006aa:	4013      	ands	r3, r2
 80006ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006b4:	d025      	beq.n	8000702 <HAL_GPIO_Init+0x242>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a4e      	ldr	r2, [pc, #312]	; (80007f4 <HAL_GPIO_Init+0x334>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d01f      	beq.n	80006fe <HAL_GPIO_Init+0x23e>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a4d      	ldr	r2, [pc, #308]	; (80007f8 <HAL_GPIO_Init+0x338>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d019      	beq.n	80006fa <HAL_GPIO_Init+0x23a>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a4c      	ldr	r2, [pc, #304]	; (80007fc <HAL_GPIO_Init+0x33c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d013      	beq.n	80006f6 <HAL_GPIO_Init+0x236>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a4b      	ldr	r2, [pc, #300]	; (8000800 <HAL_GPIO_Init+0x340>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d00d      	beq.n	80006f2 <HAL_GPIO_Init+0x232>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a4a      	ldr	r2, [pc, #296]	; (8000804 <HAL_GPIO_Init+0x344>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d007      	beq.n	80006ee <HAL_GPIO_Init+0x22e>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a49      	ldr	r2, [pc, #292]	; (8000808 <HAL_GPIO_Init+0x348>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d101      	bne.n	80006ea <HAL_GPIO_Init+0x22a>
 80006e6:	2306      	movs	r3, #6
 80006e8:	e00c      	b.n	8000704 <HAL_GPIO_Init+0x244>
 80006ea:	2307      	movs	r3, #7
 80006ec:	e00a      	b.n	8000704 <HAL_GPIO_Init+0x244>
 80006ee:	2305      	movs	r3, #5
 80006f0:	e008      	b.n	8000704 <HAL_GPIO_Init+0x244>
 80006f2:	2304      	movs	r3, #4
 80006f4:	e006      	b.n	8000704 <HAL_GPIO_Init+0x244>
 80006f6:	2303      	movs	r3, #3
 80006f8:	e004      	b.n	8000704 <HAL_GPIO_Init+0x244>
 80006fa:	2302      	movs	r3, #2
 80006fc:	e002      	b.n	8000704 <HAL_GPIO_Init+0x244>
 80006fe:	2301      	movs	r3, #1
 8000700:	e000      	b.n	8000704 <HAL_GPIO_Init+0x244>
 8000702:	2300      	movs	r3, #0
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	f002 0203 	and.w	r2, r2, #3
 800070a:	0092      	lsls	r2, r2, #2
 800070c:	4093      	lsls	r3, r2
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	4313      	orrs	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000714:	4936      	ldr	r1, [pc, #216]	; (80007f0 <HAL_GPIO_Init+0x330>)
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	089b      	lsrs	r3, r3, #2
 800071a:	3302      	adds	r3, #2
 800071c:	693a      	ldr	r2, [r7, #16]
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <HAL_GPIO_Init+0x34c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	43db      	mvns	r3, r3
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	4013      	ands	r3, r2
 8000730:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800073a:	2b00      	cmp	r3, #0
 800073c:	d003      	beq.n	8000746 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800073e:	693a      	ldr	r2, [r7, #16]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4313      	orrs	r3, r2
 8000744:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000746:	4a31      	ldr	r2, [pc, #196]	; (800080c <HAL_GPIO_Init+0x34c>)
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800074c:	4b2f      	ldr	r3, [pc, #188]	; (800080c <HAL_GPIO_Init+0x34c>)
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	43db      	mvns	r3, r3
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	4013      	ands	r3, r2
 800075a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000768:	693a      	ldr	r2, [r7, #16]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4313      	orrs	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000770:	4a26      	ldr	r2, [pc, #152]	; (800080c <HAL_GPIO_Init+0x34c>)
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <HAL_GPIO_Init+0x34c>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	43db      	mvns	r3, r3
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	4013      	ands	r3, r2
 8000784:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d003      	beq.n	800079a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4313      	orrs	r3, r2
 8000798:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <HAL_GPIO_Init+0x34c>)
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <HAL_GPIO_Init+0x34c>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	43db      	mvns	r3, r3
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	4013      	ands	r3, r2
 80007ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d003      	beq.n	80007c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80007bc:	693a      	ldr	r2, [r7, #16]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80007c4:	4a11      	ldr	r2, [pc, #68]	; (800080c <HAL_GPIO_Init+0x34c>)
 80007c6:	693b      	ldr	r3, [r7, #16]
 80007c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3301      	adds	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	fa22 f303 	lsr.w	r3, r2, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	f47f ae78 	bne.w	80004d0 <HAL_GPIO_Init+0x10>
  }
}
 80007e0:	bf00      	nop
 80007e2:	371c      	adds	r7, #28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40010000 	.word	0x40010000
 80007f4:	48000400 	.word	0x48000400
 80007f8:	48000800 	.word	0x48000800
 80007fc:	48000c00 	.word	0x48000c00
 8000800:	48001000 	.word	0x48001000
 8000804:	48001400 	.word	0x48001400
 8000808:	48001800 	.word	0x48001800
 800080c:	40010400 	.word	0x40010400

08000810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	807b      	strh	r3, [r7, #2]
 800081c:	4613      	mov	r3, r2
 800081e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000820:	787b      	ldrb	r3, [r7, #1]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000826:	887a      	ldrh	r2, [r7, #2]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800082c:	e002      	b.n	8000834 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800082e:	887a      	ldrh	r2, [r7, #2]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e081      	b.n	8000956 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d106      	bne.n	800086c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f003 fe14 	bl	8004494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2224      	movs	r2, #36	; 0x24
 8000870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f022 0201 	bic.w	r2, r2, #1
 8000882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000890:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	689a      	ldr	r2, [r3, #8]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80008a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d107      	bne.n	80008ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689a      	ldr	r2, [r3, #8]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	e006      	b.n	80008c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80008c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d104      	bne.n	80008da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	68da      	ldr	r2, [r3, #12]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80008fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	691a      	ldr	r2, [r3, #16]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	ea42 0103 	orr.w	r1, r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	021a      	lsls	r2, r3, #8
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	430a      	orrs	r2, r1
 8000916:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69d9      	ldr	r1, [r3, #28]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a1a      	ldr	r2, [r3, #32]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	430a      	orrs	r2, r1
 8000926:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f042 0201 	orr.w	r2, r2, #1
 8000936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2220      	movs	r2, #32
 8000942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b20      	cmp	r3, #32
 8000972:	d138      	bne.n	80009e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800097a:	2b01      	cmp	r3, #1
 800097c:	d101      	bne.n	8000982 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800097e:	2302      	movs	r3, #2
 8000980:	e032      	b.n	80009e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2201      	movs	r2, #1
 8000986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2224      	movs	r2, #36	; 0x24
 800098e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f022 0201 	bic.w	r2, r2, #1
 80009a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	6819      	ldr	r1, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	430a      	orrs	r2, r1
 80009c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f042 0201 	orr.w	r2, r2, #1
 80009d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2220      	movs	r2, #32
 80009d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e000      	b.n	80009e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80009e6:	2302      	movs	r3, #2
  }
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b20      	cmp	r3, #32
 8000a08:	d139      	bne.n	8000a7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d101      	bne.n	8000a18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000a14:	2302      	movs	r3, #2
 8000a16:	e033      	b.n	8000a80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2224      	movs	r2, #36	; 0x24
 8000a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f022 0201 	bic.w	r2, r2, #1
 8000a36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	021b      	lsls	r3, r3, #8
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f042 0201 	orr.w	r2, r2, #1
 8000a68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2220      	movs	r2, #32
 8000a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000a7e:	2302      	movs	r3, #2
  }
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e0af      	b.n	8000bfe <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d106      	bne.n	8000ab8 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f003 fd32 	bl	800451c <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2202      	movs	r2, #2
 8000abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f022 0201 	bic.w	r2, r2, #1
 8000ace:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e00a      	b.n	8000aec <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3304      	adds	r3, #4
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	d9f1      	bls.n	8000ad6 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f042 0204 	orr.w	r2, r2, #4
 8000b00:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685a      	ldr	r2, [r3, #4]
 8000b08:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <HAL_LCD_Init+0x17c>)
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	6851      	ldr	r1, [r2, #4]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	6892      	ldr	r2, [r2, #8]
 8000b14:	4311      	orrs	r1, r2
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b20:	4311      	orrs	r1, r2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	69d2      	ldr	r2, [r2, #28]
 8000b26:	4311      	orrs	r1, r2
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	6a12      	ldr	r2, [r2, #32]
 8000b2c:	4311      	orrs	r1, r2
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	6992      	ldr	r2, [r2, #24]
 8000b32:	4311      	orrs	r1, r2
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000b38:	4311      	orrs	r1, r2
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	6812      	ldr	r2, [r2, #0]
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f8f1 	bl	8000d2a <LCD_WaitForSynchro>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8000b4c:	7cfb      	ldrb	r3, [r7, #19]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_LCD_Init+0xca>
  {
    return status;
 8000b52:	7cfb      	ldrb	r3, [r7, #19]
 8000b54:	e053      	b.n	8000bfe <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	431a      	orrs	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f042 0201 	orr.w	r2, r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000b8e:	f7ff fb83 	bl	8000298 <HAL_GetTick>
 8000b92:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000b94:	e00c      	b.n	8000bb0 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000b96:	f7ff fb7f 	bl	8000298 <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ba4:	d904      	bls.n	8000bb0 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2208      	movs	r2, #8
 8000baa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000bac:	2303      	movs	r3, #3
 8000bae:	e026      	b.n	8000bfe <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d1eb      	bne.n	8000b96 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000bbe:	f7ff fb6b 	bl	8000298 <HAL_GetTick>
 8000bc2:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000bc4:	e00c      	b.n	8000be0 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000bc6:	f7ff fb67 	bl	8000298 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bd4:	d904      	bls.n	8000be0 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2210      	movs	r2, #16
 8000bda:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e00e      	b.n	8000bfe <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	2b10      	cmp	r3, #16
 8000bec:	d1eb      	bne.n	8000bc6 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 8000bfc:	7cfb      	ldrb	r3, [r7, #19]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	fc00000e 	.word	0xfc00000e

08000c0c <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c1e:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8000c20:	7cbb      	ldrb	r3, [r7, #18]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d002      	beq.n	8000c2c <HAL_LCD_Clear+0x20>
 8000c26:	7cbb      	ldrb	r3, [r7, #18]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d140      	bne.n	8000cae <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d101      	bne.n	8000c3a <HAL_LCD_Clear+0x2e>
 8000c36:	2302      	movs	r3, #2
 8000c38:	e03a      	b.n	8000cb0 <HAL_LCD_Clear+0xa4>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2202      	movs	r2, #2
 8000c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8000c4a:	f7ff fb25 	bl	8000298 <HAL_GetTick>
 8000c4e:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000c50:	e010      	b.n	8000c74 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000c52:	f7ff fb21 	bl	8000298 <HAL_GetTick>
 8000c56:	4602      	mov	r2, r0
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c60:	d908      	bls.n	8000c74 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2202      	movs	r2, #2
 8000c66:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e01d      	b.n	8000cb0 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d0e7      	beq.n	8000c52 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e00a      	b.n	8000c9e <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3304      	adds	r3, #4
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d9f1      	bls.n	8000c88 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f807 	bl	8000cb8 <HAL_LCD_UpdateDisplayRequest>
 8000caa:	4603      	mov	r3, r0
 8000cac:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8000cae:	7cfb      	ldrb	r3, [r7, #19]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0204 	orr.w	r2, r2, #4
 8000cd6:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000cd8:	f7ff fade 	bl	8000298 <HAL_GetTick>
 8000cdc:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000cde:	e010      	b.n	8000d02 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000ce0:	f7ff fada 	bl	8000298 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cee:	d908      	bls.n	8000d02 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e00f      	b.n	8000d22 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	2b08      	cmp	r3, #8
 8000d0e:	d1e7      	bne.n	8000ce0 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000d32:	f7ff fab1 	bl	8000298 <HAL_GetTick>
 8000d36:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000d38:	e00c      	b.n	8000d54 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000d3a:	f7ff faad 	bl	8000298 <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d48:	d904      	bls.n	8000d54 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e007      	b.n	8000d64 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 0320 	and.w	r3, r3, #32
 8000d5e:	2b20      	cmp	r3, #32
 8000d60:	d1eb      	bne.n	8000d3a <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40007000 	.word	0x40007000

08000d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d96:	d130      	bne.n	8000dfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000da4:	d038      	beq.n	8000e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da6:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dae:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2232      	movs	r2, #50	; 0x32
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	0c9b      	lsrs	r3, r3, #18
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dcc:	e002      	b.n	8000dd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de0:	d102      	bne.n	8000de8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1f2      	bne.n	8000dce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000df4:	d110      	bne.n	8000e18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e00f      	b.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e06:	d007      	beq.n	8000e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e10:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40007000 	.word	0x40007000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	431bde83 	.word	0x431bde83

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e3d4      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e46:	4ba1      	ldr	r3, [pc, #644]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f003 030c 	and.w	r3, r3, #12
 8000e4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e50:	4b9e      	ldr	r3, [pc, #632]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 80e4 	beq.w	8001030 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d007      	beq.n	8000e7e <HAL_RCC_OscConfig+0x4a>
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	2b0c      	cmp	r3, #12
 8000e72:	f040 808b 	bne.w	8000f8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	f040 8087 	bne.w	8000f8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e7e:	4b93      	ldr	r3, [pc, #588]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d005      	beq.n	8000e96 <HAL_RCC_OscConfig+0x62>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e3ac      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a1a      	ldr	r2, [r3, #32]
 8000e9a:	4b8c      	ldr	r3, [pc, #560]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x7c>
 8000ea6:	4b89      	ldr	r3, [pc, #548]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eae:	e005      	b.n	8000ebc <HAL_RCC_OscConfig+0x88>
 8000eb0:	4b86      	ldr	r3, [pc, #536]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d223      	bcs.n	8000f08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fd07 	bl	80018d8 <RCC_SetFlashLatencyFromMSIRange>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e38d      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ed4:	4b7d      	ldr	r3, [pc, #500]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a7c      	ldr	r2, [pc, #496]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b7a      	ldr	r3, [pc, #488]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4977      	ldr	r1, [pc, #476]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ef2:	4b76      	ldr	r3, [pc, #472]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	4972      	ldr	r1, [pc, #456]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	604b      	str	r3, [r1, #4]
 8000f06:	e025      	b.n	8000f54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f08:	4b70      	ldr	r3, [pc, #448]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a6f      	ldr	r2, [pc, #444]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f0e:	f043 0308 	orr.w	r3, r3, #8
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b6d      	ldr	r3, [pc, #436]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	496a      	ldr	r1, [pc, #424]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f26:	4b69      	ldr	r3, [pc, #420]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	4965      	ldr	r1, [pc, #404]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d109      	bne.n	8000f54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fcc7 	bl	80018d8 <RCC_SetFlashLatencyFromMSIRange>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e34d      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f54:	f000 fc36 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 8000f58:	4601      	mov	r1, r0
 8000f5a:	4b5c      	ldr	r3, [pc, #368]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	f003 030f 	and.w	r3, r3, #15
 8000f64:	4a5a      	ldr	r2, [pc, #360]	; (80010d0 <HAL_RCC_OscConfig+0x29c>)
 8000f66:	5cd3      	ldrb	r3, [r2, r3]
 8000f68:	f003 031f 	and.w	r3, r3, #31
 8000f6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f70:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <HAL_RCC_OscConfig+0x2a0>)
 8000f72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f74:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff f93d 	bl	80001f8 <HAL_InitTick>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d052      	beq.n	800102e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	e331      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d032      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a4c      	ldr	r2, [pc, #304]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff f97a 	bl	8000298 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fa8:	f7ff f976 	bl	8000298 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e31a      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fba:	4b44      	ldr	r3, [pc, #272]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fc6:	4b41      	ldr	r3, [pc, #260]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a40      	ldr	r2, [pc, #256]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	493b      	ldr	r1, [pc, #236]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fe4:	4b39      	ldr	r3, [pc, #228]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	4936      	ldr	r1, [pc, #216]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
 8000ff8:	e01a      	b.n	8001030 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ffa:	4b34      	ldr	r3, [pc, #208]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a33      	ldr	r2, [pc, #204]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8001000:	f023 0301 	bic.w	r3, r3, #1
 8001004:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001006:	f7ff f947 	bl	8000298 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800100e:	f7ff f943 	bl	8000298 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e2e7      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001020:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f0      	bne.n	800100e <HAL_RCC_OscConfig+0x1da>
 800102c:	e000      	b.n	8001030 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800102e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b00      	cmp	r3, #0
 800103a:	d074      	beq.n	8001126 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b08      	cmp	r3, #8
 8001040:	d005      	beq.n	800104e <HAL_RCC_OscConfig+0x21a>
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2b0c      	cmp	r3, #12
 8001046:	d10e      	bne.n	8001066 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d10b      	bne.n	8001066 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d064      	beq.n	8001124 <HAL_RCC_OscConfig+0x2f0>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d160      	bne.n	8001124 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e2c4      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106e:	d106      	bne.n	800107e <HAL_RCC_OscConfig+0x24a>
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a15      	ldr	r2, [pc, #84]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8001076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e01d      	b.n	80010ba <HAL_RCC_OscConfig+0x286>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001086:	d10c      	bne.n	80010a2 <HAL_RCC_OscConfig+0x26e>
 8001088:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 800108e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 800109a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e00b      	b.n	80010ba <HAL_RCC_OscConfig+0x286>
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a09      	ldr	r2, [pc, #36]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 80010a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 80010b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d01c      	beq.n	80010fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c2:	f7ff f8e9 	bl	8000298 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c8:	e011      	b.n	80010ee <HAL_RCC_OscConfig+0x2ba>
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	08004808 	.word	0x08004808
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010dc:	f7ff f8dc 	bl	8000298 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b64      	cmp	r3, #100	; 0x64
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e280      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ee:	4baf      	ldr	r3, [pc, #700]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f0      	beq.n	80010dc <HAL_RCC_OscConfig+0x2a8>
 80010fa:	e014      	b.n	8001126 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fc:	f7ff f8cc 	bl	8000298 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff f8c8 	bl	8000298 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b64      	cmp	r3, #100	; 0x64
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e26c      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001116:	4ba5      	ldr	r3, [pc, #660]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x2d0>
 8001122:	e000      	b.n	8001126 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d060      	beq.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	2b04      	cmp	r3, #4
 8001136:	d005      	beq.n	8001144 <HAL_RCC_OscConfig+0x310>
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2b0c      	cmp	r3, #12
 800113c:	d119      	bne.n	8001172 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d116      	bne.n	8001172 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001144:	4b99      	ldr	r3, [pc, #612]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_RCC_OscConfig+0x328>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e249      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115c:	4b93      	ldr	r3, [pc, #588]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	061b      	lsls	r3, r3, #24
 800116a:	4990      	ldr	r1, [pc, #576]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001170:	e040      	b.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d023      	beq.n	80011c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800117a:	4b8c      	ldr	r3, [pc, #560]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a8b      	ldr	r2, [pc, #556]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 8001180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001186:	f7ff f887 	bl	8000298 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff f883 	bl	8000298 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e227      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011a0:	4b82      	ldr	r3, [pc, #520]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f0      	beq.n	800118e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ac:	4b7f      	ldr	r3, [pc, #508]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	061b      	lsls	r3, r3, #24
 80011ba:	497c      	ldr	r1, [pc, #496]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
 80011c0:	e018      	b.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c2:	4b7a      	ldr	r3, [pc, #488]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a79      	ldr	r2, [pc, #484]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 80011c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ce:	f7ff f863 	bl	8000298 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d6:	f7ff f85f 	bl	8000298 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e203      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011e8:	4b70      	ldr	r3, [pc, #448]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f0      	bne.n	80011d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d03c      	beq.n	800127a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d01c      	beq.n	8001242 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001208:	4b68      	ldr	r3, [pc, #416]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800120a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800120e:	4a67      	ldr	r2, [pc, #412]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001218:	f7ff f83e 	bl	8000298 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001220:	f7ff f83a 	bl	8000298 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e1de      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001232:	4b5e      	ldr	r3, [pc, #376]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 8001234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0ef      	beq.n	8001220 <HAL_RCC_OscConfig+0x3ec>
 8001240:	e01b      	b.n	800127a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001242:	4b5a      	ldr	r3, [pc, #360]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 8001244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001248:	4a58      	ldr	r2, [pc, #352]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001252:	f7ff f821 	bl	8000298 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125a:	f7ff f81d 	bl	8000298 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e1c1      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800126c:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800126e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1ef      	bne.n	800125a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 80a6 	beq.w	80013d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800128c:	4b47      	ldr	r3, [pc, #284]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10d      	bne.n	80012b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	4b44      	ldr	r3, [pc, #272]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	4a43      	ldr	r2, [pc, #268]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800129e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a2:	6593      	str	r3, [r2, #88]	; 0x58
 80012a4:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 80012a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012b0:	2301      	movs	r3, #1
 80012b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b4:	4b3e      	ldr	r3, [pc, #248]	; (80013b0 <HAL_RCC_OscConfig+0x57c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d118      	bne.n	80012f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012c0:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <HAL_RCC_OscConfig+0x57c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a3a      	ldr	r2, [pc, #232]	; (80013b0 <HAL_RCC_OscConfig+0x57c>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012cc:	f7fe ffe4 	bl	8000298 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d4:	f7fe ffe0 	bl	8000298 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e184      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e6:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <HAL_RCC_OscConfig+0x57c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d108      	bne.n	800130c <HAL_RCC_OscConfig+0x4d8>
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 80012fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001300:	4a2a      	ldr	r2, [pc, #168]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800130a:	e024      	b.n	8001356 <HAL_RCC_OscConfig+0x522>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2b05      	cmp	r3, #5
 8001312:	d110      	bne.n	8001336 <HAL_RCC_OscConfig+0x502>
 8001314:	4b25      	ldr	r3, [pc, #148]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 8001316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131a:	4a24      	ldr	r2, [pc, #144]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 8001326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800132a:	4a20      	ldr	r2, [pc, #128]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001334:	e00f      	b.n	8001356 <HAL_RCC_OscConfig+0x522>
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 8001338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 8001348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800134e:	f023 0304 	bic.w	r3, r3, #4
 8001352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d016      	beq.n	800138c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135e:	f7fe ff9b 	bl	8000298 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7fe ff97 	bl	8000298 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e139      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_OscConfig+0x578>)
 800137e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0ed      	beq.n	8001366 <HAL_RCC_OscConfig+0x532>
 800138a:	e01a      	b.n	80013c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7fe ff84 	bl	8000298 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001392:	e00f      	b.n	80013b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7fe ff80 	bl	8000298 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d906      	bls.n	80013b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e122      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013b4:	4b90      	ldr	r3, [pc, #576]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80013b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1e8      	bne.n	8001394 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013c2:	7ffb      	ldrb	r3, [r7, #31]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d105      	bne.n	80013d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c8:	4b8b      	ldr	r3, [pc, #556]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013cc:	4a8a      	ldr	r2, [pc, #552]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80013ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 8108 	beq.w	80015ee <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	f040 80d0 	bne.w	8001588 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80013e8:	4b83      	ldr	r3, [pc, #524]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0203 	and.w	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d130      	bne.n	800145e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	3b01      	subs	r3, #1
 8001408:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800140a:	429a      	cmp	r2, r3
 800140c:	d127      	bne.n	800145e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800141a:	429a      	cmp	r2, r3
 800141c:	d11f      	bne.n	800145e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001428:	2a07      	cmp	r2, #7
 800142a:	bf14      	ite	ne
 800142c:	2201      	movne	r2, #1
 800142e:	2200      	moveq	r2, #0
 8001430:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001432:	4293      	cmp	r3, r2
 8001434:	d113      	bne.n	800145e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001440:	085b      	lsrs	r3, r3, #1
 8001442:	3b01      	subs	r3, #1
 8001444:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001446:	429a      	cmp	r2, r3
 8001448:	d109      	bne.n	800145e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	3b01      	subs	r3, #1
 8001458:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800145a:	429a      	cmp	r2, r3
 800145c:	d06e      	beq.n	800153c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	2b0c      	cmp	r3, #12
 8001462:	d069      	beq.n	8001538 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001464:	4b64      	ldr	r3, [pc, #400]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d105      	bne.n	800147c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001470:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0b7      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001480:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a5c      	ldr	r2, [pc, #368]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 8001486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800148a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800148c:	f7fe ff04 	bl	8000298 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001494:	f7fe ff00 	bl	8000298 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e0a4      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a6:	4b54      	ldr	r3, [pc, #336]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b2:	4b51      	ldr	r3, [pc, #324]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	4b51      	ldr	r3, [pc, #324]	; (80015fc <HAL_RCC_OscConfig+0x7c8>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014c2:	3a01      	subs	r2, #1
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	4311      	orrs	r1, r2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014cc:	0212      	lsls	r2, r2, #8
 80014ce:	4311      	orrs	r1, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014d4:	0852      	lsrs	r2, r2, #1
 80014d6:	3a01      	subs	r2, #1
 80014d8:	0552      	lsls	r2, r2, #21
 80014da:	4311      	orrs	r1, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014e0:	0852      	lsrs	r2, r2, #1
 80014e2:	3a01      	subs	r2, #1
 80014e4:	0652      	lsls	r2, r2, #25
 80014e6:	4311      	orrs	r1, r2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014ec:	0912      	lsrs	r2, r2, #4
 80014ee:	0452      	lsls	r2, r2, #17
 80014f0:	430a      	orrs	r2, r1
 80014f2:	4941      	ldr	r1, [pc, #260]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80014f8:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a3e      	ldr	r2, [pc, #248]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80014fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001502:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001504:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4a3b      	ldr	r2, [pc, #236]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 800150a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800150e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001510:	f7fe fec2 	bl	8000298 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001518:	f7fe febe 	bl	8000298 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e062      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001536:	e05a      	b.n	80015ee <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e059      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d152      	bne.n	80015ee <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 800154e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001552:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 800155a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001560:	f7fe fe9a 	bl	8000298 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001568:	f7fe fe96 	bl	8000298 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e03a      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x734>
 8001586:	e032      	b.n	80015ee <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b0c      	cmp	r3, #12
 800158c:	d02d      	beq.n	80015ea <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 8001594:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001598:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d105      	bne.n	80015b2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80015ac:	f023 0303 	bic.w	r3, r3, #3
 80015b0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80015b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80015bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7fe fe69 	bl	8000298 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ca:	f7fe fe65 	bl	8000298 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e009      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_RCC_OscConfig+0x7c4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x796>
 80015e8:	e001      	b.n	80015ee <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	f99d808c 	.word	0xf99d808c

08001600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0c8      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001614:	4b66      	ldr	r3, [pc, #408]	; (80017b0 <HAL_RCC_ClockConfig+0x1b0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d910      	bls.n	8001644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b63      	ldr	r3, [pc, #396]	; (80017b0 <HAL_RCC_ClockConfig+0x1b0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 0207 	bic.w	r2, r3, #7
 800162a:	4961      	ldr	r1, [pc, #388]	; (80017b0 <HAL_RCC_ClockConfig+0x1b0>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b5f      	ldr	r3, [pc, #380]	; (80017b0 <HAL_RCC_ClockConfig+0x1b0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0b0      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b00      	cmp	r3, #0
 800164e:	d04c      	beq.n	80016ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d107      	bne.n	8001668 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001658:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d121      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e09e      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d107      	bne.n	8001680 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001670:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d115      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e092      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001688:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d109      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e086      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001698:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e07e      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016a8:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 0203 	bic.w	r2, r3, #3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	493f      	ldr	r1, [pc, #252]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016ba:	f7fe fded 	bl	8000298 <HAL_GetTick>
 80016be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c2:	f7fe fde9 	bl	8000298 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e066      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d8:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 020c 	and.w	r2, r3, #12
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d1eb      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d008      	beq.n	8001708 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	492c      	ldr	r1, [pc, #176]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <HAL_RCC_ClockConfig+0x1b0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d210      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <HAL_RCC_ClockConfig+0x1b0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 0207 	bic.w	r2, r3, #7
 800171e:	4924      	ldr	r1, [pc, #144]	; (80017b0 <HAL_RCC_ClockConfig+0x1b0>)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <HAL_RCC_ClockConfig+0x1b0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e036      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4918      	ldr	r1, [pc, #96]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4910      	ldr	r1, [pc, #64]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001772:	4313      	orrs	r3, r2
 8001774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001776:	f000 f825 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 800177a:	4601      	mov	r1, r0
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <HAL_RCC_ClockConfig+0x1b4>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	5cd3      	ldrb	r3, [r2, r3]
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	fa21 f303 	lsr.w	r3, r1, r3
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fd2c 	bl	80001f8 <HAL_InitTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80017a4:	7afb      	ldrb	r3, [r7, #11]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40022000 	.word	0x40022000
 80017b4:	40021000 	.word	0x40021000
 80017b8:	08004808 	.word	0x08004808
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000000 	.word	0x20000000

080017c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017dc:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x34>
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d121      	bne.n	8001836 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d11e      	bne.n	8001836 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80017f8:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d107      	bne.n	8001814 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001804:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	e005      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001820:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10d      	bne.n	800184c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001834:	e00a      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d102      	bne.n	8001842 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	e004      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	2b08      	cmp	r3, #8
 8001846:	d101      	bne.n	800184c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800184a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d133      	bne.n	80018ba <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d002      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0xa4>
 8001862:	2b03      	cmp	r3, #3
 8001864:	d003      	beq.n	800186e <HAL_RCC_GetSysClockFreq+0xaa>
 8001866:	e005      	b.n	8001874 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800186a:	617b      	str	r3, [r7, #20]
      break;
 800186c:	e005      	b.n	800187a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001870:	617b      	str	r3, [r7, #20]
      break;
 8001872:	e002      	b.n	800187a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	617b      	str	r3, [r7, #20]
      break;
 8001878:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	3301      	adds	r3, #1
 8001886:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x104>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	fb02 f203 	mul.w	r2, r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0e5b      	lsrs	r3, r3, #25
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	3301      	adds	r3, #1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018ba:	69bb      	ldr	r3, [r7, #24]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3724      	adds	r7, #36	; 0x24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	40021000 	.word	0x40021000
 80018cc:	08004818 	.word	0x08004818
 80018d0:	00f42400 	.word	0x00f42400
 80018d4:	007a1200 	.word	0x007a1200

080018d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018f0:	f7ff fa3c 	bl	8000d6c <HAL_PWREx_GetVoltageRange>
 80018f4:	6178      	str	r0, [r7, #20]
 80018f6:	e014      	b.n	8001922 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	4a24      	ldr	r2, [pc, #144]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001902:	6593      	str	r3, [r2, #88]	; 0x58
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001910:	f7ff fa2c 	bl	8000d6c <HAL_PWREx_GetVoltageRange>
 8001914:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800191c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001920:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001928:	d10b      	bne.n	8001942 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b80      	cmp	r3, #128	; 0x80
 800192e:	d919      	bls.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2ba0      	cmp	r3, #160	; 0xa0
 8001934:	d902      	bls.n	800193c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001936:	2302      	movs	r3, #2
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	e013      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800193c:	2301      	movs	r3, #1
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	e010      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b80      	cmp	r3, #128	; 0x80
 8001946:	d902      	bls.n	800194e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001948:	2303      	movs	r3, #3
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	e00a      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b80      	cmp	r3, #128	; 0x80
 8001952:	d102      	bne.n	800195a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001954:	2302      	movs	r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	e004      	b.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b70      	cmp	r3, #112	; 0x70
 800195e:	d101      	bne.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001960:	2301      	movs	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 0207 	bic.w	r2, r3, #7
 800196c:	4909      	ldr	r1, [pc, #36]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	40022000 	.word	0x40022000

08001998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80019a0:	2300      	movs	r3, #0
 80019a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019a4:	2300      	movs	r3, #0
 80019a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d03f      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019bc:	d01c      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80019be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019c2:	d802      	bhi.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00e      	beq.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80019c8:	e01f      	b.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80019ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80019ce:	d003      	beq.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80019d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80019d4:	d01c      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80019d6:	e018      	b.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80019d8:	4b85      	ldr	r3, [pc, #532]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a84      	ldr	r2, [pc, #528]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80019e4:	e015      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fab9 	bl	8001f64 <RCCEx_PLLSAI1_Config>
 80019f2:	4603      	mov	r3, r0
 80019f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80019f6:	e00c      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3320      	adds	r3, #32
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fba0 	bl	8002144 <RCCEx_PLLSAI2_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a08:	e003      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	74fb      	strb	r3, [r7, #19]
      break;
 8001a0e:	e000      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a12:	7cfb      	ldrb	r3, [r7, #19]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10b      	bne.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a18:	4b75      	ldr	r3, [pc, #468]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a26:	4972      	ldr	r1, [pc, #456]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a2e:	e001      	b.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a30:	7cfb      	ldrb	r3, [r7, #19]
 8001a32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d03f      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d01c      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001a4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4e:	d802      	bhi.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001a54:	e01f      	b.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a5a:	d003      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001a5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a60:	d01c      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001a62:	e018      	b.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001a64:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4a61      	ldr	r2, [pc, #388]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a70:	e015      	b.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fa73 	bl	8001f64 <RCCEx_PLLSAI1_Config>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a82:	e00c      	b.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3320      	adds	r3, #32
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fb5a 	bl	8002144 <RCCEx_PLLSAI2_Config>
 8001a90:	4603      	mov	r3, r0
 8001a92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a94:	e003      	b.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	74fb      	strb	r3, [r7, #19]
      break;
 8001a9a:	e000      	b.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a9e:	7cfb      	ldrb	r3, [r7, #19]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10b      	bne.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001aa4:	4b52      	ldr	r3, [pc, #328]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ab2:	494f      	ldr	r1, [pc, #316]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001aba:	e001      	b.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001abc:	7cfb      	ldrb	r3, [r7, #19]
 8001abe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80a0 	beq.w	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00d      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae8:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	4a40      	ldr	r2, [pc, #256]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af2:	6593      	str	r3, [r2, #88]	; 0x58
 8001af4:	4b3e      	ldr	r3, [pc, #248]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b00:	2301      	movs	r3, #1
 8001b02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a3a      	ldr	r2, [pc, #232]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b10:	f7fe fbc2 	bl	8000298 <HAL_GetTick>
 8001b14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b16:	e009      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b18:	f7fe fbbe 	bl	8000298 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d902      	bls.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	74fb      	strb	r3, [r7, #19]
        break;
 8001b2a:	e005      	b.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ef      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001b38:	7cfb      	ldrb	r3, [r7, #19]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d15c      	bne.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01f      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d019      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	4a20      	ldr	r2, [pc, #128]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b88:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d016      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7fe fb7d 	bl	8000298 <HAL_GetTick>
 8001b9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba0:	e00b      	b.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7fe fb79 	bl	8000298 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d902      	bls.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	74fb      	strb	r3, [r7, #19]
            break;
 8001bb8:	e006      	b.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0ec      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001bc8:	7cfb      	ldrb	r3, [r7, #19]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bde:	4904      	ldr	r1, [pc, #16]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001be6:	e009      	b.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001be8:	7cfb      	ldrb	r3, [r7, #19]
 8001bea:	74bb      	strb	r3, [r7, #18]
 8001bec:	e006      	b.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bf8:	7cfb      	ldrb	r3, [r7, #19]
 8001bfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfc:	7c7b      	ldrb	r3, [r7, #17]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d105      	bne.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c02:	4b9e      	ldr	r3, [pc, #632]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	4a9d      	ldr	r2, [pc, #628]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00a      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c1a:	4b98      	ldr	r3, [pc, #608]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c20:	f023 0203 	bic.w	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c28:	4994      	ldr	r1, [pc, #592]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00a      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c3c:	4b8f      	ldr	r3, [pc, #572]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c42:	f023 020c 	bic.w	r2, r3, #12
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	498c      	ldr	r1, [pc, #560]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c5e:	4b87      	ldr	r3, [pc, #540]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	4983      	ldr	r1, [pc, #524]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c80:	4b7e      	ldr	r3, [pc, #504]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	497b      	ldr	r1, [pc, #492]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb0:	4972      	ldr	r1, [pc, #456]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00a      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cc4:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	496a      	ldr	r1, [pc, #424]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00a      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ce6:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	4961      	ldr	r1, [pc, #388]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00a      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d08:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d16:	4959      	ldr	r1, [pc, #356]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d2a:	4b54      	ldr	r3, [pc, #336]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d38:	4950      	ldr	r1, [pc, #320]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d4c:	4b4b      	ldr	r3, [pc, #300]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	4948      	ldr	r1, [pc, #288]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	493f      	ldr	r1, [pc, #252]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d028      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d9e:	4937      	ldr	r1, [pc, #220]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dae:	d106      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4a31      	ldr	r2, [pc, #196]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dba:	60d3      	str	r3, [r2, #12]
 8001dbc:	e011      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dc6:	d10c      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	2101      	movs	r1, #1
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f8c8 	bl	8001f64 <RCCEx_PLLSAI1_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001dd8:	7cfb      	ldrb	r3, [r7, #19]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001dde:	7cfb      	ldrb	r3, [r7, #19]
 8001de0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d028      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	491f      	ldr	r1, [pc, #124]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e0c:	d106      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e18:	60d3      	str	r3, [r2, #12]
 8001e1a:	e011      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 f899 	bl	8001f64 <RCCEx_PLLSAI1_Config>
 8001e32:	4603      	mov	r3, r0
 8001e34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e36:	7cfb      	ldrb	r3, [r7, #19]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001e3c:	7cfb      	ldrb	r3, [r7, #19]
 8001e3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d02b      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e6a:	d109      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a02      	ldr	r2, [pc, #8]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e76:	60d3      	str	r3, [r2, #12]
 8001e78:	e014      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	2101      	movs	r1, #1
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 f867 	bl	8001f64 <RCCEx_PLLSAI1_Config>
 8001e96:	4603      	mov	r3, r0
 8001e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e9a:	7cfb      	ldrb	r3, [r7, #19]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001ea0:	7cfb      	ldrb	r3, [r7, #19]
 8001ea2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d02f      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ebe:	4928      	ldr	r1, [pc, #160]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001eca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ece:	d10d      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f844 	bl	8001f64 <RCCEx_PLLSAI1_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ee0:	7cfb      	ldrb	r3, [r7, #19]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d014      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001ee6:	7cfb      	ldrb	r3, [r7, #19]
 8001ee8:	74bb      	strb	r3, [r7, #18]
 8001eea:	e011      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3320      	adds	r3, #32
 8001efa:	2102      	movs	r1, #2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 f921 	bl	8002144 <RCCEx_PLLSAI2_Config>
 8001f02:	4603      	mov	r3, r0
 8001f04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f06:	7cfb      	ldrb	r3, [r7, #19]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f2a:	490d      	ldr	r1, [pc, #52]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f4e:	4904      	ldr	r1, [pc, #16]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001f56:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000

08001f64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f72:	4b73      	ldr	r3, [pc, #460]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d018      	beq.n	8001fb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f7e:	4b70      	ldr	r3, [pc, #448]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 0203 	and.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d10d      	bne.n	8001faa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
       ||
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f96:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
       ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d044      	beq.n	8002034 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	e041      	b.n	8002034 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d00c      	beq.n	8001fd2 <RCCEx_PLLSAI1_Config+0x6e>
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d013      	beq.n	8001fe4 <RCCEx_PLLSAI1_Config+0x80>
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d120      	bne.n	8002002 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001fc0:	4b5f      	ldr	r3, [pc, #380]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11d      	bne.n	8002008 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd0:	e01a      	b.n	8002008 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001fd2:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d116      	bne.n	800200c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe2:	e013      	b.n	800200c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001fe4:	4b56      	ldr	r3, [pc, #344]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10f      	bne.n	8002010 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001ff0:	4b53      	ldr	r3, [pc, #332]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002000:	e006      	b.n	8002010 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
      break;
 8002006:	e004      	b.n	8002012 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002008:	bf00      	nop
 800200a:	e002      	b.n	8002012 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800200c:	bf00      	nop
 800200e:	e000      	b.n	8002012 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002010:	bf00      	nop
    }

    if(status == HAL_OK)
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10d      	bne.n	8002034 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002018:	4b49      	ldr	r3, [pc, #292]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	3b01      	subs	r3, #1
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	430b      	orrs	r3, r1
 800202e:	4944      	ldr	r1, [pc, #272]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002030:	4313      	orrs	r3, r2
 8002032:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d17d      	bne.n	8002136 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a40      	ldr	r2, [pc, #256]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002040:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002046:	f7fe f927 	bl	8000298 <HAL_GetTick>
 800204a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800204c:	e009      	b.n	8002062 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800204e:	f7fe f923 	bl	8000298 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d902      	bls.n	8002062 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	73fb      	strb	r3, [r7, #15]
        break;
 8002060:	e005      	b.n	800206e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002062:	4b37      	ldr	r3, [pc, #220]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ef      	bne.n	800204e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d160      	bne.n	8002136 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d111      	bne.n	800209e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800207a:	4b31      	ldr	r3, [pc, #196]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6892      	ldr	r2, [r2, #8]
 800208a:	0211      	lsls	r1, r2, #8
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68d2      	ldr	r2, [r2, #12]
 8002090:	0912      	lsrs	r2, r2, #4
 8002092:	0452      	lsls	r2, r2, #17
 8002094:	430a      	orrs	r2, r1
 8002096:	492a      	ldr	r1, [pc, #168]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002098:	4313      	orrs	r3, r2
 800209a:	610b      	str	r3, [r1, #16]
 800209c:	e027      	b.n	80020ee <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d112      	bne.n	80020ca <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80020ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6892      	ldr	r2, [r2, #8]
 80020b4:	0211      	lsls	r1, r2, #8
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6912      	ldr	r2, [r2, #16]
 80020ba:	0852      	lsrs	r2, r2, #1
 80020bc:	3a01      	subs	r2, #1
 80020be:	0552      	lsls	r2, r2, #21
 80020c0:	430a      	orrs	r2, r1
 80020c2:	491f      	ldr	r1, [pc, #124]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	610b      	str	r3, [r1, #16]
 80020c8:	e011      	b.n	80020ee <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80020d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6892      	ldr	r2, [r2, #8]
 80020da:	0211      	lsls	r1, r2, #8
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6952      	ldr	r2, [r2, #20]
 80020e0:	0852      	lsrs	r2, r2, #1
 80020e2:	3a01      	subs	r2, #1
 80020e4:	0652      	lsls	r2, r2, #25
 80020e6:	430a      	orrs	r2, r1
 80020e8:	4915      	ldr	r1, [pc, #84]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a13      	ldr	r2, [pc, #76]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7fe f8cd 	bl	8000298 <HAL_GetTick>
 80020fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002100:	e009      	b.n	8002116 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002102:	f7fe f8c9 	bl	8000298 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d902      	bls.n	8002116 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	73fb      	strb	r3, [r7, #15]
          break;
 8002114:	e005      	b.n	8002122 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ef      	beq.n	8002102 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d106      	bne.n	8002136 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4903      	ldr	r1, [pc, #12]	; (8002140 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000

08002144 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002152:	4b68      	ldr	r3, [pc, #416]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d018      	beq.n	8002190 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800215e:	4b65      	ldr	r3, [pc, #404]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f003 0203 	and.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d10d      	bne.n	800218a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
       ||
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002176:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
       ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d044      	beq.n	8002214 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	e041      	b.n	8002214 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d00c      	beq.n	80021b2 <RCCEx_PLLSAI2_Config+0x6e>
 8002198:	2b03      	cmp	r3, #3
 800219a:	d013      	beq.n	80021c4 <RCCEx_PLLSAI2_Config+0x80>
 800219c:	2b01      	cmp	r3, #1
 800219e:	d120      	bne.n	80021e2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021a0:	4b54      	ldr	r3, [pc, #336]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d11d      	bne.n	80021e8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b0:	e01a      	b.n	80021e8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021b2:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d116      	bne.n	80021ec <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c2:	e013      	b.n	80021ec <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021c4:	4b4b      	ldr	r3, [pc, #300]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10f      	bne.n	80021f0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021d0:	4b48      	ldr	r3, [pc, #288]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80021e0:	e006      	b.n	80021f0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
      break;
 80021e6:	e004      	b.n	80021f2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80021e8:	bf00      	nop
 80021ea:	e002      	b.n	80021f2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80021ec:	bf00      	nop
 80021ee:	e000      	b.n	80021f2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80021f0:	bf00      	nop
    }

    if(status == HAL_OK)
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10d      	bne.n	8002214 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80021f8:	4b3e      	ldr	r3, [pc, #248]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	3b01      	subs	r3, #1
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	430b      	orrs	r3, r1
 800220e:	4939      	ldr	r1, [pc, #228]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002210:	4313      	orrs	r3, r2
 8002212:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d167      	bne.n	80022ea <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800221a:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a35      	ldr	r2, [pc, #212]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002226:	f7fe f837 	bl	8000298 <HAL_GetTick>
 800222a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800222c:	e009      	b.n	8002242 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800222e:	f7fe f833 	bl	8000298 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d902      	bls.n	8002242 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	73fb      	strb	r3, [r7, #15]
        break;
 8002240:	e005      	b.n	800224e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ef      	bne.n	800222e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d14a      	bne.n	80022ea <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d111      	bne.n	800227e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6892      	ldr	r2, [r2, #8]
 800226a:	0211      	lsls	r1, r2, #8
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68d2      	ldr	r2, [r2, #12]
 8002270:	0912      	lsrs	r2, r2, #4
 8002272:	0452      	lsls	r2, r2, #17
 8002274:	430a      	orrs	r2, r1
 8002276:	491f      	ldr	r1, [pc, #124]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002278:	4313      	orrs	r3, r2
 800227a:	614b      	str	r3, [r1, #20]
 800227c:	e011      	b.n	80022a2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002286:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6892      	ldr	r2, [r2, #8]
 800228e:	0211      	lsls	r1, r2, #8
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6912      	ldr	r2, [r2, #16]
 8002294:	0852      	lsrs	r2, r2, #1
 8002296:	3a01      	subs	r2, #1
 8002298:	0652      	lsls	r2, r2, #25
 800229a:	430a      	orrs	r2, r1
 800229c:	4915      	ldr	r1, [pc, #84]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ae:	f7fd fff3 	bl	8000298 <HAL_GetTick>
 80022b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80022b4:	e009      	b.n	80022ca <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80022b6:	f7fd ffef 	bl	8000298 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d902      	bls.n	80022ca <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	73fb      	strb	r3, [r7, #15]
          break;
 80022c8:	e005      	b.n	80022d6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0ef      	beq.n	80022b6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d106      	bne.n	80022ea <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	4903      	ldr	r1, [pc, #12]	; (80022f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000

080022f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e095      	b.n	8002436 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	2b00      	cmp	r3, #0
 8002310:	d108      	bne.n	8002324 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800231a:	d009      	beq.n	8002330 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	61da      	str	r2, [r3, #28]
 8002322:	e005      	b.n	8002330 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f002 f948 	bl	80045e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002366:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002370:	d902      	bls.n	8002378 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e002      	b.n	800237e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800237c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002386:	d007      	beq.n	8002398 <HAL_SPI_Init+0xa0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002390:	d002      	beq.n	8002398 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023da:	ea42 0103 	orr.w	r1, r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	0c1b      	lsrs	r3, r3, #16
 80023f4:	f003 0204 	and.w	r2, r3, #4
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002414:	ea42 0103 	orr.w	r1, r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b088      	sub	sp, #32
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_SPI_Transmit+0x22>
 800245c:	2302      	movs	r3, #2
 800245e:	e158      	b.n	8002712 <HAL_SPI_Transmit+0x2d4>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002468:	f7fd ff16 	bl	8000298 <HAL_GetTick>
 800246c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d002      	beq.n	8002484 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800247e:	2302      	movs	r3, #2
 8002480:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002482:	e13d      	b.n	8002700 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_SPI_Transmit+0x52>
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002494:	e134      	b.n	8002700 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2203      	movs	r2, #3
 800249a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	88fa      	ldrh	r2, [r7, #6]
 80024ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	88fa      	ldrh	r2, [r7, #6]
 80024b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e0:	d10f      	bne.n	8002502 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002500:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250c:	2b40      	cmp	r3, #64	; 0x40
 800250e:	d007      	beq.n	8002520 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800251e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002528:	d94b      	bls.n	80025c2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_SPI_Transmit+0xfa>
 8002532:	8afb      	ldrh	r3, [r7, #22]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d13e      	bne.n	80025b6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253c:	881a      	ldrh	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	1c9a      	adds	r2, r3, #2
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800255c:	e02b      	b.n	80025b6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b02      	cmp	r3, #2
 800256a:	d112      	bne.n	8002592 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	881a      	ldrh	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	1c9a      	adds	r2, r3, #2
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002590:	e011      	b.n	80025b6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002592:	f7fd fe81 	bl	8000298 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d803      	bhi.n	80025aa <HAL_SPI_Transmit+0x16c>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a8:	d102      	bne.n	80025b0 <HAL_SPI_Transmit+0x172>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025b4:	e0a4      	b.n	8002700 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ce      	bne.n	800255e <HAL_SPI_Transmit+0x120>
 80025c0:	e07c      	b.n	80026bc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_SPI_Transmit+0x192>
 80025ca:	8afb      	ldrh	r3, [r7, #22]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d170      	bne.n	80026b2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d912      	bls.n	8002600 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	881a      	ldrh	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	1c9a      	adds	r2, r3, #2
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3b02      	subs	r3, #2
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025fe:	e058      	b.n	80026b2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	330c      	adds	r3, #12
 800260a:	7812      	ldrb	r2, [r2, #0]
 800260c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002626:	e044      	b.n	80026b2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d12b      	bne.n	800268e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263a:	b29b      	uxth	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d912      	bls.n	8002666 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	881a      	ldrh	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	1c9a      	adds	r2, r3, #2
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b02      	subs	r3, #2
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002664:	e025      	b.n	80026b2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	330c      	adds	r3, #12
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800268c:	e011      	b.n	80026b2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800268e:	f7fd fe03 	bl	8000298 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d803      	bhi.n	80026a6 <HAL_SPI_Transmit+0x268>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a4:	d102      	bne.n	80026ac <HAL_SPI_Transmit+0x26e>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026b0:	e026      	b.n	8002700 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1b5      	bne.n	8002628 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fcdb 	bl	800307c <SPI_EndRxTxTransaction>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	77fb      	strb	r3, [r7, #31]
 80026fc:	e000      	b.n	8002700 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80026fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002710:	7ffb      	ldrb	r3, [r7, #31]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b088      	sub	sp, #32
 800271e:	af02      	add	r7, sp, #8
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002736:	d112      	bne.n	800275e <HAL_SPI_Receive+0x44>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10e      	bne.n	800275e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2204      	movs	r2, #4
 8002744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002748:	88fa      	ldrh	r2, [r7, #6]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	4613      	mov	r3, r2
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f910 	bl	800297a <HAL_SPI_TransmitReceive>
 800275a:	4603      	mov	r3, r0
 800275c:	e109      	b.n	8002972 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_SPI_Receive+0x52>
 8002768:	2302      	movs	r3, #2
 800276a:	e102      	b.n	8002972 <HAL_SPI_Receive+0x258>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002774:	f7fd fd90 	bl	8000298 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b01      	cmp	r3, #1
 8002784:	d002      	beq.n	800278c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002786:	2302      	movs	r3, #2
 8002788:	75fb      	strb	r3, [r7, #23]
    goto error;
 800278a:	e0e9      	b.n	8002960 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_SPI_Receive+0x7e>
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800279c:	e0e0      	b.n	8002960 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2204      	movs	r2, #4
 80027a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	88fa      	ldrh	r2, [r7, #6]
 80027b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	88fa      	ldrh	r2, [r7, #6]
 80027be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027e8:	d908      	bls.n	80027fc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e007      	b.n	800280c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800280a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002814:	d10f      	bne.n	8002836 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002824:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d007      	beq.n	8002854 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002852:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800285c:	d867      	bhi.n	800292e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800285e:	e030      	b.n	80028c2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d117      	bne.n	800289e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f103 020c 	add.w	r2, r3, #12
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	7812      	ldrb	r2, [r2, #0]
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800289c:	e011      	b.n	80028c2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800289e:	f7fd fcfb 	bl	8000298 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d803      	bhi.n	80028b6 <HAL_SPI_Receive+0x19c>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b4:	d102      	bne.n	80028bc <HAL_SPI_Receive+0x1a2>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80028c0:	e04e      	b.n	8002960 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1c8      	bne.n	8002860 <HAL_SPI_Receive+0x146>
 80028ce:	e034      	b.n	800293a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d115      	bne.n	800290a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	b292      	uxth	r2, r2
 80028ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	1c9a      	adds	r2, r3, #2
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002908:	e011      	b.n	800292e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800290a:	f7fd fcc5 	bl	8000298 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d803      	bhi.n	8002922 <HAL_SPI_Receive+0x208>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002920:	d102      	bne.n	8002928 <HAL_SPI_Receive+0x20e>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800292c:	e018      	b.n	8002960 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ca      	bne.n	80028d0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	6839      	ldr	r1, [r7, #0]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fb44 	bl	8002fcc <SPI_EndRxTransaction>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	75fb      	strb	r3, [r7, #23]
 800295c:	e000      	b.n	8002960 <HAL_SPI_Receive+0x246>
  }

error :
 800295e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002970:	7dfb      	ldrb	r3, [r7, #23]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b08a      	sub	sp, #40	; 0x28
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002988:	2301      	movs	r3, #1
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_SPI_TransmitReceive+0x26>
 800299c:	2302      	movs	r3, #2
 800299e:	e1fb      	b.n	8002d98 <HAL_SPI_TransmitReceive+0x41e>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029a8:	f7fd fc76 	bl	8000298 <HAL_GetTick>
 80029ac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029b4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80029c0:	887b      	ldrh	r3, [r7, #2]
 80029c2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029c4:	7efb      	ldrb	r3, [r7, #27]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d00e      	beq.n	80029e8 <HAL_SPI_TransmitReceive+0x6e>
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029d0:	d106      	bne.n	80029e0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <HAL_SPI_TransmitReceive+0x66>
 80029da:	7efb      	ldrb	r3, [r7, #27]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d003      	beq.n	80029e8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
 80029e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80029e6:	e1cd      	b.n	8002d84 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_SPI_TransmitReceive+0x80>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_SPI_TransmitReceive+0x80>
 80029f4:	887b      	ldrh	r3, [r7, #2]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a00:	e1c0      	b.n	8002d84 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d003      	beq.n	8002a16 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2205      	movs	r2, #5
 8002a12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	887a      	ldrh	r2, [r7, #2]
 8002a26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	887a      	ldrh	r2, [r7, #2]
 8002a2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	887a      	ldrh	r2, [r7, #2]
 8002a42:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a58:	d802      	bhi.n	8002a60 <HAL_SPI_TransmitReceive+0xe6>
 8002a5a:	8a3b      	ldrh	r3, [r7, #16]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d908      	bls.n	8002a72 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	e007      	b.n	8002a82 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a80:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8c:	2b40      	cmp	r3, #64	; 0x40
 8002a8e:	d007      	beq.n	8002aa0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002aa8:	d97c      	bls.n	8002ba4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_SPI_TransmitReceive+0x13e>
 8002ab2:	8a7b      	ldrh	r3, [r7, #18]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d169      	bne.n	8002b8c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	881a      	ldrh	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002adc:	e056      	b.n	8002b8c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d11b      	bne.n	8002b24 <HAL_SPI_TransmitReceive+0x1aa>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <HAL_SPI_TransmitReceive+0x1aa>
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d113      	bne.n	8002b24 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	881a      	ldrh	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0c:	1c9a      	adds	r2, r3, #2
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d11c      	bne.n	8002b6c <HAL_SPI_TransmitReceive+0x1f2>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d016      	beq.n	8002b6c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	b292      	uxth	r2, r2
 8002b4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	1c9a      	adds	r2, r3, #2
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b6c:	f7fd fb94 	bl	8000298 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d807      	bhi.n	8002b8c <HAL_SPI_TransmitReceive+0x212>
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b82:	d003      	beq.n	8002b8c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002b8a:	e0fb      	b.n	8002d84 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1a3      	bne.n	8002ade <HAL_SPI_TransmitReceive+0x164>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d19d      	bne.n	8002ade <HAL_SPI_TransmitReceive+0x164>
 8002ba2:	e0df      	b.n	8002d64 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_SPI_TransmitReceive+0x23a>
 8002bac:	8a7b      	ldrh	r3, [r7, #18]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	f040 80cb 	bne.w	8002d4a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d912      	bls.n	8002be4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	881a      	ldrh	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	1c9a      	adds	r2, r3, #2
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b02      	subs	r3, #2
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002be2:	e0b2      	b.n	8002d4a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	7812      	ldrb	r2, [r2, #0]
 8002bf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c0a:	e09e      	b.n	8002d4a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d134      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x30a>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d02f      	beq.n	8002c84 <HAL_SPI_TransmitReceive+0x30a>
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d12c      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d912      	bls.n	8002c5a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c38:	881a      	ldrh	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	1c9a      	adds	r2, r3, #2
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b02      	subs	r3, #2
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c58:	e012      	b.n	8002c80 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	7812      	ldrb	r2, [r2, #0]
 8002c66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d148      	bne.n	8002d24 <HAL_SPI_TransmitReceive+0x3aa>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d042      	beq.n	8002d24 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d923      	bls.n	8002cf2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	1c9a      	adds	r2, r3, #2
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b02      	subs	r3, #2
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d81f      	bhi.n	8002d20 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	e016      	b.n	8002d20 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f103 020c 	add.w	r2, r3, #12
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	7812      	ldrb	r2, [r2, #0]
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d20:	2301      	movs	r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d24:	f7fd fab8 	bl	8000298 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d803      	bhi.n	8002d3c <HAL_SPI_TransmitReceive+0x3c2>
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d3a:	d102      	bne.n	8002d42 <HAL_SPI_TransmitReceive+0x3c8>
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d103      	bne.n	8002d4a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002d48:	e01c      	b.n	8002d84 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f47f af5b 	bne.w	8002c0c <HAL_SPI_TransmitReceive+0x292>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f47f af54 	bne.w	8002c0c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f987 	bl	800307c <SPI_EndRxTxTransaction>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d006      	beq.n	8002d82 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	661a      	str	r2, [r3, #96]	; 0x60
 8002d80:	e000      	b.n	8002d84 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002d82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3728      	adds	r7, #40	; 0x28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4613      	mov	r3, r2
 8002dae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002db0:	f7fd fa72 	bl	8000298 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dc0:	f7fd fa6a 	bl	8000298 <HAL_GetTick>
 8002dc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dc6:	4b39      	ldr	r3, [pc, #228]	; (8002eac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	015b      	lsls	r3, r3, #5
 8002dcc:	0d1b      	lsrs	r3, r3, #20
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	fb02 f303 	mul.w	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dd6:	e054      	b.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dde:	d050      	beq.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002de0:	f7fd fa5a 	bl	8000298 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d902      	bls.n	8002df6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d13d      	bne.n	8002e72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e0e:	d111      	bne.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e18:	d004      	beq.n	8002e24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e22:	d107      	bne.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3c:	d10f      	bne.n	8002e5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e017      	b.n	8002ea2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	bf0c      	ite	eq
 8002e92:	2301      	moveq	r3, #1
 8002e94:	2300      	movne	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d19b      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3720      	adds	r7, #32
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000008 	.word	0x20000008

08002eb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ebe:	f7fd f9eb 	bl	8000298 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	4413      	add	r3, r2
 8002ecc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ece:	f7fd f9e3 	bl	8000298 <HAL_GetTick>
 8002ed2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ed4:	4b3c      	ldr	r3, [pc, #240]	; (8002fc8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00da      	lsls	r2, r3, #3
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	0d1b      	lsrs	r3, r3, #20
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002eec:	e05f      	b.n	8002fae <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ef4:	d106      	bne.n	8002f04 <SPI_WaitFifoStateUntilTimeout+0x54>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d103      	bne.n	8002f04 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f0a:	d050      	beq.n	8002fae <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f0c:	f7fd f9c4 	bl	8000298 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d902      	bls.n	8002f22 <SPI_WaitFifoStateUntilTimeout+0x72>
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d13d      	bne.n	8002f9e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f3a:	d111      	bne.n	8002f60 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f44:	d004      	beq.n	8002f50 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4e:	d107      	bne.n	8002f60 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f68:	d10f      	bne.n	8002f8a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e010      	b.n	8002fc0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d197      	bne.n	8002eee <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000008 	.word	0x20000008

08002fcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fe0:	d111      	bne.n	8003006 <SPI_EndRxTransaction+0x3a>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fea:	d004      	beq.n	8002ff6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff4:	d107      	bne.n	8003006 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003004:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2200      	movs	r2, #0
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f7ff fec5 	bl	8002da0 <SPI_WaitFlagStateUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e023      	b.n	8003074 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003034:	d11d      	bne.n	8003072 <SPI_EndRxTransaction+0xa6>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303e:	d004      	beq.n	800304a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003048:	d113      	bne.n	8003072 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2200      	movs	r2, #0
 8003052:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7ff ff2a 	bl	8002eb0 <SPI_WaitFifoStateUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e000      	b.n	8003074 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2200      	movs	r2, #0
 8003090:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff ff0b 	bl	8002eb0 <SPI_WaitFifoStateUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e027      	b.n	8003100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2200      	movs	r2, #0
 80030b8:	2180      	movs	r1, #128	; 0x80
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f7ff fe70 	bl	8002da0 <SPI_WaitFlagStateUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ca:	f043 0220 	orr.w	r2, r3, #32
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e014      	b.n	8003100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2200      	movs	r2, #0
 80030de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7ff fee4 	bl	8002eb0 <SPI_WaitFifoStateUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e000      	b.n	8003100 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <SPI_write_command>:

/**
 * Select the register to read or write
 *
 */
uint8_t SPI_write_command(SPI_HandleTypeDef* hspi, uint8_t reg_to_sel) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;

	// toggle CS to low
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 8003114:	2200      	movs	r2, #0
 8003116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800311a:	4815      	ldr	r0, [pc, #84]	; (8003170 <SPI_write_command+0x68>)
 800311c:	f7fd fb78 	bl	8000810 <HAL_GPIO_WritePin>

	uint8_t reg = RA8875_CMDWRITE;
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	73bb      	strb	r3, [r7, #14]
	status  = HAL_SPI_Transmit(hspi, &reg, 1, 10);
 8003124:	f107 010e 	add.w	r1, r7, #14
 8003128:	230a      	movs	r3, #10
 800312a:	2201      	movs	r2, #1
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff f986 	bl	800243e <HAL_SPI_Transmit>
 8003132:	4603      	mov	r3, r0
 8003134:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <SPI_write_command+0x38>
		return DISPLAY_ERROR;
 800313c:	23ff      	movs	r3, #255	; 0xff
 800313e:	e013      	b.n	8003168 <SPI_write_command+0x60>

	status = HAL_SPI_Transmit(hspi, &reg_to_sel, 1, 10);
 8003140:	1cf9      	adds	r1, r7, #3
 8003142:	230a      	movs	r3, #10
 8003144:	2201      	movs	r2, #1
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff f979 	bl	800243e <HAL_SPI_Transmit>
 800314c:	4603      	mov	r3, r0
 800314e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <SPI_write_command+0x52>
		return DISPLAY_ERROR;
 8003156:	23ff      	movs	r3, #255	; 0xff
 8003158:	e006      	b.n	8003168 <SPI_write_command+0x60>

	// finish transfer, toggle CS to high
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 800315a:	2201      	movs	r2, #1
 800315c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003160:	4803      	ldr	r0, [pc, #12]	; (8003170 <SPI_write_command+0x68>)
 8003162:	f7fd fb55 	bl	8000810 <HAL_GPIO_WritePin>

	return DISPLAY_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	48001000 	.word	0x48001000

08003174 <SPI_read_data>:

/**
 * Read the data from the current register
 *
 */
uint8_t SPI_read_data(SPI_HandleTypeDef* hspi, uint8_t* Rxdata) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint8_t reg = RA8875_DATAREAD;
 800317e:	2340      	movs	r3, #64	; 0x40
 8003180:	73bb      	strb	r3, [r7, #14]

	// toggle CS to low
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 8003182:	2200      	movs	r2, #0
 8003184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003188:	4814      	ldr	r0, [pc, #80]	; (80031dc <SPI_read_data+0x68>)
 800318a:	f7fd fb41 	bl	8000810 <HAL_GPIO_WritePin>

	// write READ command to slave and read the data
	status  = HAL_SPI_Transmit(hspi, &reg, 1, 10);
 800318e:	f107 010e 	add.w	r1, r7, #14
 8003192:	230a      	movs	r3, #10
 8003194:	2201      	movs	r2, #1
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff f951 	bl	800243e <HAL_SPI_Transmit>
 800319c:	4603      	mov	r3, r0
 800319e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <SPI_read_data+0x36>
		return DISPLAY_ERROR;
 80031a6:	23ff      	movs	r3, #255	; 0xff
 80031a8:	e013      	b.n	80031d2 <SPI_read_data+0x5e>

	status = HAL_SPI_Receive(hspi, Rxdata, 1, 10);
 80031aa:	230a      	movs	r3, #10
 80031ac:	2201      	movs	r2, #1
 80031ae:	6839      	ldr	r1, [r7, #0]
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff fab2 	bl	800271a <HAL_SPI_Receive>
 80031b6:	4603      	mov	r3, r0
 80031b8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <SPI_read_data+0x50>
		return DISPLAY_ERROR;
 80031c0:	23ff      	movs	r3, #255	; 0xff
 80031c2:	e006      	b.n	80031d2 <SPI_read_data+0x5e>

	// finish transfer, toggle CS to high
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 80031c4:	2201      	movs	r2, #1
 80031c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031ca:	4804      	ldr	r0, [pc, #16]	; (80031dc <SPI_read_data+0x68>)
 80031cc:	f7fd fb20 	bl	8000810 <HAL_GPIO_WritePin>

	return DISPLAY_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	48001000 	.word	0x48001000

080031e0 <SPI_write_data>:

/**
 * Write the data to the current register
 *
 */
uint8_t SPI_write_data(SPI_HandleTypeDef* hspi, uint8_t* TxData) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint8_t reg = RA8875_DATAWRITE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73bb      	strb	r3, [r7, #14]

	// toggle CS to low
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 80031ee:	2200      	movs	r2, #0
 80031f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031f4:	4814      	ldr	r0, [pc, #80]	; (8003248 <SPI_write_data+0x68>)
 80031f6:	f7fd fb0b 	bl	8000810 <HAL_GPIO_WritePin>

	// write WRITE command to slave and write the data
	status  = HAL_SPI_Transmit(hspi, &reg, 1, 10);
 80031fa:	f107 010e 	add.w	r1, r7, #14
 80031fe:	230a      	movs	r3, #10
 8003200:	2201      	movs	r2, #1
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff f91b 	bl	800243e <HAL_SPI_Transmit>
 8003208:	4603      	mov	r3, r0
 800320a:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <SPI_write_data+0x36>
		return DISPLAY_ERROR;
 8003212:	23ff      	movs	r3, #255	; 0xff
 8003214:	e013      	b.n	800323e <SPI_write_data+0x5e>

	status = HAL_SPI_Transmit(hspi, TxData, 1, 10);
 8003216:	230a      	movs	r3, #10
 8003218:	2201      	movs	r2, #1
 800321a:	6839      	ldr	r1, [r7, #0]
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff f90e 	bl	800243e <HAL_SPI_Transmit>
 8003222:	4603      	mov	r3, r0
 8003224:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <SPI_write_data+0x50>
		return DISPLAY_ERROR;
 800322c:	23ff      	movs	r3, #255	; 0xff
 800322e:	e006      	b.n	800323e <SPI_write_data+0x5e>

	// finish transfer, toggle CS to high
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8003230:	2201      	movs	r2, #1
 8003232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003236:	4804      	ldr	r0, [pc, #16]	; (8003248 <SPI_write_data+0x68>)
 8003238:	f7fd faea 	bl	8000810 <HAL_GPIO_WritePin>

	return DISPLAY_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	48001000 	.word	0x48001000

0800324c <SPI_read_register>:
/**
 *  Select the register to read from and transmit the data using TxData
 *  Rxdata will be the returned data
 *
 */
uint8_t SPI_read_register(SPI_HandleTypeDef* hspi, uint8_t reg_to_sel, uint8_t* Rxdata) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	460b      	mov	r3, r1
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	72fb      	strb	r3, [r7, #11]
	uint8_t ret;
	// issue a read coomand and read data
	ret = SPI_write_command(hspi, reg_to_sel);
 800325a:	7afb      	ldrb	r3, [r7, #11]
 800325c:	4619      	mov	r1, r3
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff ff52 	bl	8003108 <SPI_write_command>
 8003264:	4603      	mov	r3, r0
 8003266:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <SPI_read_register+0x26>
		return DISPLAY_ERROR;
 800326e:	23ff      	movs	r3, #255	; 0xff
 8003270:	e00b      	b.n	800328a <SPI_read_register+0x3e>

	ret = SPI_read_data(hspi, Rxdata);
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f7ff ff7d 	bl	8003174 <SPI_read_data>
 800327a:	4603      	mov	r3, r0
 800327c:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <SPI_read_register+0x3c>
		return DISPLAY_ERROR;
 8003284:	23ff      	movs	r3, #255	; 0xff
 8003286:	e000      	b.n	800328a <SPI_read_register+0x3e>

	return DISPLAY_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <SPI_write_register>:

/**
 *  Select the register to write to and transmit the data using TxData
 *
 */
uint8_t SPI_write_register(SPI_HandleTypeDef* hspi, uint8_t reg_to_sel, uint8_t* TxData) {
 8003292:	b580      	push	{r7, lr}
 8003294:	b086      	sub	sp, #24
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	460b      	mov	r3, r1
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	72fb      	strb	r3, [r7, #11]
	uint8_t ret;
	ret = SPI_write_command(hspi, reg_to_sel);
 80032a0:	7afb      	ldrb	r3, [r7, #11]
 80032a2:	4619      	mov	r1, r3
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff ff2f 	bl	8003108 <SPI_write_command>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <SPI_write_register+0x26>
		return DISPLAY_ERROR;
 80032b4:	23ff      	movs	r3, #255	; 0xff
 80032b6:	e00b      	b.n	80032d0 <SPI_write_register+0x3e>

	ret = SPI_write_data(hspi, TxData);
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f7ff ff90 	bl	80031e0 <SPI_write_data>
 80032c0:	4603      	mov	r3, r0
 80032c2:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <SPI_write_register+0x3c>
		return DISPLAY_ERROR;
 80032ca:	23ff      	movs	r3, #255	; 0xff
 80032cc:	e000      	b.n	80032d0 <SPI_write_register+0x3e>

	return DISPLAY_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <wait_poll>:
/**
 *  Select the register to write to and transmit the data using TxData
 *	return true if expected status has been reached
 *  return false if SPI_read has errors 
 */
bool wait_poll(SPI_HandleTypeDef* hspi,uint8_t reg_to_sel, uint8_t wait_flag) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
 80032e4:	4613      	mov	r3, r2
 80032e6:	70bb      	strb	r3, [r7, #2]
	uint8_t RxData;
	uint8_t ret;
	// wait for the command to finish
	while(1) {
		RxData = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73bb      	strb	r3, [r7, #14]
		ret = SPI_read_register(hspi, reg_to_sel, &RxData);
 80032ec:	f107 020e 	add.w	r2, r7, #14
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	4619      	mov	r1, r3
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ffa9 	bl	800324c <SPI_read_register>
 80032fa:	4603      	mov	r3, r0
 80032fc:	73fb      	strb	r3, [r7, #15]
		if(ret != DISPLAY_OK)
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <wait_poll+0x30>
			return false;
 8003304:	2300      	movs	r3, #0
 8003306:	e006      	b.n	8003316 <wait_poll+0x3e>
		if(!(RxData & wait_flag))
 8003308:	7bba      	ldrb	r2, [r7, #14]
 800330a:	78bb      	ldrb	r3, [r7, #2]
 800330c:	4013      	ands	r3, r2
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e9      	bne.n	80032e8 <wait_poll+0x10>
			return true;
 8003314:	2301      	movs	r3, #1
	}
	// unreach but return to avoid compiler yelling
	return false;
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <rect_helper>:
 *	|					   |
 *	|					   |
 *	|					   |
 *	Y  X----------------X1 Y
 */
void rect_helper(SPI_HandleTypeDef* hspi, int16_t x, int16_t y, int16_t x1, int16_t y1, uint16_t color, bool filled){
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	4608      	mov	r0, r1
 8003328:	4611      	mov	r1, r2
 800332a:	461a      	mov	r2, r3
 800332c:	4603      	mov	r3, r0
 800332e:	817b      	strh	r3, [r7, #10]
 8003330:	460b      	mov	r3, r1
 8003332:	813b      	strh	r3, [r7, #8]
 8003334:	4613      	mov	r3, r2
 8003336:	80fb      	strh	r3, [r7, #6]
	uint8_t TxData = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	75fb      	strb	r3, [r7, #23]

	// Set X
	SPI_write_command(hspi, 0x91);
 800333c:	2191      	movs	r1, #145	; 0x91
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f7ff fee2 	bl	8003108 <SPI_write_command>
	TxData = x;
 8003344:	897b      	ldrh	r3, [r7, #10]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 800334a:	f107 0317 	add.w	r3, r7, #23
 800334e:	4619      	mov	r1, r3
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7ff ff45 	bl	80031e0 <SPI_write_data>
	SPI_write_command(hspi, 0x92);
 8003356:	2192      	movs	r1, #146	; 0x92
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff fed5 	bl	8003108 <SPI_write_command>
	TxData = x >> 8;
 800335e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003362:	121b      	asrs	r3, r3, #8
 8003364:	b21b      	sxth	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 800336a:	f107 0317 	add.w	r3, r7, #23
 800336e:	4619      	mov	r1, r3
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff ff35 	bl	80031e0 <SPI_write_data>

	// Set Y
	SPI_write_command(hspi, 0x93);
 8003376:	2193      	movs	r1, #147	; 0x93
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f7ff fec5 	bl	8003108 <SPI_write_command>
	TxData = y;
 800337e:	893b      	ldrh	r3, [r7, #8]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8003384:	f107 0317 	add.w	r3, r7, #23
 8003388:	4619      	mov	r1, r3
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f7ff ff28 	bl	80031e0 <SPI_write_data>
	SPI_write_command(hspi, 0x94);
 8003390:	2194      	movs	r1, #148	; 0x94
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff feb8 	bl	8003108 <SPI_write_command>
	TxData = y >> 8;
 8003398:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800339c:	121b      	asrs	r3, r3, #8
 800339e:	b21b      	sxth	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 80033a4:	f107 0317 	add.w	r3, r7, #23
 80033a8:	4619      	mov	r1, r3
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f7ff ff18 	bl	80031e0 <SPI_write_data>

	// set X1
	SPI_write_command(hspi, 0x95);
 80033b0:	2195      	movs	r1, #149	; 0x95
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f7ff fea8 	bl	8003108 <SPI_write_command>
	TxData = x1;
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 80033be:	f107 0317 	add.w	r3, r7, #23
 80033c2:	4619      	mov	r1, r3
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7ff ff0b 	bl	80031e0 <SPI_write_data>
	SPI_write_command(hspi, 0x96);
 80033ca:	2196      	movs	r1, #150	; 0x96
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff fe9b 	bl	8003108 <SPI_write_command>
	TxData = x1 >> 8;
 80033d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d6:	121b      	asrs	r3, r3, #8
 80033d8:	b21b      	sxth	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 80033de:	f107 0317 	add.w	r3, r7, #23
 80033e2:	4619      	mov	r1, r3
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f7ff fefb 	bl	80031e0 <SPI_write_data>

	// set Y1
	SPI_write_command(hspi, 0x97);
 80033ea:	2197      	movs	r1, #151	; 0x97
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff fe8b 	bl	8003108 <SPI_write_command>
	TxData = y1;
 80033f2:	8c3b      	ldrh	r3, [r7, #32]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 80033f8:	f107 0317 	add.w	r3, r7, #23
 80033fc:	4619      	mov	r1, r3
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff feee 	bl	80031e0 <SPI_write_data>
	SPI_write_command(hspi, 0x98);
 8003404:	2198      	movs	r1, #152	; 0x98
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7ff fe7e 	bl	8003108 <SPI_write_command>
	TxData = y1 >> 8;
 800340c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003410:	121b      	asrs	r3, r3, #8
 8003412:	b21b      	sxth	r3, r3
 8003414:	b2db      	uxtb	r3, r3
 8003416:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8003418:	f107 0317 	add.w	r3, r7, #23
 800341c:	4619      	mov	r1, r3
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f7ff fede 	bl	80031e0 <SPI_write_data>

	// set Color
	SPI_write_command(hspi, 0x63);
 8003424:	2163      	movs	r1, #99	; 0x63
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7ff fe6e 	bl	8003108 <SPI_write_command>
	TxData = (color & 0xf800) >> 11;
 800342c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800342e:	0adb      	lsrs	r3, r3, #11
 8003430:	b29b      	uxth	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8003436:	f107 0317 	add.w	r3, r7, #23
 800343a:	4619      	mov	r1, r3
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f7ff fecf 	bl	80031e0 <SPI_write_data>
	SPI_write_command(hspi, 0x64);
 8003442:	2164      	movs	r1, #100	; 0x64
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff fe5f 	bl	8003108 <SPI_write_command>
	TxData = (color & 0x07e0) >> 5;
 800344a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800344c:	115b      	asrs	r3, r3, #5
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003454:	b2db      	uxtb	r3, r3
 8003456:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8003458:	f107 0317 	add.w	r3, r7, #23
 800345c:	4619      	mov	r1, r3
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f7ff febe 	bl	80031e0 <SPI_write_data>
	SPI_write_command(hspi, 0x65);
 8003464:	2165      	movs	r1, #101	; 0x65
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7ff fe4e 	bl	8003108 <SPI_write_command>
	TxData = color & 0x001f;
 800346c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	b2db      	uxtb	r3, r3
 8003476:	75fb      	strb	r3, [r7, #23]
	SPI_write_data(hspi, &TxData);
 8003478:	f107 0317 	add.w	r3, r7, #23
 800347c:	4619      	mov	r1, r3
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f7ff feae 	bl	80031e0 <SPI_write_data>

	// Draw
	SPI_write_command(hspi, RA8875_DCR);
 8003484:	2190      	movs	r1, #144	; 0x90
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7ff fe3e 	bl	8003108 <SPI_write_command>
	if(filled == true) {
 800348c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003490:	2b01      	cmp	r3, #1
 8003492:	d108      	bne.n	80034a6 <rect_helper+0x188>
		TxData = 0xB0;
 8003494:	23b0      	movs	r3, #176	; 0xb0
 8003496:	75fb      	strb	r3, [r7, #23]
		SPI_write_data(hspi, &TxData);
 8003498:	f107 0317 	add.w	r3, r7, #23
 800349c:	4619      	mov	r1, r3
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f7ff fe9e 	bl	80031e0 <SPI_write_data>
 80034a4:	e007      	b.n	80034b6 <rect_helper+0x198>
	} else {
		TxData = 0x90;
 80034a6:	2390      	movs	r3, #144	; 0x90
 80034a8:	75fb      	strb	r3, [r7, #23]
		SPI_write_data(hspi, &TxData);
 80034aa:	f107 0317 	add.w	r3, r7, #23
 80034ae:	4619      	mov	r1, r3
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff fe95 	bl	80031e0 <SPI_write_data>
	}

	wait_poll(hspi, RA8875_DCR, RA8875_DCR_LINESQUTRI_STATUS);
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	2190      	movs	r1, #144	; 0x90
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff ff0c 	bl	80032d8 <wait_poll>
}
 80034c0:	bf00      	nop
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <initialize_PLL>:

/**
 * Initialize the PLL
 *
 */
uint8_t initialize_PLL(SPI_HandleTypeDef* hspi){
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
	uint8_t TxData = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73bb      	strb	r3, [r7, #14]

	TxData = RA8875_PLLC1_PLLDIV1 + 11;
 80034d8:	230b      	movs	r3, #11
 80034da:	73bb      	strb	r3, [r7, #14]
	ret = SPI_write_register(hspi, RA8875_PLLC1, &TxData);
 80034dc:	f107 030e 	add.w	r3, r7, #14
 80034e0:	461a      	mov	r2, r3
 80034e2:	2188      	movs	r1, #136	; 0x88
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fed4 	bl	8003292 <SPI_write_register>
 80034ea:	4603      	mov	r3, r0
 80034ec:	73fb      	strb	r3, [r7, #15]
	if (ret != DISPLAY_OK)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <initialize_PLL+0x30>
		return DISPLAY_ERROR;
 80034f4:	23ff      	movs	r3, #255	; 0xff
 80034f6:	e016      	b.n	8003526 <initialize_PLL+0x5e>
	HAL_Delay(1);
 80034f8:	2001      	movs	r0, #1
 80034fa:	f7fc fed9 	bl	80002b0 <HAL_Delay>

	TxData = RA8875_PLLC2_DIV4;
 80034fe:	2302      	movs	r3, #2
 8003500:	73bb      	strb	r3, [r7, #14]
	ret = SPI_write_register(hspi,  RA8875_PLLC2, &TxData);
 8003502:	f107 030e 	add.w	r3, r7, #14
 8003506:	461a      	mov	r2, r3
 8003508:	2189      	movs	r1, #137	; 0x89
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff fec1 	bl	8003292 <SPI_write_register>
 8003510:	4603      	mov	r3, r0
 8003512:	73fb      	strb	r3, [r7, #15]
	if (ret != DISPLAY_OK)
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <initialize_PLL+0x56>
		return DISPLAY_ERROR;
 800351a:	23ff      	movs	r3, #255	; 0xff
 800351c:	e003      	b.n	8003526 <initialize_PLL+0x5e>
	HAL_Delay(1);
 800351e:	2001      	movs	r0, #1
 8003520:	f7fc fec6 	bl	80002b0 <HAL_Delay>

	return DISPLAY_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <initialize_driverIC>:

/**
 *  Initialize the driver IC (clock setup, etc etc)
 */
uint8_t initialize_driverIC(SPI_HandleTypeDef* hspi){
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	75fb      	strb	r3, [r7, #23]
	uint8_t TxData = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	733b      	strb	r3, [r7, #12]

	// Timing value
	uint8_t   pixclk = RA8875_PCSR_PDATL | RA8875_PCSR_2CLK;
 8003540:	2381      	movs	r3, #129	; 0x81
 8003542:	75bb      	strb	r3, [r7, #22]
	uint8_t   hsync_nondisp = 26;
 8003544:	231a      	movs	r3, #26
 8003546:	757b      	strb	r3, [r7, #21]
	uint8_t   hsync_start = 32;
 8003548:	2320      	movs	r3, #32
 800354a:	753b      	strb	r3, [r7, #20]
	uint8_t   hsync_pw = 96;
 800354c:	2360      	movs	r3, #96	; 0x60
 800354e:	74fb      	strb	r3, [r7, #19]
	uint8_t   hsync_finetune = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	74bb      	strb	r3, [r7, #18]
	uint16_t  vsync_nondisp = 32;
 8003554:	2320      	movs	r3, #32
 8003556:	823b      	strh	r3, [r7, #16]
	uint16_t  vsync_start = 23;
 8003558:	2317      	movs	r3, #23
 800355a:	81fb      	strh	r3, [r7, #14]
	uint8_t   vsync_pw = 2;
 800355c:	2302      	movs	r3, #2
 800355e:	737b      	strb	r3, [r7, #13]
	display_voffset = 0; // vertical offset can be changed over here
 8003560:	4bd0      	ldr	r3, [pc, #832]	; (80038a4 <initialize_driverIC+0x374>)
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]

	initialize_PLL(hspi);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ffae 	bl	80034c8 <initialize_PLL>

	TxData = RA8875_SYSR_16BPP | RA8875_SYSR_MCU8;
 800356c:	230c      	movs	r3, #12
 800356e:	733b      	strb	r3, [r7, #12]
	ret = SPI_write_register(hspi, RA8875_SYSR , &TxData);
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	461a      	mov	r2, r3
 8003576:	2110      	movs	r1, #16
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff fe8a 	bl	8003292 <SPI_write_register>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <initialize_driverIC+0x5c>
		return DISPLAY_ERROR;
 8003588:	23ff      	movs	r3, #255	; 0xff
 800358a:	e1a2      	b.n	80038d2 <initialize_driverIC+0x3a2>

	TxData = pixclk;
 800358c:	7dbb      	ldrb	r3, [r7, #22]
 800358e:	733b      	strb	r3, [r7, #12]
	ret = SPI_write_register(hspi, RA8875_PCSR , &TxData);
 8003590:	f107 030c 	add.w	r3, r7, #12
 8003594:	461a      	mov	r2, r3
 8003596:	2104      	movs	r1, #4
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff fe7a 	bl	8003292 <SPI_write_register>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <initialize_driverIC+0x7c>
		return DISPLAY_ERROR;
 80035a8:	23ff      	movs	r3, #255	; 0xff
 80035aa:	e192      	b.n	80038d2 <initialize_driverIC+0x3a2>
	HAL_Delay(1);
 80035ac:	2001      	movs	r0, #1
 80035ae:	f7fc fe7f 	bl	80002b0 <HAL_Delay>

	// Starting to set all the registers
	// return if errors occur in each segment (easier to debug)

	/* Horizontal settings registers */
	TxData = (display_width / 8) - 1;
 80035b2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80035b6:	08db      	lsrs	r3, r3, #3
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HDWR , &TxData);
 80035c2:	f107 030c 	add.w	r3, r7, #12
 80035c6:	461a      	mov	r2, r3
 80035c8:	2114      	movs	r1, #20
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fe61 	bl	8003292 <SPI_write_register>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	75fb      	strb	r3, [r7, #23]
	TxData = RA8875_HNDFTR_DE_HIGH + hsync_finetune;
 80035da:	7cbb      	ldrb	r3, [r7, #18]
 80035dc:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HNDFTR , &TxData);
 80035de:	f107 030c 	add.w	r3, r7, #12
 80035e2:	461a      	mov	r2, r3
 80035e4:	2115      	movs	r1, #21
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff fe53 	bl	8003292 <SPI_write_register>
 80035ec:	4603      	mov	r3, r0
 80035ee:	461a      	mov	r2, r3
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	75fb      	strb	r3, [r7, #23]
	TxData =  (hsync_nondisp - hsync_finetune - 2) / 8;
 80035f6:	7d7a      	ldrb	r2, [r7, #21]
 80035f8:	7cbb      	ldrb	r3, [r7, #18]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	3b02      	subs	r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da00      	bge.n	8003604 <initialize_driverIC+0xd4>
 8003602:	3307      	adds	r3, #7
 8003604:	10db      	asrs	r3, r3, #3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HNDR , &TxData);
 800360a:	f107 030c 	add.w	r3, r7, #12
 800360e:	461a      	mov	r2, r3
 8003610:	2116      	movs	r1, #22
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fe3d 	bl	8003292 <SPI_write_register>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	4313      	orrs	r3, r2
 8003620:	75fb      	strb	r3, [r7, #23]
	TxData = hsync_start / 8 - 1;
 8003622:	7d3b      	ldrb	r3, [r7, #20]
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	b2db      	uxtb	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b2db      	uxtb	r3, r3
 800362c:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HSTR , &TxData);
 800362e:	f107 030c 	add.w	r3, r7, #12
 8003632:	461a      	mov	r2, r3
 8003634:	2117      	movs	r1, #23
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff fe2b 	bl	8003292 <SPI_write_register>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	4313      	orrs	r3, r2
 8003644:	75fb      	strb	r3, [r7, #23]
	TxData = RA8875_HPWR_LOW + (hsync_pw / 8 - 1);
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	08db      	lsrs	r3, r3, #3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HPWR , &TxData);
 8003652:	f107 030c 	add.w	r3, r7, #12
 8003656:	461a      	mov	r2, r3
 8003658:	2118      	movs	r1, #24
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fe19 	bl	8003292 <SPI_write_register>
 8003660:	4603      	mov	r3, r0
 8003662:	461a      	mov	r2, r3
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	4313      	orrs	r3, r2
 8003668:	75fb      	strb	r3, [r7, #23]

	if (ret != DISPLAY_OK)
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <initialize_driverIC+0x144>
		return DISPLAY_ERROR;
 8003670:	23ff      	movs	r3, #255	; 0xff
 8003672:	e12e      	b.n	80038d2 <initialize_driverIC+0x3a2>

	/* Vertical settings registers */
	TxData = (display_height - 1 + display_voffset) & 0xFF;
 8003674:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003678:	b2da      	uxtb	r2, r3
 800367a:	4b8a      	ldr	r3, [pc, #552]	; (80038a4 <initialize_driverIC+0x374>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	4413      	add	r3, r2
 8003680:	b2db      	uxtb	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VDHR0 , &TxData);
 8003688:	f107 030c 	add.w	r3, r7, #12
 800368c:	461a      	mov	r2, r3
 800368e:	2119      	movs	r1, #25
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff fdfe 	bl	8003292 <SPI_write_register>
 8003696:	4603      	mov	r3, r0
 8003698:	461a      	mov	r2, r3
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	4313      	orrs	r3, r2
 800369e:	75fb      	strb	r3, [r7, #23]
	TxData = (display_height - 1 + display_voffset) >> 8;
 80036a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80036a4:	3b01      	subs	r3, #1
 80036a6:	4a7f      	ldr	r2, [pc, #508]	; (80038a4 <initialize_driverIC+0x374>)
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	121b      	asrs	r3, r3, #8
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VDHR1 , &TxData);
 80036b2:	f107 030c 	add.w	r3, r7, #12
 80036b6:	461a      	mov	r2, r3
 80036b8:	211a      	movs	r1, #26
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fde9 	bl	8003292 <SPI_write_register>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	7dfb      	ldrb	r3, [r7, #23]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	75fb      	strb	r3, [r7, #23]
	TxData =  vsync_nondisp - 1;
 80036ca:	8a3b      	ldrh	r3, [r7, #16]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VNDR0 , &TxData);
 80036d4:	f107 030c 	add.w	r3, r7, #12
 80036d8:	461a      	mov	r2, r3
 80036da:	211b      	movs	r1, #27
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff fdd8 	bl	8003292 <SPI_write_register>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	75fb      	strb	r3, [r7, #23]
	TxData =  vsync_nondisp >> 8;
 80036ec:	8a3b      	ldrh	r3, [r7, #16]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VNDR1 , &TxData);
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	461a      	mov	r2, r3
 80036fc:	211c      	movs	r1, #28
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff fdc7 	bl	8003292 <SPI_write_register>
 8003704:	4603      	mov	r3, r0
 8003706:	461a      	mov	r2, r3
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	4313      	orrs	r3, r2
 800370c:	75fb      	strb	r3, [r7, #23]
	TxData = vsync_start - 1;
 800370e:	89fb      	ldrh	r3, [r7, #14]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VSTR0 , &TxData);
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	461a      	mov	r2, r3
 800371e:	211d      	movs	r1, #29
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff fdb6 	bl	8003292 <SPI_write_register>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	4313      	orrs	r3, r2
 800372e:	75fb      	strb	r3, [r7, #23]
	TxData = vsync_start >> 8;
 8003730:	89fb      	ldrh	r3, [r7, #14]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	b29b      	uxth	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VSTR1 , &TxData);
 800373a:	f107 030c 	add.w	r3, r7, #12
 800373e:	461a      	mov	r2, r3
 8003740:	211e      	movs	r1, #30
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fda5 	bl	8003292 <SPI_write_register>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	4313      	orrs	r3, r2
 8003750:	75fb      	strb	r3, [r7, #23]
	TxData = RA8875_VPWR_LOW + vsync_pw - 1;
 8003752:	7b7b      	ldrb	r3, [r7, #13]
 8003754:	3b01      	subs	r3, #1
 8003756:	b2db      	uxtb	r3, r3
 8003758:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VPWR , &TxData);
 800375a:	f107 030c 	add.w	r3, r7, #12
 800375e:	461a      	mov	r2, r3
 8003760:	211f      	movs	r1, #31
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff fd95 	bl	8003292 <SPI_write_register>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	4313      	orrs	r3, r2
 8003770:	75fb      	strb	r3, [r7, #23]

	if (ret != DISPLAY_OK)
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <initialize_driverIC+0x24c>
		return DISPLAY_ERROR;
 8003778:	23ff      	movs	r3, #255	; 0xff
 800377a:	e0aa      	b.n	80038d2 <initialize_driverIC+0x3a2>

	/* Set active window X */
	TxData = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HSAW0 , &TxData);
 8003780:	f107 030c 	add.w	r3, r7, #12
 8003784:	461a      	mov	r2, r3
 8003786:	2130      	movs	r1, #48	; 0x30
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff fd82 	bl	8003292 <SPI_write_register>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	4313      	orrs	r3, r2
 8003796:	75fb      	strb	r3, [r7, #23]
	TxData = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HSAW1 , &TxData);
 800379c:	f107 030c 	add.w	r3, r7, #12
 80037a0:	461a      	mov	r2, r3
 80037a2:	2131      	movs	r1, #49	; 0x31
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fd74 	bl	8003292 <SPI_write_register>
 80037aa:	4603      	mov	r3, r0
 80037ac:	461a      	mov	r2, r3
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	75fb      	strb	r3, [r7, #23]
	TxData =  (display_width - 1) & 0xFF;
 80037b4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HEAW0 , &TxData);
 80037c0:	f107 030c 	add.w	r3, r7, #12
 80037c4:	461a      	mov	r2, r3
 80037c6:	2134      	movs	r1, #52	; 0x34
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff fd62 	bl	8003292 <SPI_write_register>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	75fb      	strb	r3, [r7, #23]
	TxData = (display_width - 1) >> 8;
 80037d8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80037dc:	3b01      	subs	r3, #1
 80037de:	121b      	asrs	r3, r3, #8
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_HEAW1 , &TxData);
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	461a      	mov	r2, r3
 80037ea:	2135      	movs	r1, #53	; 0x35
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff fd50 	bl	8003292 <SPI_write_register>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	75fb      	strb	r3, [r7, #23]

	if (ret != DISPLAY_OK)
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <initialize_driverIC+0x2d6>
		return DISPLAY_ERROR;
 8003802:	23ff      	movs	r3, #255	; 0xff
 8003804:	e065      	b.n	80038d2 <initialize_driverIC+0x3a2>

	/* Set active window Y */
	TxData = 0 + display_voffset;
 8003806:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <initialize_driverIC+0x374>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VSAW0 , &TxData);
 800380c:	f107 030c 	add.w	r3, r7, #12
 8003810:	461a      	mov	r2, r3
 8003812:	2132      	movs	r1, #50	; 0x32
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fd3c 	bl	8003292 <SPI_write_register>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	7dfb      	ldrb	r3, [r7, #23]
 8003820:	4313      	orrs	r3, r2
 8003822:	75fb      	strb	r3, [r7, #23]
	TxData = 0 + display_voffset;
 8003824:	4b1f      	ldr	r3, [pc, #124]	; (80038a4 <initialize_driverIC+0x374>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VSAW1 , &TxData);
 800382a:	f107 030c 	add.w	r3, r7, #12
 800382e:	461a      	mov	r2, r3
 8003830:	2133      	movs	r1, #51	; 0x33
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fd2d 	bl	8003292 <SPI_write_register>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	7dfb      	ldrb	r3, [r7, #23]
 800383e:	4313      	orrs	r3, r2
 8003840:	75fb      	strb	r3, [r7, #23]
	TxData =  (display_height - 1 + display_voffset) & 0xFF;
 8003842:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003846:	b2da      	uxtb	r2, r3
 8003848:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <initialize_driverIC+0x374>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	4413      	add	r3, r2
 800384e:	b2db      	uxtb	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b2db      	uxtb	r3, r3
 8003854:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VEAW0 , &TxData);
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	461a      	mov	r2, r3
 800385c:	2136      	movs	r1, #54	; 0x36
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff fd17 	bl	8003292 <SPI_write_register>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	4313      	orrs	r3, r2
 800386c:	75fb      	strb	r3, [r7, #23]
	TxData = (display_height - 1 + display_voffset) >> 8;
 800386e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003872:	3b01      	subs	r3, #1
 8003874:	4a0b      	ldr	r2, [pc, #44]	; (80038a4 <initialize_driverIC+0x374>)
 8003876:	7812      	ldrb	r2, [r2, #0]
 8003878:	4413      	add	r3, r2
 800387a:	121b      	asrs	r3, r3, #8
 800387c:	b2db      	uxtb	r3, r3
 800387e:	733b      	strb	r3, [r7, #12]
	ret |= SPI_write_register(hspi, RA8875_VEAW1 , &TxData);
 8003880:	f107 030c 	add.w	r3, r7, #12
 8003884:	461a      	mov	r2, r3
 8003886:	2137      	movs	r1, #55	; 0x37
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff fd02 	bl	8003292 <SPI_write_register>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	4313      	orrs	r3, r2
 8003896:	75fb      	strb	r3, [r7, #23]

	if (ret != DISPLAY_OK)
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d004      	beq.n	80038a8 <initialize_driverIC+0x378>
		return DISPLAY_ERROR;
 800389e:	23ff      	movs	r3, #255	; 0xff
 80038a0:	e017      	b.n	80038d2 <initialize_driverIC+0x3a2>
 80038a2:	bf00      	nop
 80038a4:	20000028 	.word	0x20000028

	/* Clear the entire window */
	TxData = RA8875_MCLR_START | RA8875_MCLR_FULL;
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	733b      	strb	r3, [r7, #12]
	ret = SPI_write_register(hspi, RA8875_MCLR, &TxData);
 80038ac:	f107 030c 	add.w	r3, r7, #12
 80038b0:	461a      	mov	r2, r3
 80038b2:	218e      	movs	r1, #142	; 0x8e
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fcec 	bl	8003292 <SPI_write_register>
 80038ba:	4603      	mov	r3, r0
 80038bc:	75fb      	strb	r3, [r7, #23]
	if (ret != DISPLAY_OK)
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <initialize_driverIC+0x398>
		return DISPLAY_ERROR;
 80038c4:	23ff      	movs	r3, #255	; 0xff
 80038c6:	e004      	b.n	80038d2 <initialize_driverIC+0x3a2>

	HAL_Delay(500);
 80038c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038cc:	f7fc fcf0 	bl	80002b0 <HAL_Delay>

	return DISPLAY_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop

080038dc <initialize_display>:

/**
 *  initialize the LCD driver and any HW required by the display.
 *  Returns true if display is successfully been initialized
 */
bool initialize_display(SPI_HandleTypeDef *hspi) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint8_t ret;
  uint8_t reg;
  uint8_t RxData = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	737b      	strb	r3, [r7, #13]

  // CS pin to High before we start writing
  HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 80038e8:	2201      	movs	r2, #1
 80038ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038ee:	481b      	ldr	r0, [pc, #108]	; (800395c <initialize_display+0x80>)
 80038f0:	f7fc ff8e 	bl	8000810 <HAL_GPIO_WritePin>

  // CS pin to LOW and to HIGH to reset
  HAL_GPIO_WritePin(GPIOE, RST_PIN, GPIO_PIN_RESET);
 80038f4:	2200      	movs	r2, #0
 80038f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038fa:	4818      	ldr	r0, [pc, #96]	; (800395c <initialize_display+0x80>)
 80038fc:	f7fc ff88 	bl	8000810 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003900:	2064      	movs	r0, #100	; 0x64
 8003902:	f7fc fcd5 	bl	80002b0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, RST_PIN, GPIO_PIN_SET);
 8003906:	2201      	movs	r2, #1
 8003908:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800390c:	4813      	ldr	r0, [pc, #76]	; (800395c <initialize_display+0x80>)
 800390e:	f7fc ff7f 	bl	8000810 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003912:	2064      	movs	r0, #100	; 0x64
 8003914:	f7fc fccc 	bl	80002b0 <HAL_Delay>

  // read Register 0 to check the model
  reg = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	73fb      	strb	r3, [r7, #15]
  ret = SPI_read_register(hspi, reg, &RxData);
 800391c:	f107 020d 	add.w	r2, r7, #13
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff fc91 	bl	800324c <SPI_read_register>
 800392a:	4603      	mov	r3, r0
 800392c:	73bb      	strb	r3, [r7, #14]
  if(ret != DISPLAY_OK || RxData != 0x75)
 800392e:	7bbb      	ldrb	r3, [r7, #14]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <initialize_display+0x5e>
 8003934:	7b7b      	ldrb	r3, [r7, #13]
 8003936:	2b75      	cmp	r3, #117	; 0x75
 8003938:	d001      	beq.n	800393e <initialize_display+0x62>
	  return false;
 800393a:	2300      	movs	r3, #0
 800393c:	e00a      	b.n	8003954 <initialize_display+0x78>

  ret = initialize_driverIC(hspi);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fdf6 	bl	8003530 <initialize_driverIC>
 8003944:	4603      	mov	r3, r0
 8003946:	73bb      	strb	r3, [r7, #14]
  if(ret != DISPLAY_OK)
 8003948:	7bbb      	ldrb	r3, [r7, #14]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <initialize_display+0x76>
	  return false;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <initialize_display+0x78>

  return true;
 8003952:	2301      	movs	r3, #1
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	48001000 	.word	0x48001000

08003960 <display_on>:

/**
 *  Power on the display
 */
void display_on(SPI_HandleTypeDef *hspi, bool on){
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
	uint8_t TxData = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]

	if(on == true)
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d109      	bne.n	800398a <display_on+0x2a>
	{
		TxData = RA8875_PWRR_NORMAL | RA8875_PWRR_DISPON;
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_PWRR, &TxData);
 800397a:	f107 030f 	add.w	r3, r7, #15
 800397e:	461a      	mov	r2, r3
 8003980:	2101      	movs	r1, #1
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff fc85 	bl	8003292 <SPI_write_register>
	else
	{
		TxData = RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF;
		SPI_write_register(hspi, RA8875_PWRR, &TxData);
	}
	return;
 8003988:	e009      	b.n	800399e <display_on+0x3e>
		TxData = RA8875_PWRR_NORMAL | RA8875_PWRR_DISPOFF;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_PWRR, &TxData);
 800398e:	f107 030f 	add.w	r3, r7, #15
 8003992:	461a      	mov	r2, r3
 8003994:	2101      	movs	r1, #1
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fc7b 	bl	8003292 <SPI_write_register>
	return;
 800399c:	bf00      	nop
}
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <GPIOX_on>:

/**
 *  Set the Extra General Purpose IO Register
 *
 */
void GPIOX_on(SPI_HandleTypeDef *hspi, bool on){
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	70fb      	strb	r3, [r7, #3]
	uint8_t TxData = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]

	if(on == true)
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d109      	bne.n	80039ce <GPIOX_on+0x2a>
	{
		TxData = 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_GPIOX, &TxData);
 80039be:	f107 030f 	add.w	r3, r7, #15
 80039c2:	461a      	mov	r2, r3
 80039c4:	21c7      	movs	r1, #199	; 0xc7
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff fc63 	bl	8003292 <SPI_write_register>
	else
	{
		TxData = 0;
		SPI_write_register(hspi, RA8875_GPIOX, &TxData);
	}
	return;
 80039cc:	e009      	b.n	80039e2 <GPIOX_on+0x3e>
		TxData = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_GPIOX, &TxData);
 80039d2:	f107 030f 	add.w	r3, r7, #15
 80039d6:	461a      	mov	r2, r3
 80039d8:	21c7      	movs	r1, #199	; 0xc7
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fc59 	bl	8003292 <SPI_write_register>
	return;
 80039e0:	bf00      	nop
}
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <PWM1_config>:

/**
 *  Configure the PWM1 clock
 */
void PWM1_config(SPI_HandleTypeDef *hspi, bool on, uint8_t clock){
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	70fb      	strb	r3, [r7, #3]
 80039f4:	4613      	mov	r3, r2
 80039f6:	70bb      	strb	r3, [r7, #2]
	uint8_t TxData = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	73fb      	strb	r3, [r7, #15]

	if(on == true)
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d111      	bne.n	8003a26 <PWM1_config+0x3e>
	{
		TxData = RA8875_P1CR_ENABLE | (clock & 0xF);
 8003a02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	b25b      	sxtb	r3, r3
 8003a0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_P1CR, &TxData);
 8003a16:	f107 030f 	add.w	r3, r7, #15
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	218a      	movs	r1, #138	; 0x8a
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff fc37 	bl	8003292 <SPI_write_register>
	else
	{
		TxData = RA8875_P1CR_DISABLE | (clock & 0xF);
		SPI_write_register(hspi, RA8875_P1CR, &TxData);
	}
	return;
 8003a24:	e00c      	b.n	8003a40 <PWM1_config+0x58>
		TxData = RA8875_P1CR_DISABLE | (clock & 0xF);
 8003a26:	78bb      	ldrb	r3, [r7, #2]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	73fb      	strb	r3, [r7, #15]
		SPI_write_register(hspi, RA8875_P1CR, &TxData);
 8003a30:	f107 030f 	add.w	r3, r7, #15
 8003a34:	461a      	mov	r2, r3
 8003a36:	218a      	movs	r1, #138	; 0x8a
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff fc2a 	bl	8003292 <SPI_write_register>
	return;
 8003a3e:	bf00      	nop
}
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <PWM1_out>:

/**
 * Configure the duty cycle of the PWM
 *
 */
void PWM1_out(SPI_HandleTypeDef *hspi, uint8_t duty_cycle){
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	70fb      	strb	r3, [r7, #3]
	uint8_t TxData = duty_cycle;
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, RA8875_P1DCR, &TxData);
 8003a56:	f107 030f 	add.w	r3, r7, #15
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	218b      	movs	r1, #139	; 0x8b
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fc17 	bl	8003292 <SPI_write_register>
}
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <fill_screen>:

/**
 *  Fill the screen with color
 *
 */
void fill_screen(SPI_HandleTypeDef *hspi, uint16_t color) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af04      	add	r7, sp, #16
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
	rect_helper(hspi, 0, 0, display_width - 1, display_height - 1, color, true);
 8003a78:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	b219      	sxth	r1, r3
 8003a82:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	b21b      	sxth	r3, r3
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	9202      	str	r2, [sp, #8]
 8003a90:	887a      	ldrh	r2, [r7, #2]
 8003a92:	9201      	str	r2, [sp, #4]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	460b      	mov	r3, r1
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff fc3e 	bl	800331e <rect_helper>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <text_mode>:

/**
 *  Sets the display in text mode
 *
 */
void text_mode(SPI_HandleTypeDef *hspi) {
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
	uint8_t RxData = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
	// Set text mode
	SPI_read_register(hspi, RA8875_MWCR0, &RxData);
 8003ab6:	f107 030f 	add.w	r3, r7, #15
 8003aba:	461a      	mov	r2, r3
 8003abc:	2140      	movs	r1, #64	; 0x40
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fbc4 	bl	800324c <SPI_read_register>
	RxData |= RA8875_MWCR0_TXTMODE;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	73fb      	strb	r3, [r7, #15]
	SPI_write_data(hspi, &RxData);
 8003ace:	f107 030f 	add.w	r3, r7, #15
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fb83 	bl	80031e0 <SPI_write_data>

	// Select internal (ROM) font
	SPI_read_register(hspi, 0x21, &RxData);
 8003ada:	f107 030f 	add.w	r3, r7, #15
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2121      	movs	r1, #33	; 0x21
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff fbb2 	bl	800324c <SPI_read_register>
	RxData &= ~((1 << 7) | (1 << 5)); // clear bits 7 and 5
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	f003 035f 	and.w	r3, r3, #95	; 0x5f
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	73fb      	strb	r3, [r7, #15]
	SPI_write_data(hspi, &RxData);
 8003af2:	f107 030f 	add.w	r3, r7, #15
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fb71 	bl	80031e0 <SPI_write_data>
}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <cursor_blink>:
     the lower the number the faster it blinks (00h is 1 frame time,
     FFh is 256 Frames time.
     Blink Time (sec) = BTCR[44h]x(1/Frame_rate)
 *
 */
void cursor_blink(SPI_HandleTypeDef *hspi, uint8_t rate) {
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	70fb      	strb	r3, [r7, #3]
	uint8_t RxData = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
	uint8_t TxData = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73bb      	strb	r3, [r7, #14]

	// Set text mode
	SPI_read_register(hspi, RA8875_MWCR0, &RxData);
 8003b1a:	f107 030f 	add.w	r3, r7, #15
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2140      	movs	r1, #64	; 0x40
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fb92 	bl	800324c <SPI_read_register>
	RxData |= RA8875_MWCR0_CURSOR;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	73fb      	strb	r3, [r7, #15]
	SPI_write_data(hspi, &RxData);
 8003b32:	f107 030f 	add.w	r3, r7, #15
 8003b36:	4619      	mov	r1, r3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff fb51 	bl	80031e0 <SPI_write_data>

	// Select internal (ROM) font
	SPI_read_register(hspi, RA8875_MWCR0, &RxData);
 8003b3e:	f107 030f 	add.w	r3, r7, #15
 8003b42:	461a      	mov	r2, r3
 8003b44:	2140      	movs	r1, #64	; 0x40
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fb80 	bl	800324c <SPI_read_register>
	RxData |= RA8875_MWCR0_BLINK;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	f043 0320 	orr.w	r3, r3, #32
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	73fb      	strb	r3, [r7, #15]
	SPI_write_data(hspi, &RxData);
 8003b56:	f107 030f 	add.w	r3, r7, #15
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fb3f 	bl	80031e0 <SPI_write_data>

	TxData = rate;
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	73bb      	strb	r3, [r7, #14]
	SPI_write_register(hspi, RA8875_BTCR, &TxData);
 8003b66:	f107 030e 	add.w	r3, r7, #14
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	2144      	movs	r1, #68	; 0x44
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff fb8f 	bl	8003292 <SPI_write_register>
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <set_cursor>:

/**
 *  Set the location of the cursor
 *
 */
void set_cursor(SPI_HandleTypeDef *hspi, uint16_t x, uint16_t y){
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	807b      	strh	r3, [r7, #2]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	803b      	strh	r3, [r7, #0]
	uint8_t TxData = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	73fb      	strb	r3, [r7, #15]

	TxData = x & 0xFF;
 8003b90:	887b      	ldrh	r3, [r7, #2]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x2A, &TxData);
 8003b96:	f107 030f 	add.w	r3, r7, #15
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	212a      	movs	r1, #42	; 0x2a
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff fb77 	bl	8003292 <SPI_write_register>

	TxData = x >> 8;
 8003ba4:	887b      	ldrh	r3, [r7, #2]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x2B, &TxData);
 8003bae:	f107 030f 	add.w	r3, r7, #15
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	212b      	movs	r1, #43	; 0x2b
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff fb6b 	bl	8003292 <SPI_write_register>

	TxData = y & 0xFF;
 8003bbc:	883b      	ldrh	r3, [r7, #0]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x2C, &TxData);
 8003bc2:	f107 030f 	add.w	r3, r7, #15
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	212c      	movs	r1, #44	; 0x2c
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff fb61 	bl	8003292 <SPI_write_register>

	TxData = y >> 8;
 8003bd0:	883b      	ldrh	r3, [r7, #0]
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x2D, &TxData);
 8003bda:	f107 030f 	add.w	r3, r7, #15
 8003bde:	461a      	mov	r2, r3
 8003be0:	212d      	movs	r1, #45	; 0x2d
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff fb55 	bl	8003292 <SPI_write_register>
}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <text_write>:

/**
 *  Write the string to the screen
 */
void text_write(SPI_HandleTypeDef *hspi, char* buffer, uint16_t len) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
	SPI_write_command(hspi, RA8875_MRWC);
 8003bfe:	2102      	movs	r1, #2
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f7ff fa81 	bl	8003108 <SPI_write_command>

	for(uint16_t i = 0; i < len; i++) {
 8003c06:	2300      	movs	r3, #0
 8003c08:	82fb      	strh	r3, [r7, #22]
 8003c0a:	e00d      	b.n	8003c28 <text_write+0x38>
		uint8_t each_char = buffer[i];
 8003c0c:	8afb      	ldrh	r3, [r7, #22]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4413      	add	r3, r2
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	757b      	strb	r3, [r7, #21]
		SPI_write_data(hspi, &each_char);
 8003c16:	f107 0315 	add.w	r3, r7, #21
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff fadf 	bl	80031e0 <SPI_write_data>
	for(uint16_t i = 0; i < len; i++) {
 8003c22:	8afb      	ldrh	r3, [r7, #22]
 8003c24:	3301      	adds	r3, #1
 8003c26:	82fb      	strh	r3, [r7, #22]
 8003c28:	8afa      	ldrh	r2, [r7, #22]
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d3ed      	bcc.n	8003c0c <text_write+0x1c>
	}
	HAL_Delay(1);
 8003c30:	2001      	movs	r0, #1
 8003c32:	f7fc fb3d 	bl	80002b0 <HAL_Delay>
}
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <clear_screen>:

void clear_screen(SPI_HandleTypeDef *hspi) {
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
	uint8_t TxData = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	73fb      	strb	r3, [r7, #15]

	TxData = RA8875_MCLR_START | RA8875_MCLR_FULL;
 8003c4a:	2380      	movs	r3, #128	; 0x80
 8003c4c:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, RA8875_MCLR, &TxData);
 8003c4e:	f107 030f 	add.w	r3, r7, #15
 8003c52:	461a      	mov	r2, r3
 8003c54:	218e      	movs	r1, #142	; 0x8e
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff fb1b 	bl	8003292 <SPI_write_register>
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <set_text_color>:

/**
 *  Set the color of the text
 *
 */
void set_text_color(SPI_HandleTypeDef *hspi, uint16_t text_color) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
	uint8_t TxData = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	73fb      	strb	r3, [r7, #15]
	uint8_t RxData = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	73bb      	strb	r3, [r7, #14]

	// Set Fore Color
	TxData = ((text_color & 0xf800) >> 11);
 8003c78:	887b      	ldrh	r3, [r7, #2]
 8003c7a:	0adb      	lsrs	r3, r3, #11
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x63, &TxData);
 8003c82:	f107 030f 	add.w	r3, r7, #15
 8003c86:	461a      	mov	r2, r3
 8003c88:	2163      	movs	r1, #99	; 0x63
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff fb01 	bl	8003292 <SPI_write_register>

	TxData = ((text_color & 0x07e0) >> 5);
 8003c90:	887b      	ldrh	r3, [r7, #2]
 8003c92:	115b      	asrs	r3, r3, #5
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x64, &TxData);
 8003c9e:	f107 030f 	add.w	r3, r7, #15
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2164      	movs	r1, #100	; 0x64
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff faf3 	bl	8003292 <SPI_write_register>

	TxData = text_color & 0x001f;
 8003cac:	887b      	ldrh	r3, [r7, #2]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	73fb      	strb	r3, [r7, #15]
	SPI_write_register(hspi, 0x65, &TxData);
 8003cb8:	f107 030f 	add.w	r3, r7, #15
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2165      	movs	r1, #101	; 0x65
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fae6 	bl	8003292 <SPI_write_register>

	// Set transparency flag
	TxData = text_color & 0x001f;
 8003cc6:	887b      	ldrh	r3, [r7, #2]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	73fb      	strb	r3, [r7, #15]
	SPI_read_register(hspi, 0x22, &RxData);
 8003cd2:	f107 030e 	add.w	r3, r7, #14
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	2122      	movs	r1, #34	; 0x22
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fab6 	bl	800324c <SPI_read_register>
	RxData |= (1 << 6);
 8003ce0:	7bbb      	ldrb	r3, [r7, #14]
 8003ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	73bb      	strb	r3, [r7, #14]
	SPI_write_data(hspi, &RxData);
 8003cea:	f107 030e 	add.w	r3, r7, #14
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fa75 	bl	80031e0 <SPI_write_data>
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <enlarge_text>:

/**
 *  Enlarge the text, 4x zoom is the max
 *
 */
void enlarge_text(SPI_HandleTypeDef *hspi, uint8_t zoom) {
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	70fb      	strb	r3, [r7, #3]
	uint8_t actual_zoom = zoom - 1;
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
	uint8_t RxData = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	73bb      	strb	r3, [r7, #14]

	if(actual_zoom > 3)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d901      	bls.n	8003d1e <enlarge_text+0x20>
		actual_zoom = 3;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	73fb      	strb	r3, [r7, #15]

	SPI_read_register(hspi, 0x22 , &RxData);
 8003d1e:	f107 030e 	add.w	r3, r7, #14
 8003d22:	461a      	mov	r2, r3
 8003d24:	2122      	movs	r1, #34	; 0x22
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff fa90 	bl	800324c <SPI_read_register>
	RxData &= ~(0xF);
 8003d2c:	7bbb      	ldrb	r3, [r7, #14]
 8003d2e:	f023 030f 	bic.w	r3, r3, #15
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	73bb      	strb	r3, [r7, #14]
	RxData |= actual_zoom << 2;
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	b25a      	sxtb	r2, r3
 8003d3c:	7bbb      	ldrb	r3, [r7, #14]
 8003d3e:	b25b      	sxtb	r3, r3
 8003d40:	4313      	orrs	r3, r2
 8003d42:	b25b      	sxtb	r3, r3
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	73bb      	strb	r3, [r7, #14]
	RxData |= actual_zoom;
 8003d48:	7bba      	ldrb	r2, [r7, #14]
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	73bb      	strb	r3, [r7, #14]
	SPI_write_data(hspi, &RxData);
 8003d52:	f107 030e 	add.w	r3, r7, #14
 8003d56:	4619      	mov	r1, r3
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fa41 	bl	80031e0 <SPI_write_data>

}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d68:	b5b0      	push	{r4, r5, r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d6e:	f7fc fa2b 	bl	80001c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LCD_GLASS_Init();
 8003d72:	f000 fa61 	bl	8004238 <BSP_LCD_GLASS_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d76:	f000 f8dd 	bl	8003f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d7a:	f000 f9fd 	bl	8004178 <MX_GPIO_Init>
  MX_LCD_Init();
 8003d7e:	f000 f985 	bl	800408c <MX_LCD_Init>
  MX_I2C1_Init();
 8003d82:	f000 f945 	bl	8004010 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003d86:	f000 f9b9 	bl	80040fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ///////////////////////////////////
  // Start of initialization
  //
  //////////////////////////////////
  initialize_display(&hspi1); // initialize display
 8003d8a:	4868      	ldr	r0, [pc, #416]	; (8003f2c <main+0x1c4>)
 8003d8c:	f7ff fda6 	bl	80038dc <initialize_display>
  display_on(&hspi1, true); // turn on display
 8003d90:	2101      	movs	r1, #1
 8003d92:	4866      	ldr	r0, [pc, #408]	; (8003f2c <main+0x1c4>)
 8003d94:	f7ff fde4 	bl	8003960 <display_on>
  GPIOX_on(&hspi1, true);  // Enable TFT - display enable tied to GPIOX
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4864      	ldr	r0, [pc, #400]	; (8003f2c <main+0x1c4>)
 8003d9c:	f7ff fe02 	bl	80039a4 <GPIOX_on>
  PWM1_config(&hspi1, true, RA8875_PWM_CLK_DIV1024);
 8003da0:	220a      	movs	r2, #10
 8003da2:	2101      	movs	r1, #1
 8003da4:	4861      	ldr	r0, [pc, #388]	; (8003f2c <main+0x1c4>)
 8003da6:	f7ff fe1f 	bl	80039e8 <PWM1_config>

  // Play with PWM (will see breathing from the backlight)
  for(int i = 255 ; i != 0; i-=5){
 8003daa:	23ff      	movs	r3, #255	; 0xff
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	e00b      	b.n	8003dc8 <main+0x60>
	  PWM1_out(&hspi1, i);
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	4619      	mov	r1, r3
 8003db6:	485d      	ldr	r0, [pc, #372]	; (8003f2c <main+0x1c4>)
 8003db8:	f7ff fe45 	bl	8003a46 <PWM1_out>
	  HAL_Delay(50);
 8003dbc:	2032      	movs	r0, #50	; 0x32
 8003dbe:	f7fc fa77 	bl	80002b0 <HAL_Delay>
  for(int i = 255 ; i != 0; i-=5){
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3b05      	subs	r3, #5
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <main+0x48>
  }

  for(int i = 0 ; i != 255; i+=5){
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	e00b      	b.n	8003dec <main+0x84>
  	  PWM1_out(&hspi1, i);
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4854      	ldr	r0, [pc, #336]	; (8003f2c <main+0x1c4>)
 8003ddc:	f7ff fe33 	bl	8003a46 <PWM1_out>
  	  HAL_Delay(50);
 8003de0:	2032      	movs	r0, #50	; 0x32
 8003de2:	f7fc fa65 	bl	80002b0 <HAL_Delay>
  for(int i = 0 ; i != 255; i+=5){
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	3305      	adds	r3, #5
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2bff      	cmp	r3, #255	; 0xff
 8003df0:	d1f0      	bne.n	8003dd4 <main+0x6c>
    }

  PWM1_out(&hspi1, 255); // 255 is want we want!
 8003df2:	21ff      	movs	r1, #255	; 0xff
 8003df4:	484d      	ldr	r0, [pc, #308]	; (8003f2c <main+0x1c4>)
 8003df6:	f7ff fe26 	bl	8003a46 <PWM1_out>

  ///////////////////////////////////
  // Start of changing screen color example
  //
  //////////////////////////////////
  fill_screen(&hspi1, RA8875_BLUE);
 8003dfa:	211f      	movs	r1, #31
 8003dfc:	484b      	ldr	r0, [pc, #300]	; (8003f2c <main+0x1c4>)
 8003dfe:	f7ff fe35 	bl	8003a6c <fill_screen>
  HAL_Delay(1000);
 8003e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e06:	f7fc fa53 	bl	80002b0 <HAL_Delay>
  fill_screen(&hspi1, RA8875_RED);
 8003e0a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8003e0e:	4847      	ldr	r0, [pc, #284]	; (8003f2c <main+0x1c4>)
 8003e10:	f7ff fe2c 	bl	8003a6c <fill_screen>
  HAL_Delay(1000);
 8003e14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e18:	f7fc fa4a 	bl	80002b0 <HAL_Delay>
  fill_screen(&hspi1, RA8875_GREEN);
 8003e1c:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8003e20:	4842      	ldr	r0, [pc, #264]	; (8003f2c <main+0x1c4>)
 8003e22:	f7ff fe23 	bl	8003a6c <fill_screen>
  HAL_Delay(1000);
 8003e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e2a:	f7fc fa41 	bl	80002b0 <HAL_Delay>
  fill_screen(&hspi1, RA8875_CYAN);
 8003e2e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003e32:	483e      	ldr	r0, [pc, #248]	; (8003f2c <main+0x1c4>)
 8003e34:	f7ff fe1a 	bl	8003a6c <fill_screen>
  HAL_Delay(1000);
 8003e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e3c:	f7fc fa38 	bl	80002b0 <HAL_Delay>
  fill_screen(&hspi1, RA8875_MAGENTA);
 8003e40:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8003e44:	4839      	ldr	r0, [pc, #228]	; (8003f2c <main+0x1c4>)
 8003e46:	f7ff fe11 	bl	8003a6c <fill_screen>
  HAL_Delay(1000);
 8003e4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e4e:	f7fc fa2f 	bl	80002b0 <HAL_Delay>
  fill_screen(&hspi1, RA8875_YELLOW);
 8003e52:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8003e56:	4835      	ldr	r0, [pc, #212]	; (8003f2c <main+0x1c4>)
 8003e58:	f7ff fe08 	bl	8003a6c <fill_screen>
  HAL_Delay(1000);
 8003e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e60:	f7fc fa26 	bl	80002b0 <HAL_Delay>
  fill_screen(&hspi1, RA8875_WHITE);
 8003e64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e68:	4830      	ldr	r0, [pc, #192]	; (8003f2c <main+0x1c4>)
 8003e6a:	f7ff fdff 	bl	8003a6c <fill_screen>
  HAL_Delay(1000);
 8003e6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e72:	f7fc fa1d 	bl	80002b0 <HAL_Delay>
  fill_screen(&hspi1, RA8875_BLACK);
 8003e76:	2100      	movs	r1, #0
 8003e78:	482c      	ldr	r0, [pc, #176]	; (8003f2c <main+0x1c4>)
 8003e7a:	f7ff fdf7 	bl	8003a6c <fill_screen>
  HAL_Delay(1000);
 8003e7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e82:	f7fc fa15 	bl	80002b0 <HAL_Delay>
  ///////////////////////////////////
  // Start of text example
  //
  //////////////////////////////////

  text_mode(&hspi1); // Switch from graphics mode to text mode
 8003e86:	4829      	ldr	r0, [pc, #164]	; (8003f2c <main+0x1c4>)
 8003e88:	f7ff fe0f 	bl	8003aaa <text_mode>
  cursor_blink(&hspi1, 32); // Start cursor blinking
 8003e8c:	2120      	movs	r1, #32
 8003e8e:	4827      	ldr	r0, [pc, #156]	; (8003f2c <main+0x1c4>)
 8003e90:	f7ff fe39 	bl	8003b06 <cursor_blink>
  /* USER CODE END 2 */

  char string[] = "Hello, World! :)";
 8003e94:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <main+0x1c8>)
 8003e96:	1d3c      	adds	r4, r7, #4
 8003e98:	461d      	mov	r5, r3
 8003e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	7023      	strb	r3, [r4, #0]
  set_cursor(&hspi1, 100, 100); // Set cursor in 100, 100
 8003ea2:	2264      	movs	r2, #100	; 0x64
 8003ea4:	2164      	movs	r1, #100	; 0x64
 8003ea6:	4821      	ldr	r0, [pc, #132]	; (8003f2c <main+0x1c4>)
 8003ea8:	f7ff fe68 	bl	8003b7c <set_cursor>
  set_text_color(&hspi1, RA8875_BLUE); // change text color
 8003eac:	211f      	movs	r1, #31
 8003eae:	481f      	ldr	r0, [pc, #124]	; (8003f2c <main+0x1c4>)
 8003eb0:	f7ff fed8 	bl	8003c64 <set_text_color>
  text_write(&hspi1, string, 16); // Write the string to the display
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	2210      	movs	r2, #16
 8003eb8:	4619      	mov	r1, r3
 8003eba:	481c      	ldr	r0, [pc, #112]	; (8003f2c <main+0x1c4>)
 8003ebc:	f7ff fe98 	bl	8003bf0 <text_write>

  HAL_Delay(2000);
 8003ec0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003ec4:	f7fc f9f4 	bl	80002b0 <HAL_Delay>
  clear_screen(&hspi1); // delete everything
 8003ec8:	4818      	ldr	r0, [pc, #96]	; (8003f2c <main+0x1c4>)
 8003eca:	f7ff feb8 	bl	8003c3e <clear_screen>
  HAL_Delay(2000);
 8003ece:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003ed2:	f7fc f9ed 	bl	80002b0 <HAL_Delay>

  set_cursor(&hspi1, 100, 100); // Set cursor in 100, 100
 8003ed6:	2264      	movs	r2, #100	; 0x64
 8003ed8:	2164      	movs	r1, #100	; 0x64
 8003eda:	4814      	ldr	r0, [pc, #80]	; (8003f2c <main+0x1c4>)
 8003edc:	f7ff fe4e 	bl	8003b7c <set_cursor>
  set_text_color(&hspi1, RA8875_WHITE); // change text color
 8003ee0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ee4:	4811      	ldr	r0, [pc, #68]	; (8003f2c <main+0x1c4>)
 8003ee6:	f7ff febd 	bl	8003c64 <set_text_color>
  text_write(&hspi1, string, 16); // Write the string to the display
 8003eea:	1d3b      	adds	r3, r7, #4
 8003eec:	2210      	movs	r2, #16
 8003eee:	4619      	mov	r1, r3
 8003ef0:	480e      	ldr	r0, [pc, #56]	; (8003f2c <main+0x1c4>)
 8003ef2:	f7ff fe7d 	bl	8003bf0 <text_write>

  HAL_Delay(2000);
 8003ef6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003efa:	f7fc f9d9 	bl	80002b0 <HAL_Delay>
  clear_screen(&hspi1); // delete everything
 8003efe:	480b      	ldr	r0, [pc, #44]	; (8003f2c <main+0x1c4>)
 8003f00:	f7ff fe9d 	bl	8003c3e <clear_screen>
  HAL_Delay(2000);
 8003f04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003f08:	f7fc f9d2 	bl	80002b0 <HAL_Delay>

  enlarge_text(&hspi1, 3);
 8003f0c:	2103      	movs	r1, #3
 8003f0e:	4807      	ldr	r0, [pc, #28]	; (8003f2c <main+0x1c4>)
 8003f10:	f7ff fef5 	bl	8003cfe <enlarge_text>
  set_cursor(&hspi1, 100, 100); // Set cursor in 100, 100
 8003f14:	2264      	movs	r2, #100	; 0x64
 8003f16:	2164      	movs	r1, #100	; 0x64
 8003f18:	4804      	ldr	r0, [pc, #16]	; (8003f2c <main+0x1c4>)
 8003f1a:	f7ff fe2f 	bl	8003b7c <set_cursor>
  text_write(&hspi1, string, 16); // Write the string to the display
 8003f1e:	1d3b      	adds	r3, r7, #4
 8003f20:	2210      	movs	r2, #16
 8003f22:	4619      	mov	r1, r3
 8003f24:	4801      	ldr	r0, [pc, #4]	; (8003f2c <main+0x1c4>)
 8003f26:	f7ff fe63 	bl	8003bf0 <text_write>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003f2a:	e7fe      	b.n	8003f2a <main+0x1c2>
 8003f2c:	200000b8 	.word	0x200000b8
 8003f30:	080047f4 	.word	0x080047f4

08003f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b0b8      	sub	sp, #224	; 0xe0
 8003f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f3e:	2244      	movs	r2, #68	; 0x44
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fc42 	bl	80047cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f48:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	60da      	str	r2, [r3, #12]
 8003f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f58:	463b      	mov	r3, r7
 8003f5a:	2288      	movs	r2, #136	; 0x88
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fc34 	bl	80047cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8003f64:	2318      	movs	r3, #24
 8003f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003f7c:	2360      	movs	r3, #96	; 0x60
 8003f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fc ff51 	bl	8000e34 <HAL_RCC_OscConfig>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8003f98:	f000 f946 	bl	8004228 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f9c:	230f      	movs	r3, #15
 8003f9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003fba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fd fb1d 	bl	8001600 <HAL_RCC_ClockConfig>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003fcc:	f000 f92c 	bl	8004228 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1;
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <SystemClock_Config+0xd8>)
 8003fd2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fe0:	463b      	mov	r3, r7
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd fcd8 	bl	8001998 <HAL_RCCEx_PeriphCLKConfig>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003fee:	f000 f91b 	bl	8004228 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003ff2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ff6:	f7fc fec7 	bl	8000d88 <HAL_PWREx_ControlVoltageScaling>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8004000:	f000 f912 	bl	8004228 <Error_Handler>
  }
}
 8004004:	bf00      	nop
 8004006:	37e0      	adds	r7, #224	; 0xe0
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	00020040 	.word	0x00020040

08004010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004014:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <MX_I2C1_Init+0x74>)
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <MX_I2C1_Init+0x78>)
 8004018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <MX_I2C1_Init+0x74>)
 800401c:	f640 6214 	movw	r2, #3604	; 0xe14
 8004020:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004022:	4b18      	ldr	r3, [pc, #96]	; (8004084 <MX_I2C1_Init+0x74>)
 8004024:	2200      	movs	r2, #0
 8004026:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004028:	4b16      	ldr	r3, [pc, #88]	; (8004084 <MX_I2C1_Init+0x74>)
 800402a:	2201      	movs	r2, #1
 800402c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800402e:	4b15      	ldr	r3, [pc, #84]	; (8004084 <MX_I2C1_Init+0x74>)
 8004030:	2200      	movs	r2, #0
 8004032:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004034:	4b13      	ldr	r3, [pc, #76]	; (8004084 <MX_I2C1_Init+0x74>)
 8004036:	2200      	movs	r2, #0
 8004038:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800403a:	4b12      	ldr	r3, [pc, #72]	; (8004084 <MX_I2C1_Init+0x74>)
 800403c:	2200      	movs	r2, #0
 800403e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004040:	4b10      	ldr	r3, [pc, #64]	; (8004084 <MX_I2C1_Init+0x74>)
 8004042:	2200      	movs	r2, #0
 8004044:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004046:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <MX_I2C1_Init+0x74>)
 8004048:	2200      	movs	r2, #0
 800404a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800404c:	480d      	ldr	r0, [pc, #52]	; (8004084 <MX_I2C1_Init+0x74>)
 800404e:	f7fc fbf7 	bl	8000840 <HAL_I2C_Init>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004058:	f000 f8e6 	bl	8004228 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800405c:	2100      	movs	r1, #0
 800405e:	4809      	ldr	r0, [pc, #36]	; (8004084 <MX_I2C1_Init+0x74>)
 8004060:	f7fc fc7d 	bl	800095e <HAL_I2CEx_ConfigAnalogFilter>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800406a:	f000 f8dd 	bl	8004228 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800406e:	2100      	movs	r1, #0
 8004070:	4804      	ldr	r0, [pc, #16]	; (8004084 <MX_I2C1_Init+0x74>)
 8004072:	f7fc fcbf 	bl	80009f4 <HAL_I2CEx_ConfigDigitalFilter>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800407c:	f000 f8d4 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004080:	bf00      	nop
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20000030 	.word	0x20000030
 8004088:	40005400 	.word	0x40005400

0800408c <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 8004090:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <MX_LCD_Init+0x68>)
 8004092:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <MX_LCD_Init+0x6c>)
 8004094:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8004096:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <MX_LCD_Init+0x68>)
 8004098:	2200      	movs	r2, #0
 800409a:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 800409c:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <MX_LCD_Init+0x68>)
 800409e:	2200      	movs	r2, #0
 80040a0:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_2;
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <MX_LCD_Init+0x68>)
 80040a4:	2204      	movs	r2, #4
 80040a6:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80040a8:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <MX_LCD_Init+0x68>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <MX_LCD_Init+0x68>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <MX_LCD_Init+0x68>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80040ba:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <MX_LCD_Init+0x68>)
 80040bc:	2200      	movs	r2, #0
 80040be:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <MX_LCD_Init+0x68>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80040c6:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <MX_LCD_Init+0x68>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80040cc:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <MX_LCD_Init+0x68>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80040d2:	4b08      	ldr	r3, [pc, #32]	; (80040f4 <MX_LCD_Init+0x68>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80040d8:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <MX_LCD_Init+0x68>)
 80040da:	2200      	movs	r2, #0
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80040de:	4805      	ldr	r0, [pc, #20]	; (80040f4 <MX_LCD_Init+0x68>)
 80040e0:	f7fc fcd4 	bl	8000a8c <HAL_LCD_Init>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_LCD_Init+0x62>
  {
    Error_Handler();
 80040ea:	f000 f89d 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 80040ee:	bf00      	nop
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	2000007c 	.word	0x2000007c
 80040f8:	40002400 	.word	0x40002400

080040fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <MX_SPI1_Init+0x74>)
 8004102:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <MX_SPI1_Init+0x78>)
 8004104:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004106:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <MX_SPI1_Init+0x74>)
 8004108:	f44f 7282 	mov.w	r2, #260	; 0x104
 800410c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800410e:	4b18      	ldr	r3, [pc, #96]	; (8004170 <MX_SPI1_Init+0x74>)
 8004110:	2200      	movs	r2, #0
 8004112:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004114:	4b16      	ldr	r3, [pc, #88]	; (8004170 <MX_SPI1_Init+0x74>)
 8004116:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800411a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800411c:	4b14      	ldr	r3, [pc, #80]	; (8004170 <MX_SPI1_Init+0x74>)
 800411e:	2200      	movs	r2, #0
 8004120:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004122:	4b13      	ldr	r3, [pc, #76]	; (8004170 <MX_SPI1_Init+0x74>)
 8004124:	2200      	movs	r2, #0
 8004126:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004128:	4b11      	ldr	r3, [pc, #68]	; (8004170 <MX_SPI1_Init+0x74>)
 800412a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800412e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <MX_SPI1_Init+0x74>)
 8004132:	2208      	movs	r2, #8
 8004134:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004136:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <MX_SPI1_Init+0x74>)
 8004138:	2200      	movs	r2, #0
 800413a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <MX_SPI1_Init+0x74>)
 800413e:	2200      	movs	r2, #0
 8004140:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <MX_SPI1_Init+0x74>)
 8004144:	2200      	movs	r2, #0
 8004146:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <MX_SPI1_Init+0x74>)
 800414a:	2207      	movs	r2, #7
 800414c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <MX_SPI1_Init+0x74>)
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <MX_SPI1_Init+0x74>)
 8004156:	2200      	movs	r2, #0
 8004158:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800415a:	4805      	ldr	r0, [pc, #20]	; (8004170 <MX_SPI1_Init+0x74>)
 800415c:	f7fe f8cc 	bl	80022f8 <HAL_SPI_Init>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004166:	f000 f85f 	bl	8004228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200000b8 	.word	0x200000b8
 8004174:	40013000 	.word	0x40013000

08004178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08a      	sub	sp, #40	; 0x28
 800417c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800417e:	f107 0314 	add.w	r3, r7, #20
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	609a      	str	r2, [r3, #8]
 800418a:	60da      	str	r2, [r3, #12]
 800418c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800418e:	4b24      	ldr	r3, [pc, #144]	; (8004220 <MX_GPIO_Init+0xa8>)
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	4a23      	ldr	r2, [pc, #140]	; (8004220 <MX_GPIO_Init+0xa8>)
 8004194:	f043 0304 	orr.w	r3, r3, #4
 8004198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800419a:	4b21      	ldr	r3, [pc, #132]	; (8004220 <MX_GPIO_Init+0xa8>)
 800419c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041a6:	4b1e      	ldr	r3, [pc, #120]	; (8004220 <MX_GPIO_Init+0xa8>)
 80041a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041aa:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <MX_GPIO_Init+0xa8>)
 80041ac:	f043 0310 	orr.w	r3, r3, #16
 80041b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041b2:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <MX_GPIO_Init+0xa8>)
 80041b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041be:	4b18      	ldr	r3, [pc, #96]	; (8004220 <MX_GPIO_Init+0xa8>)
 80041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c2:	4a17      	ldr	r2, [pc, #92]	; (8004220 <MX_GPIO_Init+0xa8>)
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <MX_GPIO_Init+0xa8>)
 80041cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <MX_GPIO_Init+0xa8>)
 80041d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041da:	4a11      	ldr	r2, [pc, #68]	; (8004220 <MX_GPIO_Init+0xa8>)
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041e2:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <MX_GPIO_Init+0xa8>)
 80041e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	607b      	str	r3, [r7, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RST_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 80041ee:	2200      	movs	r2, #0
 80041f0:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80041f4:	480b      	ldr	r0, [pc, #44]	; (8004224 <MX_GPIO_Init+0xac>)
 80041f6:	f7fc fb0b 	bl	8000810 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|SPI1_CS_Pin;
 80041fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004200:	2301      	movs	r3, #1
 8004202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004208:	2300      	movs	r3, #0
 800420a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800420c:	f107 0314 	add.w	r3, r7, #20
 8004210:	4619      	mov	r1, r3
 8004212:	4804      	ldr	r0, [pc, #16]	; (8004224 <MX_GPIO_Init+0xac>)
 8004214:	f7fc f954 	bl	80004c0 <HAL_GPIO_Init>

}
 8004218:	bf00      	nop
 800421a:	3728      	adds	r7, #40	; 0x28
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000
 8004224:	48001000 	.word	0x48001000

08004228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800422c:	bf00      	nop
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 800423e:	4a1a      	ldr	r2, [pc, #104]	; (80042a8 <BSP_LCD_GLASS_Init+0x70>)
 8004240:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8004242:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 8004244:	2200      	movs	r2, #0
 8004246:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8004248:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 800424a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800424e:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8004250:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 8004252:	220c      	movs	r2, #12
 8004254:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8004256:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 8004258:	2240      	movs	r2, #64	; 0x40
 800425a:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 800425e:	2200      	movs	r2, #0
 8004260:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8004262:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 8004264:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8004268:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 800426a:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 800426c:	2200      	movs	r2, #0
 800426e:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8004270:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 8004272:	2240      	movs	r2, #64	; 0x40
 8004274:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 8004278:	2200      	movs	r2, #0
 800427a:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 800427e:	2200      	movs	r2, #0
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 8004284:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8004290:	4804      	ldr	r0, [pc, #16]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 8004292:	f000 f815 	bl	80042c0 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 8004296:	4803      	ldr	r0, [pc, #12]	; (80042a4 <BSP_LCD_GLASS_Init+0x6c>)
 8004298:	f7fc fbf8 	bl	8000a8c <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 800429c:	f000 f806 	bl	80042ac <BSP_LCD_GLASS_Clear>
}
 80042a0:	bf00      	nop
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	2000012c 	.word	0x2000012c
 80042a8:	40002400 	.word	0x40002400

080042ac <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle); 
 80042b0:	4802      	ldr	r0, [pc, #8]	; (80042bc <BSP_LCD_GLASS_Clear+0x10>)
 80042b2:	f7fc fcab 	bl	8000c0c <HAL_LCD_Clear>
}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	2000012c 	.word	0x2000012c

080042c0 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b0c0      	sub	sp, #256	; 0x100
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80042c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	60da      	str	r2, [r3, #12]
 80042d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 80042d8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80042dc:	2244      	movs	r2, #68	; 0x44
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fa73 	bl	80047cc <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80042e6:	f107 0320 	add.w	r3, r7, #32
 80042ea:	2288      	movs	r2, #136	; 0x88
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fa6c 	bl	80047cc <memset>
  
  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80042f4:	4b51      	ldr	r3, [pc, #324]	; (800443c <LCD_MspInit+0x17c>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	4a50      	ldr	r2, [pc, #320]	; (800443c <LCD_MspInit+0x17c>)
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004300:	4b4e      	ldr	r3, [pc, #312]	; (800443c <LCD_MspInit+0x17c>)
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	69fb      	ldr	r3, [r7, #28]
  
  /*##-2- Configure LSE as RTC clock soucre ###################################*/ 
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 800430c:	2304      	movs	r3, #4
 800430e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 8004312:	2300      	movs	r3, #0
 8004314:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8004318:	2301      	movs	r3, #1
 800431a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 800431e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004322:	4618      	mov	r0, r3
 8004324:	f7fc fd86 	bl	8000e34 <HAL_RCC_OscConfig>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d000      	beq.n	8004330 <LCD_MspInit+0x70>
  { 
    while(1);
 800432e:	e7fe      	b.n	800432e <LCD_MspInit+0x6e>
  }
  
  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004334:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800433a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 800433e:	f107 0320 	add.w	r3, r7, #32
 8004342:	4618      	mov	r0, r3
 8004344:	f7fd fb28 	bl	8001998 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004348:	4b3c      	ldr	r3, [pc, #240]	; (800443c <LCD_MspInit+0x17c>)
 800434a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434c:	4a3b      	ldr	r2, [pc, #236]	; (800443c <LCD_MspInit+0x17c>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004354:	4b39      	ldr	r3, [pc, #228]	; (800443c <LCD_MspInit+0x17c>)
 8004356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004360:	4b36      	ldr	r3, [pc, #216]	; (800443c <LCD_MspInit+0x17c>)
 8004362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004364:	4a35      	ldr	r2, [pc, #212]	; (800443c <LCD_MspInit+0x17c>)
 8004366:	f043 0302 	orr.w	r3, r3, #2
 800436a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800436c:	4b33      	ldr	r3, [pc, #204]	; (800443c <LCD_MspInit+0x17c>)
 800436e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004378:	4b30      	ldr	r3, [pc, #192]	; (800443c <LCD_MspInit+0x17c>)
 800437a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437c:	4a2f      	ldr	r2, [pc, #188]	; (800443c <LCD_MspInit+0x17c>)
 800437e:	f043 0304 	orr.w	r3, r3, #4
 8004382:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004384:	4b2d      	ldr	r3, [pc, #180]	; (800443c <LCD_MspInit+0x17c>)
 8004386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004390:	4b2a      	ldr	r3, [pc, #168]	; (800443c <LCD_MspInit+0x17c>)
 8004392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004394:	4a29      	ldr	r2, [pc, #164]	; (800443c <LCD_MspInit+0x17c>)
 8004396:	f043 0308 	orr.w	r3, r3, #8
 800439a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800439c:	4b27      	ldr	r3, [pc, #156]	; (800443c <LCD_MspInit+0x17c>)
 800439e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]

  
  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 80043a8:	f248 73c0 	movw	r3, #34752	; 0x87c0
 80043ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 80043b0:	2302      	movs	r3, #2
 80043b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_HIGH;
 80043bc:	2303      	movs	r3, #3
 80043be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 80043c2:	230b      	movs	r3, #11
 80043c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 80043c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80043cc:	4619      	mov	r1, r3
 80043ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043d2:	f7fc f875 	bl	80004c0 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 80043d6:	f24f 2333 	movw	r3, #62003	; 0xf233
 80043da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 80043de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80043e2:	4619      	mov	r1, r3
 80043e4:	4816      	ldr	r0, [pc, #88]	; (8004440 <LCD_MspInit+0x180>)
 80043e6:	f7fc f86b 	bl	80004c0 <HAL_GPIO_Init>
  
  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 80043ea:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80043ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80043f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80043f6:	4619      	mov	r1, r3
 80043f8:	4812      	ldr	r0, [pc, #72]	; (8004444 <LCD_MspInit+0x184>)
 80043fa:	f7fc f861 	bl	80004c0 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 80043fe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004402:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8004406:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800440a:	4619      	mov	r1, r3
 800440c:	480e      	ldr	r0, [pc, #56]	; (8004448 <LCD_MspInit+0x188>)
 800440e:	f7fc f857 	bl	80004c0 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 8004412:	2002      	movs	r0, #2
 8004414:	f7fb ff4c 	bl	80002b0 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 8004418:	4b08      	ldr	r3, [pc, #32]	; (800443c <LCD_MspInit+0x17c>)
 800441a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441c:	4a07      	ldr	r2, [pc, #28]	; (800443c <LCD_MspInit+0x17c>)
 800441e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004422:	6593      	str	r3, [r2, #88]	; 0x58
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <LCD_MspInit+0x17c>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	68bb      	ldr	r3, [r7, #8]
}
 8004430:	bf00      	nop
 8004432:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	48000400 	.word	0x48000400
 8004444:	48000800 	.word	0x48000800
 8004448:	48000c00 	.word	0x48000c00

0800444c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <HAL_MspInit+0x44>)
 8004454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004456:	4a0e      	ldr	r2, [pc, #56]	; (8004490 <HAL_MspInit+0x44>)
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	6613      	str	r3, [r2, #96]	; 0x60
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <HAL_MspInit+0x44>)
 8004460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <HAL_MspInit+0x44>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	4a08      	ldr	r2, [pc, #32]	; (8004490 <HAL_MspInit+0x44>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004474:	6593      	str	r3, [r2, #88]	; 0x58
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_MspInit+0x44>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000

08004494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	; 0x28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800449c:	f107 0314 	add.w	r3, r7, #20
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	60da      	str	r2, [r3, #12]
 80044aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a17      	ldr	r2, [pc, #92]	; (8004510 <HAL_I2C_MspInit+0x7c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d127      	bne.n	8004506 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <HAL_I2C_MspInit+0x80>)
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	4a16      	ldr	r2, [pc, #88]	; (8004514 <HAL_I2C_MspInit+0x80>)
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044c2:	4b14      	ldr	r3, [pc, #80]	; (8004514 <HAL_I2C_MspInit+0x80>)
 80044c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044ce:	23c0      	movs	r3, #192	; 0xc0
 80044d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044d2:	2312      	movs	r3, #18
 80044d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044da:	2303      	movs	r3, #3
 80044dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044de:	2304      	movs	r3, #4
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044e2:	f107 0314 	add.w	r3, r7, #20
 80044e6:	4619      	mov	r1, r3
 80044e8:	480b      	ldr	r0, [pc, #44]	; (8004518 <HAL_I2C_MspInit+0x84>)
 80044ea:	f7fb ffe9 	bl	80004c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044ee:	4b09      	ldr	r3, [pc, #36]	; (8004514 <HAL_I2C_MspInit+0x80>)
 80044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f2:	4a08      	ldr	r2, [pc, #32]	; (8004514 <HAL_I2C_MspInit+0x80>)
 80044f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044f8:	6593      	str	r3, [r2, #88]	; 0x58
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_I2C_MspInit+0x80>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004506:	bf00      	nop
 8004508:	3728      	adds	r7, #40	; 0x28
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40005400 	.word	0x40005400
 8004514:	40021000 	.word	0x40021000
 8004518:	48000400 	.word	0x48000400

0800451c <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004524:	f107 0314 	add.w	r3, r7, #20
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]
  if(hlcd->Instance==LCD)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a26      	ldr	r2, [pc, #152]	; (80045d4 <HAL_LCD_MspInit+0xb8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d145      	bne.n	80045ca <HAL_LCD_MspInit+0xae>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800453e:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <HAL_LCD_MspInit+0xbc>)
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	4a25      	ldr	r2, [pc, #148]	; (80045d8 <HAL_LCD_MspInit+0xbc>)
 8004544:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004548:	6593      	str	r3, [r2, #88]	; 0x58
 800454a:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <HAL_LCD_MspInit+0xbc>)
 800454c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004556:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_LCD_MspInit+0xbc>)
 8004558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455a:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <HAL_LCD_MspInit+0xbc>)
 800455c:	f043 0304 	orr.w	r3, r3, #4
 8004560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004562:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_LCD_MspInit+0xbc>)
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800456e:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <HAL_LCD_MspInit+0xbc>)
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	4a19      	ldr	r2, [pc, #100]	; (80045d8 <HAL_LCD_MspInit+0xbc>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800457a:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <HAL_LCD_MspInit+0xbc>)
 800457c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	68bb      	ldr	r3, [r7, #8]
    /**LCD GPIO Configuration
    PC3     ------> LCD_VLCD
    PA8     ------> LCD_COM0
    PA9     ------> LCD_COM1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004586:	2308      	movs	r3, #8
 8004588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458a:	2302      	movs	r3, #2
 800458c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004592:	2300      	movs	r3, #0
 8004594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8004596:	230b      	movs	r3, #11
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800459a:	f107 0314 	add.w	r3, r7, #20
 800459e:	4619      	mov	r1, r3
 80045a0:	480e      	ldr	r0, [pc, #56]	; (80045dc <HAL_LCD_MspInit+0xc0>)
 80045a2:	f7fb ff8d 	bl	80004c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ac:	2302      	movs	r3, #2
 80045ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b4:	2300      	movs	r3, #0
 80045b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80045b8:	230b      	movs	r3, #11
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045bc:	f107 0314 	add.w	r3, r7, #20
 80045c0:	4619      	mov	r1, r3
 80045c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045c6:	f7fb ff7b 	bl	80004c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }

}
 80045ca:	bf00      	nop
 80045cc:	3728      	adds	r7, #40	; 0x28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40002400 	.word	0x40002400
 80045d8:	40021000 	.word	0x40021000
 80045dc:	48000800 	.word	0x48000800

080045e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	f107 0314 	add.w	r3, r7, #20
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a17      	ldr	r2, [pc, #92]	; (800465c <HAL_SPI_MspInit+0x7c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d128      	bne.n	8004654 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004602:	4b17      	ldr	r3, [pc, #92]	; (8004660 <HAL_SPI_MspInit+0x80>)
 8004604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004606:	4a16      	ldr	r2, [pc, #88]	; (8004660 <HAL_SPI_MspInit+0x80>)
 8004608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800460c:	6613      	str	r3, [r2, #96]	; 0x60
 800460e:	4b14      	ldr	r3, [pc, #80]	; (8004660 <HAL_SPI_MspInit+0x80>)
 8004610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800461a:	4b11      	ldr	r3, [pc, #68]	; (8004660 <HAL_SPI_MspInit+0x80>)
 800461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461e:	4a10      	ldr	r2, [pc, #64]	; (8004660 <HAL_SPI_MspInit+0x80>)
 8004620:	f043 0310 	orr.w	r3, r3, #16
 8004624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004626:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <HAL_SPI_MspInit+0x80>)
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004632:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004638:	2302      	movs	r3, #2
 800463a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	2300      	movs	r3, #0
 800463e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004640:	2303      	movs	r3, #3
 8004642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004644:	2305      	movs	r3, #5
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004648:	f107 0314 	add.w	r3, r7, #20
 800464c:	4619      	mov	r1, r3
 800464e:	4805      	ldr	r0, [pc, #20]	; (8004664 <HAL_SPI_MspInit+0x84>)
 8004650:	f7fb ff36 	bl	80004c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004654:	bf00      	nop
 8004656:	3728      	adds	r7, #40	; 0x28
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40013000 	.word	0x40013000
 8004660:	40021000 	.word	0x40021000
 8004664:	48001000 	.word	0x48001000

08004668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004676:	b480      	push	{r7}
 8004678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800467a:	e7fe      	b.n	800467a <HardFault_Handler+0x4>

0800467c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004680:	e7fe      	b.n	8004680 <MemManage_Handler+0x4>

08004682 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004682:	b480      	push	{r7}
 8004684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004686:	e7fe      	b.n	8004686 <BusFault_Handler+0x4>

08004688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800468c:	e7fe      	b.n	800468c <UsageFault_Handler+0x4>

0800468e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800468e:	b480      	push	{r7}
 8004690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004692:	bf00      	nop
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046a0:	bf00      	nop
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046aa:	b480      	push	{r7}
 80046ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046bc:	f7fb fdd8 	bl	8000270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046c0:	bf00      	nop
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046c8:	4b17      	ldr	r3, [pc, #92]	; (8004728 <SystemInit+0x64>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	4a16      	ldr	r2, [pc, #88]	; (8004728 <SystemInit+0x64>)
 80046d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80046d8:	4b14      	ldr	r3, [pc, #80]	; (800472c <SystemInit+0x68>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a13      	ldr	r2, [pc, #76]	; (800472c <SystemInit+0x68>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <SystemInit+0x68>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <SystemInit+0x68>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a0f      	ldr	r2, [pc, #60]	; (800472c <SystemInit+0x68>)
 80046f0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80046f4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80046f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80046fa:	4b0c      	ldr	r3, [pc, #48]	; (800472c <SystemInit+0x68>)
 80046fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004700:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <SystemInit+0x68>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <SystemInit+0x68>)
 8004708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800470c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800470e:	4b07      	ldr	r3, [pc, #28]	; (800472c <SystemInit+0x68>)
 8004710:	2200      	movs	r2, #0
 8004712:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004714:	4b04      	ldr	r3, [pc, #16]	; (8004728 <SystemInit+0x64>)
 8004716:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800471a:	609a      	str	r2, [r3, #8]
#endif
}
 800471c:	bf00      	nop
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	e000ed00 	.word	0xe000ed00
 800472c:	40021000 	.word	0x40021000

08004730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004768 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004734:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004736:	e003      	b.n	8004740 <LoopCopyDataInit>

08004738 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800473a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800473c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800473e:	3104      	adds	r1, #4

08004740 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004740:	480b      	ldr	r0, [pc, #44]	; (8004770 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004742:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004744:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004746:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004748:	d3f6      	bcc.n	8004738 <CopyDataInit>
	ldr	r2, =_sbss
 800474a:	4a0b      	ldr	r2, [pc, #44]	; (8004778 <LoopForever+0x12>)
	b	LoopFillZerobss
 800474c:	e002      	b.n	8004754 <LoopFillZerobss>

0800474e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800474e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004750:	f842 3b04 	str.w	r3, [r2], #4

08004754 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004754:	4b09      	ldr	r3, [pc, #36]	; (800477c <LoopForever+0x16>)
	cmp	r2, r3
 8004756:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004758:	d3f9      	bcc.n	800474e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800475a:	f7ff ffb3 	bl	80046c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800475e:	f000 f811 	bl	8004784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004762:	f7ff fb01 	bl	8003d68 <main>

08004766 <LoopForever>:

LoopForever:
    b LoopForever
 8004766:	e7fe      	b.n	8004766 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004768:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800476c:	08004850 	.word	0x08004850
	ldr	r0, =_sdata
 8004770:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004774:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8004778:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800477c:	20000168 	.word	0x20000168

08004780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004780:	e7fe      	b.n	8004780 <ADC1_2_IRQHandler>
	...

08004784 <__libc_init_array>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4e0d      	ldr	r6, [pc, #52]	; (80047bc <__libc_init_array+0x38>)
 8004788:	4c0d      	ldr	r4, [pc, #52]	; (80047c0 <__libc_init_array+0x3c>)
 800478a:	1ba4      	subs	r4, r4, r6
 800478c:	10a4      	asrs	r4, r4, #2
 800478e:	2500      	movs	r5, #0
 8004790:	42a5      	cmp	r5, r4
 8004792:	d109      	bne.n	80047a8 <__libc_init_array+0x24>
 8004794:	4e0b      	ldr	r6, [pc, #44]	; (80047c4 <__libc_init_array+0x40>)
 8004796:	4c0c      	ldr	r4, [pc, #48]	; (80047c8 <__libc_init_array+0x44>)
 8004798:	f000 f820 	bl	80047dc <_init>
 800479c:	1ba4      	subs	r4, r4, r6
 800479e:	10a4      	asrs	r4, r4, #2
 80047a0:	2500      	movs	r5, #0
 80047a2:	42a5      	cmp	r5, r4
 80047a4:	d105      	bne.n	80047b2 <__libc_init_array+0x2e>
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047ac:	4798      	blx	r3
 80047ae:	3501      	adds	r5, #1
 80047b0:	e7ee      	b.n	8004790 <__libc_init_array+0xc>
 80047b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047b6:	4798      	blx	r3
 80047b8:	3501      	adds	r5, #1
 80047ba:	e7f2      	b.n	80047a2 <__libc_init_array+0x1e>
 80047bc:	08004848 	.word	0x08004848
 80047c0:	08004848 	.word	0x08004848
 80047c4:	08004848 	.word	0x08004848
 80047c8:	0800484c 	.word	0x0800484c

080047cc <memset>:
 80047cc:	4402      	add	r2, r0
 80047ce:	4603      	mov	r3, r0
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d100      	bne.n	80047d6 <memset+0xa>
 80047d4:	4770      	bx	lr
 80047d6:	f803 1b01 	strb.w	r1, [r3], #1
 80047da:	e7f9      	b.n	80047d0 <memset+0x4>

080047dc <_init>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr

080047e8 <_fini>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	bf00      	nop
 80047ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ee:	bc08      	pop	{r3}
 80047f0:	469e      	mov	lr, r3
 80047f2:	4770      	bx	lr

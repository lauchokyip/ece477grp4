
VirtualQueue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800272c  0800272c  0001272c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800276c  0800276c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800276c  0800276c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800276c  0800276c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800276c  0800276c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002770  08002770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002780  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002780  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089bc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000182a  00000000  00000000  000289f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000780  00000000  00000000  0002a228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000698  00000000  00000000  0002a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025855  00000000  00000000  0002b040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085ca  00000000  00000000  00050895  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6814  00000000  00000000  00058e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f673  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b60  00000000  00000000  0013f6f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002714 	.word	0x08002714

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002714 	.word	0x08002714

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f000 f93c 	bl	8000450 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f002 f9b5 	bl	8002558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000204:	4b16      	ldr	r3, [pc, #88]	; (8000260 <HAL_InitTick+0x68>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d022      	beq.n	8000252 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800020c:	4b15      	ldr	r3, [pc, #84]	; (8000264 <HAL_InitTick+0x6c>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b13      	ldr	r3, [pc, #76]	; (8000260 <HAL_InitTick+0x68>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000218:	fbb1 f3f3 	udiv	r3, r1, r3
 800021c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f93c 	bl	800049e <HAL_SYSTICK_Config>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d10f      	bne.n	800024c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b0f      	cmp	r3, #15
 8000230:	d809      	bhi.n	8000246 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000232:	2200      	movs	r2, #0
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	f04f 30ff 	mov.w	r0, #4294967295
 800023a:	f000 f914 	bl	8000466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <HAL_InitTick+0x70>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	6013      	str	r3, [r2, #0]
 8000244:	e007      	b.n	8000256 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000246:	2301      	movs	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	e004      	b.n	8000256 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024c:	2301      	movs	r3, #1
 800024e:	73fb      	strb	r3, [r7, #15]
 8000250:	e001      	b.n	8000256 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000252:	2301      	movs	r3, #1
 8000254:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000256:	7bfb      	ldrb	r3, [r7, #15]
}
 8000258:	4618      	mov	r0, r3
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004
 8000264:	20000008 	.word	0x20000008
 8000268:	20000000 	.word	0x20000000

0800026c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_IncTick+0x1c>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_IncTick+0x20>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4413      	add	r3, r2
 800027a:	4a03      	ldr	r2, [pc, #12]	; (8000288 <HAL_IncTick+0x1c>)
 800027c:	6013      	str	r3, [r2, #0]
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	20000028 	.word	0x20000028
 800028c:	20000004 	.word	0x20000004

08000290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  return uwTick;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <HAL_GetTick+0x14>)
 8000296:	681b      	ldr	r3, [r3, #0]
}
 8000298:	4618      	mov	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000028 	.word	0x20000028

080002a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b0:	f7ff ffee 	bl	8000290 <HAL_GetTick>
 80002b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c0:	d004      	beq.n	80002cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <HAL_Delay+0x40>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	4413      	add	r3, r2
 80002ca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	bf00      	nop
 80002ce:	f7ff ffdf 	bl	8000290 <HAL_GetTick>
 80002d2:	4602      	mov	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x26>
  {
  }
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000004 	.word	0x20000004

080002ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f003 0307 	and.w	r3, r3, #7
 80002fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <__NVIC_SetPriorityGrouping+0x44>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000302:	68ba      	ldr	r2, [r7, #8]
 8000304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000308:	4013      	ands	r3, r2
 800030a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800031c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800031e:	4a04      	ldr	r2, [pc, #16]	; (8000330 <__NVIC_SetPriorityGrouping+0x44>)
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	60d3      	str	r3, [r2, #12]
}
 8000324:	bf00      	nop
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <__NVIC_GetPriorityGrouping+0x18>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	0a1b      	lsrs	r3, r3, #8
 800033e:	f003 0307 	and.w	r3, r3, #7
}
 8000342:	4618      	mov	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	6039      	str	r1, [r7, #0]
 800035a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800035c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000360:	2b00      	cmp	r3, #0
 8000362:	db0a      	blt.n	800037a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	b2da      	uxtb	r2, r3
 8000368:	490c      	ldr	r1, [pc, #48]	; (800039c <__NVIC_SetPriority+0x4c>)
 800036a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036e:	0112      	lsls	r2, r2, #4
 8000370:	b2d2      	uxtb	r2, r2
 8000372:	440b      	add	r3, r1
 8000374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000378:	e00a      	b.n	8000390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	b2da      	uxtb	r2, r3
 800037e:	4908      	ldr	r1, [pc, #32]	; (80003a0 <__NVIC_SetPriority+0x50>)
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	f003 030f 	and.w	r3, r3, #15
 8000386:	3b04      	subs	r3, #4
 8000388:	0112      	lsls	r2, r2, #4
 800038a:	b2d2      	uxtb	r2, r2
 800038c:	440b      	add	r3, r1
 800038e:	761a      	strb	r2, [r3, #24]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000e100 	.word	0xe000e100
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b089      	sub	sp, #36	; 0x24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f003 0307 	and.w	r3, r3, #7
 80003b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003b8:	69fb      	ldr	r3, [r7, #28]
 80003ba:	f1c3 0307 	rsb	r3, r3, #7
 80003be:	2b04      	cmp	r3, #4
 80003c0:	bf28      	it	cs
 80003c2:	2304      	movcs	r3, #4
 80003c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003c6:	69fb      	ldr	r3, [r7, #28]
 80003c8:	3304      	adds	r3, #4
 80003ca:	2b06      	cmp	r3, #6
 80003cc:	d902      	bls.n	80003d4 <NVIC_EncodePriority+0x30>
 80003ce:	69fb      	ldr	r3, [r7, #28]
 80003d0:	3b03      	subs	r3, #3
 80003d2:	e000      	b.n	80003d6 <NVIC_EncodePriority+0x32>
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d8:	f04f 32ff 	mov.w	r2, #4294967295
 80003dc:	69bb      	ldr	r3, [r7, #24]
 80003de:	fa02 f303 	lsl.w	r3, r2, r3
 80003e2:	43da      	mvns	r2, r3
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	401a      	ands	r2, r3
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003ec:	f04f 31ff 	mov.w	r1, #4294967295
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	43d9      	mvns	r1, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003fc:	4313      	orrs	r3, r2
         );
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3724      	adds	r7, #36	; 0x24
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
	...

0800040c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3b01      	subs	r3, #1
 8000418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800041c:	d301      	bcc.n	8000422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800041e:	2301      	movs	r3, #1
 8000420:	e00f      	b.n	8000442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000422:	4a0a      	ldr	r2, [pc, #40]	; (800044c <SysTick_Config+0x40>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3b01      	subs	r3, #1
 8000428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800042a:	210f      	movs	r1, #15
 800042c:	f04f 30ff 	mov.w	r0, #4294967295
 8000430:	f7ff ff8e 	bl	8000350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <SysTick_Config+0x40>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800043a:	4b04      	ldr	r3, [pc, #16]	; (800044c <SysTick_Config+0x40>)
 800043c:	2207      	movs	r2, #7
 800043e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	e000e010 	.word	0xe000e010

08000450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f7ff ff47 	bl	80002ec <__NVIC_SetPriorityGrouping>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b086      	sub	sp, #24
 800046a:	af00      	add	r7, sp, #0
 800046c:	4603      	mov	r3, r0
 800046e:	60b9      	str	r1, [r7, #8]
 8000470:	607a      	str	r2, [r7, #4]
 8000472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000478:	f7ff ff5c 	bl	8000334 <__NVIC_GetPriorityGrouping>
 800047c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	68b9      	ldr	r1, [r7, #8]
 8000482:	6978      	ldr	r0, [r7, #20]
 8000484:	f7ff ff8e 	bl	80003a4 <NVIC_EncodePriority>
 8000488:	4602      	mov	r2, r0
 800048a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800048e:	4611      	mov	r1, r2
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff5d 	bl	8000350 <__NVIC_SetPriority>
}
 8000496:	bf00      	nop
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b082      	sub	sp, #8
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f7ff ffb0 	bl	800040c <SysTick_Config>
 80004ac:	4603      	mov	r3, r0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b087      	sub	sp, #28
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004c6:	e17f      	b.n	80007c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	2101      	movs	r1, #1
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	fa01 f303 	lsl.w	r3, r1, r3
 80004d4:	4013      	ands	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f000 8171 	beq.w	80007c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d003      	beq.n	80004f0 <HAL_GPIO_Init+0x38>
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	2b12      	cmp	r3, #18
 80004ee:	d123      	bne.n	8000538 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	08da      	lsrs	r2, r3, #3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	3208      	adds	r2, #8
 80004f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	f003 0307 	and.w	r3, r3, #7
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	220f      	movs	r2, #15
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	43db      	mvns	r3, r3
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	4013      	ands	r3, r2
 8000512:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	691a      	ldr	r2, [r3, #16]
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	f003 0307 	and.w	r3, r3, #7
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	693a      	ldr	r2, [r7, #16]
 8000526:	4313      	orrs	r3, r2
 8000528:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	08da      	lsrs	r2, r3, #3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3208      	adds	r2, #8
 8000532:	6939      	ldr	r1, [r7, #16]
 8000534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	2203      	movs	r2, #3
 8000544:	fa02 f303 	lsl.w	r3, r2, r3
 8000548:	43db      	mvns	r3, r3
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	4013      	ands	r3, r2
 800054e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 0203 	and.w	r2, r3, #3
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	4313      	orrs	r3, r2
 8000564:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d00b      	beq.n	800058c <HAL_GPIO_Init+0xd4>
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2b02      	cmp	r3, #2
 800057a:	d007      	beq.n	800058c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000580:	2b11      	cmp	r3, #17
 8000582:	d003      	beq.n	800058c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	2b12      	cmp	r3, #18
 800058a:	d130      	bne.n	80005ee <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	2203      	movs	r2, #3
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	43db      	mvns	r3, r3
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	4013      	ands	r3, r2
 80005a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	68da      	ldr	r2, [r3, #12]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	693a      	ldr	r2, [r7, #16]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	693a      	ldr	r2, [r7, #16]
 80005ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80005c2:	2201      	movs	r2, #1
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	43db      	mvns	r3, r3
 80005cc:	693a      	ldr	r2, [r7, #16]
 80005ce:	4013      	ands	r3, r2
 80005d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	091b      	lsrs	r3, r3, #4
 80005d8:	f003 0201 	and.w	r2, r3, #1
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	f003 0303 	and.w	r3, r3, #3
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	d118      	bne.n	800062c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000600:	2201      	movs	r2, #1
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	fa02 f303 	lsl.w	r3, r2, r3
 8000608:	43db      	mvns	r3, r3
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	4013      	ands	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	08db      	lsrs	r3, r3, #3
 8000616:	f003 0201 	and.w	r2, r3, #1
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	693a      	ldr	r2, [r7, #16]
 8000622:	4313      	orrs	r3, r2
 8000624:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	2203      	movs	r2, #3
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	43db      	mvns	r3, r3
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	4013      	ands	r3, r2
 8000642:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	fa02 f303 	lsl.w	r3, r2, r3
 8000650:	693a      	ldr	r2, [r7, #16]
 8000652:	4313      	orrs	r3, r2
 8000654:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	693a      	ldr	r2, [r7, #16]
 800065a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	2b00      	cmp	r3, #0
 8000666:	f000 80ac 	beq.w	80007c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	4b5e      	ldr	r3, [pc, #376]	; (80007e4 <HAL_GPIO_Init+0x32c>)
 800066c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066e:	4a5d      	ldr	r2, [pc, #372]	; (80007e4 <HAL_GPIO_Init+0x32c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6613      	str	r3, [r2, #96]	; 0x60
 8000676:	4b5b      	ldr	r3, [pc, #364]	; (80007e4 <HAL_GPIO_Init+0x32c>)
 8000678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000682:	4a59      	ldr	r2, [pc, #356]	; (80007e8 <HAL_GPIO_Init+0x330>)
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	089b      	lsrs	r3, r3, #2
 8000688:	3302      	adds	r3, #2
 800068a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	f003 0303 	and.w	r3, r3, #3
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	220f      	movs	r2, #15
 800069a:	fa02 f303 	lsl.w	r3, r2, r3
 800069e:	43db      	mvns	r3, r3
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	4013      	ands	r3, r2
 80006a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80006ac:	d025      	beq.n	80006fa <HAL_GPIO_Init+0x242>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a4e      	ldr	r2, [pc, #312]	; (80007ec <HAL_GPIO_Init+0x334>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d01f      	beq.n	80006f6 <HAL_GPIO_Init+0x23e>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a4d      	ldr	r2, [pc, #308]	; (80007f0 <HAL_GPIO_Init+0x338>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d019      	beq.n	80006f2 <HAL_GPIO_Init+0x23a>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a4c      	ldr	r2, [pc, #304]	; (80007f4 <HAL_GPIO_Init+0x33c>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d013      	beq.n	80006ee <HAL_GPIO_Init+0x236>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4a4b      	ldr	r2, [pc, #300]	; (80007f8 <HAL_GPIO_Init+0x340>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d00d      	beq.n	80006ea <HAL_GPIO_Init+0x232>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a4a      	ldr	r2, [pc, #296]	; (80007fc <HAL_GPIO_Init+0x344>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d007      	beq.n	80006e6 <HAL_GPIO_Init+0x22e>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a49      	ldr	r2, [pc, #292]	; (8000800 <HAL_GPIO_Init+0x348>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d101      	bne.n	80006e2 <HAL_GPIO_Init+0x22a>
 80006de:	2306      	movs	r3, #6
 80006e0:	e00c      	b.n	80006fc <HAL_GPIO_Init+0x244>
 80006e2:	2307      	movs	r3, #7
 80006e4:	e00a      	b.n	80006fc <HAL_GPIO_Init+0x244>
 80006e6:	2305      	movs	r3, #5
 80006e8:	e008      	b.n	80006fc <HAL_GPIO_Init+0x244>
 80006ea:	2304      	movs	r3, #4
 80006ec:	e006      	b.n	80006fc <HAL_GPIO_Init+0x244>
 80006ee:	2303      	movs	r3, #3
 80006f0:	e004      	b.n	80006fc <HAL_GPIO_Init+0x244>
 80006f2:	2302      	movs	r3, #2
 80006f4:	e002      	b.n	80006fc <HAL_GPIO_Init+0x244>
 80006f6:	2301      	movs	r3, #1
 80006f8:	e000      	b.n	80006fc <HAL_GPIO_Init+0x244>
 80006fa:	2300      	movs	r3, #0
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	f002 0203 	and.w	r2, r2, #3
 8000702:	0092      	lsls	r2, r2, #2
 8000704:	4093      	lsls	r3, r2
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	4313      	orrs	r3, r2
 800070a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800070c:	4936      	ldr	r1, [pc, #216]	; (80007e8 <HAL_GPIO_Init+0x330>)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	089b      	lsrs	r3, r3, #2
 8000712:	3302      	adds	r3, #2
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <HAL_GPIO_Init+0x34c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	43db      	mvns	r3, r3
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	4013      	ands	r3, r2
 8000728:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000732:	2b00      	cmp	r3, #0
 8000734:	d003      	beq.n	800073e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4313      	orrs	r3, r2
 800073c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800073e:	4a31      	ldr	r2, [pc, #196]	; (8000804 <HAL_GPIO_Init+0x34c>)
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000744:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <HAL_GPIO_Init+0x34c>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	43db      	mvns	r3, r3
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	4013      	ands	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075c:	2b00      	cmp	r3, #0
 800075e:	d003      	beq.n	8000768 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000760:	693a      	ldr	r2, [r7, #16]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4313      	orrs	r3, r2
 8000766:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000768:	4a26      	ldr	r2, [pc, #152]	; (8000804 <HAL_GPIO_Init+0x34c>)
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <HAL_GPIO_Init+0x34c>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	43db      	mvns	r3, r3
 8000778:	693a      	ldr	r2, [r7, #16]
 800077a:	4013      	ands	r3, r2
 800077c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	4313      	orrs	r3, r2
 8000790:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <HAL_GPIO_Init+0x34c>)
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <HAL_GPIO_Init+0x34c>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	43db      	mvns	r3, r3
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d003      	beq.n	80007bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80007b4:	693a      	ldr	r2, [r7, #16]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80007bc:	4a11      	ldr	r2, [pc, #68]	; (8000804 <HAL_GPIO_Init+0x34c>)
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3301      	adds	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	fa22 f303 	lsr.w	r3, r2, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f47f ae78 	bne.w	80004c8 <HAL_GPIO_Init+0x10>
  }
}
 80007d8:	bf00      	nop
 80007da:	371c      	adds	r7, #28
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010000 	.word	0x40010000
 80007ec:	48000400 	.word	0x48000400
 80007f0:	48000800 	.word	0x48000800
 80007f4:	48000c00 	.word	0x48000c00
 80007f8:	48001000 	.word	0x48001000
 80007fc:	48001400 	.word	0x48001400
 8000800:	48001800 	.word	0x48001800
 8000804:	40010400 	.word	0x40010400

08000808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	807b      	strh	r3, [r7, #2]
 8000814:	4613      	mov	r3, r2
 8000816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000818:	787b      	ldrb	r3, [r7, #1]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d003      	beq.n	8000826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800081e:	887a      	ldrh	r2, [r7, #2]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000824:	e002      	b.n	800082c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000826:	887a      	ldrh	r2, [r7, #2]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695a      	ldr	r2, [r3, #20]
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	4013      	ands	r3, r2
 800084c:	2b00      	cmp	r3, #0
 800084e:	d003      	beq.n	8000858 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000850:	887a      	ldrh	r2, [r7, #2]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000856:	e002      	b.n	800085e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000858:	887a      	ldrh	r2, [r7, #2]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	619a      	str	r2, [r3, #24]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e0af      	b.n	80009de <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d106      	bne.n	8000898 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f001 fc6c 	bl	8002170 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2202      	movs	r2, #2
 800089c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f022 0201 	bic.w	r2, r2, #1
 80008ae:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	e00a      	b.n	80008cc <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3304      	adds	r3, #4
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4413      	add	r3, r2
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	2b0f      	cmp	r3, #15
 80008d0:	d9f1      	bls.n	80008b6 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	689a      	ldr	r2, [r3, #8]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f042 0204 	orr.w	r2, r2, #4
 80008e0:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	4b3f      	ldr	r3, [pc, #252]	; (80009e8 <HAL_LCD_Init+0x17c>)
 80008ea:	4013      	ands	r3, r2
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	6851      	ldr	r1, [r2, #4]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	6892      	ldr	r2, [r2, #8]
 80008f4:	4311      	orrs	r1, r2
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80008fa:	4311      	orrs	r1, r2
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000900:	4311      	orrs	r1, r2
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	69d2      	ldr	r2, [r2, #28]
 8000906:	4311      	orrs	r1, r2
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	6a12      	ldr	r2, [r2, #32]
 800090c:	4311      	orrs	r1, r2
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	6992      	ldr	r2, [r2, #24]
 8000912:	4311      	orrs	r1, r2
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000918:	4311      	orrs	r1, r2
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	6812      	ldr	r2, [r2, #0]
 800091e:	430b      	orrs	r3, r1
 8000920:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 f8f1 	bl	8000b0a <LCD_WaitForSynchro>
 8000928:	4603      	mov	r3, r0
 800092a:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 800092c:	7cfb      	ldrb	r3, [r7, #19]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_LCD_Init+0xca>
  {
    return status;
 8000932:	7cfb      	ldrb	r3, [r7, #19]
 8000934:	e053      	b.n	80009de <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	691b      	ldr	r3, [r3, #16]
 8000948:	431a      	orrs	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	431a      	orrs	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	431a      	orrs	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	430a      	orrs	r2, r1
 800095c:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f042 0201 	orr.w	r2, r2, #1
 800096c:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 800096e:	f7ff fc8f 	bl	8000290 <HAL_GetTick>
 8000972:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000974:	e00c      	b.n	8000990 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000976:	f7ff fc8b 	bl	8000290 <HAL_GetTick>
 800097a:	4602      	mov	r2, r0
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000984:	d904      	bls.n	8000990 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2208      	movs	r2, #8
 800098a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800098c:	2303      	movs	r3, #3
 800098e:	e026      	b.n	80009de <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	2b01      	cmp	r3, #1
 800099c:	d1eb      	bne.n	8000976 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 800099e:	f7ff fc77 	bl	8000290 <HAL_GetTick>
 80009a2:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80009a4:	e00c      	b.n	80009c0 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80009a6:	f7ff fc73 	bl	8000290 <HAL_GetTick>
 80009aa:	4602      	mov	r2, r0
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009b4:	d904      	bls.n	80009c0 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2210      	movs	r2, #16
 80009ba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80009bc:	2303      	movs	r3, #3
 80009be:	e00e      	b.n	80009de <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	2b10      	cmp	r3, #16
 80009cc:	d1eb      	bne.n	80009a6 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2201      	movs	r2, #1
 80009d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	fc00000e 	.word	0xfc00000e

080009ec <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009fe:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8000a00:	7cbb      	ldrb	r3, [r7, #18]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d002      	beq.n	8000a0c <HAL_LCD_Clear+0x20>
 8000a06:	7cbb      	ldrb	r3, [r7, #18]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d140      	bne.n	8000a8e <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d101      	bne.n	8000a1a <HAL_LCD_Clear+0x2e>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e03a      	b.n	8000a90 <HAL_LCD_Clear+0xa4>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2202      	movs	r2, #2
 8000a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8000a2a:	f7ff fc31 	bl	8000290 <HAL_GetTick>
 8000a2e:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000a30:	e010      	b.n	8000a54 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000a32:	f7ff fc2d 	bl	8000290 <HAL_GetTick>
 8000a36:	4602      	mov	r2, r0
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a40:	d908      	bls.n	8000a54 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2202      	movs	r2, #2
 8000a46:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000a50:	2303      	movs	r3, #3
 8000a52:	e01d      	b.n	8000a90 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d0e7      	beq.n	8000a32 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	e00a      	b.n	8000a7e <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d9f1      	bls.n	8000a68 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f000 f807 	bl	8000a98 <HAL_LCD_UpdateDisplayRequest>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8000a8e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2208      	movs	r2, #8
 8000aa6:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f042 0204 	orr.w	r2, r2, #4
 8000ab6:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000ab8:	f7ff fbea 	bl	8000290 <HAL_GetTick>
 8000abc:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000abe:	e010      	b.n	8000ae2 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000ac0:	f7ff fbe6 	bl	8000290 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ace:	d908      	bls.n	8000ae2 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	e00f      	b.n	8000b02 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	2b08      	cmp	r3, #8
 8000aee:	d1e7      	bne.n	8000ac0 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2201      	movs	r2, #1
 8000af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000b12:	f7ff fbbd 	bl	8000290 <HAL_GetTick>
 8000b16:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000b18:	e00c      	b.n	8000b34 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000b1a:	f7ff fbb9 	bl	8000290 <HAL_GetTick>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b28:	d904      	bls.n	8000b34 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000b30:	2303      	movs	r3, #3
 8000b32:	e007      	b.n	8000b44 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f003 0320 	and.w	r3, r3, #32
 8000b3e:	2b20      	cmp	r3, #32
 8000b40:	d1eb      	bne.n	8000b1a <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40007000 	.word	0x40007000

08000b68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b76:	d130      	bne.n	8000bda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b84:	d038      	beq.n	8000bf8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b8e:	4a1e      	ldr	r2, [pc, #120]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2232      	movs	r2, #50	; 0x32
 8000b9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ba0:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	0c9b      	lsrs	r3, r3, #18
 8000ba8:	3301      	adds	r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bac:	e002      	b.n	8000bb4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bc0:	d102      	bne.n	8000bc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1f2      	bne.n	8000bae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bd4:	d110      	bne.n	8000bf8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e00f      	b.n	8000bfa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be6:	d007      	beq.n	8000bf8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bf0:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40007000 	.word	0x40007000
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	431bde83 	.word	0x431bde83

08000c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e39d      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c26:	4ba4      	ldr	r3, [pc, #656]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
 8000c2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c30:	4ba1      	ldr	r3, [pc, #644]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0310 	and.w	r3, r3, #16
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 80e1 	beq.w	8000e0a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d007      	beq.n	8000c5e <HAL_RCC_OscConfig+0x4a>
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	2b0c      	cmp	r3, #12
 8000c52:	f040 8088 	bne.w	8000d66 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	f040 8084 	bne.w	8000d66 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c5e:	4b96      	ldr	r3, [pc, #600]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <HAL_RCC_OscConfig+0x62>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e375      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a1a      	ldr	r2, [r3, #32]
 8000c7a:	4b8f      	ldr	r3, [pc, #572]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d004      	beq.n	8000c90 <HAL_RCC_OscConfig+0x7c>
 8000c86:	4b8c      	ldr	r3, [pc, #560]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c8e:	e005      	b.n	8000c9c <HAL_RCC_OscConfig+0x88>
 8000c90:	4b89      	ldr	r3, [pc, #548]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c96:	091b      	lsrs	r3, r3, #4
 8000c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d223      	bcs.n	8000ce8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a1b      	ldr	r3, [r3, #32]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fcd1 	bl	800164c <RCC_SetFlashLatencyFromMSIRange>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e356      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cb4:	4b80      	ldr	r3, [pc, #512]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a7f      	ldr	r2, [pc, #508]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	4b7d      	ldr	r3, [pc, #500]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	497a      	ldr	r1, [pc, #488]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cd2:	4b79      	ldr	r3, [pc, #484]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	4975      	ldr	r1, [pc, #468]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	604b      	str	r3, [r1, #4]
 8000ce6:	e022      	b.n	8000d2e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ce8:	4b73      	ldr	r3, [pc, #460]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a72      	ldr	r2, [pc, #456]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b70      	ldr	r3, [pc, #448]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a1b      	ldr	r3, [r3, #32]
 8000d00:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d06:	4b6c      	ldr	r3, [pc, #432]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	4968      	ldr	r1, [pc, #416]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fc94 	bl	800164c <RCC_SetFlashLatencyFromMSIRange>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e319      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d2e:	f000 fc03 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 8000d32:	4601      	mov	r1, r0
 8000d34:	4b60      	ldr	r3, [pc, #384]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	4a5f      	ldr	r2, [pc, #380]	; (8000ebc <HAL_RCC_OscConfig+0x2a8>)
 8000d40:	5cd3      	ldrb	r3, [r2, r3]
 8000d42:	f003 031f 	and.w	r3, r3, #31
 8000d46:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4a:	4a5d      	ldr	r2, [pc, #372]	; (8000ec0 <HAL_RCC_OscConfig+0x2ac>)
 8000d4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d4e:	4b5d      	ldr	r3, [pc, #372]	; (8000ec4 <HAL_RCC_OscConfig+0x2b0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fa50 	bl	80001f8 <HAL_InitTick>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d052      	beq.n	8000e08 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	e2fd      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d032      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d6e:	4b52      	ldr	r3, [pc, #328]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a51      	ldr	r2, [pc, #324]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d7a:	f7ff fa89 	bl	8000290 <HAL_GetTick>
 8000d7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d80:	e008      	b.n	8000d94 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d82:	f7ff fa85 	bl	8000290 <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e2e6      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d94:	4b48      	ldr	r3, [pc, #288]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d0f0      	beq.n	8000d82 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000da0:	4b45      	ldr	r3, [pc, #276]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a44      	ldr	r2, [pc, #272]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	493f      	ldr	r1, [pc, #252]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dbe:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	493a      	ldr	r1, [pc, #232]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
 8000dd2:	e01a      	b.n	8000e0a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000dd4:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a37      	ldr	r2, [pc, #220]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000dda:	f023 0301 	bic.w	r3, r3, #1
 8000dde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000de0:	f7ff fa56 	bl	8000290 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000de8:	f7ff fa52 	bl	8000290 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e2b3      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f0      	bne.n	8000de8 <HAL_RCC_OscConfig+0x1d4>
 8000e06:	e000      	b.n	8000e0a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d074      	beq.n	8000f00 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d005      	beq.n	8000e28 <HAL_RCC_OscConfig+0x214>
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	2b0c      	cmp	r3, #12
 8000e20:	d10e      	bne.n	8000e40 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d10b      	bne.n	8000e40 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e28:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d064      	beq.n	8000efe <HAL_RCC_OscConfig+0x2ea>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d160      	bne.n	8000efe <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e290      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e48:	d106      	bne.n	8000e58 <HAL_RCC_OscConfig+0x244>
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1a      	ldr	r2, [pc, #104]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e01d      	b.n	8000e94 <HAL_RCC_OscConfig+0x280>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e60:	d10c      	bne.n	8000e7c <HAL_RCC_OscConfig+0x268>
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e00b      	b.n	8000e94 <HAL_RCC_OscConfig+0x280>
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_RCC_OscConfig+0x2a4>)
 8000e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d01c      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e9c:	f7ff f9f8 	bl	8000290 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ea2:	e011      	b.n	8000ec8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff f9f4 	bl	8000290 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b64      	cmp	r3, #100	; 0x64
 8000eb0:	d90a      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e255      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	0800272c 	.word	0x0800272c
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ec8:	4bae      	ldr	r3, [pc, #696]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0e7      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x290>
 8000ed4:	e014      	b.n	8000f00 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed6:	f7ff f9db 	bl	8000290 <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ede:	f7ff f9d7 	bl	8000290 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b64      	cmp	r3, #100	; 0x64
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e238      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ef0:	4ba4      	ldr	r3, [pc, #656]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f0      	bne.n	8000ede <HAL_RCC_OscConfig+0x2ca>
 8000efc:	e000      	b.n	8000f00 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d060      	beq.n	8000fce <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d005      	beq.n	8000f1e <HAL_RCC_OscConfig+0x30a>
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	2b0c      	cmp	r3, #12
 8000f16:	d119      	bne.n	8000f4c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d116      	bne.n	8000f4c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f1e:	4b99      	ldr	r3, [pc, #612]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <HAL_RCC_OscConfig+0x322>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e215      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f36:	4b93      	ldr	r3, [pc, #588]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	061b      	lsls	r3, r3, #24
 8000f44:	498f      	ldr	r1, [pc, #572]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f4a:	e040      	b.n	8000fce <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d023      	beq.n	8000f9c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f54:	4b8b      	ldr	r3, [pc, #556]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a8a      	ldr	r2, [pc, #552]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f60:	f7ff f996 	bl	8000290 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f68:	f7ff f992 	bl	8000290 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e1f3      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f7a:	4b82      	ldr	r3, [pc, #520]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f0      	beq.n	8000f68 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f86:	4b7f      	ldr	r3, [pc, #508]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	061b      	lsls	r3, r3, #24
 8000f94:	497b      	ldr	r1, [pc, #492]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	604b      	str	r3, [r1, #4]
 8000f9a:	e018      	b.n	8000fce <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f9c:	4b79      	ldr	r3, [pc, #484]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a78      	ldr	r2, [pc, #480]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000fa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa8:	f7ff f972 	bl	8000290 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb0:	f7ff f96e 	bl	8000290 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e1cf      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fc2:	4b70      	ldr	r3, [pc, #448]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d03c      	beq.n	8001054 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d01c      	beq.n	800101c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fe2:	4b68      	ldr	r3, [pc, #416]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fe8:	4a66      	ldr	r2, [pc, #408]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ff2:	f7ff f94d 	bl	8000290 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ffa:	f7ff f949 	bl	8000290 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e1aa      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800100c:	4b5d      	ldr	r3, [pc, #372]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 800100e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0ef      	beq.n	8000ffa <HAL_RCC_OscConfig+0x3e6>
 800101a:	e01b      	b.n	8001054 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800101c:	4b59      	ldr	r3, [pc, #356]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 800101e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001022:	4a58      	ldr	r2, [pc, #352]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001024:	f023 0301 	bic.w	r3, r3, #1
 8001028:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800102c:	f7ff f930 	bl	8000290 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001034:	f7ff f92c 	bl	8000290 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e18d      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001046:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1ef      	bne.n	8001034 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 80a5 	beq.w	80011ac <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001066:	4b47      	ldr	r3, [pc, #284]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10d      	bne.n	800108e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b44      	ldr	r3, [pc, #272]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	4a43      	ldr	r2, [pc, #268]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
 800107e:	4b41      	ldr	r3, [pc, #260]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800108a:	2301      	movs	r3, #1
 800108c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800108e:	4b3e      	ldr	r3, [pc, #248]	; (8001188 <HAL_RCC_OscConfig+0x574>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d118      	bne.n	80010cc <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800109a:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <HAL_RCC_OscConfig+0x574>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a3a      	ldr	r2, [pc, #232]	; (8001188 <HAL_RCC_OscConfig+0x574>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010a6:	f7ff f8f3 	bl	8000290 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ae:	f7ff f8ef 	bl	8000290 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e150      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010c0:	4b31      	ldr	r3, [pc, #196]	; (8001188 <HAL_RCC_OscConfig+0x574>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0f0      	beq.n	80010ae <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d108      	bne.n	80010e6 <HAL_RCC_OscConfig+0x4d2>
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 80010d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010da:	4a2a      	ldr	r2, [pc, #168]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010e4:	e024      	b.n	8001130 <HAL_RCC_OscConfig+0x51c>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	2b05      	cmp	r3, #5
 80010ec:	d110      	bne.n	8001110 <HAL_RCC_OscConfig+0x4fc>
 80010ee:	4b25      	ldr	r3, [pc, #148]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 80010f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f4:	4a23      	ldr	r2, [pc, #140]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001104:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800110e:	e00f      	b.n	8001130 <HAL_RCC_OscConfig+0x51c>
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001126:	4a17      	ldr	r2, [pc, #92]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001128:	f023 0304 	bic.w	r3, r3, #4
 800112c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d016      	beq.n	8001166 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001138:	f7ff f8aa 	bl	8000290 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800113e:	e00a      	b.n	8001156 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001140:	f7ff f8a6 	bl	8000290 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	f241 3288 	movw	r2, #5000	; 0x1388
 800114e:	4293      	cmp	r3, r2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e105      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_RCC_OscConfig+0x570>)
 8001158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0ed      	beq.n	8001140 <HAL_RCC_OscConfig+0x52c>
 8001164:	e019      	b.n	800119a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001166:	f7ff f893 	bl	8000290 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800116c:	e00e      	b.n	800118c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800116e:	f7ff f88f 	bl	8000290 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	f241 3288 	movw	r2, #5000	; 0x1388
 800117c:	4293      	cmp	r3, r2
 800117e:	d905      	bls.n	800118c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e0ee      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
 8001184:	40021000 	.word	0x40021000
 8001188:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800118c:	4b77      	ldr	r3, [pc, #476]	; (800136c <HAL_RCC_OscConfig+0x758>)
 800118e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1e9      	bne.n	800116e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800119a:	7ffb      	ldrb	r3, [r7, #31]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d105      	bne.n	80011ac <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011a0:	4b72      	ldr	r3, [pc, #456]	; (800136c <HAL_RCC_OscConfig+0x758>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a4:	4a71      	ldr	r2, [pc, #452]	; (800136c <HAL_RCC_OscConfig+0x758>)
 80011a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80d5 	beq.w	8001360 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2b0c      	cmp	r3, #12
 80011ba:	f000 808e 	beq.w	80012da <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d15b      	bne.n	800127e <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c6:	4b69      	ldr	r3, [pc, #420]	; (800136c <HAL_RCC_OscConfig+0x758>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a68      	ldr	r2, [pc, #416]	; (800136c <HAL_RCC_OscConfig+0x758>)
 80011cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d2:	f7ff f85d 	bl	8000290 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011da:	f7ff f859 	bl	8000290 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e0ba      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011ec:	4b5f      	ldr	r3, [pc, #380]	; (800136c <HAL_RCC_OscConfig+0x758>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f0      	bne.n	80011da <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011f8:	4b5c      	ldr	r3, [pc, #368]	; (800136c <HAL_RCC_OscConfig+0x758>)
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	4b5c      	ldr	r3, [pc, #368]	; (8001370 <HAL_RCC_OscConfig+0x75c>)
 80011fe:	4013      	ands	r3, r2
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001208:	3a01      	subs	r2, #1
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	4311      	orrs	r1, r2
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001212:	0212      	lsls	r2, r2, #8
 8001214:	4311      	orrs	r1, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800121a:	0852      	lsrs	r2, r2, #1
 800121c:	3a01      	subs	r2, #1
 800121e:	0552      	lsls	r2, r2, #21
 8001220:	4311      	orrs	r1, r2
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001226:	0852      	lsrs	r2, r2, #1
 8001228:	3a01      	subs	r2, #1
 800122a:	0652      	lsls	r2, r2, #25
 800122c:	4311      	orrs	r1, r2
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001232:	0912      	lsrs	r2, r2, #4
 8001234:	0452      	lsls	r2, r2, #17
 8001236:	430a      	orrs	r2, r1
 8001238:	494c      	ldr	r1, [pc, #304]	; (800136c <HAL_RCC_OscConfig+0x758>)
 800123a:	4313      	orrs	r3, r2
 800123c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800123e:	4b4b      	ldr	r3, [pc, #300]	; (800136c <HAL_RCC_OscConfig+0x758>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a4a      	ldr	r2, [pc, #296]	; (800136c <HAL_RCC_OscConfig+0x758>)
 8001244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001248:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800124a:	4b48      	ldr	r3, [pc, #288]	; (800136c <HAL_RCC_OscConfig+0x758>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	4a47      	ldr	r2, [pc, #284]	; (800136c <HAL_RCC_OscConfig+0x758>)
 8001250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001254:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001256:	f7ff f81b 	bl	8000290 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125e:	f7ff f817 	bl	8000290 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e078      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001270:	4b3e      	ldr	r3, [pc, #248]	; (800136c <HAL_RCC_OscConfig+0x758>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0x64a>
 800127c:	e070      	b.n	8001360 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800127e:	4b3b      	ldr	r3, [pc, #236]	; (800136c <HAL_RCC_OscConfig+0x758>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a3a      	ldr	r2, [pc, #232]	; (800136c <HAL_RCC_OscConfig+0x758>)
 8001284:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001288:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_RCC_OscConfig+0x758>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d105      	bne.n	80012a2 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001296:	4b35      	ldr	r3, [pc, #212]	; (800136c <HAL_RCC_OscConfig+0x758>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	4a34      	ldr	r2, [pc, #208]	; (800136c <HAL_RCC_OscConfig+0x758>)
 800129c:	f023 0303 	bic.w	r3, r3, #3
 80012a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80012a2:	4b32      	ldr	r3, [pc, #200]	; (800136c <HAL_RCC_OscConfig+0x758>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	4a31      	ldr	r2, [pc, #196]	; (800136c <HAL_RCC_OscConfig+0x758>)
 80012a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80012ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b2:	f7fe ffed 	bl	8000290 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ba:	f7fe ffe9 	bl	8000290 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e04a      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <HAL_RCC_OscConfig+0x758>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f0      	bne.n	80012ba <HAL_RCC_OscConfig+0x6a6>
 80012d8:	e042      	b.n	8001360 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e03d      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <HAL_RCC_OscConfig+0x758>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f003 0203 	and.w	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d130      	bne.n	800135c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	3b01      	subs	r3, #1
 8001306:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001308:	429a      	cmp	r2, r3
 800130a:	d127      	bne.n	800135c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001316:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001318:	429a      	cmp	r2, r3
 800131a:	d11f      	bne.n	800135c <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001326:	2a07      	cmp	r2, #7
 8001328:	bf14      	ite	ne
 800132a:	2201      	movne	r2, #1
 800132c:	2200      	moveq	r2, #0
 800132e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001330:	4293      	cmp	r3, r2
 8001332:	d113      	bne.n	800135c <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133e:	085b      	lsrs	r3, r3, #1
 8001340:	3b01      	subs	r3, #1
 8001342:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001344:	429a      	cmp	r2, r3
 8001346:	d109      	bne.n	800135c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	085b      	lsrs	r3, r3, #1
 8001354:	3b01      	subs	r3, #1
 8001356:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001358:	429a      	cmp	r2, r3
 800135a:	d001      	beq.n	8001360 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	f99d808c 	.word	0xf99d808c

08001374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0c8      	b.n	800151a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001388:	4b66      	ldr	r3, [pc, #408]	; (8001524 <HAL_RCC_ClockConfig+0x1b0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d910      	bls.n	80013b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b63      	ldr	r3, [pc, #396]	; (8001524 <HAL_RCC_ClockConfig+0x1b0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 0207 	bic.w	r2, r3, #7
 800139e:	4961      	ldr	r1, [pc, #388]	; (8001524 <HAL_RCC_ClockConfig+0x1b0>)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b5f      	ldr	r3, [pc, #380]	; (8001524 <HAL_RCC_ClockConfig+0x1b0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0b0      	b.n	800151a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d04c      	beq.n	800145e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d107      	bne.n	80013dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013cc:	4b56      	ldr	r3, [pc, #344]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d121      	bne.n	800141c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e09e      	b.n	800151a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d107      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013e4:	4b50      	ldr	r3, [pc, #320]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d115      	bne.n	800141c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e092      	b.n	800151a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d107      	bne.n	800140c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013fc:	4b4a      	ldr	r3, [pc, #296]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d109      	bne.n	800141c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e086      	b.n	800151a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800140c:	4b46      	ldr	r3, [pc, #280]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e07e      	b.n	800151a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800141c:	4b42      	ldr	r3, [pc, #264]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f023 0203 	bic.w	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	493f      	ldr	r1, [pc, #252]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 800142a:	4313      	orrs	r3, r2
 800142c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800142e:	f7fe ff2f 	bl	8000290 <HAL_GetTick>
 8001432:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001434:	e00a      	b.n	800144c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001436:	f7fe ff2b 	bl	8000290 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f241 3288 	movw	r2, #5000	; 0x1388
 8001444:	4293      	cmp	r3, r2
 8001446:	d901      	bls.n	800144c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e066      	b.n	800151a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144c:	4b36      	ldr	r3, [pc, #216]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 020c 	and.w	r2, r3, #12
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	429a      	cmp	r2, r3
 800145c:	d1eb      	bne.n	8001436 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d008      	beq.n	800147c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800146a:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	492c      	ldr	r1, [pc, #176]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 8001478:	4313      	orrs	r3, r2
 800147a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <HAL_RCC_ClockConfig+0x1b0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d210      	bcs.n	80014ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <HAL_RCC_ClockConfig+0x1b0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f023 0207 	bic.w	r2, r3, #7
 8001492:	4924      	ldr	r1, [pc, #144]	; (8001524 <HAL_RCC_ClockConfig+0x1b0>)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_RCC_ClockConfig+0x1b0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d001      	beq.n	80014ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e036      	b.n	800151a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	4918      	ldr	r1, [pc, #96]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d009      	beq.n	80014ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4910      	ldr	r1, [pc, #64]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014ea:	f000 f825 	bl	8001538 <HAL_RCC_GetSysClockFreq>
 80014ee:	4601      	mov	r1, r0
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_RCC_ClockConfig+0x1b4>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	4a0c      	ldr	r2, [pc, #48]	; (800152c <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	fa21 f303 	lsr.w	r3, r1, r3
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe fe72 	bl	80001f8 <HAL_InitTick>
 8001514:	4603      	mov	r3, r0
 8001516:	72fb      	strb	r3, [r7, #11]

  return status;
 8001518:	7afb      	ldrb	r3, [r7, #11]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40022000 	.word	0x40022000
 8001528:	40021000 	.word	0x40021000
 800152c:	0800272c 	.word	0x0800272c
 8001530:	20000008 	.word	0x20000008
 8001534:	20000000 	.word	0x20000000

08001538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001546:	4b3d      	ldr	r3, [pc, #244]	; (800163c <HAL_RCC_GetSysClockFreq+0x104>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001550:	4b3a      	ldr	r3, [pc, #232]	; (800163c <HAL_RCC_GetSysClockFreq+0x104>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_GetSysClockFreq+0x34>
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	2b0c      	cmp	r3, #12
 8001564:	d121      	bne.n	80015aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d11e      	bne.n	80015aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800156c:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_RCC_GetSysClockFreq+0x104>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	2b00      	cmp	r3, #0
 8001576:	d107      	bne.n	8001588 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_RCC_GetSysClockFreq+0x104>)
 800157a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	e005      	b.n	8001594 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001588:	4b2c      	ldr	r3, [pc, #176]	; (800163c <HAL_RCC_GetSysClockFreq+0x104>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001594:	4a2a      	ldr	r2, [pc, #168]	; (8001640 <HAL_RCC_GetSysClockFreq+0x108>)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10d      	bne.n	80015c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d102      	bne.n	80015b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_RCC_GetSysClockFreq+0x10c>)
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	e004      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <HAL_RCC_GetSysClockFreq+0x110>)
 80015be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d133      	bne.n	800162e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_RCC_GetSysClockFreq+0x104>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d002      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0xa4>
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d003      	beq.n	80015e2 <HAL_RCC_GetSysClockFreq+0xaa>
 80015da:	e005      	b.n	80015e8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <HAL_RCC_GetSysClockFreq+0x10c>)
 80015de:	617b      	str	r3, [r7, #20]
      break;
 80015e0:	e005      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_RCC_GetSysClockFreq+0x110>)
 80015e4:	617b      	str	r3, [r7, #20]
      break;
 80015e6:	e002      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	617b      	str	r3, [r7, #20]
      break;
 80015ec:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_RCC_GetSysClockFreq+0x104>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	3301      	adds	r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_RCC_GetSysClockFreq+0x104>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	fb02 f203 	mul.w	r2, r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_GetSysClockFreq+0x104>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0e5b      	lsrs	r3, r3, #25
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	3301      	adds	r3, #1
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	fbb2 f3f3 	udiv	r3, r2, r3
 800162c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800162e:	69bb      	ldr	r3, [r7, #24]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3724      	adds	r7, #36	; 0x24
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40021000 	.word	0x40021000
 8001640:	0800273c 	.word	0x0800273c
 8001644:	00f42400 	.word	0x00f42400
 8001648:	007a1200 	.word	0x007a1200

0800164c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001664:	f7ff fa72 	bl	8000b4c <HAL_PWREx_GetVoltageRange>
 8001668:	6178      	str	r0, [r7, #20]
 800166a:	e014      	b.n	8001696 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	4b25      	ldr	r3, [pc, #148]	; (8001704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	4a24      	ldr	r2, [pc, #144]	; (8001704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001676:	6593      	str	r3, [r2, #88]	; 0x58
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001684:	f7ff fa62 	bl	8000b4c <HAL_PWREx_GetVoltageRange>
 8001688:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001694:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800169c:	d10b      	bne.n	80016b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b80      	cmp	r3, #128	; 0x80
 80016a2:	d919      	bls.n	80016d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2ba0      	cmp	r3, #160	; 0xa0
 80016a8:	d902      	bls.n	80016b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016aa:	2302      	movs	r3, #2
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	e013      	b.n	80016d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016b0:	2301      	movs	r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	e010      	b.n	80016d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b80      	cmp	r3, #128	; 0x80
 80016ba:	d902      	bls.n	80016c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80016bc:	2303      	movs	r3, #3
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	e00a      	b.n	80016d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b80      	cmp	r3, #128	; 0x80
 80016c6:	d102      	bne.n	80016ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016c8:	2302      	movs	r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	e004      	b.n	80016d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b70      	cmp	r3, #112	; 0x70
 80016d2:	d101      	bne.n	80016d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016d4:	2301      	movs	r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 0207 	bic.w	r2, r3, #7
 80016e0:	4909      	ldr	r1, [pc, #36]	; (8001708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	40022000 	.word	0x40022000

0800170c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001714:	2300      	movs	r3, #0
 8001716:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001718:	2300      	movs	r3, #0
 800171a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03f      	beq.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800172c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001730:	d01c      	beq.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001736:	d802      	bhi.n	800173e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00e      	beq.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800173c:	e01f      	b.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800173e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001742:	d003      	beq.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001744:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001748:	d01c      	beq.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800174a:	e018      	b.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800174c:	4b85      	ldr	r3, [pc, #532]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4a84      	ldr	r2, [pc, #528]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001756:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001758:	e015      	b.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3304      	adds	r3, #4
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f000 fab9 	bl	8001cd8 <RCCEx_PLLSAI1_Config>
 8001766:	4603      	mov	r3, r0
 8001768:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800176a:	e00c      	b.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3320      	adds	r3, #32
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fba0 	bl	8001eb8 <RCCEx_PLLSAI2_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800177c:	e003      	b.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	74fb      	strb	r3, [r7, #19]
      break;
 8001782:	e000      	b.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001786:	7cfb      	ldrb	r3, [r7, #19]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10b      	bne.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800178c:	4b75      	ldr	r3, [pc, #468]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001792:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800179a:	4972      	ldr	r1, [pc, #456]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800179c:	4313      	orrs	r3, r2
 800179e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80017a2:	e001      	b.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80017a4:	7cfb      	ldrb	r3, [r7, #19]
 80017a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d03f      	beq.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017bc:	d01c      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80017be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c2:	d802      	bhi.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00e      	beq.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80017c8:	e01f      	b.n	800180a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80017ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017ce:	d003      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80017d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80017d4:	d01c      	beq.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80017d6:	e018      	b.n	800180a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80017d8:	4b62      	ldr	r3, [pc, #392]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4a61      	ldr	r2, [pc, #388]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80017de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80017e4:	e015      	b.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 fa73 	bl	8001cd8 <RCCEx_PLLSAI1_Config>
 80017f2:	4603      	mov	r3, r0
 80017f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80017f6:	e00c      	b.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3320      	adds	r3, #32
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fb5a 	bl	8001eb8 <RCCEx_PLLSAI2_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001808:	e003      	b.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	74fb      	strb	r3, [r7, #19]
      break;
 800180e:	e000      	b.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001812:	7cfb      	ldrb	r3, [r7, #19]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10b      	bne.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001818:	4b52      	ldr	r3, [pc, #328]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001826:	494f      	ldr	r1, [pc, #316]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001828:	4313      	orrs	r3, r2
 800182a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800182e:	e001      	b.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001830:	7cfb      	ldrb	r3, [r7, #19]
 8001832:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80a0 	beq.w	8001982 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001856:	2300      	movs	r3, #0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00d      	beq.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	4b41      	ldr	r3, [pc, #260]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	4a40      	ldr	r2, [pc, #256]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6593      	str	r3, [r2, #88]	; 0x58
 8001868:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001874:	2301      	movs	r3, #1
 8001876:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001878:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a3a      	ldr	r2, [pc, #232]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001884:	f7fe fd04 	bl	8000290 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800188a:	e009      	b.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188c:	f7fe fd00 	bl	8000290 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d902      	bls.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	74fb      	strb	r3, [r7, #19]
        break;
 800189e:	e005      	b.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80018a0:	4b31      	ldr	r3, [pc, #196]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ef      	beq.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80018ac:	7cfb      	ldrb	r3, [r7, #19]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d15c      	bne.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d01f      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d019      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80018dc:	4b21      	ldr	r3, [pc, #132]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e2:	4a20      	ldr	r2, [pc, #128]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f2:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80018fc:	4a19      	ldr	r2, [pc, #100]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d016      	beq.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7fe fcbf 	bl	8000290 <HAL_GetTick>
 8001912:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001914:	e00b      	b.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7fe fcbb 	bl	8000290 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	; 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d902      	bls.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	74fb      	strb	r3, [r7, #19]
            break;
 800192c:	e006      	b.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0ec      	beq.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10c      	bne.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001952:	4904      	ldr	r1, [pc, #16]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001954:	4313      	orrs	r3, r2
 8001956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800195a:	e009      	b.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800195c:	7cfb      	ldrb	r3, [r7, #19]
 800195e:	74bb      	strb	r3, [r7, #18]
 8001960:	e006      	b.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800196c:	7cfb      	ldrb	r3, [r7, #19]
 800196e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001970:	7c7b      	ldrb	r3, [r7, #17]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d105      	bne.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001976:	4b9e      	ldr	r3, [pc, #632]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	4a9d      	ldr	r2, [pc, #628]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800197c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001980:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00a      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800198e:	4b98      	ldr	r3, [pc, #608]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001994:	f023 0203 	bic.w	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199c:	4994      	ldr	r1, [pc, #592]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00a      	beq.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019b0:	4b8f      	ldr	r3, [pc, #572]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b6:	f023 020c 	bic.w	r2, r3, #12
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019be:	498c      	ldr	r1, [pc, #560]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00a      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019d2:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	4983      	ldr	r1, [pc, #524]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00a      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80019f4:	4b7e      	ldr	r3, [pc, #504]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	497b      	ldr	r1, [pc, #492]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00a      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a16:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a24:	4972      	ldr	r1, [pc, #456]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00a      	beq.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a38:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	496a      	ldr	r1, [pc, #424]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00a      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a5a:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	4961      	ldr	r1, [pc, #388]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a7c:	4b5c      	ldr	r3, [pc, #368]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	4959      	ldr	r1, [pc, #356]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a9e:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aac:	4950      	ldr	r1, [pc, #320]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00a      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	4948      	ldr	r1, [pc, #288]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00a      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ae2:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	493f      	ldr	r1, [pc, #252]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d028      	beq.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b12:	4937      	ldr	r1, [pc, #220]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b22:	d106      	bne.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4a31      	ldr	r2, [pc, #196]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b2e:	60d3      	str	r3, [r2, #12]
 8001b30:	e011      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	2101      	movs	r1, #1
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f8c8 	bl	8001cd8 <RCCEx_PLLSAI1_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001b4c:	7cfb      	ldrb	r3, [r7, #19]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001b52:	7cfb      	ldrb	r3, [r7, #19]
 8001b54:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d028      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001b62:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b70:	491f      	ldr	r1, [pc, #124]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b80:	d106      	bne.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	4a1a      	ldr	r2, [pc, #104]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b8c:	60d3      	str	r3, [r2, #12]
 8001b8e:	e011      	b.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f000 f899 	bl	8001cd8 <RCCEx_PLLSAI1_Config>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001baa:	7cfb      	ldrb	r3, [r7, #19]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001bb0:	7cfb      	ldrb	r3, [r7, #19]
 8001bb2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d02b      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bce:	4908      	ldr	r1, [pc, #32]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bde:	d109      	bne.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a02      	ldr	r2, [pc, #8]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bea:	60d3      	str	r3, [r2, #12]
 8001bec:	e014      	b.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2101      	movs	r1, #1
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f867 	bl	8001cd8 <RCCEx_PLLSAI1_Config>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c0e:	7cfb      	ldrb	r3, [r7, #19]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001c14:	7cfb      	ldrb	r3, [r7, #19]
 8001c16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d02f      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c24:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c32:	4928      	ldr	r1, [pc, #160]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c42:	d10d      	bne.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3304      	adds	r3, #4
 8001c48:	2102      	movs	r1, #2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f844 	bl	8001cd8 <RCCEx_PLLSAI1_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c54:	7cfb      	ldrb	r3, [r7, #19]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d014      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001c5a:	7cfb      	ldrb	r3, [r7, #19]
 8001c5c:	74bb      	strb	r3, [r7, #18]
 8001c5e:	e011      	b.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3320      	adds	r3, #32
 8001c6e:	2102      	movs	r1, #2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f921 	bl	8001eb8 <RCCEx_PLLSAI2_Config>
 8001c76:	4603      	mov	r3, r0
 8001c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001c7a:	7cfb      	ldrb	r3, [r7, #19]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001c80:	7cfb      	ldrb	r3, [r7, #19]
 8001c82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00a      	beq.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c9e:	490d      	ldr	r1, [pc, #52]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cc2:	4904      	ldr	r1, [pc, #16]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001cca:	7cbb      	ldrb	r3, [r7, #18]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001ce6:	4b73      	ldr	r3, [pc, #460]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d018      	beq.n	8001d24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001cf2:	4b70      	ldr	r3, [pc, #448]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0203 	and.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d10d      	bne.n	8001d1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
       ||
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d009      	beq.n	8001d1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001d0a:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	091b      	lsrs	r3, r3, #4
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
       ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d044      	beq.n	8001da8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	73fb      	strb	r3, [r7, #15]
 8001d22:	e041      	b.n	8001da8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d00c      	beq.n	8001d46 <RCCEx_PLLSAI1_Config+0x6e>
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d013      	beq.n	8001d58 <RCCEx_PLLSAI1_Config+0x80>
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d120      	bne.n	8001d76 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d34:	4b5f      	ldr	r3, [pc, #380]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d11d      	bne.n	8001d7c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d44:	e01a      	b.n	8001d7c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001d46:	4b5b      	ldr	r3, [pc, #364]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d116      	bne.n	8001d80 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d56:	e013      	b.n	8001d80 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001d58:	4b56      	ldr	r3, [pc, #344]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10f      	bne.n	8001d84 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001d64:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001d74:	e006      	b.n	8001d84 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
      break;
 8001d7a:	e004      	b.n	8001d86 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001d7c:	bf00      	nop
 8001d7e:	e002      	b.n	8001d86 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001d80:	bf00      	nop
 8001d82:	e000      	b.n	8001d86 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001d84:	bf00      	nop
    }

    if(status == HAL_OK)
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001d8c:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6819      	ldr	r1, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	430b      	orrs	r3, r1
 8001da2:	4944      	ldr	r1, [pc, #272]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d17d      	bne.n	8001eaa <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a40      	ldr	r2, [pc, #256]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001db4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dba:	f7fe fa69 	bl	8000290 <HAL_GetTick>
 8001dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001dc0:	e009      	b.n	8001dd6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001dc2:	f7fe fa65 	bl	8000290 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d902      	bls.n	8001dd6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	73fb      	strb	r3, [r7, #15]
        break;
 8001dd4:	e005      	b.n	8001de2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001dd6:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1ef      	bne.n	8001dc2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d160      	bne.n	8001eaa <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d111      	bne.n	8001e12 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6892      	ldr	r2, [r2, #8]
 8001dfe:	0211      	lsls	r1, r2, #8
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	68d2      	ldr	r2, [r2, #12]
 8001e04:	0912      	lsrs	r2, r2, #4
 8001e06:	0452      	lsls	r2, r2, #17
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	492a      	ldr	r1, [pc, #168]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	610b      	str	r3, [r1, #16]
 8001e10:	e027      	b.n	8001e62 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d112      	bne.n	8001e3e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e18:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001e20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6892      	ldr	r2, [r2, #8]
 8001e28:	0211      	lsls	r1, r2, #8
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6912      	ldr	r2, [r2, #16]
 8001e2e:	0852      	lsrs	r2, r2, #1
 8001e30:	3a01      	subs	r2, #1
 8001e32:	0552      	lsls	r2, r2, #21
 8001e34:	430a      	orrs	r2, r1
 8001e36:	491f      	ldr	r1, [pc, #124]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	610b      	str	r3, [r1, #16]
 8001e3c:	e011      	b.n	8001e62 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001e46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6892      	ldr	r2, [r2, #8]
 8001e4e:	0211      	lsls	r1, r2, #8
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6952      	ldr	r2, [r2, #20]
 8001e54:	0852      	lsrs	r2, r2, #1
 8001e56:	3a01      	subs	r2, #1
 8001e58:	0652      	lsls	r2, r2, #25
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	4915      	ldr	r1, [pc, #84]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a13      	ldr	r2, [pc, #76]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6e:	f7fe fa0f 	bl	8000290 <HAL_GetTick>
 8001e72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001e74:	e009      	b.n	8001e8a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001e76:	f7fe fa0b 	bl	8000290 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d902      	bls.n	8001e8a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	73fb      	strb	r3, [r7, #15]
          break;
 8001e88:	e005      	b.n	8001e96 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0ef      	beq.n	8001e76 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d106      	bne.n	8001eaa <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4903      	ldr	r1, [pc, #12]	; (8001eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001ec6:	4b68      	ldr	r3, [pc, #416]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d018      	beq.n	8001f04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001ed2:	4b65      	ldr	r3, [pc, #404]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0203 	and.w	r2, r3, #3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d10d      	bne.n	8001efe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
       ||
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001eea:	4b5f      	ldr	r3, [pc, #380]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
       ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d044      	beq.n	8001f88 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e041      	b.n	8001f88 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d00c      	beq.n	8001f26 <RCCEx_PLLSAI2_Config+0x6e>
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d013      	beq.n	8001f38 <RCCEx_PLLSAI2_Config+0x80>
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d120      	bne.n	8001f56 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f14:	4b54      	ldr	r3, [pc, #336]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d11d      	bne.n	8001f5c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f24:	e01a      	b.n	8001f5c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f26:	4b50      	ldr	r3, [pc, #320]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f36:	e013      	b.n	8001f60 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f38:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10f      	bne.n	8001f64 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f44:	4b48      	ldr	r3, [pc, #288]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001f54:	e006      	b.n	8001f64 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5a:	e004      	b.n	8001f66 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001f5c:	bf00      	nop
 8001f5e:	e002      	b.n	8001f66 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001f60:	bf00      	nop
 8001f62:	e000      	b.n	8001f66 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8001f64:	bf00      	nop
    }

    if(status == HAL_OK)
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10d      	bne.n	8001f88 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6819      	ldr	r1, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	430b      	orrs	r3, r1
 8001f82:	4939      	ldr	r1, [pc, #228]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d167      	bne.n	800205e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001f8e:	4b36      	ldr	r3, [pc, #216]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a35      	ldr	r2, [pc, #212]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9a:	f7fe f979 	bl	8000290 <HAL_GetTick>
 8001f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001fa0:	e009      	b.n	8001fb6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001fa2:	f7fe f975 	bl	8000290 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d902      	bls.n	8001fb6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	73fb      	strb	r3, [r7, #15]
        break;
 8001fb4:	e005      	b.n	8001fc2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ef      	bne.n	8001fa2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d14a      	bne.n	800205e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d111      	bne.n	8001ff2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6892      	ldr	r2, [r2, #8]
 8001fde:	0211      	lsls	r1, r2, #8
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68d2      	ldr	r2, [r2, #12]
 8001fe4:	0912      	lsrs	r2, r2, #4
 8001fe6:	0452      	lsls	r2, r2, #17
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	491f      	ldr	r1, [pc, #124]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	614b      	str	r3, [r1, #20]
 8001ff0:	e011      	b.n	8002016 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001ffa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6892      	ldr	r2, [r2, #8]
 8002002:	0211      	lsls	r1, r2, #8
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6912      	ldr	r2, [r2, #16]
 8002008:	0852      	lsrs	r2, r2, #1
 800200a:	3a01      	subs	r2, #1
 800200c:	0652      	lsls	r2, r2, #25
 800200e:	430a      	orrs	r2, r1
 8002010:	4915      	ldr	r1, [pc, #84]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002012:	4313      	orrs	r3, r2
 8002014:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002022:	f7fe f935 	bl	8000290 <HAL_GetTick>
 8002026:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002028:	e009      	b.n	800203e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800202a:	f7fe f931 	bl	8000290 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d902      	bls.n	800203e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	73fb      	strb	r3, [r7, #15]
          break;
 800203c:	e005      	b.n	800204a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ef      	beq.n	800202a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d106      	bne.n	800205e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	4903      	ldr	r1, [pc, #12]	; (8002068 <RCCEx_PLLSAI2_Config+0x1b0>)
 800205a:	4313      	orrs	r3, r2
 800205c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000

0800206c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <MX_GPIO_Init+0x8c>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	4a1c      	ldr	r2, [pc, #112]	; (80020f8 <MX_GPIO_Init+0x8c>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <MX_GPIO_Init+0x8c>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <MX_GPIO_Init+0x8c>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <MX_GPIO_Init+0x8c>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <MX_GPIO_Init+0x8c>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_GPIO_Init+0x8c>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <MX_GPIO_Init+0x8c>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <MX_GPIO_Init+0x8c>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2104      	movs	r1, #4
 80020ce:	480b      	ldr	r0, [pc, #44]	; (80020fc <MX_GPIO_Init+0x90>)
 80020d0:	f7fe fb9a 	bl	8000808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020d4:	2304      	movs	r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d8:	2301      	movs	r3, #1
 80020da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	4619      	mov	r1, r3
 80020ea:	4804      	ldr	r0, [pc, #16]	; (80020fc <MX_GPIO_Init+0x90>)
 80020ec:	f7fe f9e4 	bl	80004b8 <HAL_GPIO_Init>

}
 80020f0:	bf00      	nop
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	48000400 	.word	0x48000400

08002100 <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <MX_LCD_Init+0x68>)
 8002106:	4a19      	ldr	r2, [pc, #100]	; (800216c <MX_LCD_Init+0x6c>)
 8002108:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <MX_LCD_Init+0x68>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <MX_LCD_Init+0x68>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_2;
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_LCD_Init+0x68>)
 8002118:	2204      	movs	r2, #4
 800211a:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <MX_LCD_Init+0x68>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_LCD_Init+0x68>)
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_LCD_Init+0x68>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_LCD_Init+0x68>)
 8002130:	2200      	movs	r2, #0
 8002132:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_LCD_Init+0x68>)
 8002136:	2200      	movs	r2, #0
 8002138:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_LCD_Init+0x68>)
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_LCD_Init+0x68>)
 8002142:	2200      	movs	r2, #0
 8002144:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <MX_LCD_Init+0x68>)
 8002148:	2200      	movs	r2, #0
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_LCD_Init+0x68>)
 800214e:	2200      	movs	r2, #0
 8002150:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_LCD_Init+0x68>)
 8002154:	f7fe fb8a 	bl	800086c <HAL_LCD_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_LCD_Init+0x62>
  {
    Error_Handler();
 800215e:	f000 f8ea 	bl	8002336 <Error_Handler>
  }

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	2000002c 	.word	0x2000002c
 800216c:	40002400 	.word	0x40002400

08002170 <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a26      	ldr	r2, [pc, #152]	; (8002228 <HAL_LCD_MspInit+0xb8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d145      	bne.n	800221e <HAL_LCD_MspInit+0xae>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <HAL_LCD_MspInit+0xbc>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	4a25      	ldr	r2, [pc, #148]	; (800222c <HAL_LCD_MspInit+0xbc>)
 8002198:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219c:	6593      	str	r3, [r2, #88]	; 0x58
 800219e:	4b23      	ldr	r3, [pc, #140]	; (800222c <HAL_LCD_MspInit+0xbc>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	4b20      	ldr	r3, [pc, #128]	; (800222c <HAL_LCD_MspInit+0xbc>)
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ae:	4a1f      	ldr	r2, [pc, #124]	; (800222c <HAL_LCD_MspInit+0xbc>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_LCD_MspInit+0xbc>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_LCD_MspInit+0xbc>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_LCD_MspInit+0xbc>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_LCD_MspInit+0xbc>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
    /**LCD GPIO Configuration
    PC3     ------> LCD_VLCD
    PA8     ------> LCD_COM0
    PA9     ------> LCD_COM1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021da:	2308      	movs	r3, #8
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80021ea:	230b      	movs	r3, #11
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	480e      	ldr	r0, [pc, #56]	; (8002230 <HAL_LCD_MspInit+0xc0>)
 80021f6:	f7fe f95f 	bl	80004b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800220c:	230b      	movs	r3, #11
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221a:	f7fe f94d 	bl	80004b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	; 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40002400 	.word	0x40002400
 800222c:	40021000 	.word	0x40021000
 8002230:	48000800 	.word	0x48000800

08002234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002238:	f7fd ffc6 	bl	80001c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LCD_GLASS_Init();
 800223c:	f000 f882 	bl	8002344 <BSP_LCD_GLASS_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002240:	f000 f80e 	bl	8002260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002244:	f7ff ff12 	bl	800206c <MX_GPIO_Init>
  MX_LCD_Init();
 8002248:	f7ff ff5a 	bl	8002100 <MX_LCD_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800224c:	2104      	movs	r1, #4
 800224e:	4803      	ldr	r0, [pc, #12]	; (800225c <main+0x28>)
 8002250:	f7fe faf2 	bl	8000838 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002254:	2064      	movs	r0, #100	; 0x64
 8002256:	f7fe f827 	bl	80002a8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800225a:	e7f7      	b.n	800224c <main+0x18>
 800225c:	48000400 	.word	0x48000400

08002260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b0b8      	sub	sp, #224	; 0xe0
 8002264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002266:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800226a:	2244      	movs	r2, #68	; 0x44
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fa48 	bl	8002704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002274:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002284:	463b      	mov	r3, r7
 8002286:	2288      	movs	r2, #136	; 0x88
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fa3a 	bl	8002704 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8002290:	2318      	movs	r3, #24
 8002292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002296:	2301      	movs	r3, #1
 8002298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800229c:	2301      	movs	r3, #1
 800229e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022a8:	2360      	movs	r3, #96	; 0x60
 80022aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fcab 	bl	8000c14 <HAL_RCC_OscConfig>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80022c4:	f000 f837 	bl	8002336 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c8:	230f      	movs	r3, #15
 80022ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022e6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff f841 	bl	8001374 <HAL_RCC_ClockConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80022f8:	f000 f81d 	bl	8002336 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002300:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002306:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800230a:	463b      	mov	r3, r7
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff f9fd 	bl	800170c <HAL_RCCEx_PeriphCLKConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002318:	f000 f80d 	bl	8002336 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800231c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002320:	f7fe fc22 	bl	8000b68 <HAL_PWREx_ControlVoltageScaling>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800232a:	f000 f804 	bl	8002336 <Error_Handler>
  }
}
 800232e:	bf00      	nop
 8002330:	37e0      	adds	r7, #224	; 0xe0
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 800234a:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <BSP_LCD_GLASS_Init+0x70>)
 800234c:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 8002356:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800235a:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 800235e:	220c      	movs	r2, #12
 8002360:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 8002364:	2240      	movs	r2, #64	; 0x40
 8002366:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 8002370:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002374:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 8002378:	2200      	movs	r2, #0
 800237a:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 8002384:	2200      	movs	r2, #0
 8002386:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 800238a:	2200      	movs	r2, #0
 800238c:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 8002390:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002394:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 800239e:	f000 f815 	bl	80023cc <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 80023a2:	4803      	ldr	r0, [pc, #12]	; (80023b0 <BSP_LCD_GLASS_Init+0x6c>)
 80023a4:	f7fe fa62 	bl	800086c <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 80023a8:	f000 f806 	bl	80023b8 <BSP_LCD_GLASS_Clear>
}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000078 	.word	0x20000078
 80023b4:	40002400 	.word	0x40002400

080023b8 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle); 
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <BSP_LCD_GLASS_Clear+0x10>)
 80023be:	f7fe fb15 	bl	80009ec <HAL_LCD_Clear>
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000078 	.word	0x20000078

080023cc <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b0c0      	sub	sp, #256	; 0x100
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80023d4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 80023e4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80023e8:	2244      	movs	r2, #68	; 0x44
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 f989 	bl	8002704 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 80023f2:	f107 0320 	add.w	r3, r7, #32
 80023f6:	2288      	movs	r2, #136	; 0x88
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f982 	bl	8002704 <memset>
  
  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b51      	ldr	r3, [pc, #324]	; (8002548 <LCD_MspInit+0x17c>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a50      	ldr	r2, [pc, #320]	; (8002548 <LCD_MspInit+0x17c>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
 800240c:	4b4e      	ldr	r3, [pc, #312]	; (8002548 <LCD_MspInit+0x17c>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	69fb      	ldr	r3, [r7, #28]
  
  /*##-2- Configure LSE as RTC clock soucre ###################################*/ 
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8002418:	2304      	movs	r3, #4
 800241a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8002424:	2301      	movs	r3, #1
 8002426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if(HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 800242a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fbf0 	bl	8000c14 <HAL_RCC_OscConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d000      	beq.n	800243c <LCD_MspInit+0x70>
  { 
    while(1);
 800243a:	e7fe      	b.n	800243a <LCD_MspInit+0x6e>
  }
  
  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800243c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002440:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 800244a:	f107 0320 	add.w	r3, r7, #32
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff f95c 	bl	800170c <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	4b3c      	ldr	r3, [pc, #240]	; (8002548 <LCD_MspInit+0x17c>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	4a3b      	ldr	r2, [pc, #236]	; (8002548 <LCD_MspInit+0x17c>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002460:	4b39      	ldr	r3, [pc, #228]	; (8002548 <LCD_MspInit+0x17c>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	4b36      	ldr	r3, [pc, #216]	; (8002548 <LCD_MspInit+0x17c>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	4a35      	ldr	r2, [pc, #212]	; (8002548 <LCD_MspInit+0x17c>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002478:	4b33      	ldr	r3, [pc, #204]	; (8002548 <LCD_MspInit+0x17c>)
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <LCD_MspInit+0x17c>)
 8002486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002488:	4a2f      	ldr	r2, [pc, #188]	; (8002548 <LCD_MspInit+0x17c>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002490:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <LCD_MspInit+0x17c>)
 8002492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800249c:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <LCD_MspInit+0x17c>)
 800249e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a0:	4a29      	ldr	r2, [pc, #164]	; (8002548 <LCD_MspInit+0x17c>)
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <LCD_MspInit+0x17c>)
 80024aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]

  
  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 80024b4:	f248 73c0 	movw	r3, #34752	; 0x87c0
 80024b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 80024ce:	230b      	movs	r3, #11
 80024d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 80024d4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024d8:	4619      	mov	r1, r3
 80024da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024de:	f7fd ffeb 	bl	80004b8 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 80024e2:	f24f 2333 	movw	r3, #62003	; 0xf233
 80024e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 80024ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024ee:	4619      	mov	r1, r3
 80024f0:	4816      	ldr	r0, [pc, #88]	; (800254c <LCD_MspInit+0x180>)
 80024f2:	f7fd ffe1 	bl	80004b8 <HAL_GPIO_Init>
  
  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 80024f6:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80024fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 80024fe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002502:	4619      	mov	r1, r3
 8002504:	4812      	ldr	r0, [pc, #72]	; (8002550 <LCD_MspInit+0x184>)
 8002506:	f7fd ffd7 	bl	80004b8 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 800250a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800250e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8002512:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002516:	4619      	mov	r1, r3
 8002518:	480e      	ldr	r0, [pc, #56]	; (8002554 <LCD_MspInit+0x188>)
 800251a:	f7fd ffcd 	bl	80004b8 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 800251e:	2002      	movs	r0, #2
 8002520:	f7fd fec2 	bl	80002a8 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <LCD_MspInit+0x17c>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <LCD_MspInit+0x17c>)
 800252a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800252e:	6593      	str	r3, [r2, #88]	; 0x58
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <LCD_MspInit+0x17c>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
}
 800253c:	bf00      	nop
 800253e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	48000400 	.word	0x48000400
 8002550:	48000800 	.word	0x48000800
 8002554:	48000c00 	.word	0x48000c00

08002558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	4b0f      	ldr	r3, [pc, #60]	; (800259c <HAL_MspInit+0x44>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	4a0e      	ldr	r2, [pc, #56]	; (800259c <HAL_MspInit+0x44>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6613      	str	r3, [r2, #96]	; 0x60
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_MspInit+0x44>)
 800256c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_MspInit+0x44>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	4a08      	ldr	r2, [pc, #32]	; (800259c <HAL_MspInit+0x44>)
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6593      	str	r3, [r2, #88]	; 0x58
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_MspInit+0x44>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000

080025a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <HardFault_Handler+0x4>

080025b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <MemManage_Handler+0x4>

080025ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025be:	e7fe      	b.n	80025be <BusFault_Handler+0x4>

080025c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <UsageFault_Handler+0x4>

080025c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f4:	f7fd fe3a 	bl	800026c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}

080025fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002600:	4b17      	ldr	r3, [pc, #92]	; (8002660 <SystemInit+0x64>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	4a16      	ldr	r2, [pc, #88]	; (8002660 <SystemInit+0x64>)
 8002608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800260c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <SystemInit+0x68>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a13      	ldr	r2, [pc, #76]	; (8002664 <SystemInit+0x68>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <SystemInit+0x68>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <SystemInit+0x68>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <SystemInit+0x68>)
 8002628:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800262c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002630:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <SystemInit+0x68>)
 8002634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002638:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <SystemInit+0x68>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <SystemInit+0x68>)
 8002640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002644:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <SystemInit+0x68>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <SystemInit+0x64>)
 800264e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002652:	609a      	str	r2, [r3, #8]
#endif
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000ed00 	.word	0xe000ed00
 8002664:	40021000 	.word	0x40021000

08002668 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800266c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800266e:	e003      	b.n	8002678 <LoopCopyDataInit>

08002670 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002672:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002674:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002676:	3104      	adds	r1, #4

08002678 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002678:	480b      	ldr	r0, [pc, #44]	; (80026a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800267c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800267e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002680:	d3f6      	bcc.n	8002670 <CopyDataInit>
	ldr	r2, =_sbss
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002684:	e002      	b.n	800268c <LoopFillZerobss>

08002686 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002686:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002688:	f842 3b04 	str.w	r3, [r2], #4

0800268c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <LoopForever+0x16>)
	cmp	r2, r3
 800268e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002690:	d3f9      	bcc.n	8002686 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002692:	f7ff ffb3 	bl	80025fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002696:	f000 f811 	bl	80026bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800269a:	f7ff fdcb 	bl	8002234 <main>

0800269e <LoopForever>:

LoopForever:
    b LoopForever
 800269e:	e7fe      	b.n	800269e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026a0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80026a4:	08002774 	.word	0x08002774
	ldr	r0, =_sdata
 80026a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80026ac:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80026b0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80026b4:	200000b4 	.word	0x200000b4

080026b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026b8:	e7fe      	b.n	80026b8 <ADC1_2_IRQHandler>
	...

080026bc <__libc_init_array>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	4e0d      	ldr	r6, [pc, #52]	; (80026f4 <__libc_init_array+0x38>)
 80026c0:	4c0d      	ldr	r4, [pc, #52]	; (80026f8 <__libc_init_array+0x3c>)
 80026c2:	1ba4      	subs	r4, r4, r6
 80026c4:	10a4      	asrs	r4, r4, #2
 80026c6:	2500      	movs	r5, #0
 80026c8:	42a5      	cmp	r5, r4
 80026ca:	d109      	bne.n	80026e0 <__libc_init_array+0x24>
 80026cc:	4e0b      	ldr	r6, [pc, #44]	; (80026fc <__libc_init_array+0x40>)
 80026ce:	4c0c      	ldr	r4, [pc, #48]	; (8002700 <__libc_init_array+0x44>)
 80026d0:	f000 f820 	bl	8002714 <_init>
 80026d4:	1ba4      	subs	r4, r4, r6
 80026d6:	10a4      	asrs	r4, r4, #2
 80026d8:	2500      	movs	r5, #0
 80026da:	42a5      	cmp	r5, r4
 80026dc:	d105      	bne.n	80026ea <__libc_init_array+0x2e>
 80026de:	bd70      	pop	{r4, r5, r6, pc}
 80026e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026e4:	4798      	blx	r3
 80026e6:	3501      	adds	r5, #1
 80026e8:	e7ee      	b.n	80026c8 <__libc_init_array+0xc>
 80026ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026ee:	4798      	blx	r3
 80026f0:	3501      	adds	r5, #1
 80026f2:	e7f2      	b.n	80026da <__libc_init_array+0x1e>
 80026f4:	0800276c 	.word	0x0800276c
 80026f8:	0800276c 	.word	0x0800276c
 80026fc:	0800276c 	.word	0x0800276c
 8002700:	08002770 	.word	0x08002770

08002704 <memset>:
 8002704:	4402      	add	r2, r0
 8002706:	4603      	mov	r3, r0
 8002708:	4293      	cmp	r3, r2
 800270a:	d100      	bne.n	800270e <memset+0xa>
 800270c:	4770      	bx	lr
 800270e:	f803 1b01 	strb.w	r1, [r3], #1
 8002712:	e7f9      	b.n	8002708 <memset+0x4>

08002714 <_init>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr

08002720 <_fini>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	bf00      	nop
 8002724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002726:	bc08      	pop	{r3}
 8002728:	469e      	mov	lr, r3
 800272a:	4770      	bx	lr
